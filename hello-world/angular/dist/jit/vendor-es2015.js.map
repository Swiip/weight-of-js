{"version":3,"sources":["webpack:///./node_modules/rxjs/_esm2015/internal/util/isFunction.js","webpack:///./node_modules/rxjs/_esm2015/internal/config.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/hostReportError.js","webpack:///./node_modules/rxjs/_esm2015/internal/Observer.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/isArray.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/isObject.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/UnsubscriptionError.js","webpack:///./node_modules/rxjs/_esm2015/internal/Subscription.js","webpack:///./node_modules/rxjs/_esm2015/internal/symbol/rxSubscriber.js","webpack:///./node_modules/rxjs/_esm2015/internal/Subscriber.js","webpack:///./node_modules/rxjs/_esm2015/internal/symbol/observable.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/noop.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/pipe.js","webpack:///./node_modules/rxjs/_esm2015/internal/Observable.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/toSubscriber.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/canReportError.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/ObjectUnsubscribedError.js","webpack:///./node_modules/rxjs/_esm2015/internal/SubjectSubscription.js","webpack:///./node_modules/rxjs/_esm2015/internal/Subject.js","webpack:///./node_modules/rxjs/_esm2015/internal/InnerSubscriber.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/subscribeToArray.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/subscribeToPromise.js","webpack:///./node_modules/rxjs/_esm2015/internal/symbol/iterator.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/subscribeToIterable.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/subscribeToObservable.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/isArrayLike.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/isPromise.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/subscribeTo.js","webpack:///./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/map.js","webpack:///./node_modules/rxjs/_esm2015/internal/observable/fromArray.js","webpack:///./node_modules/rxjs/_esm2015/internal/observable/from.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/isInteropObservable.js","webpack:///./node_modules/rxjs/_esm2015/internal/observable/fromObservable.js","webpack:///./node_modules/rxjs/_esm2015/internal/observable/fromPromise.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/isIterable.js","webpack:///./node_modules/rxjs/_esm2015/internal/observable/fromIterable.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/mergeMap.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/identity.js","webpack:///./node_modules/rxjs/_esm2015/internal/observable/merge.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/isScheduler.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/mergeAll.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/refCount.js","webpack:///./node_modules/rxjs/_esm2015/internal/observable/ConnectableObservable.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/multicast.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/share.js","webpack:///./node_modules/@angular/core/fesm2015/core.js","webpack:///./node_modules/@angular/common/fesm2015/common.js","webpack:///./node_modules/@angular/platform-browser/fesm2015/platform-browser.js","webpack:///./node_modules/tslib/tslib.es6.js","webpack:///./node_modules/@angular/compiler/fesm2015/compiler.js","webpack:///./node_modules/@angular/platform-browser-dynamic/fesm2015/platform-browser-dynamic.js"],"names":["isFunction","x","_enable_super_gross_mode_that_will_cause_bad_things","config","Promise","undefined","useDeprecatedSynchronousErrorHandling","value","error","Error","console","warn","stack","log","hostReportError","err","setTimeout","empty","closed","[object Object]","isArray","Array","length","isObject","UnsubscriptionErrorImpl","errors","call","this","message","map","i","toString","join","name","prototype","Object","create","UnsubscriptionError","Subscription_Subscription","unsubscribe","_parent","_parents","_subscriptions","_unsubscribe","hasErrors","index","len","remove","e","flattenUnsubscriptionErrors","sub","concat","push","teardown","subscription","tmp","EMPTY","_addParent","subscriptions","subscriptionIndex","indexOf","splice","parent","reduce","errs","rxSubscriber","Symbol","Math","random","Subscriber_Subscriber","destinationOrNext","complete","super","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","arguments","destination","add","Subscriber_SafeSubscriber","next","subscriber","_next","_error","_complete","_parentSubscriber","observerOrNext","context","bind","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","fn","observable_observable","observable","noop","pipeFromArray","fns","input","prev","Observable_Observable","subscribe","_isScalar","_subscribe","operator","source","sink","nextOrObserver","toSubscriber","_trySubscribe","observer","canReportError","promiseCtor","getPromiseCtor","resolve","reject","operations","ObjectUnsubscribedErrorImpl","ObjectUnsubscribedError","SubjectSubscription_SubjectSubscription","subject","observers","subscriberIndex","Subject_SubjectSubscriber","Subject_Subject","hasError","thrownError","Subject_AnonymousSubject","copy","slice","InnerSubscriber_InnerSubscriber","outerValue","outerIndex","notifyNext","notifyError","notifyComplete","subscribeToArray","array","subscribeToPromise","promise","then","iterator_iterator","iterator","subscribeToIterable","iterable","item","done","return","subscribeToObservable","obj","obs","TypeError","isArrayLike","isPromise","subscribeTo","result","OuterSubscriber_OuterSubscriber","innerValue","innerIndex","innerSub","MapOperator","project","thisArg","map_MapSubscriber","count","fromArray","scheduler","schedule","from","isInteropObservable","fromObservable","fromPromise","isIterable","fromIterable","mergeMap","resultSelector","concurrent","Number","POSITIVE_INFINITY","pipe","a","lift","b","ii","MergeMapOperator","mergeMap_MergeMapSubscriber","hasCompleted","buffer","active","_tryNext","_innerSub","ish","innerSubscriber","outerSubscriber","subscribeToResult","shift","identity","merge","observables","last","pop","mergeAll","refCount","RefCountOperator","connectable","_refCount","refCounter","refCount_RefCountSubscriber","connection","connect","sharedConnection","_connection","connectableProto","subjectFactory","_isComplete","getSubject","_subject","ConnectableObservable_ConnectableSubscriber","connectableObservableDescriptor","writable","MulticastOperator","selector","shareSubjectFactory","share","subjectOrSubjectFactory","multicast","__webpack_require__","d","__webpack_exports__","core_ApplicationRef","createPlatformFactory","NgProbeToken","enableProdMode","isDevMode","APP_ID","PACKAGE_ROOT_URL","PLATFORM_INITIALIZER","PLATFORM_ID","APP_INITIALIZER","ApplicationInitStatus","getDebugNode","Testability","setTestabilityGetter","TRANSLATIONS$1","TRANSLATIONS_FORMAT","LOCALE_ID","MissingTranslationStrategy","ApplicationModule","core_EventEmitter","ErrorHandler","Sanitizer","SecurityContext","Attribute","ANALYZE_FOR_ENTRY_COMPONENTS","Component","Directive","Input","Pipe","NgModule","ViewEncapsulation","Version","ɵɵdefineInjectable","Injectable","Injector","ɵɵinject","InjectionToken","Inject","Optional","SkipSelf","Host","NgZone","Renderer","Renderer2","RendererFactory2","RendererStyleFlags2","COMPILER_OPTIONS","Compiler","CompilerFactory","ComponentFactory","ComponentRef","ComponentFactoryResolver","ElementRef","NgModuleFactory","NgModuleRef","QueryList","TemplateRef","ViewContainerRef","ChangeDetectionStrategy","ChangeDetectorRef","IterableDiffers","KeyValueDiffers","WrappedValue","platformCore","isListLikeIterable","Console","APP_ROOT","CodegenComponentFactoryResolver","ReflectionCapabilities","_sanitizeHtml","_sanitizeStyle","_sanitizeUrl","_global","looseIdentical","stringify","isObservable","core_isPromise","ɵɵdefineDirective","ɵɵelementHostStyling","ɵɵelementHostStylingMap","ɵɵelementHostStylingApply","registerModuleFactory","EMPTY_ARRAY$3","EMPTY_MAP","anchorDef","createComponentFactory","createNgModuleFactory","createRendererType2","directiveDef","elementDef","inlineInterpolate","interpolate","moduleDef","moduleProvideDef","ngContentDef","nodeValue","pipeDef","providerDef","pureArrayDef","pureObjectDef","purePipeDef","queryDef","textDef","unwrapValue","viewDef","ANNOTATIONS","PARAMETERS","PROP_METADATA","makeDecorator","props","parentClass","additionalProcessing","typeFn","metaCtor","makeMetadataCtor","DecoratorFactory","args","annotationInstance","cls","hasOwnProperty","defineProperty","ngMetadataName","annotationCls","values","propName","makeParamDecorator","ParamDecoratorFactory","apply","ParamDecorator","annotation","unusedKey","parameters","makePropDecorator","PropDecoratorFactory","decoratorInstance","target","constructor","meta","unshift","token","Self","attributeName","InjectFlags","getClosureSafeProperty","objWithPropertyToExtract","key","fillProperties","opts","providedIn","factory","ɵɵdefineInjector","options","providers","imports","getInjectableDef","type","NG_INJECTABLE_DEF","getInjectorDef","NG_INJECTOR_DEF","ngInjectableDef","ngInjectorDef","overriddenName","res","newLineIndex","substring","__forward_ref__","forwardRef","forwardRefFn","resolveForwardRef","__globalThis","globalThis","__window","window","__self","self","WorkerGlobalScope","__global","global","getGlobal","R3ResolvedDependencyType","_injectImplementation","_currentInjector","setCurrentInjector","injector","former","setInjectImplementation","impl","previous","flags","Default","injectRootLimpMode","get","notFoundValue","injectableDef","injectArgs","types","arg","j","Type","Function","isType","v","DELEGATE_CTOR","INHERITED_CLASS","INHERITED_CLASS_WITH_CTOR","INHERITED_CLASS_WITH_DELEGATE_CTOR","reflect","_reflect","t","paramTypes","paramAnnotations","parentCtor","typeStr","exec","tsickleCtorParams","ctorParameters","ctorParam","convertTsickleDecoratorIntoMetadata","decorators","_zipTypesAndAnnotations","getOwnMetadata","fill","getParentCtor","_ownParameters","typeOrFunc","annotations","ownAnnotations","_ownAnnotations","propMetadata","propDecorators","keys","forEach","prop","parentPropMetadata","ownPropMetadata","_ownPropMetadata","lcProperty","moduleUrl","members","runtime","enumIdentifier","decoratorInvocations","decoratorInvocation","ctor","parentProto","getPrototypeOf","provide","String","useValue","USE_VALUE$1","EMPTY_ARRAY","convertInjectableProviderToFactory","provider","deps","valueProvider","useExisting","existingProvider","useFactory","factoryProvider","useClass","classProvider","reflectionCapabilities","SWITCH_COMPILE_INJECTABLE","injectableType","_desc","__NG_ELEMENT_ID__","SOURCE","_THROW_IF_NOT_FOUND","THROW_IF_NOT_FOUND","INJECTOR","NullInjector","StaticInjector","NULL","IDENT","CIRCULAR","MULTI_PROVIDER_FN","USE_VALUE$2","NG_TOKEN_PATH","NG_TEMP_TOKEN_PATH","NEW_LINE","NO_NEW_LINE","records","_records","Map","set","useNew","recursivelyProcessProviders","staticError","resolvedProvider","providerDeps","computeDeps","resolveProvider","multi","multiProvider","multiProviderMixError","record","tryResolveToken","catchInjectorError","tokens","depRecords","depRecord","childRecord","resolveToken","injectorErrorName","tokenPath","formatError","text","charAt","substr","parts","JSON","replace","ERROR_DEBUG_CONTEXT","ERROR_ORIGINAL_ERROR","ERROR_LOGGER","constructResolvingPath","findFirstClosedCycle","reverse","k","injectionError","constructResolvingMessage","originalError","errMsg","msg","wrappedError","addKey","injectors","noAnnotationError","params","signature","parameter","ReflectiveKey","id","displayName","_globalKeyRegistry","numberOfKeys","_allKeys","has","newKey","size","reflector","caps","hasLifecycleHook","getter","setter","method","importUri","resourceUri","resolveIdentifier","identifier","resolveEnum","ReflectiveDependency","optional","visibility","_EMPTY_LIST","ResolvedReflectiveProvider_","resolvedFactories","resolvedFactory","ResolvedReflectiveFactory","dependencies","resolveReflectiveFactory","factoryFn","resolvedDeps","_dependenciesFor","aliasInstance","fromKey","_extractToken","constructDependencies","resolveReflectiveProvider","resolveReflectiveProviders","resolvedProviderMap","normalizedProvidersMap","existing","mergeResolvedReflectiveProviders","_normalizeProviders","invalidProviderError","some","p","metadata","_createDependency","paramMetadata","UNDEFINED","ReflectiveInjector","ResolvedReflectiveProviders","fromResolvedProviders","ReflectiveInjector_","_providers","_constructionCounter","keyIds","objs","_getByKey","createChildFromResolved","inj","instantiateResolved","_instantiateProvider","outOfBoundsError","_getMaxNumberOfObjects","_instantiate","dep","_getByReflectiveDependency","originalException","first","INJECTOR_KEY","_getByKeySelf","_getByKeyDefault","keyId","_new","noProviderError","_getObjByKeyId","_throwOrNull","inj_","getProviderAtIndex","_mapProviders","Query","data","assign","isViewQuery","descendants","OnPush","ChangeDetectorStatus","CheckOnce","Checked","CheckAlways","Detached","Errored","Destroyed","Set","Emulated","Native","None","ShadowDom","noSideEffects","EMPTY_OBJ","EMPTY_ARRAY$1","NG_COMPONENT_DEF","ngComponentDef","NG_DIRECTIVE_DEF","ngDirectiveDef","NG_PIPE_DEF","ngPipeDef","NG_MODULE_DEF","ngModuleDef","NG_ELEMENT_ID","ngBaseDef","_renderCompCount","ɵɵdefineComponent","componentDefinition","typePrototype","declaredInputs","def","providersResolver","consts","vars","template","ngContentSelectors","hostBindings","contentQueries","inputs","outputs","exportAs","onChanges","onInit","ngOnInit","doCheck","ngDoCheck","afterContentInit","ngAfterContentInit","afterContentChecked","ngAfterContentChecked","afterViewInit","ngAfterViewInit","afterViewChecked","ngAfterViewChecked","onDestroy","ngOnDestroy","onPush","changeDetection","directiveDefs","pipeDefs","selectors","viewQuery","features","encapsulation","styles","_","setInput","schemas","directiveTypes","feature","pipeTypes","invertObject","extractDirectiveDef","extractPipeDef","ɵɵsetComponentScope","directives","pipes","getComponentDef","getDirectiveDef","getPipeDef","ɵɵdefineNgModule","bootstrap","declarations","exports","transitiveCompileScopes","ɵɵsetNgModuleScope","scope","getNgModuleDef","secondary","newLookup","minifiedKey","publicName","declaredName","ɵɵdefineBase","baseDefinition","ɵɵdefinePipe","pure","throwNotFound","renderStringify","stringifyForError","defaultScheduler","requestAnimationFrame","ɵɵresolveWindow","element","ownerDocument","defaultView","ɵɵresolveDocument","ɵɵresolveBody","body","INTERPOLATION_DELIMITER","assertGreaterThan","actual","expected","throwError","HOST","TVIEW","FLAGS","PARENT","NEXT","QUERIES","T_HOST","BINDING_INDEX","CLEANUP","CONTEXT","INJECTOR$1","RENDERER_FACTORY","RENDERER","SANITIZER","CHILD_HEAD","CHILD_TAIL","CONTENT_QUERIES","DECLARATION_VIEW","PREORDER_HOOK_FLAGS","HEADER_OFFSET","TYPE","ACTIVE_INDEX","NATIVE","VIEWS","MONKEY_PATCH_KEY_NAME","unwrapRNode","isLView","isLContainer","getNativeByIndex","lView","getNativeByTNode","tNode","hostView","getTNode","view","loadInternal","getComponentViewByIndex","nodeIndex","slotValue","isComponent","isComponentDef","isRootView","readPatchedData","readPatchedLView","viewAttachedToContainer","resetPreOrderHookFlags","TNODE","PARENT_INJECTOR","INJECTOR_BLOOM_PARENT_SIZE","NO_PARENT_INJECTOR","NodeInjectorFactory","isViewProvider","injectImplementation","resolving","canSeeViewProviders","injectImpl","registerPreOrderHooks","directiveIndex","tView","initialPreOrderHooksLength","initialPreOrderCheckHooksLength","preOrderHooks","preOrderCheckHooks","registerPostOrderHooks","firstTemplatePass","directiveStart","end","directiveEnd","contentHooks","contentCheckHooks","viewHooks","viewCheckHooks","destroyHooks","executePreOrderHooks","currentView","checkNoChangesMode","currentNodeIndex","executeHooks","firstPassHooks","checkHooks","initPhaseState","hooksToCall","arr","initPhase","startIndex","nodeIndexLimit","lastNodeIndexFound","hook","isInitHook","callHook","callHooks","directive","elementDepthCount","stylingContext","setCachedStylingContext","bindingsEnabled","currentDirectiveDef","setCurrentDirectiveDef","ɵɵenableBindings","ɵɵdisableBindings","getLView","MIN_DIRECTIVE_ID","previousOrParentTNode","isParent","activeDirectiveId","activeDirectiveSuperClassDepthPosition","activeDirectiveSuperClassHeight","setActiveHostElement","elementIndex","_selectedIndex","setSelectedIndex","incrementActiveDirectiveId","adjustActiveDirectiveSuperClassDepthPosition","delta","max","ɵɵrestoreView","viewToRestore","contextLView","getPreviousOrParentTNode","setPreviousOrParentTNode","setTNodeAndViewData","getIsParent","setIsParent","isCreationMode","getContextLView","getCheckNoChangesMode","setCheckNoChangesMode","mode","bindingRootIndex","getBindingRoot","setBindingRoot","currentQueryIndex","getCurrentQueryIndex","setCurrentQueryIndex","enterView","newView","hostTNode","oldView","bindingStartIndex","nextContextImpl","level","nestingLevel","walkUpViews","leaveView","getSelectedIndex","_currentNamespace","ɵɵnamespaceSVG","ɵɵnamespaceMathML","ɵɵnamespaceHTML","RendererStyleFlags3","Important","DashCase","isProceduralRenderer","renderer","domRendererFactory3","createRenderer","hostElement","rendererType","document","attachPatchData","CorePlayerHandler","_players","player","state","play","DEFAULT_TEMPLATE_DIRECTIVE_INDEX","ANIMATION_PROP_PREFIX","createEmptyStylingContext","wrappedElement","sanitizer","initialStyles","initialClasses","allocateOrUpdateDirectiveIntoContext","singlePropValuesIndex","styleSanitizer","directiveRegistry","limit","propValuesStartPosition","getStylingContextFromLView","viewData","storageIndex","wrapper","stylingTemplate","templateStyleContext","allocStylingContext","isAnimationProp","hasClassInput","hasStyleInput","addPlayerInternal","playerContext","rootContext","playerContextIndex","ref","addEventListener","nonFactoryPlayerIndex","destroy","playerHandler","queuePlayer","getPlayerContext","allocPlayerContext","setUpAttributes","native","attrs","isProc","namespaceURI","attrName","attrVal","setAttribute","setAttributeNS","setProperty","attrsStylingIndexOf","val","isNameOnlyAttributeMarker","marker","hasParentInjector","parentLocation","getParentInjectorIndex","getParentInjectorViewOffset","getParentInjectorView","location","startView","viewOffset","parentView","getLViewParent","findComponentView","rootTNode","getRootContext","viewOrComponent","rootView","componentOrLView","getRootView","includeViewProviders","setIncludeViewProviders","oldValue","BLOOM_MASK","BLOOM_SIZE","nextNgElementId","getOrCreateNodeInjectorForNode","existingInjectorIndex","getInjectorIndex","injectorIndex","insertBloom","blueprint","parentLoc","getParentInjectorLocation","parentIndex","parentLView","parentData","footer","diPublicInInjector","charCodeAt","bloomBit","mask","b7","b6","b5","tData","bloomAdd","getOrCreateInjectable","bloomHash","tokenId","bloomHashBitOrFactory","savePreviousOrParentTNode","saveLView","NodeInjector","previousTView","hostTElementNode","shouldSearchParent","bloomHasToken","instance","searchTokensOnInjector","NOT_FOUND","moduleInjector","previousInjectImplementation","currentTView","injectableIdx","locateDirectiveOrProvider","getNodeInjectable","canAccessViewProviders","isHostSpecialCase","nodeProviderIndexes","providerIndexes","tInjectables","injectablesStart","directivesStart","cptViewProvidersCount","endIndex","providerTokenOrDef","dirDef","lData","previousIncludeViewProviders","injectorView","isFirstHostTNode","_tNode","_lView","ɵɵgetFactoryOf","typeAny","ɵɵgetInheritedFactory","getDebugContext","getOriginalError","defaultErrorLogger","_console","_findOriginalError","_findContext","errorLogger","getErrorLogger","BRAND","allowSanitizationBypass","_devMode","_runModeLocked","InertBodyHelper","defaultDoc","inertDocument","implementation","createHTMLDocument","inertBodyElement","inertHtml","createElement","appendChild","innerHTML","querySelector","DOMParser","_a","isDOMParserAvailable","getInertBodyElement","getInertBodyElement_DOMParser","getInertBodyElement_InertDocument","getInertBodyElement_XHR","html","encodeURI","xhr","XMLHttpRequest","responseType","open","send","response","removeChild","parseFromString","templateEl","documentMode","stripCustomNsAttrs","el","elAttrs","attributes","removeAttribute","childNode","nodeType","Node","ELEMENT_NODE","nextSibling","SAFE_URL_PATTERN","DATA_URL_PATTERN","url","match","sanitizeSrcset","srcset","split","trim","tagSet","tags","core_merge","sets","s","VOID_ELEMENTS","OPTIONAL_END_TAG_BLOCK_ELEMENTS","OPTIONAL_END_TAG_INLINE_ELEMENTS","OPTIONAL_END_TAG_ELEMENTS","BLOCK_ELEMENTS","INLINE_ELEMENTS","VALID_ELEMENTS","URI_ATTRS","SRCSET_ATTRS","HTML_ATTRS","ARIA_ATTRS","VALID_ATTRS","SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS","SanitizingHtmlSerializer","sanitizedSomething","buf","current","traverseContent","startElement","TEXT_NODE","chars","firstChild","endElement","checkClobberedElement","tagName","nodeName","toLowerCase","elAttr","lower","encodeEntities","node","nextNode","compareDocumentPosition","DOCUMENT_POSITION_CONTAINED_BY","outerHTML","SURROGATE_PAIR_REGEXP","NON_ALPHANUMERIC_REGEXP","inertBodyHelper","unsafeHtmlInput","unsafeHtml","mXSSAttempts","parsedHtml","safeHtml","sanitizeChildren","getTemplateContent","isTemplateElement","content","NONE","HTML","STYLE","SCRIPT","URL","RESOURCE_URL","SAFE_STYLE_VALUE","RegExp","URL_RE","urlMatch","outsideSingle","outsideDouble","c","hasBalancedQuotes","ɵɵsanitizeHtml","getSanitizer","sanitize","ɵɵsanitizeStyle","unsafeStyle","ɵɵsanitizeUrl","unsafeUrl","ɵɵsanitizeResourceUrl","unsafeResourceUrl","ɵɵsanitizeScript","unsafeScript","ɵɵsanitizeUrlOrResourceUrl","tag","getUrlSanitizer","ɵɵdefaultStyleSanitizer","normalizeDebugBindingName","CAMEL_CASE_REGEXP","m","normalizeDebugBindingValue","ELEMENT_MARKER","COMMENT_MARKER","throwMultipleComponentError","NO_CHANGE","enqueueHostInstruction","priority","instructionFn","instructionFnArgs","findNextInsertionIndex","BoundPlayerFactory","initializeStaticContext","stylingStartIndex","patchContextWithStaticAttrs","attrsStylingStartIndex","attr","patchInitialStylingValue","initialStyling","directiveOwnerIndex","allowValueChange","addOrUpdateStaticStyle","renderInitialClasses","setClass","renderInitialStyles","setStyle","updateContextWithBindings","classBindingNames","styleBindingNames","staticModeOnly","singlePropStartPosition","singlePropsStartIndex","findOrPatchDirectiveIntoRegistry","entries","newEntries","hyphenate","hyphenateEntries","singlePropOffsetValues","totalCurrentClassBindings","totalCurrentStyleBindings","cachedClassMapValues","cachedStyleMapValues","stylesOffset","singleClassesStartIndex","multiStylesStartIndex","multiClassesStartIndex","currentSinglePropsLength","insertionOffset","filteredStyleBindingNames","singlePropIndex","getMatchingBindingIndex","filteredClassBindingNames","totalStyles","totalClasses","start","totalNewEntries","isMultiBased","isClassBased","flag","getPointers","staticIndex","getInitialIndex","singleOrMultiIndex","getMultiOrSingleIndex","setFlag","pointers","entryIsClassBased","adjustedIndex","multiIndex","singleIndex","initialValuesToLookup","indexForInitial","getInitialStylingValuesIndexOf","initialFlag","prepareInitialFlag","setProp","setValue","setPlayerBuilderIndex","newStylesSpaceAllocationSize","newClassesSpaceAllocationSize","directiveMultiStylesStartIndex","cachedStyleMapIndex","registerMultiMapEntry","directiveMultiClassesStartIndex","cachedClassMapIndex","bindingName","getProp","updateStylingMap","classesInput","stylesInput","ignoreAllClassUpdates","isMultiValueCacheHit","ignoreAllStyleUpdates","readCachedMapValue","classesPlayerBuilder","ClassAndStylePlayerBuilder","stylesPlayerBuilder","classesValue","stylesValue","classNames","applyAllClasses","playerBuildersAreDirty","classesPlayerBuilderIndex","hasPlayerBuilderChanged","setPlayerBuilder","stylesPlayerBuilderIndex","getMultiStylesStartIndex","getMultiClassesStartIndex","multiClassesEndIndex","patchStylingMapIntoContext","classes","setContextPlayersDirty","playerBuilderIndex","ctxStart","ctxEnd","cacheValue","dirty","cacheIndex","cachedValues","ownershipValuesStartIndex","existingCachedValue","existingCachedValueCount","valuesEntryShapeChange","totalUniqueValues","totalNewAllocatedSlots","applyAllProps","ctxIndex","totalRemainingProperties","currentProp","mapProp","normalizedProp","currentValue","getValue","currentDirectiveIndex","getDirectiveIndexFromEntry","currentFlag","hasValueChanged","hasInitialValueChanged","setDirty","getStyleSanitizer","propertiesLoop","isInsideOwnershipArea","distantCtxDirectiveIndex","distantCtxPlayerBuilderIndex","getPlayerBuilderIndex","distantCtxValue","distantCtxFlag","swapMultiContextEntries","insertNewMultiProperty","ctxValue","ctxFlag","startPosition","endPosition","totalValues","dirtyFutureValues","nextStartPosition","totalStylingEntries","classCache","classesStartPosition","diffInStartPosition","updateCachedMapValue","setContextDirty","updateClassProp","offset","forceOverride","updateSingleStylingValue","updateStyleProp","singlePropOffsetRegistryIndex","offsets","indexForOffset","getSinglePropIndexValue","currValue","currFlag","currDirective","playerBuilder","currPlayerIndex","newIndex","sanitizeYes","setSanitizeFlag","indexForMulti","valueForMulti","multiDirty","singleDirty","valueExists","renderStyling","rootOrView","isFirstRender","classesStore","stylesStore","totalPlayersQueued","allowFlush","flushQueue","isDirty","isContextDirty","flushPlayerBuilders","multiStartIndex","getPlayerBuilder","valueToApply","getInitialValue","playersStartIndex","builder","playerInsertionIndex","oldPlayer","buildPlayer","store","style","removeStyle","removeProperty","className","addClass","removeClass","isDirtyYes","isClassBasedValue","isSanitizable","configFlag","dynamicIndex","insertionIndex","playerIndex","directiveOwnerPointers","indexA","indexB","tmpValue","tmpProp","tmpFlag","tmpPlayerBuilderIndex","tmpDirectiveIndex","flagA","flagB","singleIndexA","_flag","singleIndexB","classBased","doShift","indexStartPosition","initialIndexForSingle","updateSinglePointerValues","initialIndex","newValue","initialValue","_element","_type","_values","_dirty","_factory","currentPlayer","keyValues","dirs","currentDirectiveOwner","newDirectiveOwner","getInitialClassNameValue","initialClassValues","staticStyles","NG_TEMPLATE_SELECTOR","isCssClassMatching","nodeClassAttrVal","cssClassToMatch","nodeClassesLen","matchIndex","matchEndIdx","hasTagAndTypeMatch","currentSelector","isProjectionMode","isNodeMatchingSelector","nodeAttrs","nameOnlyMarkerIdx","nodeAttr","getNameOnlyMarkerIndex","skipToNextSelector","isPositive","selectorAttrValue","readClassValueFromTNode","attrIndexInNode","findAttrIndexInNode","nodeAttrValue","compareAgainstClassName","isInlineTemplate","bindingsMode","maybeAttrName","matchTemplateAttribute","isNodeMatchingSelectorList","matchingProjectionSelectorIndex","ngProjectAsAttrVal","ngProjectAsAttrIdx","getProjectAsAttrValue","isSelectorInSelectorList","list","selectorListLoop","currentSelectorInList","_CLEAN_PROMISE","refreshDescendantViews","creationMode","container","dynamicViewData","renderEmbeddedTemplate","refreshDynamicEmbeddedViews","refreshContentQueries","selectedIndex","expandoInstructions","expandoStartIndex","currentElementIndex","instruction","providerCount","hostCtx","setHostBindings","staticContentQueries","components","componentRefresh","refreshChildComponents","directiveDefIdx","elementCreate","overriddenRenderer","rendererToUse","namespace","createElementNS","createLView","host","tHostNode","rendererFactory","createNodeAtIndex","tParentNode","createTNode","child","assignTViewNodeToLView","viewToRender","_isParent","_previousOrParentTNode","tickRootContext","executeTemplate","getRenderFlags","renderComponentOrTemplate","templateFn","normalExecutionPath","creationModeIsActive","begin","rf","prevSelectedIndex","setNodeStylingTemplate","attrsStartIndex","stylingAttrsStartIndex","executeContentQueries","isContentQueryHost","createDirectivesAndLocals","localRefs","localRefExtractor","exportsMap","","initNodeFlags","generateExpandoInstructionBlock","baseResolveDirective","saveNameToExportMap","localNames","cacheMatchingLocalNames","resolveDirectives","registry","matches","findDirectiveMatches","addComponentLogic","postProcessDirective","instantiateAllDirectives","expando","invokeHostBindingsInCreationMode","invokeDirectivesHostBindings","localIndex","saveResolvedLocalsInData","getOrCreateTView","ngPrivateData","createTView","viewIndex","initialViewLength","createViewBlueprint","viewQueryStartIndex","staticViewQueries","cleanup","pipeRegistry","locateHostElement","elementOrSelector","defaultRenderer","rNode","selectRootElement","tParent","propertyMetadataStartIndex","propertyMetadataEndIndex","initialInputs","tViews","projectionNext","projection","onElementCreationFns","generatePropertyAliases","direction","propStore","isInput","defs","propertyAliasMap","internalName","ATTR_TO_PROP","class","for","formaction","innerHtml","readonly","tabindex","elementPropertyInternal","nativeOnly","loadRendererFn","inputData","dataValue","initializeTNodeInputs","setInputsForProperty","childComponentLView","markDirtyIfOnPush","lastBindingIndex","bindingMetadata","savePropertyDebugData","previousExpandoLength","directiveCount","providerStartIndex","postProcessBaseDirective","initialInputData","minifiedInputName","attrValue","inputsToStore","generateInitialInputs","privateName","setInputsFromAttrs","queueComponentIndexForCheck","numberOfDirectives","directiveFactory","nodeInjectorFactory","componentView","addToViewTree","createLContainer","hostNative","isForViewContainerRef","lContainer","adjustedElementIndex","componentTView","syncViewWithBlueprint","checkView","lViewOrLContainer","markViewDirty","scheduleTick","nothingScheduled","clean","r","flushPlayers","rootComponent","detectChangesInternal","handleError","detectChangesInRootView","component","hostTView","executeViewQueryFn","storeBindingMetadata","prefix","suffix","CLEAN_PROMISE","getCleanup","getTViewCleanup","loadComponentRenderer","errorHandler","applyOnCreateInstructions","ɵɵallocHostVars","hostVars","queueHostBindingForCheck","totalHostVars","prefillHostVars","getLContainer","embeddedView","getContainerRenderParent","tViewNode","nativeParentNode","projectionNodeStack","walkTNodeTree","viewToWalk","action","renderParent","beforeNode","projectionNodeIndex","nextTNode","executeNodeAction","nodeOrContainer","head","nativeNode","nativeInsertBefore","nativeRemoveNode","createTextNode","createText","addRemoveViewFromContainer","insertMode","insertView","views","detachView","removeIndex","viewToDetach","removeView","destroyLView","destroyNode","cleanUpView","getParentState","destroyViewTree","executeOnDestroys","tCleanup","lCleanup","idxOrTargetGetter","listener","useCaptureOrSubIdx","removeEventListener","removeListeners","getRenderParent","getHighestElementOrICUContainer","getHostNative","insertBefore","nativeAppendOrInsertBefore","nativeAppendChild","parentNode","childEl","childTNode","anchorNode","parentTNode","getBeforeNodeForView","getNativeAnchorNode","containerNative","viewTNode","isHostElement","nativeParent","nativeRemoveChild","appendProjectedNode","projectedTNode","tProjectionNode","projectionView","ngContainerChildTNode","ɵɵcontainer","containerInternal","addTContainerToQueries","ɵɵtemplate","tContainerNode","ɵɵcontainerRefreshStart","ɵɵcontainerRefreshEnd","nextIndex","queries","insertNodeBeforeViews","addNode","comment","createComment","ɵɵreference","ɵɵload","ɵɵdirectiveInject","ɵɵinjectAttribute","attrNameToInject","attrsLength","accumulatedClasses","accumulatedStyles","injectAttributeImpl","ɵɵelementStyling","initElementStyling","directiveStylingIndex","getActiveDirectiveStylingIndex","registerHostDirective","ɵɵelementStyleProp","styleIndex","valueToAdd","resolveStylePropValue","getStylingContext","ɵɵelementHostStyleProp","ɵɵelementClassProp","classIndex","booleanOrNull","ɵɵelementHostClassProp","ɵɵelementStylingMap","classInputVal","forceClassesAsString","styleInputVal","str","forceStylesAsString","ɵɵelementStylingApply","elementStylingApplyInternal","ɵɵelementStart","initialStylesIndex","initialClassesIndex","currentQueries","clone","ɵɵelementEnd","initialStyleValues","styleString","getInitialStyleStringValue","ɵɵelement","ɵɵelementAttribute","strValue","ɵɵelementHostAttrs","hostElementIndex","ɵɵelementContainerStart","ɵɵelementContainerEnd","ɵɵembeddedViewStart","viewBlockId","containerTNode","startIdx","viewAtPositionId","scanForView","containerTViews","getOrCreateEmbeddedTView","createView","ɵɵembeddedViewEnd","viewHost","ɵɵgetCurrentView","ɵɵlistener","eventName","listenerFn","useCapture","eventTargetResolver","listenerInternal","ɵɵcomponentHostSyntheticListener","processOutputs","resolved","lCleanupIndex","existingListener","hasDirectives","tNodeIdx","cleanupEventName","listenerIdxInLCleanup","findExistingListener","__ngNextListenerFn__","wrapListener","cleanupFn","listen","propsLength","minifiedName","directiveInstance","output","ngDevMode","idx","executeListenerWithErrorHandling","wrapWithPreventDefault","wrapListenerIn_markDirtyAndPreventDefault","nextListenerFn","preventDefault","returnValue","ɵɵnextContext","ɵɵprojectionDef","componentNode","noOfNodeBuckets","projectionHeads","tails","componentChild","bucketIndex","ɵɵprojection","selectorIndex","appendProjectedNodes","projectedView","nodeToProject","_symbolIterator","core_getSymbolIterator","getOwnPropertyNames","isNaN","devModeEqual","isListLikeIterableA","isListLikeIterableB","comparator","iterator1","iterator2","item1","item2","areIterablesEqual","isAObject","isBObject","wrapped","isWrapped","isJsObject","o","updateBinding","bindingIndex","getBinding","bindingUpdated","bindingUpdated2","exp1","exp2","different","bindingUpdated3","exp3","bindingUpdated4","exp4","ɵɵproperty","ɵɵbind","ɵɵelementProperty","ɵɵcomponentHostSyntheticProperty","ɵɵinterpolationV","ɵɵinterpolation1","v0","ɵɵinterpolation2","i0","v1","ɵɵinterpolation3","i1","v2","ɵɵinterpolation4","i2","v3","ɵɵinterpolation5","i3","v4","ɵɵinterpolation6","i4","v5","ɵɵinterpolation7","i5","v6","ɵɵinterpolation8","i6","v7","ɵɵpropertyInterpolate","ɵɵpropertyInterpolate1","ɵɵpropertyInterpolate2","ɵɵpropertyInterpolate3","ɵɵpropertyInterpolate4","ɵɵpropertyInterpolate5","ɵɵpropertyInterpolate6","ɵɵpropertyInterpolate7","ɵɵpropertyInterpolate8","ɵɵpropertyInterpolateV","ɵɵselect","ɵɵtext","textNative","ɵɵtextBinding","textContent","createRootComponentView","createRootComponent","componentDef","hostFeatures","instantiateRootComponent","createRootContext","LifecycleHooksFeature","rootTView","dirIndex","SimpleChange","previousValue","firstChange","ɵɵNgOnChangesFeature","ngInherit","NgOnChangesFeatureImpl","definition","ngOnChanges","ngOnChangesSetInput","simpleChangesStore","getSimpleChangesStore","SIMPLE_CHANGES_STORE","setSimpleChangesStore","previousChange","ɵɵInheritDefinitionFeature","superType","superDef","baseDef","writeableDef","maybeUnwrapEmpty","baseViewQuery","baseContentQueries","inheritViewQuery","inheritContentQueries","prevHostBindings","superHostBindings","ctx","superViewQuery","superContentQueries","superPrototype","prevViewQuery","prevContentQueries","injectableDefOrInjectorDefFactory","injectorDef","paramLength","providerToFactory","ngModuleType","isTypeProvider","isValueProvider","isFactoryProvider","classRef","ngModuleDetail","hasDeps","resolveProvider$1","lInjectablesBlueprint","providerFactory","beginIndex","existingFactoryIndex","existingProvidersFactoryIndex","existingViewProvidersFactoryIndex","doesProvidersFactoryExist","doesViewProvidersFactoryExist","f","componentProviders","multiFactoryAdd","multiFactory","multiViewProvidersFactoryResolver","multiProvidersFactoryResolver","isComponentProvider","multiResolve","factories","componentCount","multiProviders","ɵɵProvidersFeature","viewProviders","processProvidersFn","noComponentFactoryError","ERROR_COMPONENT","_ngModule","_factories","componentType","resolveComponentFactory","ComponentFactoryBoundToModule","ngModule","projectableNodes","rootSelectorOrNode","ViewRef","_componentIndex","_appRef","_viewContainerRef","_tViewNode","rootNodes","collectNativeNodes","tNodeChild","componentHost","currentProjectedNode","_lookUpContext","destroyed","detach","callback","checkNoChangesInternal","vcRef","appRef","RootViewRef","_view","checkNoChangesInRootView","R3ElementRef","R3TemplateRef","createElementRef","ElementRefToken","createTemplateRef","TemplateRefToken","_declarationParentView","elementRef","_tView","_hostLContainer","_injectorIndex","declarationView","createEmbeddedViewAndNode","viewRef","hostContainer","core_noop","nativeElement","SWITCH_ELEMENT_REF_FACTORY","SWITCH_RENDERER2_FACTORY","full","major","minor","patch","VERSION","DefaultIterableDifferFactory","trackByFn","DefaultIterableDiffer","trackByIdentity","_linkedRecords","_unlinkedRecords","_previousItHead","_itHead","_itTail","_additionsHead","_additionsTail","_movesHead","_movesTail","_removalsHead","_removalsTail","_identityChangesHead","_identityChangesTail","_trackByFn","nextIt","nextRemove","addRemoveOffset","moveOffsets","getPreviousIndex","adjPreviousIndex","currentIndex","_nextRemoved","previousIndex","localMovePreviousIndex","localCurrentIndex","_nextPrevious","_nextAdded","_nextMoved","_nextIdentityChange","collection","check","_reset","itemTrackBy","mayBeDirty","trackById","_verifyReinsertion","_addIdentityChange","_mismatch","iterateListLike","_truncate","nextRecord","previousRecord","_prev","_remove","_moveAfter","_reinsertAfter","_addAfter","IterableChangeRecord_","reinsertRecord","_addToMoves","_addToRemovals","_unlink","clear","prevRecord","_prevRemoved","_insertAfter","_DuplicateMap","put","toIndex","_prevDup","_nextDup","_DuplicateItemRecordList","_head","_tail","atOrAfterIndex","duplicates","recordList","delete","isEmpty","moveOffset","DefaultKeyValueDifferFactory","DefaultKeyValueDiffer","_mapHead","_appendAfter","_previousMapHead","_changesHead","_changesTail","_nextChanged","_forEach","_maybeAddToChanges","_getOrCreateRecordForKey","_insertBeforeOrAppend","before","KeyValueChangeRecord_","_addToAdditions","_addToChanges","copied","find","supports","kv","SWITCH_CHANGE_DETECTOR_REF_FACTORY","keyValDiff","iterableDiff","defaultIterableDiffers","defaultKeyValueDiffers","SWITCH_TEMPLATE_REF_FACTORY","SWITCH_VIEW_CONTAINER_REF_FACTORY","expressionChangedAfterItHasBeenCheckedError","isFirstCheck","_addDebugContext","viewDebugError","logError","viewDestroyedError","shiftInitState","priorInitState","newInitState","initState","initIndex","shouldCallLifecycleInitHook","asTextData","nodes","asElementData","asProviderData","asPureExpressionData","asQueryList","Services","setCurrentNode","createRootView","createEmbeddedView","createComponentView","createNgModuleRef","overrideProvider","overrideComponentView","clearOverrides","checkAndUpdateView","checkNoChangesView","destroyView","resolveDep","createDebugContext","handleEvent","updateDirectives","updateRenderer","dirtyParentQueries","NOOP","_tokenKeyCache","tokenKey","nodeIdx","bindingIdx","unwrap","globalBindingIdx","oldValues","UNDEFINED_RENDERER_TYPE_ID","EMPTY_RENDERER_TYPE_ID","_renderCompCount$1","checkBinding","checkAndUpdateBinding","checkBindingNoChanges","bindings","markParentViewsForCheck","currView","viewContainerParent","markParentViewsForCheckProjectedViews","endView","dispatchEvent","event","root","declaredViewContainer","viewParentEl","renderNode","renderElement","renderText","isComponentView","isEmbeddedView","filterQueryId","queryId","splitMatchedQueriesDsl","matchedQueriesDsl","matchedQueries","matchedQueryIds","references","valueType","splitDepsDsl","sourceName","configurable","getParentRenderElement","renderHost","componentRendererType","DEFINITION_CACHE","WeakMap","resolveDefinition","visitRootRenderNodes","visitSiblingRenderNodes","nodeDef","visitRenderNode","childCount","visitProjectedRenderNodes","ngContentIndex","compView","hostElDef","projectedNodes","execRenderNodeAction","rn","bindingFlags","embeddedViews","_embeddedViews","NS_PREFIX_RE","splitNamespace","calcBindingFlags","valueCount","constAndInterp","_toStringWithNull","c0","a1","c1","a2","c2","a3","c3","a4","c4","a5","c5","a6","c6","a7","c7","a8","c8","a9","c9","UNDEFINED_VALUE","InjectorRefTokenKey","INJECTORRefTokenKey","NgModuleRefTokenKey","providersByKey","modules","isRoot","resolveNgModuleDep","depDef","_def","providerInstance","_createProviderInstance","moduleTransitivelyPresent","injectable","depValues","_createClass","_callFactory","attachEmbeddedView","elementData","addToArray","vcElementData","dvcElementData","projectedViews","_projectedViews","nodeFlags","parentNodeDef","childFlags","markNodeAsProjectedTemplate","attachProjectedView","renderAttachEmbeddedView","detachEmbeddedView","removeFromArray","renderDetachView$1","prevView","prevRenderNode","EMPTY_CONTEXT","viewDefFactory","ComponentFactory_","_inputs","_outputs","inputsArr","templateName","outputsArr","componentNodeIndex","ComponentRef_","ViewRef_","_viewRef","_component","_elDef","changeDetectorRef","Injector_","createViewContainerData","elDef","elData","ViewContainerRef_","_data","parentInjector","attachToViewContainerRef","templateRef","insert","componentFactory","ngModuleRef","contextInjector","componentRef","viewRef_","oldViewIndex","newViewIndex","moveEmbeddedView","createChangeDetectorRef","renderNodes","rootRenderNodes","fs","disposables","createTemplateData","TemplateRef_","_parentView","createInjector$1","allowPrivateServices","createRendererV1","RendererAdapter","delegate","selectorOrNode","namespaceAndName","ns","parentElement","viewRootNodes","viewAllNodes","propertyName","propertyValue","attributeValue","isAdd","styleName","styleValue","methodName","moduleType","bootstrapComponents","NgModuleRef_","_moduleType","_bootstrapComponents","_destroyListeners","_destroyed","provDef","initNgModule","injectFlags","componentFactoryResolver","lifecycles","callNgModuleLifecycle","RendererV1TokenKey","Renderer2TokenKey","ElementRefTokenKey","ViewContainerRefTokenKey","TemplateRefTokenKey","ChangeDetectorRefTokenKey","InjectorRefTokenKey$1","INJECTORRefTokenKey$1","checkIndex","nonMinifiedName","securityContext","outputDefs","depDefs","outputIndex","directChildFlags","childMatchedQueries","query","ngContent","createProviderInstance","_createProviderInstance$1","createPipeInstance","createClass","createDirectiveInstance","outputObservable","eventHandlerClosure","callFactory","NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","searchView","findCompView","viewContainer","allProviders","publicProviders","providerData","updateProp","changes","callLifecycleHooksChildrenFirst","callProviderLifecycles","callElementProvidersLifecycles","ComponentFactoryResolver$1","ComponentFactory$1","toRefArray","nonMinified","minified","ROOT_CONTEXT","SCHEDULER","isBoundToModule","isInternalRootView","rootViewInjector","createChainedInjector","hostRNode","rootFlags","isIsolated","test","rootLView","oldLView","tElementNode","nodesforSlot","ComponentRef$1","_rootLView","destroyCbs","addAllToArray","items","flatten","dst","MARKER","ICU_BLOCK_REGEXP","SUBTEMPLATE_REGEXP","PH_REGEXP","BINDING_REGEXP","ICU_REGEXP","ROOT_TEMPLATE_ID","PP_MULTI_VALUE_PLACEHOLDERS_REGEXP","PP_PLACEHOLDERS_REGEXP","PP_ICU_VARS_REGEXP","PP_ICUS_REGEXP","PP_CLOSE_TEMPLATE_REGEXP","PP_TEMPLATE_ID_REGEXP","extractParts","pattern","prevPos","braceStack","results","braces","lastIndex","pos","block","parseICUBlock","cases","icuType","mainBinding","binding","parseInt","blocks","removeInnerTemplateTranslation","tagMatched","inTemplate","generateBindingUpdateOpCodes","destinationNode","sanitizeFn","updateOpCodes","textParts","textValue","toMaskBit","getBindingMask","icuExpression","valueArr","i18nIndexStack","i18nIndexStackPointer","min","parentIndexStack","ɵɵi18nStart","subTemplateIndex","i18nVarsCount","parentIndexPointer","createOpCodes","icuExpressions","msgParts","search","getTranslationForTemplate","phIndex","icuNodeIndex","icuStart","tIcuIndex","hasBinding","textNodeIndex","numSlotsToAlloc","allocExpando","tI18n","update","icus","i18nStartFirstPass","appendI18nNode","previousTNode","cursor","ɵɵi18nPostprocess","replacements","templateIdsStack","phs","tmpl","placeholders","placeholder","templateId","isCloseTemplateTag","currentTemplateId","_idx","ɵɵi18nEnd","rootIndex","lastCreatedNode","visitedNodes","readCreateOpCodes","removeNode","i18nEndFirstPass","createDynamicNodeAtIndex","currentTNode","opCode","textRNode","destinationNodeIndex","destinationTNode","commentValue","commentNodeIndex","commentRNode","activeCaseIndex","tagNameValue","elementNodeIndex","removedPhTNode","removedPhRNode","ɵɵi18n","ɵɵi18nAttributes","previousElementIndex","i18nAttributesFirstPass","changeMask","shiftsCounter","ɵɵi18nExp","expression","ɵɵi18nApply","readUpdateOpCodes","bindingsStartIndex","bypassCheckBit","caseCreated","checkBit","skipCodes","tIcu","icuTNode","removeCodes","removeOpCode","activeIndex","caseIndex","getCaseIndex","Plural","Zero","One","Two","Few","Many","Other","getPluralCategory","locale","nLike","n","nDecimal","floor","abs","getPluralCase","bindingValue","resolvedCase","tIcus","createCodes","updateCodes","childIcus","nestedIcus","icuIndex","icuCase","parseIcuCase","opCodes","parseNodes","currentNode","nestedIcusToCreate","lowerAttrName","COMMENT_NODE","NESTED_ICU","nestedIcuIndex","newLocal","nestedIcu","nestedIcuNodeIndex","nestTIcuIndex","TRANSLATIONS","LOCALIZE_PH_REGEXP","ɵɵi18nLocalize","ɵɵpureFunction0","slotOffset","pureFn","ɵɵpureFunction1","exp","ɵɵpureFunction2","ɵɵpureFunction3","ɵɵpureFunction4","ɵɵpureFunction5","exp5","ɵɵpureFunction6","exp6","ɵɵpureFunction7","exp7","ɵɵpureFunction8","exp8","ɵɵpureFunctionV","exps","ɵɵpipe","pipeName","getPipeDef$1","pipeInstance","ɵɵpipeBind1","unwrapValue$1","isPure","transform","ɵɵpipeBind2","ɵɵpipeBind3","ɵɵpipeBind4","ɵɵpipeBindV","isAsync","__isAsync","generatorOrNext","schedulerFn","errorFn","completeFn","_results","filter","init","resultsTree","emit","LQueries_","shallow","deep","queryList","predicate","descend","read","createQuery","shallowResults","copyQueriesToContainer","deepResults","copyQueriesToView","insertView$1","removeView$1","containerValues","viewValuesIdx","removed","getIdxOfMatchingSelector","queryByReadToken","matchingIdx","queryByTemplateRef","templateRefToken","templateRefResult","queryRead","queryByTNodeType","insertBeforeContainer","addMatch","matchingValue","insertBeforeViewMatches","createPredicate","_valuesTree","_static","track","storeCleanupWithContext","ɵɵqueryRefresh","queryListImpl","reset","notifyOnChanges","ɵɵstaticViewQuery","ɵɵviewQuery","ɵɵloadViewQuery","ɵɵcontentQuery","contentQuery","tViewContentQueries","ɵɵstaticContentQuery","ɵɵloadContentQuery","ɵɵtemplateRefExtractor","assertSameOrNotExisting","incoming","registerNgModuleType","ɵregisterNgModuleType","dir","SWITCH_COMPILE_DIRECTIVE","SWITCH_COMPILE_COMPONENT","SWITCH_COMPILE_PIPE","bindingPropertyName","hostPropertyName","SWITCH_COMPILE_NGMODULE","appInits","initialized","donePromise","rej","asyncInitPromises","initResult","all","catch","APP_ID_RANDOM_PROVIDER","_randomChar","fromCharCode","APP_BOOTSTRAP_LISTENER","_throwError","Compiler_compileModuleSync","Compiler_compileModuleAsync","Compiler_compileModuleAndAllComponentsSync","Compiler_compileModuleAndAllComponentsAsync","compileModuleSync","compileModuleAsync","compileModuleAndAllComponentsSync","compileModuleAndAllComponentsAsync","trace","events","wtfEnabled","wtf","detectWTF","wtfCreateScope","createScope","arg0","arg1","wtfLeave","leaveScope","core_promise","scheduleMicroTask","Zone","enableLongStackTrace","hasPendingMicrotasks","hasPendingMacrotasks","isStable","onUnstable","onMicrotaskEmpty","onStable","onError","assertZonePatched","zone","_nesting","_outer","_inner","fork","properties","isAngularZone","onInvokeTask","task","applyThis","applyArgs","onEnter","invokeTask","onLeave","onInvoke","invoke","onHasTask","hasTaskState","hasTask","change","microTask","checkStable","macroTask","onHandleError","runOutsideAngular","isInAngularZone","run","scheduleEventTask","EMPTY_PAYLOAD","noop$1","runTask","cancelTask","runGuarded","NoopNgZone","_ngZone","_pendingCount","_isZoneStable","_didWork","_callbacks","taskTrackingZone","_watchAngularEvents","assertNotInAngularZone","_runCallbacksIfReady","cb","clearTimeout","timeoutId","doneCb","pending","getPendingTasks","updateCb","macroTasks","creationLocation","timeout","addCallback","using","exactMatch","TestabilityRegistry","_applications","_testabilityGetter","addToWindow","testability","elem","findInAncestors","findTestabilityInTree","_platform","compileNgModuleFactory","createCompiler","cf","ALLOW_MULTIPLE_PLATFORMS","parentPlatformFactory","desc","extraProviders","platform","getPlatform","injectedProviders","PlatformRef","inits","createPlatform","requiredToken","assertPlatform","_injector","_modules","moduleFactory","ngZone","ngZoneOption","getNgZone","ngZoneInjector","moduleRef","exceptionHandler","_callAndReportToErrorHandler","initStatus","runInitializers","_moduleDoBootstrap","compilerOptions","optionsReducer","bootstrapModuleFactory","ngDoBootstrap","module","_zone","_exceptionHandler","_componentFactoryResolver","_initStatus","_bootstrapListeners","_views","_runningTick","_enforceNoNewChanges","_stable","componentTypes","tick","isCurrentlyStable","stableSub","unstableSub","assertInAngularZone","componentOrFactory","compRef","_unloadComponent","registerApplication","_loadComponent","_tickScope","detectChanges","checkNoChanges","attachToAppRef","detachFromAppRef","attachView","viewCount","ivyEnabled","_SEPARATOR","FACTORY_CLASS_SUFFIX","SystemJsNgModuleLoaderConfig","DEFAULT_CONFIG","factoryPathPrefix","factoryPathSuffix","SystemJsNgModuleLoader","_compiler","_config","path","loadFactory","loadAndCompile","exportName","checkNotEmpty","factoryClassSuffix","modulePath","DebugEventListener","DebugNode__PRE_R3__","_debugContext","listeners","DebugElement__PRE_R3__","addChild","componentInstance","providerTokens","childNodes","childIndex","newChildren","siblingIndex","refChild","newChild","refIndex","queryAll","_queryElementChildren","_queryNodeChildren","children","eventObj","_nativeNodeToDebugNode","indexDebugNode","Warning","Ignore","APPLICATION_MODULE_PROVIDERS","queue","templateFactory","componentProvider","fixedAttrs","bindingDefs","suffixOrSecurityContext","isFilled","resolveRendererType2","parentEl","preserveContent","listenToElementOutputs","handleEventClosure","renderEventHandlerClosure","listenTarget","listenerView","disposable","checkAndUpdateElementValue","renderValue","setElementAttribute","setElementClass","unit","setElementStyle","setElementProperty","bindingType","filterId","queryIds","nodeMatchedQueries","tplDef","checkAndUpdateQuery","newValues","calcQueryValues","notify","boundValue","getQueryValue","dvc","queryValueType","appendNgContent","argCount","_pureExpressionDef","propToIndex","nbKeys","propertyNames","staticText","_addInterpolationPart","viewBindingCount","viewDisposableCount","viewNodeFlags","viewRootNodeFlags","viewMatchedQueries","currentParent","currentRenderParent","currentElementHasPublicProviders","currentElementHasPrivateProviders","lastRenderRootNode","validateNode","isPrivateService","isNgContainer","newParent","rootNodeFlags","bindingCount","outputCount","nodeCount","parentEnd","initView","createViewNodes","compRenderer","hostDef","nodeData","compViewDef","execComponentViewsAction","ViewAction","CreateViewNodes","execQueriesAction","markProjectedViewsForCheck","execEmbeddedViewsAction","CheckNoChanges","CheckAndUpdate","callInit","checkAndUpdateNode","argStyle","v8","v9","bindLen","changed","checkAndUpdateElementInline","checkAndUpdateTextInline","checkAndUpdateDirectiveInline","checkAndUpdatePureExpressionInline","checkAndUpdateNodeInline","checkAndUpdateElementDynamic","checkAndUpdateTextDynamic","checkAndUpdateDirectiveDynamic","checkAndUpdatePureExpressionDynamic","checkAndUpdateNodeDynamic","checkNoChangesNode","checkNoChangesNodeInline","checkNoChangesNodeDynamic","checkNoChangesQuery","Destroy","detachProjectedView","destroyViewNodes","CheckNoChangesProjectedViews","CheckAndUpdateProjectedViews","callViewAction","viewState","execProjectedViewsAction","queryFlags","staticDynamicQueryFlag","checkType","initServicesIfNeeded","services","debugSetCurrentNode","debugCreateRootView","debugCreateEmbeddedView","debugCreateComponentView","debugCreateNgModuleRef","debugOverrideProvider","debugOverrideComponentView","debugClearOverrides","debugCheckAndUpdateView","debugCheckNoChangesView","debugDestroyView","DebugContext_","debugHandleEvent","debugUpdateDirectives","debugUpdateRenderer","createProdRootView","prodCheckAndUpdateNode","prodCheckNoChangesNode","elInjector","createRootData","DebugRendererFactory2","defWithOverride","applyProviderOverridesToView","callWithDebugContext","DebugAction","viewDefOverrides","hasOverrides","hasDeprecatedOverrides","providerOverrides","override","deprecatedBehavior","providerOverridesWithScope","calcHasOverrides","moduleSet","applyProviderOverrides","applyProviderOverridesToNgModule","comp","compFactory","hostViewDef","elementIndicesWithOverwrittenProviders","elIndicesWithOverwrittenProviders","lastElementDef","findElementIndicesWithOverwrittenProviders","applyProviderOverridesToElement","elIndex","_currentAction","_currentView","_currentNodeIndex","nextDirectiveWithBinding","debugCheckAndUpdateNode","debugCheckNoChangesNode","nextRenderNodeWithBinding","givenValues","bindingValues","elView","elOrCompView","childDef","collectReferences","componentRenderElement","findHostElement","logViewDef","logNodeIndex","renderNodeIndex","getRenderNodeIndex","currRenderNodeIndex","refName","oldAction","oldNodeIndex","viewWrappedDebugError","getCurrentDebugContext","renderData","DebugRenderer2","whenRenderingDone","debugContextFactory","removeDebugNodeFromIndex","debugCtx","debugEl","debugChildEl","debugRefEl","oldChild","fullName","defFactory","NgModuleFactory_","_ngModuleDefFactory","cloneNgModuleDefinition","parseCookieValue","CommonModule","DOCUMENT","PLATFORM_BROWSER_ID","isPlatformServer","PlatformLocation","_angular_core__WEBPACK_IMPORTED_MODULE_0__","LocationStrategy","APP_BASE_HREF","Location","platformStrategy","platformLocation","_urlChangeListeners","_platformStrategy","browserBaseHref","getBaseHref","_platformLocation","_baseHref","stripTrailingSlash","_stripIndexHtml","onPopState","ev","includeHash","normalize","getState","normalizeQueryParams","baseHref","startsWith","_stripBaseHref","prepareExternalUrl","pushState","_notifyUrlChangeListeners","replaceState","forward","back","onNext","onThrow","onReturn","slashes","endsWith","pathEndIdx","droppedSlashIdx","HashLocationStrategy","onHashChange","hash","internal","joinWithSlash","title","queryParams","pathname","PathLocationStrategy","href","getBaseHrefFromDOM","externalUrl","u","localeEn","LOCALE_DATA","CURRENCIES_EN","ADP","AFN","ALL","AMD","AOA","ARS","AUD","BAM","BBD","BDT","BHD","BIF","BMD","BND","BOB","BRL","BSD","BWP","BYN","BYR","BZD","CAD","CHF","CLF","CLP","CNY","COP","CRC","CUC","CUP","CZK","DJF","DKK","DOP","EGP","ESP","EUR","FJD","FKP","GBP","GEL","GIP","GNF","GTQ","GYD","HKD","HNL","HRK","HUF","IDR","ILS","INR","IQD","IRR","ISK","ITL","JMD","JOD","JPY","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LTL","LUF","LVL","LYD","MGA","MGF","MMK","MNT","MRO","MUR","MXN","MYR","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PHP","PKR","PLN","PYG","RON","RSD","RUB","RUR","RWF","SBD","SEK","SGD","SHP","SLL","SOS","SRD","SSP","STD","STN","SYP","THB","TMM","TND","TOP","TRL","TRY","TTD","TWD","TZS","UAH","UGX","USD","UYI","UYU","UZS","VEF","VND","VUV","XAF","XCD","XOF","XPF","YER","ZAR","ZMK","ZMW","ZWD","NumberFormatStyle","Decimal","Percent","Currency","Scientific","FormStyle","Format","Standalone","TranslationWidth","Narrow","Abbreviated","Wide","Short","FormatWidth","Medium","Long","Full","NumberSymbol","Group","List","PercentSign","PlusSign","MinusSign","Exponential","SuperscriptingExponent","PerMille","Infinity","NaN","TimeSeparator","CurrencyDecimal","CurrencyGroup","WeekDay","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","getLocaleDateFormat","width","getLastDefinedValue","findLocaleData","getLocaleTimeFormat","getLocaleDateTimeFormat","getLocaleNumberSymbol","symbol","getLocaleNumberFormat","checkFullData","extractTime","time","h","hours","minutes","normalizedLocale","parentLocale","getCurrencySymbol","code","format","currency","getLocaleCurrencies","symbolNarrow","DEFAULT_NB_OF_CURRENCY_DIGITS","ISO8601_DATE_REGEX","NAMED_FORMATS","DATE_FORMATS_SPLIT","ZoneWidth","ShortGMT","Extended","DateType","FullYear","Month","Date","Hours","Minutes","Seconds","FractionalSeconds","Day","TranslationType","DayPeriods","Days","Months","Eras","formatDate","timezone","date","isDate","parsedNb","parseFloat","y","isoStringToDate","toDate","getNamedFormat","localeId","getLocaleId","formatValue","shortTime","shortDate","formatDateTime","mediumTime","mediumDate","longTime","longDate","fullTime","fullDate","part","dateTimezoneOffset","getTimezoneOffset","timezoneToOffset","reverseValue","timezoneOffset","getTime","setMinutes","getMinutes","addDateMinutes","convertTimezoneToLocal","dateFormatter","DATE_FORMATS","formatter","dateStrGetter","dateGetter","weekGetter","timeZoneGetter","getDateFormatter","opt_values","padNumber","num","digits","minusSign","negWrap","neg","strNum","getFullYear","getMonth","getDate","getHours","getSeconds","getMilliseconds","getDay","getDatePart","localeMinus","form","extended","formStyle","months","getLocaleMonthNames","days","getLocaleDayNames","currentHours","currentMinutes","rules","rule","getLocaleExtraDayPeriodRules","dayPeriods","getLocaleExtraDayPeriods","hoursFrom","minutesFrom","hoursTo","minutesTo","amPm","getLocaleDayPeriods","getLocaleEraNames","unexpected","getDateTranslation","ceil","JANUARY","THURSDAY","monthBased","nbDaysBefore1stDayOfMonth","today","firstThurs","year","firstDayOfYear","getFirstThursdayOfYear","diff","datetime","round","fallback","requestedTimezoneOffset","parse","tzHour","tzMin","dateSetter","setUTCFullYear","setFullYear","timeSetter","setUTCHours","setHours","ms","valueOf","NUMBER_FORMAT_REGEXP","MAX_DIGITS","DECIMAL_SEP","ZERO_CHAR","PATTERN_SEP","GROUP_SEP","DIGIT_CHAR","CURRENCY_CHAR","PERCENT_CHAR","formatNumberToLocaleString","groupSymbol","decimalSymbol","digitsInfo","isPercent","formattedText","isZero","isFinite","parsedNumber","integerLen","zeros","numStr","exponent","parseNumber","fractionLen","toPercent","minInt","minFraction","minFrac","maxFraction","maxFrac","minIntPart","minFractionPart","maxFractionPart","parseIntAutoRadix","fractionSize","roundAt","digit","dropTrailingZeros","minLen","carry","reduceRight","roundNumber","decimals","every","groups","lgSize","gSize","negPre","negSuf","posPre","posSuf","formatCurrency","currencyCode","parseNumberFormat","getNumberOfCurrencyDigits","patternParts","positive","negative","positiveParts","lastIndexOf","integer","fraction","ch","trunkLen","DEPRECATED_PLURAL_FN","NgLocalization","ngLocalization","NgLocaleLocalization","deprecatedPluralFn","getLocalePluralCase","cookieStr","encodeURIComponent","cookie","eqIndex","cookieName","cookieValue","decodeURIComponent","StylingDiffer","_name","_options","_lastSetValue","_lastSetValueType","_lastSetValueIdentityChange","valueHasChanged","finalValue","trimValues","parseOutUnits","allowSubKeys","oldKeys","newKeys","arrayEqualsArray","mapHasChanged","bulidMapFromValues","errorPrefix","setMapValues","assertValidValue","innerKeys","setIndividualMapValue","normalizeStyleKeyAndValue","NgClassImpl","NgClassR2Impl","_iterableDiffers","_keyValueDiffers","_ngEl","_renderer","_initialClasses","_removeClasses","_applyClasses","_rawClass","_iterableDiffer","_keyValueDiffer","iterableChanges","_applyIterableChanges","keyValueChanges","_applyKeyValueChanges","forEachAddedItem","_toggleClass","forEachChangedItem","forEachRemovedItem","rawClassVal","klass","enabled","NgClassR3Impl","_value","_ngClassDiffer","_classStringDiffer","classChanged","ngClassChanged","classValue","NgClassImplProvider","NgClassBase","_delegate","NgClass","ngClass","setNgClass","applyChanges","NgComponentOutlet","_componentRef","_moduleRef","ngComponentOutlet","ngComponentOutletInjector","ngComponentOutletNgModuleFactory","parentModule","createComponent","ngComponentOutletContent","NgForOfContext","$implicit","ngForOf","even","odd","NgForOf","_viewContainer","_template","_differs","_ngForOfDirty","_differ","_ngForOf","ngForTrackBy","ngForTemplate","_applyChanges","insertTuples","forEachOperation","adjustedPreviousIndex","tuple","RecordViewTuple","move","_perViewChange","ilen","forEachIdentityChange","NgIf","NgIfContext","_thenTemplateRef","_elseTemplateRef","_thenViewRef","_elseViewRef","ngIf","condition","_updateView","ngIfThen","assertTemplate","ngIfElse","expr","property","SwitchView","_templateRef","_created","created","NgSwitch","_defaultUsed","_caseCount","_lastCaseCheckIndex","_lastCasesMatched","ngSwitch","_ngSwitch","_updateDefaultCases","_defaultViews","matched","useDefault","enforceState","NgSwitchCase","_addCase","_matchCase","ngSwitchCase","NgSwitchDefault","_addDefault","NgPlural","_localization","_caseViews","ngPlural","_switchValue","switchView","_clearViews","_activateView","_activeView","NgPluralCase","isANumber","addCase","NgStyleImpl","NgStyleR2Impl","_ngStyle","_setStyle","nameAndUnit","NgStyleR3Impl","NgStyleImplProvider","NgStyleBase","NgStyle","ngStyle","setNgStyle","NgTemplateOutlet","ngTemplateOutletContext","ngTemplateOutlet","_shouldRecreateView","_updateExistingContext","ctxChange","_hasContextShapeChanged","prevCtxKeys","currCtxKeys","COMMON_DIRECTIVES","invalidPipeArgumentError","NumberFormatter","minimumIntegerDigits","minimumFractionDigits","maximumFractionDigits","currencyAsSymbol","currencyDisplay","Intl","NumberFormat","DATE_FORMATS_SPLIT$1","PATTERN_ALIASES","yMMMdjms","datePartGetterFactory","combine","digitCondition","nameCondition","yMdjm","yMMMMEEEEd","yMMMMd","yMMMd","yMd","jms","jm","DATE_FORMATS$1","yyyy","yy","MMMM","MMM","MM","M","LLLL","L","dd","HH","digitModifier","hourExtractor","hour12Modify","H","hh","jj","mm","ss","sss","EEEE","EEE","EE","E","inner","Z","timeZoneGetter$1","z","ww","w","G","GG","GGG","GGGG","intlDateFormat","DateTimeFormat","hour","hour12","timeZoneName","merged","opt","ret","DATE_FORMATTER_CACHE","DateFormatter","cacheKey","_format","partToTime","DeprecatedDatePipe","_locale","isDate$1","_ALIASES","formatNumber$1","medium","short","DeprecatedDecimalPipe","DeprecatedPercentPipe","DeprecatedCurrencyPipe","symbolDisplay","COMMON_DEPRECATED_I18N_PIPES","_promiseStrategy","async","updateLatestValue","_observableStrategy","AsyncPipe","_ref","_latestValue","_latestReturnedValue","_subscription","_obj","_strategy","_dispose","wrap","_selectStrategy","createSubscription","_updateLatestValue","dispose","markForCheck","LowerCasePipe","unicodeWordMatch","TitleCasePipe","txt","toUpperCase","UpperCasePipe","DatePipe","_INTERPOLATION_REGEXP","I18nPluralPipe","pluralMap","I18nSelectPipe","mapping","JsonPipe","KeyValuePipe","differs","compareFn","keyValueA","keyValueB","aString","bString","differ","differChanges","forEachItem","makeKeyValuePair","sort","DecimalPipe","formatNumber","strToNumber","PercentPipe","formatPercent","CurrencyPipe","display","SlicePipe","COMMON_PIPES","ɵ0$2","PLATFORM_SERVER_ID","platformId","BrowserViewportScroller","supportScrollRestoration","scrollX","scrollY","position","scrollTo","anchor","CSS","escape","elSelectedById","scrollToElement","elSelectedByName","scrollRestoration","history","rect","getBoundingClientRect","left","pageXOffset","top","pageYOffset","BrowserModule","INTERNAL_BROWSER_PLATFORM_PROVIDERS","_angular_common__WEBPACK_IMPORTED_MODULE_0__","_angular_core__WEBPACK_IMPORTED_MODULE_1__","_DOM","getDOM","DomAdapter","resourceLoaderType","attrToPropMap","_attrToPropMap","GenericBrowserDomAdapter","_animationPrefix","_transitionEnd","getStyle","domPrefixes","transEndEventNames","WebkitTransition","MozTransition","OTransition","transition","getDistributedNodes","baseUrl","createShadowRoot","DOM_KEY_LOCATION_NUMPAD","_keyMap","\b","\t","","\u001b","Del","Esc","Left","Right","Up","Down","Menu","Scroll","Win","_chromeNumKeyPadMap","A","B","C","D","F","I","J","K","N","O","`","","nodeContains","contains","BrowserDomAdapter","templateHtml","adapter","group","groupEnd","nodeA","nodeB","querySelectorAll","evt","eventType","getDefaultDocument","createEvent","initEvent","defaultPrevented","hasProperty","replaceChild","checked","doc","css","shadowRoot","cloneNode","getElementsByClassName","getElementsByTagName","classList","stylename","attrib","attribute","hasAttribute","hasAttributeNS","getAttribute","getAttributeNS","removeAttributeNS","bottom","right","height","newTitle","isElementNode","msMatchesSelector","webkitMatchesSelector","HTMLElement","DocumentFragment","importNode","templateAwareRoot","adoptNode","keyIdentifier","baseElement","getBaseElementHref","urlParsingNode","relativePath","navigator","userAgent","getComputedStyle","performance","now","supportsState","BrowserPlatformLocation","_doc","_init","getLocation","_history","getHistory","getGlobalEventTarget","protocol","hostname","port","newPath","TRANSITION_ID","SERVER_TRANSITION_PROVIDERS","transitionId","dom","BrowserGetTestability","getAllTestabilities","getAllRootElements","testabilities","didWork","decrement","didWork_","whenStable","getTestability","isShadowRoot","getHost","exportNgVar","COMPILED","CORE_TOKENS","ApplicationRef","INSPECT_GLOBAL_NAME","CORE_TOKENS_GLOBAL_NAME","inspectNativeElement","ELEMENT_PROBE_PROVIDERS","coreTokens","EVENT_MANAGER_PLUGINS","EventManager","plugins","_eventNameToPlugin","manager","_plugins","handler","_findPluginFor","addGlobalEventListener","plugin","EventManagerPlugin","SharedStylesHost","_stylesSet","additions","onStylesAdded","DomSharedStylesHost","_hostNodes","_styleNodes","styleEl","hostNode","_addStylesToHost","styleNode","NAMESPACE_URIS","svg","xhtml","xlink","xml","xmlns","COMPONENT_REGEX","HOST_ATTR","CONTENT_ATTR","flattenStyles","compId","decoratePreventDefault","eventHandler","DomRendererFactory2","eventManager","sharedStylesHost","appId","rendererByCompId","DefaultDomRenderer2","EmulatedEncapsulationDomRenderer2","applyToHost","ShadowDomRenderer","addStyles","namespaceUri","checkNoSyntheticProp","AT_CHARCODE","nameKind","componentShortId","contentAttr","hostAttr","shimHostAttribute","hostEl","attachShadow","addHost","removeHost","nodeOrShadowRoot","__symbol__","ADD_EVENT_LISTENER","REMOVE_EVENT_LISTENER","symbolNames","FALSE","ANGULAR","NATIVE_ADD_LISTENER","NATIVE_REMOVE_LISTENER","stopSymbol","stopMethodSymbol","blackListedMap","blackListedEvents","isBlackListedEvent","globalListener","symbolName","taskDatas","taskData","copiedTasks","DomEventsPlugin","patchEvent","Event","stopImmediatePropagation","zoneJsLoaded","globalListenerRegistered","callbackRegistered","underlyingRemove","found","EVENT_NAMES","pan","panstart","panmove","panend","pancancel","panleft","panright","panup","pandown","pinch","pinchstart","pinchmove","pinchend","pinchcancel","pinchin","pinchout","press","pressup","rotate","rotatestart","rotatemove","rotateend","rotatecancel","swipe","swipeleft","swiperight","swipeup","swipedown","tap","HAMMER_GESTURE_CONFIG","HAMMER_LOADER","HammerGestureConfig","overrides","mc","enable","HammerGesturesPlugin","loader","isCustomEvent","Hammer","getZone","cancelRegistration","deregister","buildHammer","on","off","MODIFIER_KEYS","MODIFIER_KEY_GETTERS","alt","altKey","control","ctrlKey","metaKey","shiftKey","KeyEventsPlugin","parseEventName","parsedEvent","outsideHandler","eventCallback","onAndCancel","domEventName","_normalizeKey","fullKey","modifierName","getEventKey","modifierGetter","getEventFullKey","keyName","DomSanitizer","DomSanitizerImpl","SafeHtmlImpl","changingThisBreaksApplicationSecurity","checkNotSafeValue","SafeStyleImpl","SafeScriptImpl","SafeResourceUrlImpl","SafeUrlImpl","expectedType","SafeValueImpl","getTypeName","ɵ0$5","makeCurrent","BROWSER_SANITIZATION_PROVIDERS","BROWSER_MODULE_PROVIDERS","createMeta","Meta","_dom","forceCreation","_getOrCreateElement","attrSelector","_parseSelector","getTag","_setMetaElementAttributes","removeTagElement","_containsAttributes","createTitle","Title","getTitle","setTitle","TransferState","onSerializeCallbacks","transferState","defaultValue","script","getElementById","initialState","unescapedText","&a;","&q;","&s;","&l;","&g;","unescapeHtml","__decorate","getOwnPropertyDescriptor","Reflect","decorate","TagContentType","splitNsName","elementName","colonIndex","isNgContent","isNgTemplate","getNsPrefix","mergeNsAndName","localName","NAMED_ENTITIES","Aacute","aacute","Acirc","acirc","acute","AElig","aelig","Agrave","agrave","alefsym","Alpha","alpha","amp","and","ang","apos","Aring","aring","asymp","Atilde","atilde","Auml","auml","bdquo","Beta","beta","brvbar","bull","cap","Ccedil","ccedil","cedil","cent","Chi","chi","circ","clubs","cong","crarr","cup","curren","dagger","Dagger","darr","dArr","deg","Delta","diams","divide","Eacute","eacute","Ecirc","ecirc","Egrave","egrave","emsp","ensp","Epsilon","epsilon","equiv","Eta","eta","ETH","eth","Euml","euml","euro","exist","fnof","forall","frac12","frac14","frac34","frasl","Gamma","gamma","ge","gt","harr","hArr","hearts","hellip","Iacute","iacute","Icirc","icirc","iexcl","Igrave","igrave","image","infin","int","Iota","iota","iquest","isin","Iuml","iuml","Kappa","kappa","Lambda","lambda","lang","laquo","larr","lArr","lceil","ldquo","le","lfloor","lowast","loz","lrm","lsaquo","lsquo","lt","macr","mdash","micro","middot","minus","Mu","mu","nabla","nbsp","ndash","ne","ni","not","notin","nsub","Ntilde","ntilde","Nu","nu","Oacute","oacute","Ocirc","ocirc","OElig","oelig","Ograve","ograve","oline","Omega","omega","Omicron","omicron","oplus","or","ordf","ordm","Oslash","oslash","Otilde","otilde","otimes","Ouml","ouml","para","permil","perp","Phi","phi","Pi","pi","piv","plusmn","pound","prime","Prime","prod","Psi","psi","quot","radic","rang","raquo","rarr","rArr","rceil","rdquo","real","reg","rfloor","Rho","rho","rlm","rsaquo","rsquo","sbquo","Scaron","scaron","sdot","sect","shy","Sigma","sigma","sigmaf","sim","spades","sube","sum","sup","sup1","sup2","sup3","supe","szlig","Tau","tau","there4","Theta","theta","thetasym","thinsp","THORN","thorn","tilde","times","trade","Uacute","uacute","uarr","uArr","Ucirc","ucirc","Ugrave","ugrave","uml","upsih","Upsilon","upsilon","Uuml","uuml","weierp","Xi","xi","Yacute","yacute","yen","yuml","Yuml","Zeta","zeta","zwj","zwnj","NGSP_UNICODE","HtmlTagDefinition","closedByChildren","implicitNamespacePrefix","contentType","PARSABLE_DATA","closedByParent","isVoid","ignoreFirstLf","canSelfClose","_DEFAULT_TAG_DEFINITION","TAG_DEFINITIONS","getHtmlTagDefinition","base","area","embed","link","img","param","hr","br","wbr","thead","tbody","tfoot","tr","td","th","col","math","li","dt","rb","rt","rtc","rp","optgroup","option","pre","listing","RAW_TEXT","ESCAPABLE_RAW_TEXT","textarea","_SELECTOR_REGEXP","CssSelector","notSelectors","_addResult","cssSel","cssSelector","inNot","setElement","addClassName","addAttribute","hasElementSelector","classAttr","notSelector","SelectorMatcher","_elementMap","_elementPartialMap","_classMap","_classPartialMap","_attrValueMap","_attrValuePartialMap","_listContexts","notMatcher","addSelectables","cssSelectors","callbackCtxt","listContext","SelectorListContext","_addSelectable","matcher","selectable","SelectorContext","_addTerminal","_addPartial","isTerminal","terminalMap","terminalValuesMap","partialMap","partialValuesMap","terminalList","matchedCallback","alreadyMatched","_matchTerminal","_matchPartial","selectables","starSelectables","finalize","nestedSelector","cbContext","createNotMatcher","createInject","makeMetadataFactory","createInjectionToken","createAttribute","createContentChildren","createContentChild","createViewChildren","createViewChild","createDirective","createPipe","createInput","createOutput","createHostBinding","createHostListener","createNgModule","createInjectable","CUSTOM_ELEMENTS_SCHEMA","NO_ERRORS_SCHEMA","createOptional","createSelf","createSkipSelf","createHost","isTypeOf","parserSelectorToR3Selector","parserSelectorToSimpleSelector","parserSelectorToNegativeSelector","parseSelectorToR3Selector","TypeModifier","BuiltinTypeName","Type$1","modifiers","modifier","BuiltinType","visitor","visitBuiltinType","ExpressionType","typeParams","visitExpressionType","ArrayType","of","visitArrayType","MapType","visitMapType","DYNAMIC_TYPE","Dynamic","INFERRED_TYPE","Inferred","BOOL_TYPE","Bool","NUMBER_TYPE","Int","NONE_TYPE","BinaryOperator","BuiltinVar","BuiltinMethod","nullSafeIsEquivalent","other","isEquivalent","areAllEquivalent","Expression","sourceSpan","ReadPropExpr","ReadKeyExpr","InvokeMethodExpr","InvokeFunctionExpr","InstantiateExpr","trueCase","falseCase","ConditionalExpr","rhs","BinaryOperatorExpr","Equals","NotEquals","Identical","NotIdentical","Minus","Plus","Divide","Multiply","Modulo","And","parens","BitwiseAnd","Or","Lower","LowerEquals","Bigger","BiggerEquals","equals","TYPED_NULL_EXPR","CastExpr","ExpressionStatement","ReadVarExpr","builtin","visitReadVarExpr","WriteVarExpr","TypeofExpr","visitTypeofExpr","isConstant","WrappedNodeExpr","visitWrappedNodeExpr","visitWriteVarExpr","DeclareVarStmt","toDeclStmt","StmtModifier","Final","WriteKeyExpr","receiver","visitWriteKeyExpr","WritePropExpr","visitWritePropExpr","visitInvokeMethodExpr","visitInvokeFunctionExpr","classExpr","visitInstantiateExpr","LiteralExpr","visitLiteralExpr","ExternalExpr","moduleName","visitExternalExpr","visitConditionalExpr","NotExpr","visitNotExpr","AssertNotNull","visitAssertNotNullExpr","visitCastExpr","FnParam","FunctionExpr","statements","visitFunctionExpr","DeclareFunctionStmt","lhs","visitBinaryOperatorExpr","visitReadPropExpr","visitReadKeyExpr","LiteralArrayExpr","visitLiteralArrayExpr","LiteralMapEntry","quoted","LiteralMapExpr","visitLiteralMapExpr","CommaExpr","visitCommaExpr","This","Super","CatchError","CatchStack","NULL_EXPR","Statement","stmt","visitDeclareVarStmt","visitDeclareFunctionStmt","visitExpressionStmt","ReturnStatement","visitReturnStmt","AbstractClassPart","ClassMethod","ClassGetter","ClassStmt","fields","getters","constructorMethod","methods","visitDeclareClassStmt","IfStmt","visitIfStmt","JSDocCommentStmt","visitJSDocCommentStmt","out","tagToString","serializeTags","TryCatchStmt","bodyStmts","catchStmts","visitTryCatchStmt","ThrowStmt","visitThrowStmt","AstTransformer","ast","transformExpr","visitExpression","visitAllExpressions","visitAllStatements","entry","mapType","exprs","transformStmt","ctorMethod","stmts","visitStatement","RecursiveAstVisitor","visitType","findReadVarNames","_ReadVarVisitor","varNames","applySourceSpanToStatementIfNeeded","transformer","_ApplySourceSpanTransformer","applySourceSpanToExpressionIfNeeded","_clone","variable","importExpr","importType","typeModifiers","expressionType","literalArr","literalMap","ifStmt","thenClause","elseClause","literal","DASH_CASE_REGEXP","splitAtColon","defaultValues","_splitAt","character","characterIndex","visitValue","visitArray","STRING_MAP_PROTO","visitStringMap","visitPrimitive","visitOther","isDefined","noUndefined","ValueTransformer","SyncAsync","assertSync","syncAsyncValues","syntaxError","parseErrors","ERROR_SYNTAX_ERROR","ERROR_PARSE_ERRORS","escapeRegExp","utf8Encode","encoded","codePoint","low","CONSTANT_PREFIX","KEY_CONTEXT","FixupExpression","original","shared","ConstantPool","literals","literalFactories","injectorDefinitions","directiveDefinitions","componentDefinitions","pipeDefinitions","nextNameIndex","forceShared","keyOf","fixup","freshName","kind","definitions","definitionsOf","propertyNameOf","literal$1","argumentsForKey","_getLiteralFactory","expressionForKey","resultMap","literalFactory","literalFactoryArguments","resultExpressions","getConstLiteral","pureFunctionDeclaration","isVariable","uniqueName","KeyVisitor","invalid","quote","mapKey","CORE","Identifiers","createTokenForReference","reference","createTokenForExternalReference","resolveExternalReference","createModuleFactory","moduleProviderDef","RegisterModuleFactoryFn","inject","InjectableDef","RendererType2","ViewDefinition","setClassMetadata","StaticSymbol","filePath","StaticSymbolCache","cache","declarationFile","HOST_REG_EXP","sanitizeIdentifier","_anonymousTypeIndex","identifierName","compileIdentifier","identifierModuleUrl","viewClassName","compType","embeddedTemplateIndex","rendererTypeName","componentFactoryName","CompileSummaryKind","tokenName","tokenReference","CompileStylesheetMetadata","styleUrls","_normalizeArray","CompileTemplateMetadata","templateUrl","htmlAst","externalStylesheets","animations","interpolation","isInline","preserveWhitespaces","CompileDirectiveMetadata","isHost","guards","viewQueries","entryComponents","componentViewType","hostListeners","hostProperties","hostAttributes","inputsMap","bindConfig","outputsMap","summaryKind","toSummary","CompilePipeMetadata","CompileNgModuleMetadata","declaredDirectives","exportedDirectives","declaredPipes","exportedPipes","importedModules","exportedModules","transitiveModule","TransitiveCompileNgModuleMetadata","directivesSet","exportedDirectivesSet","pipesSet","exportedPipesSet","modulesSet","entryComponentsSet","ec","ProviderMeta","flat","flatItem","jitSourceUrl","templateSourceUrl","compMeta","templateMeta","CORE$1","Identifiers$1","NEW_METHOD","TRANSFORM_METHOD","PATCH_DEPS","namespaceHTML","namespaceMathML","namespaceSVG","elementStart","elementEnd","elementProperty","select","componentHostSyntheticProperty","componentHostSyntheticListener","elementAttribute","elementClassProp","elementContainerStart","elementContainerEnd","elementStyling","elementStylingMap","elementStyleProp","elementStylingApply","elementHostAttrs","elementHostStyling","elementHostStylingMap","elementHostStyleProp","elementHostClassProp","elementHostStylingApply","containerCreate","nextContext","templateCreate","textBinding","enableBindings","disableBindings","allocHostVars","getCurrentView","restoreView","interpolation1","interpolation2","interpolation3","interpolation4","interpolation5","interpolation6","interpolation7","interpolation8","interpolationV","pureFunction0","pureFunction1","pureFunction2","pureFunction3","pureFunction4","pureFunction5","pureFunction6","pureFunction7","pureFunction8","pureFunctionV","pipeBind1","pipeBind2","pipeBind3","pipeBind4","pipeBindV","propertyInterpolate","propertyInterpolate1","propertyInterpolate2","propertyInterpolate3","propertyInterpolate4","propertyInterpolate5","propertyInterpolate6","propertyInterpolate7","propertyInterpolate8","propertyInterpolateV","i18n","i18nAttributes","i18nExp","i18nStart","i18nEnd","i18nApply","i18nPostprocess","i18nLocalize","load","projectionDef","injectAttribute","directiveInject","templateRefExtractor","resolveWindow","resolveDocument","resolveBody","defineBase","BaseDef","defineComponent","setComponentScope","ComponentDefWithMeta","defineDirective","DirectiveDefWithMeta","InjectorDef","defineInjector","NgModuleDefWithMeta","defineNgModule","setNgModuleScope","PipeDefWithMeta","definePipe","queryRefresh","staticViewQuery","staticContentQuery","loadViewQuery","loadContentQuery","NgOnChangesFeature","InheritDefinitionFeature","ProvidersFeature","getFactoryOf","getInheritedFactory","sanitizeHtml","sanitizeStyle","defaultStyleSanitizer","sanitizeResourceUrl","sanitizeScript","sanitizeUrl","sanitizeUrlOrResourceUrl","Text","visitText","BoundText","visitBoundText","TextAttribute","valueSpan","visitTextAttribute","BoundAttribute","visitBoundAttribute","BoundEvent","phase","handlerSpan","targetOrPhase","visitBoundEvent","Element","startSourceSpan","endSourceSpan","visitElement","Template","templateAttrs","variables","visitTemplate","Content","visitContent","Variable","visitVariable","Reference","visitReference","Icu","visitIcu","visitAll","visit","newNode","Message","placeholderToMessage","meaning","description","sources","file","startLine","line","startCol","endLine","endCol","Text$1","Container","visitContainer","Icu$1","TagPlaceholder","startName","closeName","visitTagPlaceholder","Placeholder","visitPlaceholder","IcuPlaceholder","visitIcuPlaceholder","RecurseVisitor","icu","ph","digest","utf8","words32","endian","wordAt","stringToWords32","Endian","Big","h0","h1","h2","h3","h4","rol32","fk","temp","add32","hex","byteAt","byteStringToHexString","words32ToByteString","sha1","serializerVisitor","decimalDigest","_SerializerIgnoreIcuExpVisitor","hi","lo","fingerprint","him","lom","ah","al","bh","bl","l","add32to64","add64","rol64","decimal","toThePower","addBigInt","numberTimesBigInt","byteStringToDecString","computeMsgId","_SerializerVisitor","strCases","hash32","Little","mix","sub32","high","word","word32ToByteString","tmpSum","product","bToThePower","Serializer","SimplePlaceholderMapper","mapName","internalToPublic","publicToNextId","publicToInternal","visitPlaceholderName","nextId","_visitor","strAttrs","_serializeAttributes","strChildren","decl","doctype","rootTag","dtd","serialize","Declaration","unescapedAttrs","escapeXml","visitDeclaration","Doctype","visitDoctype","Tag","visitTag","Text$2","unescapedValue","CR","ws","_ESCAPED_CHARS","_MESSAGES_TAG","_MESSAGE_TAG","_PLACEHOLDER_TAG","_EXAMPLE_TAG","_SOURCE_TAG","_DOCTYPE","Xmb","messages","exampleVisitor","ExampleVisitor","_Visitor$1","rootNode","sourceTags","version","encoding","addDefaultExamples","digest$1","toPublicName","expressionPlaceholder","startTagAsText","startEx","startTagPh","closeTagAsText","closeEx","closeTagPh","interpolationAsText","exTag","icuCases","icuAsText","exText","mapLiteral","CLOSURE_TRANSLATION_PREFIX","TRANSLATION_PREFIX","GOOG_GET_MSG","NG_I18N_CLOSURE_MODE","I18N_MEANING_SEPARATOR","I18N_ID_SEPARATOR","I18N_ATTR","I18N_ATTR_PREFIX","I18N_ICU_VAR_PREFIX","I18N_ICU_MAPPING_PREFIX","I18N_PLACEHOLDER_SYMBOL","i18nTranslationToDeclStmt","variable$1","closureVar","docStatements","i18nMetaToDocStmt","thenStatements","googFnCall","callFn","toConstDecl","localizeFnCall","elseStatements","isI18nAttribute","isI18nRootNode","isSingleI18nIcu","metaFromI18nMessage","icuFromI18nMessage","wrapI18nPlaceholder","contextId","getSeqNumberGenerator","startsAt","placeholdersToParams","updatePlaceholderMap","assembleBoundTextPlaceholders","formatI18nPlaceholderName","chunks","postfix","raw","getTranslationConstPrefix","extra","UNSAFE_OBJECT_KEY_NAME_REGEXP","TEMPORARY_NAME","CONTEXT_NAME","RENDER_FLAGS","REFERENCE_PREFIX","IMPLICIT_REFERENCE","NON_BINDABLE_ATTR","temporaryAllocator","unsupported","invalid$1","asLiteral","conditionallyCreateMapObjectLiteral","keepDeclared","mapToExpression","trimTrailingNulls","getQueryPredicate","constantPool","DefinitionMap","getAttrsForDirectiveMatching","elOrTpl","attributesMap","R3FactoryDelegateType","compileFactoryFunction","typeForCtor","isDelegatedMetadata","ctorExpr","injectDependencies","injectFn","baseFactory","baseFactoryStmt","Exported","ctorExprFinal","retExpr","makeConditionalFactory","nonCtorExpr","ctorStmt","toStmt","makeErrorStmt","delegateType","Factory","delegateFactory","delegateFactoryStmt","delegateArgs","delegateDeps","Class","isExpressionFactoryMetadata","Token","skipSelf","compileInjectDependency","mapToMapExpression","typeWithParameters","numParams","ANIMATE_SYMBOL_PREFIX","prepareSyntheticPropertyName","prepareSyntheticListenerFunctionName","assertArrayOfStrings","UNUSABLE_INTERPOLATION_REGEXPS","assertInterpolationSymbols","regexp","InterpolationConfig","markers","DEFAULT_INTERPOLATION_CONFIG","JS_B64_PREFIX","SourceMapGenerator","sourcesContent","lines","lastCol0","hasMappings","col0","sourceUrl","sourceLine0","sourceCol0","currentLine","sourcesIndex","mappings","lastSourceIndex","lastSourceLine0","lastSourceCol0","segments","segment","segAsStr","toBase64VLQ","sourceRoot","b64","toBase64Digit","toBase64String","B64_DIGITS","_SINGLE_QUOTE_ESCAPE_STRING_RE","_LEGAL_IDENTIFIER_RE","_INDENT_WITH","CATCH_ERROR_VAR$1","CATCH_STACK_VAR$1","_EmittedLine","indent","partsLength","srcSpans","EmitterVisitorContext","_indent","_classes","_preambleLineCount","_lines","_currentLine","lastPart","print","newLine","lineIsEmpty","clazz","currentClass","sourceLines","_createIndent","genFilePath","startsAtLine","firstOffsetMapped","mapFirstOffsetIfNeeded","addSource","addMapping","addLine","lineIdx","spans","spanIdx","span","sourceLine","sourceCol","column","emittedLine","columnsLeft","partIndex","AbstractEmitterVisitor","_escapeDollarInStrings","println","hasElseCase","removeEmptyLastLine","incIndent","decIndent","multiline","lineWasEmpty","getBuiltinMethodName","varName","escapeIdentifier","opStr","visitAllObjects","expressions","separator","incrementedIndent","lineLength","escapeDollar","alwaysQuote","AbstractJsEmitterVisitor","pushClass","_visitClassConstructor","_visitClassGetter","_visitClassMethod","popClass","_visitParams","fnExpr","ConcatArray","SubscribeObservable","Bind","JitEvaluator","createSourceMaps","converter","JitEmitterVisitor","createRoot","createReturnStmt","evaluateCode","getArgs","createSourceMap","fnBody","toSource","fnArgNames","fnArgValues","argName","emptyFn","headerLines","toSourceMapGenerator","toJsComment","executeFunction","_evalArgNames","_evalArgValues","_evalExportedVars","resultVar","_emitReferenceToExternal","hasModifier","$EOF","$BSPACE","$TAB","$LF","$VTAB","$FF","$CR","$SPACE","$BANG","$DQ","$HASH","$$","$PERCENT","$AMPERSAND","$SQ","$LPAREN","$RPAREN","$STAR","$PLUS","$COMMA","$MINUS","$PERIOD","$SLASH","$COLON","$SEMICOLON","$LT","$EQ","$GT","$QUESTION","$0","$7","$9","$A","$E","$F","$X","$Z","$LBRACKET","$BACKSLASH","$RBRACKET","$CARET","$_","$a","$b","$e","$f","$n","$r","$t","$u","$v","$x","$z","$LBRACE","$BAR","$RBRACE","$NBSP","$BT","isWhitespace","isDigit","isAsciiLetter","isNewLine","isOctalDigit","ParseLocation","priorLine","maxChars","maxLines","startOffset","endOffset","ctxChars","ctxLines","after","ParseSourceFile","ParseSourceSpan","details","ParseErrorLevel","ParsedPropertyType","BindingForm","_Mode","ParseError","ERROR","getContext","contextualMessage","R3JitReflector","cmpMetadata","compileNgModule","containsForwardDecls","emitInline","additionalStatements","definitionMap","refsToArray","setNgModuleScopeCall","scopeMap","generateSetNgModuleScopeCall","tupleTypeOf","typeofExpr","refs","shouldForwardDeclare","compilePipeFromMetadata","definitionMapValues","typeArgumentCount","ParserError","errLocation","ctxLocation","ParseSpan","AST","Quote","uninterpretedExpression","visitQuote","EmptyExpr","ImplicitReceiver","visitImplicitReceiver","Chain","visitChain","Conditional","trueExp","falseExp","visitConditional","PropertyRead","visitPropertyRead","PropertyWrite","visitPropertyWrite","SafePropertyRead","visitSafePropertyRead","KeyedRead","visitKeyedRead","KeyedWrite","visitKeyedWrite","BindingPipe","visitPipe","LiteralPrimitive","visitLiteralPrimitive","LiteralArray","visitLiteralArray","LiteralMap","visitLiteralMap","Interpolation","strings","visitInterpolation","Binary","operation","visitBinary","PrefixNot","visitPrefixNot","NonNullAssert","visitNonNullAssert","MethodCall","visitMethodCall","SafeMethodCall","visitSafeMethodCall","FunctionCall","visitFunctionCall","ASTWithSource","TemplateBinding","keyIsVar","RecursiveAstVisitor$1","asts","AstTransformer$1","AstMemoryEfficientTransformer","modified","ParsedProperty","isLiteral","LITERAL_ATTR","isAnimation","ANIMATION","ParsedEvent","ParsedVariable","BoundElementProperty","EventHandlerVars","ConvertActionBindingResult","allowDefault","render3Stmts","statement","convertActionBinding","localResolver","implicitReceiver","bindingId","interpolationFunction","baseSourceSpan","DefaultLocalResolver","actionWithoutBuiltins","convertPropertyBindingBuiltins","createLiteralArrayConverter","createLiteralMapConverter","createPipeConverter","_AstToIrVisitor","actionStmts","flattenStatements","temporaryCount","temporaryDeclaration","prependTemporaryDecls","preventDefaultVar","returnExpr","convertStmtIntoExpression","createPreventDefaultVar","cast","notIdentical","converterFactory","_BuiltinAstConverter","convertBuiltins","ConvertPropertyBindingResult","currValExpr","convertPropertyBinding","expressionWithoutBuiltins","createCurrValueExpr","outputExpr","getStatementsFromVisitor","TrySimple","temporaryName","temporaryNumber","ensureExpressionMode","convertToStatementIfNeeded","_converterFactory","BuiltinFunctionCall","_localResolver","_implicitReceiver","_nodeMap","_resultMap","_currentTemporary","op","_visit","convertSourceSpan","ensureStatementMode","conditional","convertedArgs","fnResult","leftMostSafe","leftMostSafeNode","convertSafeAccess","getLocal","varExpr","_getLocal","callMethod","localExpr","guardedExpression","temporary","needsTemporary","allocateTemporary","isBlank","access","releaseTemporary","visitSome","tempNumber","moveBy","ShadowCss","strictStyling","cssText","hostSelector","commentsWithHash","_commentWithHashRe","_commentRe","stripComments","_insertDirectives","_scopeCssText","_insertPolyfillDirectivesInCssText","_insertPolyfillRulesInCssText","_cssContentNextSelectorRe","_cssContentRuleRe","scopeSelector","unscopedRules","_extractUnscopedRulesFromCssText","_insertPolyfillHostInCssText","_convertColonHost","_convertColonHostContext","_convertShadowDOMSelectors","_scopeSelectors","_cssContentUnscopedRuleRe","_convertColonRule","_cssColonHostRe","_colonHostPartReplacer","_cssColonHostContextRe","_colonHostContextPartReplacer","regExp","partReplacer","_polyfillHostNoCombinator","_polyfillHost","_shadowDOMSelectorsRe","ruleCallback","inputWithEscapedBlocks","inputParts","_curlyRe","resultParts","escapedBlocks","bracketCount","currentBlockParts","CLOSE_CURLY","BLOCK_PLACEHOLDER","OPEN_CURLY","StringWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedString","_ruleRe","contentPrefix","CssRule","processRules","_scopeSelector","strict","_shadowDeepSelectors","deepParts","shallowPart","otherParts","_selectorNeedsScoping","_applyStrictSelectorScope","_applySelectorScope","applyScope","_makeScopeMatcher","_selectorReSuffix","_applySimpleSelectorScope","_polyfillHostRe","replaceBy","_polyfillHostNoCombinatorRe","hnc","colon","_scopeSelectorPart","scopedP","safeContent","SafeSelector","scopedSelector","sep","shouldScope","restore","_colonHostContextRe","_polyfillHostContext","_colonHostRe","keep","_content","pseudo","_parenSuffix","StylesCompileDependency","CompiledStylesheet","outputCtx","stylesVar","isShimmed","StyleCompiler","_urlResolver","_shadowCss","_compileStyles","needsStyleShim","stylesheet","shim","isComponentStylesheet","styleExpressions","plainStyle","_shimIfNeeded","styleUrl","exprIndex","getStylesVarName","Const","shimCssText","Text$3","Expansion","switchValue","switchValueSourceSpan","visitExpansion","ExpansionCase","valueSourceSpan","expSourceSpan","visitExpansionCase","visitAttribute","Element$1","Comment","visitComment","visitAll$1","astResult","TokenType","TokenError","errorMsg","tokenType","TokenizeResult","_CR_OR_CRLF_REGEXP","_unexpectedCharacterErrorMsg","charCode","_unknownEntityErrorMsg","entitySrc","_ControlFlowError","_Tokenizer","_file","_getTagDefinition","_currentTokenStart","_currentTokenType","_expansionCaseStack","_inInterpolation","_tokenizeIcu","tokenizeExpansionForms","_interpolationConfig","interpolationConfig","_leadingTriviaCodePoints","leadingTriviaChars","codePointAt","range","endPos","startPos","_cursor","EscapedCharacterCursor","PlainCharacterCursor","peek","_attemptCharCode","_consumeCdata","_consumeComment","_consumeDocType","_consumeTagClose","_consumeTagOpen","_tokenizeExpansionForm","_consumeText","_beginToken","EOF","_endToken","srcTokens","dstTokens","lastDstToken","TEXT","mergeTextTokens","isExpansionFormStart","_consumeExpansionFormStart","_isInExpansionForm","_consumeExpansionCaseStart","_isInExpansionCase","_consumeExpansionCaseEnd","_consumeExpansionFormEnd","getSpan","CursorError","_createError","advance","code1","code2","toUpperCaseCharCode","charsLeft","initialPosition","_attemptCharCodeCaseInsensitive","_attemptStr","_attemptCharCodeUntilFn","char","decodeEntities","_decodeEntity","fromCodePoint","nameStart","isNamedEntityEnd","getChars","isHex","codeStart","isDigitEntityEnd","endMarkerPredicate","tagCloseStart","foundEndMarker","_readChar","_processCarriageReturns","COMMENT_START","_requireCharCode","_consumeRawText","COMMENT_END","_requireStr","CDATA_START","CDATA_END","DOC_TYPE","contentStart","_attemptUntilChar","nameOrPrefixStart","_requireCharCodeUntilFn","isNameEnd","openTagToken","tokensBeforeTagOpen","innerStart","_consumeTagOpenStart","isNotWhitespace","_consumeAttributeName","_consumeAttributeValue","_consumeTagOpenEnd","contentTokenType","_consumeRawTextWithTagClose","_attemptStrCaseInsensitive","TAG_CLOSE","TAG_OPEN_START","_consumePrefixAndName","attrNameStart","ATTR_NAME","prefixAndName","ATTR_QUOTE","quoteChar","ATTR_VALUE","valueStart","TAG_OPEN_END_VOID","TAG_OPEN_END","EXPANSION_FORM_START","_readUntil","EXPANSION_CASE_VALUE","EXPANSION_CASE_EXP_START","EXPANSION_CASE_EXP_END","EXPANSION_FORM_END","_isTextEnd","isInterpolation","isAsciiHexDigit","fileOrCursor","advanceState","updatePeek","leadingTriviaCodePoints","currentChar","internalState","processEscapeSequence","digitStart","decodeHexDigits","octal","TreeError","ParseTreeResult","Parser","getTagDefinition","tokensAndErrors","tokenize","treeAndErrors","_TreeBuilder","build","_index","_rootNodes","_errors","_elementStack","_advance","_peek","_consumeStartTag","_consumeEndTag","_closeVoidElement","_consumeExpansion","startToken","_advanceIf","_addToParent","expCase","_parseExpansionCase","_collectExpansionExpTokens","parsedExp","expansionFormStack","lastOnStack","_getParentElement","startTagToken","_consumeAttr","_getElementFullName","selfClosing","tagDef","_pushElement","_popElement","isClosedByChild","endTagToken","stackIndex","valueToken","HtmlParser","PRESERVE_WS_ATTR_NAME","SKIP_WS_TRIM_TAGS","WS_CHARS","NO_WS_REGEXP","WS_REPLACE_REGEXP","replaceNgsp","WhitespaceVisitor","expansion","expansionCase","removeWhitespaces","htmlAstWithErrors","PLURAL_CASES","expandNodes","expander","_Expander","ExpansionResult","isExpanded","expanded","ExpansionError","expansionResult","switchAttr","_expandPluralForm","_expandDefaultForm","TextAst","BoundTextAst","AttrAst","visitAttr","BoundPropertyMapping","4","1","2","0","3","BoundElementPropertyAst","visitElementProperty","BoundEventAst","calcFullName","visitEvent","ReferenceAst","originalValue","VariableAst","ElementAst","hasViewContainer","queryMatches","EmbeddedTemplateAst","visitEmbeddedTemplate","BoundDirectivePropertyAst","directiveName","visitDirectiveProperty","DirectiveAst","hostEvents","contentQueryStartId","visitDirective","ProviderAst","eager","providerType","lifecycleHooks","isModule","ProviderAstType","NgContentAst","visitNgContent","templateVisitAll","ProviderError","ProviderViewContext","viewQueryId","_addQueryToTokenMap","_getViewQueries","ProviderElementContext","viewContext","_isViewRoot","_directiveAsts","isTemplate","_sourceSpan","_transformedProviders","_seenProviders","_queriedTokens","transformedHasViewContainer","_attrs","attrAst","directivesMeta","directiveAst","_allProviders","targetErrors","providersByToken","_resolveProviders","PublicService","PrivateService","_resolveProvidersFromDirectives","_contentQueries","contentQueryId","_getContentQueries","_addQueryReadsTo","templateRefId","refAst","defaultQueryValue","_getOrCreateLocalProvider","transformProviders","lazyProviders","eagerProviders","transformedDirectiveAsts","sortedProviderTypes","sortedDirectives","dir1","dir2","allMatches","queryReadTokens","_getQueriesFor","queryValue","tokenRef","currentEl","distance","requestingProviderType","Builtin","transformedProviderAst","transformedProviders","transformedUseValue","transformedUseExisting","transformedDeps","existingDiDep","_getDependency","diDeps","_transformProvider","_transformProviderAst","isAttribute","isValue","currElement","currEager","isSkipSelf","_getLocalDependency","isSelf","isOptional","prevElement","NgModuleProviderAnalyzer","errorString","requestorSourceSpan","targetProvidersByToken","isUseValue","StyleWithImports","isStyleUrlResolvable","schemeMatch","URL_WITH_SCHEMA_REGEXP","CSS_IMPORT_REGEXP","CSS_STRIPPABLE_COMMENT_REGEXP","PROPERTY_PARTS_SEPARATOR","ATTRIBUTE_PREFIX","CLASS_PREFIX","STYLE_PREFIX","ANIMATE_PROP_PREFIX","BindingParser","_exprParser","_schemaRegistry","pipesByName","_usedPipes","dirMeta","boundProps","parsePropertyBinding","_reportError","elementSelector","createBoundHostProperties","createBoundElementProperty","targetEvents","parseEvent","sourceInfo","parseInterpolation","_reportExpressionParserErrors","_checkPipes","wrapLiteralPrimitive","tplKey","tplValue","targetMatchableAttrs","targetProps","targetVars","_parseTemplateBindings","_parsePropertyAst","parseLiteralAttr","bindingsResult","parseTemplateBindings","templateBindings","warnings","warning","WARNING","isAnimationLabel","_parseAnimation","_parseBinding","DEFAULT","isHostBinding","parseSimpleBinding","parseBinding","boundProp","skipValidation","mapPropertyName","boundPropertyName","securityContexts","_validatePropertyOrAttributeName","calcPossibleSecurityContexts","nsSeparatorIdx","mappedPropName","getMappedPropName","_parseAnimationEvent","_parseRegularEvent","_parseAction","parseAction","collector","PipeCollector","pipeMeta","isAttr","report","validateAttribute","validateProperty","ctxs","elementNames","allKnownElementNames","notElementNames","isElementSelector","possibleElementNames","NG_CONTENT_SELECT_ATTR","LINK_ELEMENT","LINK_STYLE_REL_ATTR","LINK_STYLE_HREF_ATTR","LINK_STYLE_REL_VALUE","STYLE_ELEMENT","SCRIPT_ELEMENT","NG_NON_BINDABLE_ATTR","NG_PROJECT_AS","preparseElement","selectAttr","hrefAttr","relAttr","nonBindable","projectAs","lcAttrName","normalizeNgContentSelect","PreparsedElementType","OTHER","NG_CONTENT","STYLESHEET","PreparsedElement","BIND_NAME_REGEXP","KW_BIND_IDX","KW_LET_IDX","KW_REF_IDX","KW_ON_IDX","KW_BINDON_IDX","KW_AT_IDX","IDENT_KW_IDX","IDENT_BANANA_BOX_IDX","IDENT_PROPERTY_IDX","IDENT_EVENT_IDX","TEMPLATE_ATTR_PREFIX","CLASS_ATTR","_TEXT_CSS_SELECTOR","TEXT_CSS_SELECTOR","TemplateParseError","TemplateParseResult","templateAst","usedPipes","TemplateParser","_reflector","_htmlParser","transforms","expressionParser","tryParse","htmlParseResult","getInterpolationConfig","tryParseHtml","expandHtml","uniqDirectives","removeSummaryDuplicates","uniqPipes","providerViewContext","bindingParser","parseVisitor","TemplateParseVisitor","EMPTY_ELEMENT_CONTEXT","getUsedPipes","_assertNoReferenceDuplicationOnTemplate","forced","expandedHtmlAst","existingReferences","_bindingParser","_schemas","_targetErrors","selectorMatcher","directivesIndex","ngContentCount","findNgContentIndex","valueNoNgsp","queryStartIndex","elName","preparsedElement","matchableAttrs","elementOrDirectiveProps","elementOrDirectiveRefs","elementVars","templateElementOrDirectiveProps","templateMatchableAttrs","templateElementVars","hasInlineTemplates","_parseAttr","templateValue","templateKey","fromParsedVariable","normalizedName","_normalizeAttributeName","hasTemplateBinding","parsedVariables","parseInlineTemplateBinding","elementCssSelector","createElementCssSelector","directiveMetas","matchElement","_parseDirectives","boundDirectivePropNames","directiveAsts","_createDirectiveAsts","elementProps","_createElementPropertyAsts","isViewRoot","providerContext","NON_BINDABLE_VISITOR","ElementContext","afterElement","projectionSelector","parsedElement","_isEmptyTextNode","_assertAllEventsPublishedByDirectives","_assertNoComponentsNorElementBindingsOnTemplate","_assertElementExists","_assertOnlyOneComponent","templateQueryStartIndex","templateSelector","templateBoundDirectivePropNames","templateDirectiveAsts","templateElementProps","templateProviderContext","targetRefs","srcSpan","boundEvents","bindParts","_parseVariable","_parseReference","_parseAssignmentEvent","parsePropertyInterpolation","fromParsedEvent","ElementOrDirectiveRef","elementSourceSpan","targetReferences","targetBoundDirectivePropNames","matchedReferences","directiveProperties","createDirectiveHostPropertyAsts","fromBoundProperty","_checkPropertiesInSchema","parsedEvents","createDirectiveHostEventAsts","_createDirectivePropertyAsts","elOrDirRef","isReferenceToDirective","refToken","targetBoundDirectiveProps","boundPropsByName","prevValue","dirProp","elProp","isEmptyExpression","boundElementProps","_findComponentDirectives","componentTypeNames","_findComponentDirectiveNames","hasElement","allDirectiveEvents","_ngContentIndexMatcher","_wildcardNgContentIndex","wildcardNgContentIndex","ngContentIndices","elNameNoNs","attrNameNoNs","attrNameAndValues","stripUnnecessaryQuotes","qS","tempValue","IMPORTANT_FLAG","StylingBuilder","_elementIndexExpr","_directiveExpr","_hasInitialValues","hasBindings","_classMapInput","_styleMapInput","_singleStyleInputs","_singleClassInputs","_lastStylingInput","_stylesIndex","_classesIndex","_initialStyleValues","_initialClassValues","_useDefaultSanitizer","registerInputBasedOnName","registerStyleInput","registerClassInput","nameToMatch","isStyle","isMapBased","hasOverrideFlag","bindingUnit","parseProperty","registerIntoMap","parenDepth","propStart","valueHasQuotes","styleVal","allocateBindingSlots","buildParams","populateInitialStylingAttrs","getConstantLiteralFromArray","styleBindingProps","expectedNumberOfArgs","addParam","valueConverter","stylingInput","totalBindingSlotsRequired","mapBasedClassValue","mapBasedStyleValue","convertFn","mapIndex","allowUnits","_buildSingleInputs","instructions","mapInstruction","buildElementStylingMapInstruction","_buildStyleInputs","_buildClassInputs","_buildApplyFn","argNumber","totalExpectedArgs","overrideIndex","unitIndex","TokenType$1","KEYWORDS","Lexer","scanner","_Scanner","scanToken","Token$1","numValue","Character","Operator","Identifier","Keyword","newCharacterToken","newOperatorToken","isIdentifierStart","scanIdentifier","scanNumber","scanCharacter","scanString","scanOperator","scanComplexOperator","one","twoCode","two","threeCode","three","isIdentifierPart","newIdentifierToken","simple","isExponentSign","unescapedCode","compiler_unescape","newErrorToken","SplitInterpolation","TemplateBindingParseResult","_createInterpolateRegExp","Parser$1","_lexer","_checkNoInterpolation","sourceToLex","_stripComments","_ParseAST","parseChain","_parseBindingAst","SimpleExpressionChecker","_parseQuote","prefixSeparatorIndex","isIdentifier","splitInterpolation","expressionText","_findInterpolationErrorColumn","_commentStart","outerQuote","nextChar","partInErrIdx","inputLength","rparensExpected","rbracketsExpected","rbracesExpected","inputIndex","isCharacter","isKeywordLet","isKeywordAs","optionalCharacter","isOperator","optionalOperator","isKeyword","isString","parsePipe","parseExpression","expectIdentifierOrKeyword","parseConditional","parseLogicalOr","yes","no","parseLogicalAnd","parseEquality","parseRelational","parseAdditive","parseMultiplicative","parsePrefix","parseCallChain","parsePrimary","parseAccessMemberOrMethodCall","expectCharacter","parseCallArguments","isKeywordNull","isKeywordUndefined","isKeywordTrue","isKeywordFalse","isKeywordThis","elements","parseExpressionList","parseLiteralMap","isNumber","toNumber","literalValue","terminator","expectIdentifierOrKeywordOrString","isSafe","positionals","operatorFound","firstBinding","rawKey","isVar","peekKeywordLet","expectTemplateBindingKey","peekKeywordAs","letStart","letName","locationText","skip","isError","_SECURITY_SCHEMA","SECURITY_SCHEMA","registerContext","specs","spec","ElementSchemaRegistry","BOOLEAN","NUMBER","STRING","OBJECT","SCHEMA","_ATTR_TO_PROP","DomElementSchemaRegistry","_schema","encodedType","strType","strProperties","typeNames","superName","schemaMetas","schema","camelCaseProp","userProvidedProp","strVal","_isPixelDimensionStyle","valAndSuffixMatch","BIND_NAME_REGEXP$1","KW_BIND_IDX$1","KW_LET_IDX$1","KW_REF_IDX$1","KW_ON_IDX$1","KW_BINDON_IDX$1","KW_AT_IDX$1","IDENT_KW_IDX$1","IDENT_BANANA_BOX_IDX$1","IDENT_PROPERTY_IDX$1","IDENT_EVENT_IDX$1","TEMPLATE_ATTR_PREFIX$1","htmlAstToRender3Ast","htmlNodes","HtmlAstToIvyAst","ivyNodes","allErrors","contents","parsedProperties","i18nAttrsMeta","templateParsedProperties","templateVariables","elementHasInlineTemplate","normalizeAttributeName","isTemplateBinding","reportError","parseAttribute","NON_BINDABLE_VISITOR$1","isEmptyTextNode","isCommentNode","extractAttributes","bound","hoistedAttrs","_visitTextWithInterpolation","i18nPropsMeta","bep","fromBoundElementProperty","matchableAttributes","parseVariable","parseReference","addEvents","parseAssignmentEvent","TagType","I18nContext","templateIndex","isEmitted","_unresolvedCtxCount","_registry","getUniqueId","isResolved","serializePlaceholderValue","appendTag","TEMPLATE","ELEMENT","findTemplateFn","tmplIdx","findIndex","isCloseTag","wrapTag","TAG_TO_PLACEHOLDER_NAMES","BR","EM","H1","H2","H3","H4","H5","H6","HR","LI","LINK","OL","P","Q","S","SMALL","SUB","SUP","TBODY","TD","TFOOT","TH","THEAD","TR","TT","U","UL","PlaceholderRegistry","_placeHolderNameCounts","_signatureToName","_hashTag","upperTag","baseName","_generateUniqueName","_hashClosingTag","upperName","_expParser","createI18nMessageFactory","_I18nVisitor","visitNodeFn","toI18nMessage","_expressionParser","_isIcu","_icuDepth","_placeholderRegistry","_placeholderToContent","_placeholderToMessage","_visitNodeFn","i18nodes","startPhName","getStartTagPlaceholderName","closePhName","getCloseTagPlaceholderName","_visitNode","i18nIcuCases","i18nIcu","caze","expPh","getUniquePlaceholder","phName","getPlaceholderName","sDelimiter","eDelimiter","_CUSTOM_PH_EXP","lastStringIdx","setI18nRefs","I18nMetaVisitor","keepI18nAttrs","_createI18nMessage","parsed","idIndex","descIndex","meaningAndDesc","parseI18nMeta","hasI18nAttrs","attrsMeta","_generateI18nMessage","formatPh","serializerVisitor$1","DEFAULT_NG_CONTENT_SELECTOR","NG_CONTENT_SELECT_ATTR$1","NG_PROJECT_AS_ATTR_NAME","GLOBAL_TARGET_RESOLVERS","LEADING_TRIVIA_CHARS","renderFlagCheckIfStmt","bitwiseAnd","prepareEventListenerParameters","eventAst","bindingContext","handlerName","bindingExpr","restoreViewStatement","variableDeclarations","prepareSyntheticListenerName","fnName","handlerFn","TemplateDefinitionBuilder","parentBindingScope","contextName","i18nContext","directiveMatcher","pipeTypeByName","_namespace","relativeContextFilePath","i18nUseExternalIds","_dataIndex","_bindingContext","_prefixCode","_creationCodeFns","_updateCodeFns","_lastNodeIndexWithFlush","_tempVariables","_nestedTemplateFns","_unsupported","_pureFunctionSlots","_bindingSlots","_hasNgContent","_ngContentSelectors","_ngContentSelectorsOffset","_bindingScope","nestedScope","fileBasedI18nSuffix","_valueConverter","ValueConverter","allocateDataSlot","numSlots","allocatePureFunctionSlots","slot","pipeType","creationInstruction","scopedName","freshReferenceName","retrievalLevel","relativeLevel","bindingLevel","sharedCtxVar","getSharedContextName","generateNextContextExpr","ngContentSelectorsOffset","registerContextVariables","initI18nContext","selfClosingI18nInstruction","hasTextChildrenOnly","updatePipeSlotOffsets","buildTemplateFn","r3Selectors","creationStatements","updateStatements","creationVariables","viewSnapshotStatements","updateVariables","creationBlock","updateBlock","transformFn","i18nGenerateClosureVar","_params","getTranslationDeclStmts","getSerializedI18nContent","appendBinding","label","acc","lastIdx","assembleI18nBoundString","i18nAppendBindings","messageId","uniqueSuffix","getSerializedPlaceholders","icuMapping","i18nTranslate","forkChildContext","reconcileChildContext","i18nUpdateRef","updateInstruction","getNgProjectAsLiteral","namespaceKey","nsInstruction","stylingBuilder","isNonBindableMode","isI18nRootElement","i18nAttrs","outputAttrs","isNgContainer$1","registerStyleAttr","registerClassAttr","matchDirectives","allOtherInputs","registerBoundInput","getAttributeNameLiterals","prepareNonRenderAttrs","toAttrsParam","prepareRefsParameter","wasInNamespace","currentNamespace","getNamespaceInstruction","addNamespaceInstruction","implicit","appendElement","createSelfClosingInstruction","hasChildren","createSelfClosingI18nInstruction","i18nAttrArgs","converted","convertExpressionBinding","processStylingInstruction","buildElementStylingInstruction","outputAst","prepareListenerParameter","buildUpdateLevelInstructions","emptyValueBindInstruction","inputType","hasValue","attrNamespace","isAttributeBinding","sanitizationRef","resolveSanitizationFn","namespaceLiteral","getInterpolationArgsLength","getPropertyInterpolationExpression","getUpdateInstructionArguments","appendTemplate","attrsExprs","templateVisitor","templateFunctionExpr","buildTemplateFunction","getConstCount","getVarCount","templatePropertyBindings","appendBoundText","initWasInvoked","i18nBindProps","appendIcu","paramsOrFn","prepend","createMode","paramsFn","originalSlots","valExpr","skipBindFn","interpolationFn","convertedPropertyBinding","contextExpression","contextVariableExpression","expressionWithArgumentsToExtract","convertUpdateArguments","createCssSelector","staticType","alreadySeen","attrExprs","addAttrExpr","refsParam","variableName","nextContextStmt","refExpr","bindingFnName","allocateSlot","_pipeBindExprs","slotPseudoLocal","pureFunctionSlot","isVarLength","pipeBindingIdentifiers","pipeBindingCallInfo","pipeBindExpr","bindingSlots","getLiteralFactory","pureFunctionIdentifiers","relativeLevelDiff","allocateSlots","startSlot","pureFunctionCallInfo","attributeNamespace","nameLiteral","SHARED_CONTEXT_KEY","BindingScope","referenceNameIndex","restoreViewVariable","ROOT_SCOPE","_ROOT_SCOPE","declareLocalCallback","declare","localRef","maybeGenerateSharedContextVar","maybeRestoreView","getComponentProperty","newScope","generateSharedContextVar","sharedCtxObj","componentValue","localRefLookup","isListenerScope","getCurrentViewInstruction","currentContextLevel","levelDiff","currStmts","parsedR3Selector","makeBindingParser","isTextNode","ATTR_REGEX","baseDirectiveFields","createContentQueriesFunction","createViewQueriesFunction","hostVarsCount","getStylingPrefix","elVarExp","contextVarExp","styleBuilder","styleAttr","specialAttributes","staticAttributesAndValues","createStatements","totalHostVarsCount","hostBindingSourceSpan","typeSourceSpan","directiveSummary","metadataAsSummary","getValueConverter","hostVarsCountFn","originalVarsCount","eventBindings","createHostListeners","stylingInputWasSet","bindingFn","attrMatches","getBindingNameAndInstruction","sanitizerFn","isPropertyInstruction","instructionParams","hostAttrs","convertAttributesToExpressions","hostInstruction","buildHostAttrsInstruction","createStylingStmt","elementStylingInstruction","hostBindingsFnName","createHostBindingsFunction","addFeatures","usesInheritance","lifecycle","usesOnChanges","compileDirectiveFromMetadata","toLiteralMap","createTypeForDef","compileComponentFromMetadata","firstSelector","selectorAttributes","getAttrs","templateTypeName","directivesUsed","pipesUsed","templateBuilder","templateFunctionExpression","getNgContentSelectors","directivesExpr","wrapDirectivesAndPipesInClosure","pipesExpr","shadowCss","compileStyles","prepareQueryParams","tempAllocator","queryInstruction","static","getQueryList","refresh","updateDirective","contentQueriesFnName","stringMapAsType","stringArrayAsType","typeBase","selectorForType","q","queryDefinition","viewQueryFnName","HOST_REG_EXP$1","ResourceLoader","CompilerFacadeImpl","jitEvaluator","elementSchemaRegistry","angularCoreEnv","sourceMapUrl","facade","convertR3DependencyMetadataArray","jitExpression","factoryMeta","ctorDeps","useClassOnSelf","userDeps","compileInjectable","computeProvidedIn","wrapExpression","USE_CLASS","USE_FACTORY","USE_VALUE","USE_EXISTING","compileInjector","wrapReference","convertDirectiveFacadeToMetadata","preStatements","parseResult","parseTemplate","getDefaultComponentElementName","vx","compileBaseDefFromMetadata","convertToR3QueryMetadata","typeName","sourceFile","r3JitTypeSourceSpan","evaluateStatements","inputsFromMetadata","parseInputOutputs","outputsFromMetadata","inputsFromType","outputsFromType","field","ann","isOutput","extractHostBindings","convertR3DependencyMetadata","tokenExpr","facades","parseHostBindings","summary","verifyHostBindings","isHostListener","piece","splits","CompilerConfig","defaultEncapsulation","useJit","jitDevMode","missingTranslation","strictInjectionParameters","preserveWhitespacesDefault","preserveWhitespacesOption","defaultSetting","DirectiveNormalizer","_resourceLoader","_resourceLoaderCache","normalizedDirective","prenormData","_preParseTemplate","preparsedTemplate","_normalizeTemplateMetadata","prenomData","_fetch","_preparseLoadedTemplate","templateAbsUrl","rootNodesAndErrors","templateMetadataStyles","_normalizeStylesheet","TemplatePreparseVisitor","templateStyles","inlineStyleUrls","_loadMissingExternalStylesheets","_normalizeLoadedTemplateMetadata","stylesheets","_inlineStyles","targetStyles","loadedStylesheets","loadedStyle","allStyleUrls","allStyles","styleWithImports","resolver","foundUrls","modifiedCssText","extractStyleUrls","ngNonBindableStackCount","QUERY_METADATA_IDENTIFIERS","DirectiveResolver","typeMetadata","isDirectiveMetadata","throwIfNotFound","findLast","propertyMetadata","_mergeWithPropertyMetadata","dm","directiveType","hostBinding","startWith","hostListener","_merge","names","publicNames","reversedResult","_extractPublicName","mergedInputs","_dedupeBindings","mergedOutputs","mergedHost","mergedQueries","moduleId","I18nError","_I18N_ATTR","_I18N_ATTR_PREFIX","_I18N_COMMENT_PREFIX_REGEXP","MEANING_SEPARATOR","ID_SEPARATOR","i18nCommentsWarned","ExtractionResult","_VisitorMode","_Visitor$2","_implicitTags","_implicitAttrs","Extract","_inI18nBlock","_messages","translations","Merge","_translations","translatedNode","_mode","_mayBeAddBlockChildren","wasInIcu","_inIcu","_isInTranslatableSection","_addMessage","isOpening","isClosing","_isClosingComment","_inI18nNode","_depth","_blockStartDepth","_closeTranslatableSection","_blockChildren","_blockMeaningAndDesc","_translateMessage","_openTranslatableSection","wasInI18nNode","wasInImplicitNode","_inImplicitNode","translatedChildNodes","i18nAttr","i18nMeta","isImplicit","isTopLevelImplicit","isTranslatable","visited","_visitAttributesOf","translatedAttrs","_translateAttributes","_msgCountAtSectionStart","explicitAttrNameToValue","implicitAttrNames","msgMeta","_parseMessageMeta","i18nParsedMessageMeta","translatedAttributes","directChildren","_TAG_DEFINITION","getXmlTagDefinition","XmlParser","_VERSION","_XMLNS","_DEFAULT_SOURCE_LANG","_PLACEHOLDER_TAG$1","_MARKER_TAG","_FILE_TAG","_SOURCE_TAG$1","_SEGMENT_SOURCE_TAG","_TARGET_TAG","_UNIT_TAG","_CONTEXT_GROUP_TAG","_CONTEXT_TAG","Xliff","_WriteVisitor","transUnits","contextTags","contextGroupTag","purpose","context-type","transUnit","datatype","source-language","xliff","xliffParser","XliffParser","msgIdToHtml","i18nNodesByMsgId","XmlToI18n","msgId","i18nNodes","convert","ctype","getCtypeForTag","equiv-text","equivText","_unitMlString","_msgIdToHtml","idAttr","_addError","innerTextStart","innerTextEnd","innerText","localeAttr","xmlIcu","nameAttr","caseMap","_VERSION$1","_XMLNS$1","_DEFAULT_SOURCE_LANG$1","_PLACEHOLDER_TAG$2","_PLACEHOLDER_SPANNING_TAG","_MARKER_TAG$1","_XLIFF_TAG","_SOURCE_TAG$2","_TARGET_TAG$1","_UNIT_TAG$1","Xliff2","_WriteVisitor$1","units","notes","category","srcLang","xliff2Parser","Xliff2Parser","XmlToI18n$1","getTypeForTag","_nextPlaceholderId","disp","tagPc","equivStart","equivEnd","dispStart","dispEnd","idStr","versionAttr","startAttr","endAttr","startId","endId","_TRANSLATIONS_TAG","_TRANSLATION_TAG","_PLACEHOLDER_TAG$3","Xtb","xtbParser","XtbParser","XmlToI18n$2","valueFn","enumerable","createLazyProperty","xtb","_bundleDepth","langAttr","TranslationBundle","_i18nNodesByMsgId","mapperFactory","missingTranslationStrategy","_i18nToHtml","I18nToHtmlVisitor","serializer","createNameMapper","srcMsg","_digest","_mapperFactory","_missingTranslationStrategy","_contextStack","_convertToText","_srcMsg","_mapper","mapper","toInternalName","I18NHtmlParser","translationsFormat","createSerializer","_translationBundle","implicitTags","implicitAttrs","mergeTranslations","QUOTED_KEYS","convertValueToOutputAst","_ValueOutputAstTransformer","quotedSet","ngfactoryFilePath","forceSourceFile","urlWithSuffix","splitTypescriptSuffix","normalizeGenFileSuffix","lastDot","srcFileSuffix","LifecycleHooks","LIFECYCLE_HOOKS_VALUES","OnInit","OnDestroy","DoCheck","OnChanges","AfterContentInit","AfterContentChecked","AfterViewInit","AfterViewChecked","getHookName","ERROR_COMPONENT_TYPE","CompileMetadataResolver","_ngModuleResolver","_directiveResolver","_pipeResolver","_summaryResolver","_directiveNormalizer","_staticSymbolCache","_errorCollector","_nonNormalizedDirectiveCache","_directiveCache","_summaryCache","_pipeCache","_ngModuleCache","_ngModuleOfTypes","_shallowModuleCache","clearCacheFor","clearCache","baseType","proxyClass","setDelegate","dirType","_createProxyClass","getGeneratedClass","getHostComponentViewClass","typeSummary","resolveSummary","hostViewType","hostType","getHostComponentType","getMatchingElementTemplate","isSync","getNonNormalizedDirectiveMetadata","createDirectiveMetadata","templateMetadata","normalizedDirMeta","initComponentFactory","normalizeTemplate","componentModuleUrl","componentStillLoadingError","cacheEntry","nonNormalizedTemplateMetadata","changeDetectionStrategy","entryComponentMetadata","_getProvidersMetadata","stringifyType","flattenAndDedupeArray","_getEntryComponentMetadata","_getQueriesMetadata","_getTypeMetadata","getComponentViewClass","getRendererType","getComponentFactory","dirSummary","_loadSummary","isDirective","isPipe","isNgModule","alreadyCollecting","moduleSummary","moduleMeta","getNgModuleMetadata","loading","loadDirectiveMetadata","_loadPipeMetadata","compileMeta","ngModuleMeta","shallowAnnotations","rawExports","rawImports","rawProviders","exportedNonModuleIdentifiers","importedType","importedModuleType","isValidType","moduleWithProviders","_checkSelfImport","_getTypeDescriptor","importedModuleSummary","getNgModuleSummary","exportedType","exportedModuleSummary","_getIdentifierMetadata","_getTransitiveNgModuleMetadata","declaredType","declaredIdentifier","addDirective","_addTypeToModule","addPipe","exportedId","addExportedDirective","addExportedPipe","addEntryComponent","addProvider","addModule","oldModule","modulesByToken","modSummary","mod","addedTokens","prevModules","tryAnnotations","throwOnUnknownDeps","_getDependenciesMetadata","pipeSummary","pipeAnnotation","hasUnknownDeps","dependenciesMetadata","paramEntry","_getTokenMetadata","depsTokens","compileToken","targetEntryComponents","debugInfo","compileProviders","providerIdx","providerMeta","_validateProvider","providersInfo","soFar","seenProvider","seenProviderIdx","_getEntryComponentsFromProvider","getProviderMetadata","collectedIdentifiers","targetIdentifiers","_CompileValueConverter","compileDeps","compileTypeMetadata","compileFactoryMetadata","_getInjectableTypeMetadata","_getFactoryMetadata","_getQueryMetadata","_queryVarBindings","otherType","tree","flattenArray","providerAst","lifecycleHook","lifecycleHookToNodeFlag","providerExpr","providerFlags","depsExpr","allDepDefs","allParams","providerIndex","depExprs","convertDeps","instantiate","depIndex","paramName","multiProviderDef","singleProviderDef","tokenMeta","nodeFlag","componentFactoryResolverProviderDef","entryComponentFactories","entryComponent","classMeta","NgModuleCompileResult","ngModuleFactoryVar","LOG_VAR","NgModuleCompiler","sourceFileName","providerParser","providerDefs","ngModuleDefFactory","_createNgModuleFactory","registerFactoryStmt","ngModuleReference","ngModuleFactoryStmt","NgModuleResolver","_TsEmitterVisitor","referenceFilter","importFilter","typeExpression","importsWithPrefixes","reexports","defaultType","_visitIdentifier","as","_printColonType","_visitClassField","Private","Static","initializer","PipeResolver","metas","DYNAMIC_VAR_NAME","CLASS_ATTR$1","STYLE_ATTR","IMPLICIT_TEMPLATE_VAR","ViewCompileResult","viewClassVar","rendererTypeVar","ViewCompiler","embeddedViewCount","staticQueryIds","findStaticQueryIds","dynamicQueryIds","childData","renderComponentVarName","customRenderData","renderComponentVar","viewBuilderFactory","embeddedViewIndex","ViewBuilder$1","viewName","LOG_VAR$1","VIEW_VAR","CHECK_VAR","COMP_VAR","EVENT_NAME_VAR","ALLOW_DEFAULT_VAR","purePipeNodeIndices","refNodeIndices","astNodes","_createPipe","nodeStaticQueryIds","staticViewQueryIds","queryIndex","calcStaticDynamicQueryFlags","needsAdditionalRootNode","lastAstNode","targetStatements","updateRendererStmts","updateDirectivesStmts","nodeDefExprs","_createNodeExpressions","updateRendererFn","_createUpdateFn","updateDirectivesFn","viewFlags","viewFactory","updateStmts","updateFn","preStmts","inter","updateRendererExpressions","_preprocessUpdateExpression","queryMatchesExpr","_visitElementOrTemplate","childVisitor","_createElementHandleEventFn","usedEvents","dirHostBindings","inputDefs","inputAst","dirAst","elementBindingDef","compAst","compRendererType","fixedAttrsDef","elementEventNameAndTarget","elementEventFullName","_visitComponentFactoryResolverProvider","localDirAst","dirHostEvents","_visitDirective","_visitProvider","queryMatchExprs","_visitProviderOrDirective","mapValue","updateDirectiveExpressions","dirContextExpr","hostEventAst","_addProviderNode","componentDirMeta","currViewExpr","currBuilder","refNodeIndex","varAst","varValue","valueExpr","callCheckStmt","compViewExpr","compBuilder","pipeNodeIndex","pipeValueExpr","callUnwrapValue","nodeValueExpr","diDep","_createLiteralArrayConverter","_createLiteralMapConverter","_createPipeConverter","updateBindingCount","createUpdateStatements","allowEmptyExprs","nameResolver","General","handlers","handleEventStmts","handleEventFn","handleEventBindingCount","trueStmts","eventTarget","fullEventName","identical","elementAst","mapResult","attrValue1","attrValue2","mergeAttributeValue","shouldResolveAsStaticQuery","BindingScope$1","define","PopulatedScope","missing","SummaryResolver","JitSummaryResolver","_summaries","fileName","_executeFunctionStatements","varValues","childCtx","createChildWihtLocalVars","_ExecutionContext","ReturnValue","StatementInterpreter","debugOutputAstAsTypeScript","currCtx","__proto__","CATCH_ERROR_VAR$2","CATCH_STACK_VAR$2","_classStmt","_ctx","propertyDescriptors","instanceCtx","paramNames","ctorParamNames","superClass","createDynamicClass","_declareFn","JitCompiler","_metadataResolver","_templateParser","_styleCompiler","_viewCompiler","_ngModuleCompiler","_jitEvaluator","_compilerConfig","getExtraNgModuleProviders","_compiledTemplateCache","_compiledHostTemplateCache","_compiledDirectiveWrapperCache","_compiledNgModuleCache","_sharedStylesheetCount","_addedAotSummaries","_compileModuleAndComponents","_compileModuleAndAllComponents","getDirectiveSummary","summaries","_addAotSummaries","addSummary","ids","hasAotSummary","_loadModules","_compileComponents","_compileModule","componentFactories","ngModuleFactory","mainModule","mainNgModule","_filterJitIdentifiers","nestedNgModule","getOrLoadPipeMetadata","createOutputContext","compileResult","compile","_interpretOrJit","ngModuleJitUrl","allComponentFactories","moduleByJitDirective","templates","transJitModules","localMod","localModuleMeta","dirRef","getDirectiveMetadata","_createCompiledTemplate","_createCompiledHostTemplate","entryComponentType","_compileTemplate","compiledTemplate","assertComponent","hostMeta","getHostComponentMetadata","CompiledTemplate","isCompiled","externalStylesheetsByModuleUrl","outputContext","componentStylesheet","compileComponent","stylesheetMeta","compiledStylesheet","_resolveStylesCompileResult","getPipeSummary","parsedTemplate","_parseTemplate","evalResult","templateJitUrl","viewClass","compiled","directiveIdentifiers","nestedCompileResult","nestedStylesArr","_resolveAndEvalStylesCompileResult","pathParts","sharedStylesheetJitUrl","interpretStatements","_viewClass","CompileReflector","UrlResolver","_packagePrefix","resolvedUrl","_split","baseParts","_ComponentIndex","Scheme","_joinAndCanonicalizePath","Port","Path","_resolveUrl","resolvedParts","_splitRe","uri","leadingSlash","trailingSlash","up","_removeDotSegments","opt_scheme","opt_userInfo","opt_domain","opt_port","opt_path","opt_queryData","opt_fragment","_buildFromEncodedParts","UserInfo","Domain","QueryData","Fragment","ng","ɵcompilerFacade","publishFacade","platformBrowserDynamic","MODULE_SUFFIX","builtinExternalReferences","fesm2015_core","createBuiltinExternalReferencesMap","ERROR_COLLECTOR_TOKEN","DEFAULT_PACKAGE_URL_PROVIDER","_NO_RESOURCE_LOADER","baseHtmlParser","COMPILER_PROVIDERS","getUrlScheme","parser","templateParser","styleCompiler","viewCompiler","ngModuleCompiler","summaryResolver","compileReflector","compilerConfig","loadAotSummaries","_lastDefined","_mergeArrays","platformCoreDynamic","defaultOptions","_defaultOptions","optionsArr","platform_browser_dynamic_ResourceLoaderImpl","onload","responseText","status","onerror","ɵ0$1","ɵ1","common","INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS","platform_browser"],"mappings":"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SAAAA,EAAAC,GACA,iBAAAA,IACAA,EAAA1G,SAAA,EAAuC,KAGvC,MAAA2G,EAAA,EAEAC,EAAAD,EAAA3/E,WAAA+f,QAAA,gBAEAhgB,EAAAqC,KAAAy9E,MAAAz9E,KAAA09E,IAAAH,IAEA1mE,EAAA2mE,EAAArgF,OAEA+6D,EAAA0e,SAAA4G,EAAA,IAEApmE,EAAAw/D,SAAA2G,EAAA3/E,WAAA+f,QAAA,4BAGA,OADA0/D,EAAAx7C,MAAA,QAAAiC,eAEA,SACA,UACA,SACA,UACA,UACA,SACA,UACA,SACA,UACA,UACA,UACA,SACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,SACA,UACA,SACA,UACA,UACA,SACA,SACA,UACA,SACA,SACA,UACA,SACA,SACA,SACA,UACA,UACA,SACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,UACA,SACA,SACA,SACA,SACA,SACA,UACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,WAAAy5C,EACAV,GAAAE,IACAF,GAAAM,MACA,SACA,SACA,SACA,SACA,SACA,OAAAI,IAAAv9E,KAAAy9E,MAAAF,OAAA,GAAAA,GAAA,EACAV,GAAAE,IACAF,GAAAM,MACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,WAAAx/E,GAAA,IAAA4/E,EACAV,GAAAE,IACAF,GAAAM,MACA,SACA,WAAAI,EACAV,GAAAC,KACA,IAAAS,EACAV,GAAAE,IACA,IAAAQ,EACAV,GAAAG,IACAO,EAAA,MAAAv9E,KAAAy9E,MAAAF,EAAA,MAAAA,EAAA,QAAAA,EAAA,QACAV,GAAAI,IACAM,EAAA,MAAAv9E,KAAAy9E,MAAAF,EAAA,MAAAA,EAAA,SAAAA,EAAA,QACAV,GAAAK,KACAL,GAAAM,MACA,UACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,WAAAx/E,GAAA,IAAAkZ,EACAgmE,GAAAE,IACAF,GAAAM,MACA,SACA,OAAAI,E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AC,EAAAD,EAAA3/E,WAAA+f,QAAA,gBAEAhgB,EAAAqC,KAAAy9E,MAAAz9E,KAAA09E,IAAAH,IAEA1mE,EAAA2mE,EAAArgF,OAEA+6D,EAAA0e,SAAA4G,EAAA,IAEApmE,EAAAw/D,SAAA2G,EAAA3/E,WAAA+f,QAAA,4BAGA,OADA0/D,EAAAx7C,MAAA,QAAAiC,eAEA,SACA,UACA,SACA,UACA,UACA,SACA,UACA,SACA,UACA,UACA,UACA,SACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,SACA,UACA,SACA,UACA,UACA,SACA,SACA,UACA,SACA,SACA,UACA,SACA,SACA,SACA,UACA,UACA,SACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,UACA,SACA,SACA,SACA,SACA,SACA,UACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,WAAAy5C,EACAV,EAAAE,IACAF,EAAAM,MACA,SACA,SACA,SACA,SACA,SACA,OAAAI,IAAAv9E,KAAAy9E,MAAAF,OAAA,GAAAA,GAAA,EACAV,EAAAE,IACAF,EAAAM,MACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,WAAAx/E,GAAA,IAAA4/E,EACAV,EAAAE,IACAF,EAAAM,MACA,SACA,WAAAI,EACAV,EAAAC,KACA,IAAAS,EACAV,EAAAE,IACA,IAAAQ,EACAV,EAAAG,IACAO,EAAA,MAAAv9E,KAAAy9E,MAAAF,EAAA,MAAAA,EAAA,QAAAA,EAAA,QACAV,EAAAI,IACAM,EAAA,MAAAv9E,KAAAy9E,MAAAF,EAAA,MAAAA,EAAA,SAAAA,EAAA,QACAV,EAAAK,KACAL,EAAAM,MACA,UACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,WAAAx/E,GAAA,IAAAkZ,EACAgmE,EAAAE,IACAF,EAAAM,MACA,SACA,OAAAI,EAAA,OAAAA,EAAA,QACAV,EAAAE,IACAQ,EAAA,KAAAv9E,KAAAy9E,MAAAF,EAAA,KAAA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AAA,SACAC,KAAA,SACAC,MAAA,OACAC,KAAA,SACAC,KAAA,SACAC,MAAA,SACAC,MAAA,SACAC,GAAA,SACAC,OAAA,SACAC,OAAA,SACAC,IAAA,SACAC,IAAA,SACAC,OAAA,SACAC,MAAA,SACAC,GAAA,IACAC,KAAA,OACAC,MAAA,SACAC,MAAA,OACAC,OAAA,OACAC,MAAA,SACAC,GAAA,SACAC,GAAA,SACAC,MAAA,SACAC,KAAA,OACAC,MAAA,SACAC,GAAA,SACAC,GAAA,SACAC,IAAA,OACAC,MAAA,SACAC,KAAA,SACAC,OAAA,OACAC,OAAA,OACAC,GAAA,SACAC,GAAA,SACAC,OAAA,OACAC,OAAA,OACAC,MAAA,OACAC,MAAA,OACAC,MAAA,SACAC,MAAA,SACAC,OAAA,OACAC,OAAA,OACAC,MAAA,SACAC,MAAA,SACAC,MAAA,SACAC,QAAA,SACAC,QAAA,SACAC,MAAA,SACAC,GAAA,SACAC,KAAA,OACAC,KAAA,OACAC,OAAA,OACAC,OAAA,OACAC,OAAA,OACAC,OAAA,OACAC,OAAA,SACAC,KAAA,OACAC,KAAA,OACAC,KAAA,OACAC,OAAA,SACAC,KAAA,SACAC,IAAA,SACAC,IAAA,SACAC,GAAA,SACAC,GAAA,SACAC,IAAA,SACAC,OAAA,OACAC,MAAA,OACAC,MAAA,SACAC,MAAA,SACAC,KAAA,SACA53H,KAAA,SACA63H,IAAA,SACAC,IAAA,SACAC,KAAA,IACAC,MAAA,SACAC,KAAA,SACAC,MAAA,OACAC,KAAA,SACAC,KAAA,SACAC,MAAA,SACAC,MAAA,SACAC,KAAA,SACAC,IAAA,OACAC,OAAA,SACAC,IAAA,SACAC,IAAA,SACAC,IAAA,SACAC,OAAA,SACAC,MAAA,SACAC,MAAA,SACAC,OAAA,SACAC,OAAA,SACAC,KAAA,SACAC,KAAA,OACAC,IAAA,OACAC,MAAA,SACAC,MAAA,SACAC,OAAA,SACAC,IAAA,SACAC,OAAA,SACAtzI,IAAA,SACAuzI,KAAA,SACAC,IAAA,SACAC,IAAA,SACAC,KAAA,OACAC,KAAA,OACAC,KAAA,OACAC,KAAA,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,uGACA,iGACA,sOACA,mDACA,sBACA,wCACA,6BACA,2JACA,oJACA,wbACA,+BACA,8BACA,6BACA,wIACA,yBACA,4HACA,8BACA,mDACA,2DACA,sCACA,kDACA,uIACA,yCACA,6EACA,wDACA,wBACA,gDACA,yBACA,2BACA,qCACA,mCACA,gGACA,wGACA,wBACA,0BACA,mDACA,sBACA,2CACA,8BACA,mHACA,+DACA,oHACA,iDACA,wDACA,0BACA,qNACA,2BACA,sDACA,iCACA,yBACA,oCACA,wBACA,+BACA,qCACA,wCACA,6BACA,+BACA,2BACA,mBACA,sBACA,8BACA,sBACA,4BACA,kCACA,0BACA,+BACA,gCACA,gCACA,6BACA,2BACA,sBACA,+CACA,+CACA,+CACA,+CACA,6BACA,sBACA,sBACA,0BACA,2BACA,uBACA,2BACA,iCACA,0BACA,qBACA,2BACA,qBACA,oCACA,wBACA,4BACA,2BACA,qCACA,oBACA,qBACA,mBACA,uBACA,2BACA,sBACA,8BACA,+BACA,qCACA,2BACA,mDACA,yBACA,2BACA,mBACA,8CACA,6BACA,qBACA,mCACA,kCACA,kCACA,oBACA,0BACA,8BACA,2BACA,wEACA,gFACA,yBACA,8BACA,sBAEAC,GAAA,CACA72J,MAAA,YACAC,IAAA,UACAC,WAAA,aACAC,UAAA,YACAC,SAAA,WACAC,SAAA,YAEA,MAAAy2J,WAAAP,GACAp5M,cACAqD,QACA7C,KAAAo5M,QAAA,GACAH,GAAA99L,QAAAk+L,IACA,MAAA9iM,EAAA,IACA+iM,EAAAC,GAAAF,EAAAh1K,MAAA,KACA4mD,EAAAsuH,EAAAl1K,MAAA,MACAm1K,EAAAC,GAAAH,EAAAj1K,MAAA,KACAm1K,EAAAn1K,MAAA,KAAAlpB,QAAAkuB,GAAArpC,KAAAo5M,QAAA/vK,EAAA/C,eAAA/vB,GACA,MAAA8hD,EAAAohJ,GAAAz5M,KAAAo5M,QAAAK,EAAAnzK,eACA+xB,GACA73D,OAAA0a,KAAAm9C,GAAAl9C,QAAAC,IAA0D7E,EAAA6E,GAAAi9C,EAAAj9C,KAE1D6v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","file":"vendor-es2015.js","sourcesContent":["export function isFunction(x) {\n    return typeof x === 'function';\n}\n//# sourceMappingURL=isFunction.js.map","let _enable_super_gross_mode_that_will_cause_bad_things = false;\nexport const config = {\n    Promise: undefined,\n    set useDeprecatedSynchronousErrorHandling(value) {\n        if (value) {\n            const error = new Error();\n            console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n        }\n        else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n            console.log('RxJS: Back to a better error behavior. Thank you. <3');\n        }\n        _enable_super_gross_mode_that_will_cause_bad_things = value;\n    },\n    get useDeprecatedSynchronousErrorHandling() {\n        return _enable_super_gross_mode_that_will_cause_bad_things;\n    },\n};\n//# sourceMappingURL=config.js.map","export function hostReportError(err) {\n    setTimeout(() => { throw err; });\n}\n//# sourceMappingURL=hostReportError.js.map","import { config } from './config';\nimport { hostReportError } from './util/hostReportError';\nexport const empty = {\n    closed: true,\n    next(value) { },\n    error(err) {\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            throw err;\n        }\n        else {\n            hostReportError(err);\n        }\n    },\n    complete() { }\n};\n//# sourceMappingURL=Observer.js.map","export const isArray = Array.isArray || ((x) => x && typeof x.length === 'number');\n//# sourceMappingURL=isArray.js.map","export function isObject(x) {\n    return x !== null && typeof x === 'object';\n}\n//# sourceMappingURL=isObject.js.map","function UnsubscriptionErrorImpl(errors) {\n    Error.call(this);\n    this.message = errors ?\n        `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '';\n    this.name = 'UnsubscriptionError';\n    this.errors = errors;\n    return this;\n}\nUnsubscriptionErrorImpl.prototype = Object.create(Error.prototype);\nexport const UnsubscriptionError = UnsubscriptionErrorImpl;\n//# sourceMappingURL=UnsubscriptionError.js.map","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nexport class Subscription {\n    constructor(unsubscribe) {\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    unsubscribe() {\n        let hasErrors = false;\n        let errors;\n        if (this.closed) {\n            return;\n        }\n        let { _parent, _parents, _unsubscribe, _subscriptions } = this;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        let index = -1;\n        let len = _parents ? _parents.length : 0;\n        while (_parent) {\n            _parent.remove(this);\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction(_unsubscribe)) {\n            try {\n                _unsubscribe.call(this);\n            }\n            catch (e) {\n                hasErrors = true;\n                errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];\n            }\n        }\n        if (isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                const sub = _subscriptions[index];\n                if (isObject(sub)) {\n                    try {\n                        sub.unsubscribe();\n                    }\n                    catch (e) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        if (e instanceof UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(e.errors));\n                        }\n                        else {\n                            errors.push(e);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError(errors);\n        }\n    }\n    add(teardown) {\n        let subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (!(subscription instanceof Subscription)) {\n                    const tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default: {\n                if (!teardown) {\n                    return Subscription.EMPTY;\n                }\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n            }\n        }\n        if (subscription._addParent(this)) {\n            const subscriptions = this._subscriptions;\n            if (subscriptions) {\n                subscriptions.push(subscription);\n            }\n            else {\n                this._subscriptions = [subscription];\n            }\n        }\n        return subscription;\n    }\n    remove(subscription) {\n        const subscriptions = this._subscriptions;\n        if (subscriptions) {\n            const subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    }\n    _addParent(parent) {\n        let { _parent, _parents } = this;\n        if (_parent === parent) {\n            return false;\n        }\n        else if (!_parent) {\n            this._parent = parent;\n            return true;\n        }\n        else if (!_parents) {\n            this._parents = [parent];\n            return true;\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            _parents.push(parent);\n            return true;\n        }\n        return false;\n    }\n}\nSubscription.EMPTY = (function (empty) {\n    empty.closed = true;\n    return empty;\n}(new Subscription()));\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n//# sourceMappingURL=Subscription.js.map","export const rxSubscriber = typeof Symbol === 'function'\n    ? Symbol('rxSubscriber')\n    : '@@rxSubscriber_' + Math.random();\nexport const $$rxSubscriber = rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map","import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\nexport class Subscriber extends Subscription {\n    constructor(destinationOrNext, error, complete) {\n        super();\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = emptyObserver;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = emptyObserver;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    if (destinationOrNext instanceof Subscriber) {\n                        this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n                        this.destination = destinationOrNext;\n                        destinationOrNext.add(this);\n                    }\n                    else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    [rxSubscriberSymbol]() { return this; }\n    static create(next, error, complete) {\n        const subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    }\n    next(value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    }\n    error(err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    }\n    complete() {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    }\n    unsubscribe() {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        super.unsubscribe();\n    }\n    _next(value) {\n        this.destination.next(value);\n    }\n    _error(err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    }\n    _complete() {\n        this.destination.complete();\n        this.unsubscribe();\n    }\n    _unsubscribeAndRecycle() {\n        const { _parent, _parents } = this;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    }\n}\nexport class SafeSubscriber extends Subscriber {\n    constructor(_parentSubscriber, observerOrNext, error, complete) {\n        super();\n        this._parentSubscriber = _parentSubscriber;\n        let next;\n        let context = this;\n        if (isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== emptyObserver) {\n                context = Object.create(observerOrNext);\n                if (isFunction(context.unsubscribe)) {\n                    this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = this.unsubscribe.bind(this);\n            }\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    next(value) {\n        if (!this.isStopped && this._next) {\n            const { _parentSubscriber } = this;\n            if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    }\n    error(err) {\n        if (!this.isStopped) {\n            const { _parentSubscriber } = this;\n            const { useDeprecatedSynchronousErrorHandling } = config;\n            if (this._error) {\n                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                if (useDeprecatedSynchronousErrorHandling) {\n                    throw err;\n                }\n                hostReportError(err);\n            }\n            else {\n                if (useDeprecatedSynchronousErrorHandling) {\n                    _parentSubscriber.syncErrorValue = err;\n                    _parentSubscriber.syncErrorThrown = true;\n                }\n                else {\n                    hostReportError(err);\n                }\n                this.unsubscribe();\n            }\n        }\n    }\n    complete() {\n        if (!this.isStopped) {\n            const { _parentSubscriber } = this;\n            if (this._complete) {\n                const wrappedComplete = () => this._complete.call(this._context);\n                if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    }\n    __tryOrUnsub(fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                throw err;\n            }\n            else {\n                hostReportError(err);\n            }\n        }\n    }\n    __tryOrSetError(parent, fn, value) {\n        if (!config.useDeprecatedSynchronousErrorHandling) {\n            throw new Error('bad call');\n        }\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                parent.syncErrorValue = err;\n                parent.syncErrorThrown = true;\n                return true;\n            }\n            else {\n                hostReportError(err);\n                return true;\n            }\n        }\n        return false;\n    }\n    _unsubscribe() {\n        const { _parentSubscriber } = this;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    }\n}\n//# sourceMappingURL=Subscriber.js.map","export const observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';\n//# sourceMappingURL=observable.js.map","export function noop() { }\n//# sourceMappingURL=noop.js.map","import { noop } from './noop';\nexport function pipe(...fns) {\n    return pipeFromArray(fns);\n}\nexport function pipeFromArray(fns) {\n    if (!fns) {\n        return noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce((prev, fn) => fn(prev), input);\n    };\n}\n//# sourceMappingURL=pipe.js.map","import { canReportError } from './util/canReportError';\nimport { toSubscriber } from './util/toSubscriber';\nimport { observable as Symbol_observable } from '../internal/symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nexport class Observable {\n    constructor(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    lift(operator) {\n        const observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    }\n    subscribe(observerOrNext, error, complete) {\n        const { operator } = this;\n        const sink = toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            sink.add(operator.call(sink, this.source));\n        }\n        else {\n            sink.add(this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\n                this._subscribe(sink) :\n                this._trySubscribe(sink));\n        }\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            if (sink.syncErrorThrowable) {\n                sink.syncErrorThrowable = false;\n                if (sink.syncErrorThrown) {\n                    throw sink.syncErrorValue;\n                }\n            }\n        }\n        return sink;\n    }\n    _trySubscribe(sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                sink.syncErrorThrown = true;\n                sink.syncErrorValue = err;\n            }\n            if (canReportError(sink)) {\n                sink.error(err);\n            }\n            else {\n                console.warn(err);\n            }\n        }\n    }\n    forEach(next, promiseCtor) {\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor((resolve, reject) => {\n            let subscription;\n            subscription = this.subscribe((value) => {\n                try {\n                    next(value);\n                }\n                catch (err) {\n                    reject(err);\n                    if (subscription) {\n                        subscription.unsubscribe();\n                    }\n                }\n            }, reject, resolve);\n        });\n    }\n    _subscribe(subscriber) {\n        const { source } = this;\n        return source && source.subscribe(subscriber);\n    }\n    [Symbol_observable]() {\n        return this;\n    }\n    pipe(...operations) {\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipeFromArray(operations)(this);\n    }\n    toPromise(promiseCtor) {\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor((resolve, reject) => {\n            let value;\n            this.subscribe((x) => value = x, (err) => reject(err), () => resolve(value));\n        });\n    }\n}\nObservable.create = (subscribe) => {\n    return new Observable(subscribe);\n};\nfunction getPromiseCtor(promiseCtor) {\n    if (!promiseCtor) {\n        promiseCtor = config.Promise || Promise;\n    }\n    if (!promiseCtor) {\n        throw new Error('no Promise impl found');\n    }\n    return promiseCtor;\n}\n//# sourceMappingURL=Observable.js.map","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nexport function toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriberSymbol]) {\n            return nextOrObserver[rxSubscriberSymbol]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber(emptyObserver);\n    }\n    return new Subscriber(nextOrObserver, error, complete);\n}\n//# sourceMappingURL=toSubscriber.js.map","import { Subscriber } from '../Subscriber';\nexport function canReportError(observer) {\n    while (observer) {\n        const { closed, destination, isStopped } = observer;\n        if (closed || isStopped) {\n            return false;\n        }\n        else if (destination && destination instanceof Subscriber) {\n            observer = destination;\n        }\n        else {\n            observer = null;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=canReportError.js.map","function ObjectUnsubscribedErrorImpl() {\n    Error.call(this);\n    this.message = 'object unsubscribed';\n    this.name = 'ObjectUnsubscribedError';\n    return this;\n}\nObjectUnsubscribedErrorImpl.prototype = Object.create(Error.prototype);\nexport const ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;\n//# sourceMappingURL=ObjectUnsubscribedError.js.map","import { Subscription } from './Subscription';\nexport class SubjectSubscription extends Subscription {\n    constructor(subject, subscriber) {\n        super();\n        this.subject = subject;\n        this.subscriber = subscriber;\n        this.closed = false;\n    }\n    unsubscribe() {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        const subject = this.subject;\n        const observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        const subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    }\n}\n//# sourceMappingURL=SubjectSubscription.js.map","import { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nexport class SubjectSubscriber extends Subscriber {\n    constructor(destination) {\n        super(destination);\n        this.destination = destination;\n    }\n}\nexport class Subject extends Observable {\n    constructor() {\n        super();\n        this.observers = [];\n        this.closed = false;\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    [rxSubscriberSymbol]() {\n        return new SubjectSubscriber(this);\n    }\n    lift(operator) {\n        const subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    }\n    next(value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            const { observers } = this;\n            const len = observers.length;\n            const copy = observers.slice();\n            for (let i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    }\n    error(err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        const { observers } = this;\n        const len = observers.length;\n        const copy = observers.slice();\n        for (let i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    }\n    complete() {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        const { observers } = this;\n        const len = observers.length;\n        const copy = observers.slice();\n        for (let i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    }\n    unsubscribe() {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    }\n    _trySubscribe(subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else {\n            return super._trySubscribe(subscriber);\n        }\n    }\n    _subscribe(subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription(this, subscriber);\n        }\n    }\n    asObservable() {\n        const observable = new Observable();\n        observable.source = this;\n        return observable;\n    }\n}\nSubject.create = (destination, source) => {\n    return new AnonymousSubject(destination, source);\n};\nexport class AnonymousSubject extends Subject {\n    constructor(destination, source) {\n        super();\n        this.destination = destination;\n        this.source = source;\n    }\n    next(value) {\n        const { destination } = this;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    }\n    error(err) {\n        const { destination } = this;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    }\n    complete() {\n        const { destination } = this;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    }\n    _subscribe(subscriber) {\n        const { source } = this;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription.EMPTY;\n        }\n    }\n}\n//# sourceMappingURL=Subject.js.map","import { Subscriber } from './Subscriber';\nexport class InnerSubscriber extends Subscriber {\n    constructor(parent, outerValue, outerIndex) {\n        super();\n        this.parent = parent;\n        this.outerValue = outerValue;\n        this.outerIndex = outerIndex;\n        this.index = 0;\n    }\n    _next(value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    }\n    _error(error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    }\n    _complete() {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    }\n}\n//# sourceMappingURL=InnerSubscriber.js.map","export const subscribeToArray = (array) => (subscriber) => {\n    for (let i = 0, len = array.length; i < len && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n    }\n    if (!subscriber.closed) {\n        subscriber.complete();\n    }\n};\n//# sourceMappingURL=subscribeToArray.js.map","import { hostReportError } from './hostReportError';\nexport const subscribeToPromise = (promise) => (subscriber) => {\n    promise.then((value) => {\n        if (!subscriber.closed) {\n            subscriber.next(value);\n            subscriber.complete();\n        }\n    }, (err) => subscriber.error(err))\n        .then(null, hostReportError);\n    return subscriber;\n};\n//# sourceMappingURL=subscribeToPromise.js.map","export function getSymbolIterator() {\n    if (typeof Symbol !== 'function' || !Symbol.iterator) {\n        return '@@iterator';\n    }\n    return Symbol.iterator;\n}\nexport const iterator = getSymbolIterator();\nexport const $$iterator = iterator;\n//# sourceMappingURL=iterator.js.map","import { iterator as Symbol_iterator } from '../symbol/iterator';\nexport const subscribeToIterable = (iterable) => (subscriber) => {\n    const iterator = iterable[Symbol_iterator]();\n    do {\n        const item = iterator.next();\n        if (item.done) {\n            subscriber.complete();\n            break;\n        }\n        subscriber.next(item.value);\n        if (subscriber.closed) {\n            break;\n        }\n    } while (true);\n    if (typeof iterator.return === 'function') {\n        subscriber.add(() => {\n            if (iterator.return) {\n                iterator.return();\n            }\n        });\n    }\n    return subscriber;\n};\n//# sourceMappingURL=subscribeToIterable.js.map","import { observable as Symbol_observable } from '../symbol/observable';\nexport const subscribeToObservable = (obj) => (subscriber) => {\n    const obs = obj[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n        throw new TypeError('Provided object does not correctly implement Symbol.observable');\n    }\n    else {\n        return obs.subscribe(subscriber);\n    }\n};\n//# sourceMappingURL=subscribeToObservable.js.map","export const isArrayLike = ((x) => x && typeof x.length === 'number' && typeof x !== 'function');\n//# sourceMappingURL=isArrayLike.js.map","export function isPromise(value) {\n    return !!value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\n//# sourceMappingURL=isPromise.js.map","import { Observable } from '../Observable';\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport const subscribeTo = (result) => {\n    if (result instanceof Observable) {\n        return (subscriber) => {\n            if (result._isScalar) {\n                subscriber.next(result.value);\n                subscriber.complete();\n                return undefined;\n            }\n            else {\n                return result.subscribe(subscriber);\n            }\n        };\n    }\n    else if (!!result && typeof result[Symbol_observable] === 'function') {\n        return subscribeToObservable(result);\n    }\n    else if (isArrayLike(result)) {\n        return subscribeToArray(result);\n    }\n    else if (isPromise(result)) {\n        return subscribeToPromise(result);\n    }\n    else if (!!result && typeof result[Symbol_iterator] === 'function') {\n        return subscribeToIterable(result);\n    }\n    else {\n        const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n        const msg = `You provided ${value} where a stream was expected.`\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        throw new TypeError(msg);\n    }\n};\n//# sourceMappingURL=subscribeTo.js.map","import { Subscriber } from './Subscriber';\nexport class OuterSubscriber extends Subscriber {\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    }\n    notifyError(error, innerSub) {\n        this.destination.error(error);\n    }\n    notifyComplete(innerSub) {\n        this.destination.complete();\n    }\n}\n//# sourceMappingURL=OuterSubscriber.js.map","import { Subscriber } from '../Subscriber';\nexport function map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nexport class MapOperator {\n    constructor(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    }\n}\nclass MapSubscriber extends Subscriber {\n    constructor(destination, project, thisArg) {\n        super(destination);\n        this.project = project;\n        this.count = 0;\n        this.thisArg = thisArg || this;\n    }\n    _next(value) {\n        let result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    }\n}\n//# sourceMappingURL=map.js.map","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToArray } from '../util/subscribeToArray';\nexport function fromArray(input, scheduler) {\n    if (!scheduler) {\n        return new Observable(subscribeToArray(input));\n    }\n    else {\n        return new Observable(subscriber => {\n            const sub = new Subscription();\n            let i = 0;\n            sub.add(scheduler.schedule(function () {\n                if (i === input.length) {\n                    subscriber.complete();\n                    return;\n                }\n                subscriber.next(input[i++]);\n                if (!subscriber.closed) {\n                    sub.add(this.schedule());\n                }\n            }));\n            return sub;\n        });\n    }\n}\n//# sourceMappingURL=fromArray.js.map","import { Observable } from '../Observable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isIterable } from '../util/isIterable';\nimport { fromArray } from './fromArray';\nimport { fromPromise } from './fromPromise';\nimport { fromIterable } from './fromIterable';\nimport { fromObservable } from './fromObservable';\nimport { subscribeTo } from '../util/subscribeTo';\nexport function from(input, scheduler) {\n    if (!scheduler) {\n        if (input instanceof Observable) {\n            return input;\n        }\n        return new Observable(subscribeTo(input));\n    }\n    if (input != null) {\n        if (isInteropObservable(input)) {\n            return fromObservable(input, scheduler);\n        }\n        else if (isPromise(input)) {\n            return fromPromise(input, scheduler);\n        }\n        else if (isArrayLike(input)) {\n            return fromArray(input, scheduler);\n        }\n        else if (isIterable(input) || typeof input === 'string') {\n            return fromIterable(input, scheduler);\n        }\n    }\n    throw new TypeError((input !== null && typeof input || input) + ' is not observable');\n}\n//# sourceMappingURL=from.js.map","import { observable as Symbol_observable } from '../symbol/observable';\nexport function isInteropObservable(input) {\n    return input && typeof input[Symbol_observable] === 'function';\n}\n//# sourceMappingURL=isInteropObservable.js.map","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { subscribeToObservable } from '../util/subscribeToObservable';\nexport function fromObservable(input, scheduler) {\n    if (!scheduler) {\n        return new Observable(subscribeToObservable(input));\n    }\n    else {\n        return new Observable(subscriber => {\n            const sub = new Subscription();\n            sub.add(scheduler.schedule(() => {\n                const observable = input[Symbol_observable]();\n                sub.add(observable.subscribe({\n                    next(value) { sub.add(scheduler.schedule(() => subscriber.next(value))); },\n                    error(err) { sub.add(scheduler.schedule(() => subscriber.error(err))); },\n                    complete() { sub.add(scheduler.schedule(() => subscriber.complete())); },\n                }));\n            }));\n            return sub;\n        });\n    }\n}\n//# sourceMappingURL=fromObservable.js.map","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToPromise } from '../util/subscribeToPromise';\nexport function fromPromise(input, scheduler) {\n    if (!scheduler) {\n        return new Observable(subscribeToPromise(input));\n    }\n    else {\n        return new Observable(subscriber => {\n            const sub = new Subscription();\n            sub.add(scheduler.schedule(() => input.then(value => {\n                sub.add(scheduler.schedule(() => {\n                    subscriber.next(value);\n                    sub.add(scheduler.schedule(() => subscriber.complete()));\n                }));\n            }, err => {\n                sub.add(scheduler.schedule(() => subscriber.error(err)));\n            })));\n            return sub;\n        });\n    }\n}\n//# sourceMappingURL=fromPromise.js.map","import { iterator as Symbol_iterator } from '../symbol/iterator';\nexport function isIterable(input) {\n    return input && typeof input[Symbol_iterator] === 'function';\n}\n//# sourceMappingURL=isIterable.js.map","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { subscribeToIterable } from '../util/subscribeToIterable';\nexport function fromIterable(input, scheduler) {\n    if (!input) {\n        throw new Error('Iterable cannot be null');\n    }\n    if (!scheduler) {\n        return new Observable(subscribeToIterable(input));\n    }\n    else {\n        return new Observable(subscriber => {\n            const sub = new Subscription();\n            let iterator;\n            sub.add(() => {\n                if (iterator && typeof iterator.return === 'function') {\n                    iterator.return();\n                }\n            });\n            sub.add(scheduler.schedule(() => {\n                iterator = input[Symbol_iterator]();\n                sub.add(scheduler.schedule(function () {\n                    if (subscriber.closed) {\n                        return;\n                    }\n                    let value;\n                    let done;\n                    try {\n                        const result = iterator.next();\n                        value = result.value;\n                        done = result.done;\n                    }\n                    catch (err) {\n                        subscriber.error(err);\n                        return;\n                    }\n                    if (done) {\n                        subscriber.complete();\n                    }\n                    else {\n                        subscriber.next(value);\n                        this.schedule();\n                    }\n                }));\n            }));\n            return sub;\n        });\n    }\n}\n//# sourceMappingURL=fromIterable.js.map","import { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { map } from './map';\nimport { from } from '../observable/from';\nexport function mergeMap(project, resultSelector, concurrent = Number.POSITIVE_INFINITY) {\n    if (typeof resultSelector === 'function') {\n        return (source) => source.pipe(mergeMap((a, i) => from(project(a, i)).pipe(map((b, ii) => resultSelector(a, b, i, ii))), concurrent));\n    }\n    else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return (source) => source.lift(new MergeMapOperator(project, concurrent));\n}\nexport class MergeMapOperator {\n    constructor(project, concurrent = Number.POSITIVE_INFINITY) {\n        this.project = project;\n        this.concurrent = concurrent;\n    }\n    call(observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n    }\n}\nexport class MergeMapSubscriber extends OuterSubscriber {\n    constructor(destination, project, concurrent = Number.POSITIVE_INFINITY) {\n        super(destination);\n        this.project = project;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    _next(value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    }\n    _tryNext(value) {\n        let result;\n        const index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    }\n    _innerSub(ish, value, index) {\n        const innerSubscriber = new InnerSubscriber(this, undefined, undefined);\n        const destination = this.destination;\n        destination.add(innerSubscriber);\n        subscribeToResult(this, ish, value, index, innerSubscriber);\n    }\n    _complete() {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    }\n    notifyComplete(innerSub) {\n        const buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    }\n}\n//# sourceMappingURL=mergeMap.js.map","import { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeTo } from './subscribeTo';\nexport function subscribeToResult(outerSubscriber, result, outerValue, outerIndex, destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex)) {\n    if (destination.closed) {\n        return;\n    }\n    return subscribeTo(result)(destination);\n}\n//# sourceMappingURL=subscribeToResult.js.map","export function identity(x) {\n    return x;\n}\n//# sourceMappingURL=identity.js.map","import { Observable } from '../Observable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\nimport { fromArray } from './fromArray';\nexport function merge(...observables) {\n    let concurrent = Number.POSITIVE_INFINITY;\n    let scheduler = null;\n    let last = observables[observables.length - 1];\n    if (isScheduler(last)) {\n        scheduler = observables.pop();\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n            concurrent = observables.pop();\n        }\n    }\n    else if (typeof last === 'number') {\n        concurrent = observables.pop();\n    }\n    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n        return observables[0];\n    }\n    return mergeAll(concurrent)(fromArray(observables, scheduler));\n}\n//# sourceMappingURL=merge.js.map","export function isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\n//# sourceMappingURL=isScheduler.js.map","import { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nexport function mergeAll(concurrent = Number.POSITIVE_INFINITY) {\n    return mergeMap(identity, concurrent);\n}\n//# sourceMappingURL=mergeAll.js.map","import { Subscriber } from '../Subscriber';\nexport function refCount() {\n    return function refCountOperatorFunction(source) {\n        return source.lift(new RefCountOperator(source));\n    };\n}\nclass RefCountOperator {\n    constructor(connectable) {\n        this.connectable = connectable;\n    }\n    call(subscriber, source) {\n        const { connectable } = this;\n        connectable._refCount++;\n        const refCounter = new RefCountSubscriber(subscriber, connectable);\n        const subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    }\n}\nclass RefCountSubscriber extends Subscriber {\n    constructor(destination, connectable) {\n        super(destination);\n        this.connectable = connectable;\n    }\n    _unsubscribe() {\n        const { connectable } = this;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        const refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        const { connection } = this;\n        const sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    }\n}\n//# sourceMappingURL=refCount.js.map","import { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nexport class ConnectableObservable extends Observable {\n    constructor(source, subjectFactory) {\n        super();\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        this._refCount = 0;\n        this._isComplete = false;\n    }\n    _subscribe(subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    }\n    getSubject() {\n        const subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    }\n    connect() {\n        let connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n            else {\n                this._connection = connection;\n            }\n        }\n        return connection;\n    }\n    refCount() {\n        return higherOrderRefCount()(this);\n    }\n}\nconst connectableProto = ConnectableObservable.prototype;\nexport const connectableObservableDescriptor = {\n    operator: { value: null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null, writable: true },\n    _connection: { value: null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n};\nclass ConnectableSubscriber extends SubjectSubscriber {\n    constructor(destination, connectable) {\n        super(destination);\n        this.connectable = connectable;\n    }\n    _error(err) {\n        this._unsubscribe();\n        super._error(err);\n    }\n    _complete() {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        super._complete();\n    }\n    _unsubscribe() {\n        const connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            const connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    }\n}\nclass RefCountOperator {\n    constructor(connectable) {\n        this.connectable = connectable;\n    }\n    call(subscriber, source) {\n        const { connectable } = this;\n        connectable._refCount++;\n        const refCounter = new RefCountSubscriber(subscriber, connectable);\n        const subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    }\n}\nclass RefCountSubscriber extends Subscriber {\n    constructor(destination, connectable) {\n        super(destination);\n        this.connectable = connectable;\n    }\n    _unsubscribe() {\n        const { connectable } = this;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        const refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        const { connection } = this;\n        const sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    }\n}\n//# sourceMappingURL=ConnectableObservable.js.map","import { connectableObservableDescriptor } from '../observable/ConnectableObservable';\nexport function multicast(subjectOrSubjectFactory, selector) {\n    return function multicastOperatorFunction(source) {\n        let subjectFactory;\n        if (typeof subjectOrSubjectFactory === 'function') {\n            subjectFactory = subjectOrSubjectFactory;\n        }\n        else {\n            subjectFactory = function subjectFactory() {\n                return subjectOrSubjectFactory;\n            };\n        }\n        if (typeof selector === 'function') {\n            return source.lift(new MulticastOperator(subjectFactory, selector));\n        }\n        const connectable = Object.create(source, connectableObservableDescriptor);\n        connectable.source = source;\n        connectable.subjectFactory = subjectFactory;\n        return connectable;\n    };\n}\nexport class MulticastOperator {\n    constructor(subjectFactory, selector) {\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    call(subscriber, source) {\n        const { selector } = this;\n        const subject = this.subjectFactory();\n        const subscription = selector(subject).subscribe(subscriber);\n        subscription.add(source.subscribe(subject));\n        return subscription;\n    }\n}\n//# sourceMappingURL=multicast.js.map","import { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\nfunction shareSubjectFactory() {\n    return new Subject();\n}\nexport function share() {\n    return (source) => refCount()(multicast(shareSubjectFactory)(source));\n}\n//# sourceMappingURL=share.js.map","/**\n * @license Angular v8.0.0\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Subject, Subscription, Observable, merge as merge$1 } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst ANNOTATIONS = '__annotations__';\nconst PARAMETERS = '__parameters__';\nconst PROP_METADATA = '__prop__metadata__';\n/**\n * @suppress {globalThis}\n */\nfunction makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {\n    const metaCtor = makeMetadataCtor(props);\n    function DecoratorFactory(...args) {\n        if (this instanceof DecoratorFactory) {\n            metaCtor.call(this, ...args);\n            return this;\n        }\n        const annotationInstance = new DecoratorFactory(...args);\n        return function TypeDecorator(cls) {\n            if (typeFn)\n                typeFn(cls, ...args);\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            const annotations = cls.hasOwnProperty(ANNOTATIONS) ?\n                cls[ANNOTATIONS] :\n                Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];\n            annotations.push(annotationInstance);\n            if (additionalProcessing)\n                additionalProcessing(cls);\n            return cls;\n        };\n    }\n    if (parentClass) {\n        DecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    DecoratorFactory.prototype.ngMetadataName = name;\n    DecoratorFactory.annotationCls = DecoratorFactory;\n    return DecoratorFactory;\n}\nfunction makeMetadataCtor(props) {\n    return function ctor(...args) {\n        if (props) {\n            const values = props(...args);\n            for (const propName in values) {\n                this[propName] = values[propName];\n            }\n        }\n    };\n}\nfunction makeParamDecorator(name, props, parentClass) {\n    const metaCtor = makeMetadataCtor(props);\n    function ParamDecoratorFactory(...args) {\n        if (this instanceof ParamDecoratorFactory) {\n            metaCtor.apply(this, args);\n            return this;\n        }\n        const annotationInstance = new ParamDecoratorFactory(...args);\n        ParamDecorator.annotation = annotationInstance;\n        return ParamDecorator;\n        function ParamDecorator(cls, unusedKey, index) {\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            const parameters = cls.hasOwnProperty(PARAMETERS) ?\n                cls[PARAMETERS] :\n                Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];\n            // there might be gaps if some in between parameters do not have annotations.\n            // we pad with nulls.\n            while (parameters.length <= index) {\n                parameters.push(null);\n            }\n            (parameters[index] = parameters[index] || []).push(annotationInstance);\n            return cls;\n        }\n    }\n    if (parentClass) {\n        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\n    ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;\n    return ParamDecoratorFactory;\n}\nfunction makePropDecorator(name, props, parentClass, additionalProcessing) {\n    const metaCtor = makeMetadataCtor(props);\n    function PropDecoratorFactory(...args) {\n        if (this instanceof PropDecoratorFactory) {\n            metaCtor.apply(this, args);\n            return this;\n        }\n        const decoratorInstance = new PropDecoratorFactory(...args);\n        function PropDecorator(target, name) {\n            const constructor = target.constructor;\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            const meta = constructor.hasOwnProperty(PROP_METADATA) ?\n                constructor[PROP_METADATA] :\n                Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];\n            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n            meta[name].unshift(decoratorInstance);\n            if (additionalProcessing)\n                additionalProcessing(target, name, ...args);\n        }\n        return PropDecorator;\n    }\n    if (parentClass) {\n        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    PropDecoratorFactory.prototype.ngMetadataName = name;\n    PropDecoratorFactory.annotationCls = PropDecoratorFactory;\n    return PropDecoratorFactory;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// WARNING: interface has both a type and a value, skipping emit\nconst ɵ0 = /**\n * @param {?} token\n * @return {?}\n */\n(token) => ({ token });\n/**\n * Inject decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Inject = makeParamDecorator('Inject', (ɵ0));\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Optional decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Optional = makeParamDecorator('Optional');\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Self decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Self = makeParamDecorator('Self');\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * SkipSelf decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst SkipSelf = makeParamDecorator('SkipSelf');\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Host decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Host = makeParamDecorator('Host');\n// WARNING: interface has both a type and a value, skipping emit\nconst ɵ1 = /**\n * @param {?=} attributeName\n * @return {?}\n */\n(attributeName) => ({ attributeName });\n/**\n * Attribute decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Attribute = makeParamDecorator('Attribute', (ɵ1));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection flags for DI.\n *\n * @publicApi\n */\nvar InjectFlags;\n(function (InjectFlags) {\n    // TODO(alxhub): make this 'const' when ngc no longer writes exports of it into ngfactory files.\n    /** Check self and check parent injector if needed */\n    InjectFlags[InjectFlags[\"Default\"] = 0] = \"Default\";\n    /**\n     * Specifies that an injector should retrieve a dependency from any injector until reaching the\n     * host element of the current component. (Only used with Element Injector)\n     */\n    InjectFlags[InjectFlags[\"Host\"] = 1] = \"Host\";\n    /** Don't ascend to ancestors of the node requesting injection. */\n    InjectFlags[InjectFlags[\"Self\"] = 2] = \"Self\";\n    /** Skip the node that is requesting injection. */\n    InjectFlags[InjectFlags[\"SkipSelf\"] = 4] = \"SkipSelf\";\n    /** Inject `defaultValue` instead if token not found. */\n    InjectFlags[InjectFlags[\"Optional\"] = 8] = \"Optional\";\n})(InjectFlags || (InjectFlags = {}));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction getClosureSafeProperty(objWithPropertyToExtract) {\n    for (let key in objWithPropertyToExtract) {\n        if (objWithPropertyToExtract[key] === getClosureSafeProperty) {\n            return key;\n        }\n    }\n    throw Error('Could not find renamed property on target object.');\n}\n/**\n * Sets properties on a target object from a source object, but only if\n * the property doesn't already exist on the target object.\n * @param target The target to set properties on\n * @param source The source of the property keys and values to set\n */\nfunction fillProperties(target, source) {\n    for (const key in source) {\n        if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n            target[key] = source[key];\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Construct an `InjectableDef` which defines how a token will be constructed by the DI system, and\n * in which injectors (if any) it will be available.\n *\n * This should be assigned to a static `ngInjectableDef` field on a type, which will then be an\n * `InjectableType`.\n *\n * Options:\n * * `providedIn` determines which injectors will include the injectable, by either associating it\n *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be\n *   provided in the `'root'` injector, which will be the application-level injector in most apps.\n * * `factory` gives the zero argument function which will create an instance of the injectable.\n *   The factory can call `inject` to access the `Injector` and request injection of dependencies.\n *\n * @codeGenApi\n */\nfunction ɵɵdefineInjectable(opts) {\n    return {\n        providedIn: opts.providedIn || null, factory: opts.factory, value: undefined,\n    };\n}\n/**\n * @deprecated in v8, delete after v10. This API should be used only be generated code, and that\n * code should now use ɵɵdefineInjectable instead.\n * @publicApi\n */\nconst defineInjectable = ɵɵdefineInjectable;\n/**\n * Construct an `InjectorDef` which configures an injector.\n *\n * This should be assigned to a static `ngInjectorDef` field on a type, which will then be an\n * `InjectorType`.\n *\n * Options:\n *\n * * `factory`: an `InjectorType` is an instantiable type, so a zero argument `factory` function to\n *   create the type must be provided. If that factory function needs to inject arguments, it can\n *   use the `inject` function.\n * * `providers`: an optional array of providers to add to the injector. Each provider must\n *   either have a factory or point to a type which has an `ngInjectableDef` static property (the\n *   type must be an `InjectableType`).\n * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\n *   whose providers will also be added to the injector. Locally provided types will override\n *   providers from imports.\n *\n * @publicApi\n */\nfunction ɵɵdefineInjector(options) {\n    return {\n        factory: options.factory, providers: options.providers || [], imports: options.imports || [],\n    };\n}\n/**\n * Read the `ngInjectableDef` type in a way which is immune to accidentally reading inherited value.\n *\n * @param type type which may have `ngInjectableDef`\n */\nfunction getInjectableDef(type) {\n    return type && type.hasOwnProperty(NG_INJECTABLE_DEF) ? type[NG_INJECTABLE_DEF] : null;\n}\n/**\n * Read the `ngInjectorDef` type in a way which is immune to accidentally reading inherited value.\n *\n * @param type type which may have `ngInjectorDef`\n */\nfunction getInjectorDef(type) {\n    return type && type.hasOwnProperty(NG_INJECTOR_DEF) ? type[NG_INJECTOR_DEF] : null;\n}\nconst NG_INJECTABLE_DEF = getClosureSafeProperty({ ngInjectableDef: getClosureSafeProperty });\nconst NG_INJECTOR_DEF = getClosureSafeProperty({ ngInjectorDef: getClosureSafeProperty });\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction stringify(token) {\n    if (typeof token === 'string') {\n        return token;\n    }\n    if (token instanceof Array) {\n        return '[' + token.map(stringify).join(', ') + ']';\n    }\n    if (token == null) {\n        return '' + token;\n    }\n    if (token.overriddenName) {\n        return `${token.overriddenName}`;\n    }\n    if (token.name) {\n        return `${token.name}`;\n    }\n    const res = token.toString();\n    if (res == null) {\n        return '' + res;\n    }\n    const newLineIndex = res.indexOf('\\n');\n    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst __forward_ref__ = getClosureSafeProperty({ __forward_ref__: getClosureSafeProperty });\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * \\@usageNotes\n * ### Example\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * \\@publicApi\n * @param {?} forwardRefFn\n * @return {?}\n */\nfunction forwardRef(forwardRefFn) {\n    ((/** @type {?} */ (forwardRefFn))).__forward_ref__ = forwardRef;\n    ((/** @type {?} */ (forwardRefFn))).toString = (/**\n     * @return {?}\n     */\n    function () { return stringify(this()); });\n    return ((/** @type {?} */ ((/** @type {?} */ (forwardRefFn)))));\n}\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * \\@usageNotes\n * ### Example\n *\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see `forwardRef`\n * \\@publicApi\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction resolveForwardRef(type) {\n    /** @type {?} */\n    const fn = type;\n    if (typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) &&\n        fn.__forward_ref__ === forwardRef) {\n        return fn();\n    }\n    else {\n        return type;\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction getGlobal() {\n    const __globalThis = typeof globalThis !== 'undefined' && globalThis;\n    const __window = typeof window !== 'undefined' && window;\n    const __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n        self instanceof WorkerGlobalScope && self;\n    const __global = typeof global !== 'undefined' && global;\n    // Always use __globalThis if available, which is the spec-defined global variable across all\n    // environments, then fallback to __global first, because in Node tests both __global and\n    // __window may be defined and _global should be __global in that case.\n    return __globalThis || __global || __window || __self;\n}\nconst _global = getGlobal();\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar R3ResolvedDependencyType;\n(function (R3ResolvedDependencyType) {\n    R3ResolvedDependencyType[R3ResolvedDependencyType[\"Token\"] = 0] = \"Token\";\n    R3ResolvedDependencyType[R3ResolvedDependencyType[\"Attribute\"] = 1] = \"Attribute\";\n})(R3ResolvedDependencyType || (R3ResolvedDependencyType = {}));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction getCompilerFacade() {\n    const globalNg = _global['ng'];\n    if (!globalNg || !globalNg.ɵcompilerFacade) {\n        throw new Error(`Angular JIT compilation failed: '@angular/compiler' not loaded!\\n` +\n            `  - JIT compilation is discouraged for production use-cases! Consider AOT mode instead.\\n` +\n            `  - Did you bootstrap using '@angular/platform-browser-dynamic' or '@angular/platform-server'?\\n` +\n            `  - Alternatively provide the compiler with 'import \"@angular/compiler\";' before bootstrapping.`);\n    }\n    return globalNg.ɵcompilerFacade;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Current injector value used by `inject`.\n * - `undefined`: it is an error to call `inject`\n * - `null`: `inject` can be called but there is no injector (limp-mode).\n * - Injector instance: Use the injector for resolution.\n * @type {?}\n */\nlet _currentInjector = undefined;\n/**\n * @param {?} injector\n * @return {?}\n */\nfunction setCurrentInjector(injector) {\n    /** @type {?} */\n    const former = _currentInjector;\n    _currentInjector = injector;\n    return former;\n}\n/**\n * Current implementation of inject.\n *\n * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed\n * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this\n * way for two reasons:\n *  1. `Injector` should not depend on ivy logic.\n *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.\n * @type {?}\n */\nlet _injectImplementation;\n/**\n * Sets the current inject implementation.\n * @param {?} impl\n * @return {?}\n */\nfunction setInjectImplementation(impl) {\n    /** @type {?} */\n    const previous = _injectImplementation;\n    _injectImplementation = impl;\n    return previous;\n}\n/**\n * @template T\n * @param {?} token\n * @param {?=} flags\n * @return {?}\n */\nfunction injectInjectorOnly(token, flags = InjectFlags.Default) {\n    if (_currentInjector === undefined) {\n        throw new Error(`inject() must be called from an injection context`);\n    }\n    else if (_currentInjector === null) {\n        return injectRootLimpMode(token, undefined, flags);\n    }\n    else {\n        return _currentInjector.get(token, flags & InjectFlags.Optional ? null : undefined, flags);\n    }\n}\n/**\n * @template T\n * @param {?} token\n * @param {?=} flags\n * @return {?}\n */\nfunction ɵɵinject(token, flags = InjectFlags.Default) {\n    return (_injectImplementation || injectInjectorOnly)(token, flags);\n}\n/**\n * Injects a token from the currently active injector.\n *\n * Must be used in the context of a factory function such as one defined for an\n * `InjectionToken`. Throws an error if not called from such a context.\n *\n * Within such a factory function, using this function to request injection of a dependency\n * is faster and more type-safe than providing an additional array of dependencies\n * (as has been common with `useFactory` providers).\n *\n * \\@param token The injection token for the dependency to be injected.\n * \\@param flags Optional flags that control how injection is executed.\n * The flags correspond to injection strategies that can be specified with\n * parameter decorators `\\@Host`, `\\@Self`, `\\@SkipSef`, and `\\@Optional`.\n * \\@return True if injection is successful, null otherwise.\n *\n * \\@usageNotes\n *\n * ### Example\n *\n * {\\@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n * \\@publicApi\n * @type {?}\n */\nconst inject = ɵɵinject;\n/**\n * Injects `root` tokens in limp mode.\n *\n * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to\n * `\"root\"`. This is known as the limp mode injection. In such case the value is stored in the\n * `InjectableDef`.\n * @template T\n * @param {?} token\n * @param {?} notFoundValue\n * @param {?} flags\n * @return {?}\n */\nfunction injectRootLimpMode(token, notFoundValue, flags) {\n    /** @type {?} */\n    const injectableDef = getInjectableDef(token);\n    if (injectableDef && injectableDef.providedIn == 'root') {\n        return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() :\n            injectableDef.value;\n    }\n    if (flags & InjectFlags.Optional)\n        return null;\n    if (notFoundValue !== undefined)\n        return notFoundValue;\n    throw new Error(`Injector: NOT_FOUND [${stringify(token)}]`);\n}\n/**\n * @param {?} types\n * @return {?}\n */\nfunction injectArgs(types) {\n    /** @type {?} */\n    const args = [];\n    for (let i = 0; i < types.length; i++) {\n        /** @type {?} */\n        const arg = types[i];\n        if (Array.isArray(arg)) {\n            if (arg.length === 0) {\n                throw new Error('Arguments array must have arguments.');\n            }\n            /** @type {?} */\n            let type = undefined;\n            /** @type {?} */\n            let flags = InjectFlags.Default;\n            for (let j = 0; j < arg.length; j++) {\n                /** @type {?} */\n                const meta = arg[j];\n                if (meta instanceof Optional || meta.ngMetadataName === 'Optional') {\n                    flags |= InjectFlags.Optional;\n                }\n                else if (meta instanceof SkipSelf || meta.ngMetadataName === 'SkipSelf') {\n                    flags |= InjectFlags.SkipSelf;\n                }\n                else if (meta instanceof Self || meta.ngMetadataName === 'Self') {\n                    flags |= InjectFlags.Self;\n                }\n                else if (meta instanceof Inject) {\n                    type = meta.token;\n                }\n                else {\n                    type = meta;\n                }\n            }\n            args.push(ɵɵinject((/** @type {?} */ (type)), flags));\n        }\n        else {\n            args.push(ɵɵinject(arg));\n        }\n    }\n    return args;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A mapping of the \\@angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of \\@angular/core.\n * @type {?}\n */\nconst angularCoreDiEnv = {\n    'ɵɵdefineInjectable': ɵɵdefineInjectable,\n    'ɵɵdefineInjector': ɵɵdefineInjector,\n    'ɵɵinject': ɵɵinject,\n    'ɵɵgetFactoryOf': getFactoryOf,\n};\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction getFactoryOf(type) {\n    /** @type {?} */\n    const typeAny = (/** @type {?} */ (type));\n    /** @type {?} */\n    const def = getInjectableDef(typeAny) || getInjectorDef(typeAny);\n    if (!def || def.factory === undefined) {\n        return null;\n    }\n    return def.factory;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n *\n * Represents a type that a Component or other object is instances of.\n *\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\n * the `MyCustomComponent` constructor function.\n *\n * @publicApi\n */\nconst Type = Function;\nfunction isType(v) {\n    return typeof v === 'function';\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Attention: These regex has to hold even if the code is minified!\n */\nconst DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*arguments\\)/;\nconst INHERITED_CLASS = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{/;\nconst INHERITED_CLASS_WITH_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(/;\nconst INHERITED_CLASS_WITH_DELEGATE_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(\\)\\s*{\\s+super\\(\\.\\.\\.arguments\\)/;\nclass ReflectionCapabilities {\n    constructor(reflect) { this._reflect = reflect || _global['Reflect']; }\n    isReflectionEnabled() { return true; }\n    factory(t) { return (...args) => new t(...args); }\n    /** @internal */\n    _zipTypesAndAnnotations(paramTypes, paramAnnotations) {\n        let result;\n        if (typeof paramTypes === 'undefined') {\n            result = new Array(paramAnnotations.length);\n        }\n        else {\n            result = new Array(paramTypes.length);\n        }\n        for (let i = 0; i < result.length; i++) {\n            // TS outputs Object for parameters without types, while Traceur omits\n            // the annotations. For now we preserve the Traceur behavior to aid\n            // migration, but this can be revisited.\n            if (typeof paramTypes === 'undefined') {\n                result[i] = [];\n            }\n            else if (paramTypes[i] != Object) {\n                result[i] = [paramTypes[i]];\n            }\n            else {\n                result[i] = [];\n            }\n            if (paramAnnotations && paramAnnotations[i] != null) {\n                result[i] = result[i].concat(paramAnnotations[i]);\n            }\n        }\n        return result;\n    }\n    _ownParameters(type, parentCtor) {\n        const typeStr = type.toString();\n        // If we have no decorators, we only have function.length as metadata.\n        // In that case, to detect whether a child class declared an own constructor or not,\n        // we need to look inside of that constructor to check whether it is\n        // just calling the parent.\n        // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n        // that sets 'design:paramtypes' to []\n        // if a class inherits from another class but has no ctor declared itself.\n        if (DELEGATE_CTOR.exec(typeStr) || INHERITED_CLASS_WITH_DELEGATE_CTOR.exec(typeStr) ||\n            (INHERITED_CLASS.exec(typeStr) && !INHERITED_CLASS_WITH_CTOR.exec(typeStr))) {\n            return null;\n        }\n        // Prefer the direct API.\n        if (type.parameters && type.parameters !== parentCtor.parameters) {\n            return type.parameters;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        const tsickleCtorParams = type.ctorParameters;\n        if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n            // Newer tsickle uses a function closure\n            // Retain the non-function case for compatibility with older tsickle\n            const ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n            const paramTypes = ctorParameters.map((ctorParam) => ctorParam && ctorParam.type);\n            const paramAnnotations = ctorParameters.map((ctorParam) => ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators));\n            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n        }\n        // API for metadata created by invoking the decorators.\n        const paramAnnotations = type.hasOwnProperty(PARAMETERS) && type[PARAMETERS];\n        const paramTypes = this._reflect && this._reflect.getOwnMetadata &&\n            this._reflect.getOwnMetadata('design:paramtypes', type);\n        if (paramTypes || paramAnnotations) {\n            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n        }\n        // If a class has no decorators, at least create metadata\n        // based on function.length.\n        // Note: We know that this is a real constructor as we checked\n        // the content of the constructor above.\n        return new Array(type.length).fill(undefined);\n    }\n    parameters(type) {\n        // Note: only report metadata if we have at least one class decorator\n        // to stay in sync with the static reflector.\n        if (!isType(type)) {\n            return [];\n        }\n        const parentCtor = getParentCtor(type);\n        let parameters = this._ownParameters(type, parentCtor);\n        if (!parameters && parentCtor !== Object) {\n            parameters = this.parameters(parentCtor);\n        }\n        return parameters || [];\n    }\n    _ownAnnotations(typeOrFunc, parentCtor) {\n        // Prefer the direct API.\n        if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {\n            let annotations = typeOrFunc.annotations;\n            if (typeof annotations === 'function' && annotations.annotations) {\n                annotations = annotations.annotations;\n            }\n            return annotations;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {\n            return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);\n        }\n        // API for metadata created by invoking the decorators.\n        if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {\n            return typeOrFunc[ANNOTATIONS];\n        }\n        return null;\n    }\n    annotations(typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return [];\n        }\n        const parentCtor = getParentCtor(typeOrFunc);\n        const ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n        const parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n        return parentAnnotations.concat(ownAnnotations);\n    }\n    _ownPropMetadata(typeOrFunc, parentCtor) {\n        // Prefer the direct API.\n        if (typeOrFunc.propMetadata &&\n            typeOrFunc.propMetadata !== parentCtor.propMetadata) {\n            let propMetadata = typeOrFunc.propMetadata;\n            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n                propMetadata = propMetadata.propMetadata;\n            }\n            return propMetadata;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        if (typeOrFunc.propDecorators &&\n            typeOrFunc.propDecorators !== parentCtor.propDecorators) {\n            const propDecorators = typeOrFunc.propDecorators;\n            const propMetadata = {};\n            Object.keys(propDecorators).forEach(prop => {\n                propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);\n            });\n            return propMetadata;\n        }\n        // API for metadata created by invoking the decorators.\n        if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {\n            return typeOrFunc[PROP_METADATA];\n        }\n        return null;\n    }\n    propMetadata(typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return {};\n        }\n        const parentCtor = getParentCtor(typeOrFunc);\n        const propMetadata = {};\n        if (parentCtor !== Object) {\n            const parentPropMetadata = this.propMetadata(parentCtor);\n            Object.keys(parentPropMetadata).forEach((propName) => {\n                propMetadata[propName] = parentPropMetadata[propName];\n            });\n        }\n        const ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n        if (ownPropMetadata) {\n            Object.keys(ownPropMetadata).forEach((propName) => {\n                const decorators = [];\n                if (propMetadata.hasOwnProperty(propName)) {\n                    decorators.push(...propMetadata[propName]);\n                }\n                decorators.push(...ownPropMetadata[propName]);\n                propMetadata[propName] = decorators;\n            });\n        }\n        return propMetadata;\n    }\n    ownPropMetadata(typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return {};\n        }\n        return this._ownPropMetadata(typeOrFunc, getParentCtor(typeOrFunc)) || {};\n    }\n    hasLifecycleHook(type, lcProperty) {\n        return type instanceof Type && lcProperty in type.prototype;\n    }\n    guards(type) { return {}; }\n    getter(name) { return new Function('o', 'return o.' + name + ';'); }\n    setter(name) {\n        return new Function('o', 'v', 'return o.' + name + ' = v;');\n    }\n    method(name) {\n        const functionBody = `if (!o.${name}) throw new Error('\"${name}\" is undefined');\n        return o.${name}.apply(o, args);`;\n        return new Function('o', 'args', functionBody);\n    }\n    // There is not a concept of import uri in Js, but this is useful in developing Dart applications.\n    importUri(type) {\n        // StaticSymbol\n        if (typeof type === 'object' && type['filePath']) {\n            return type['filePath'];\n        }\n        // Runtime type\n        return `./${stringify(type)}`;\n    }\n    resourceUri(type) { return `./${stringify(type)}`; }\n    resolveIdentifier(name, moduleUrl, members, runtime) {\n        return runtime;\n    }\n    resolveEnum(enumIdentifier, name) { return enumIdentifier[name]; }\n}\nfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\n    if (!decoratorInvocations) {\n        return [];\n    }\n    return decoratorInvocations.map(decoratorInvocation => {\n        const decoratorType = decoratorInvocation.type;\n        const annotationCls = decoratorType.annotationCls;\n        const annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n        return new annotationCls(...annotationArgs);\n    });\n}\nfunction getParentCtor(ctor) {\n    const parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;\n    const parentCtor = parentProto ? parentProto.constructor : null;\n    // Note: We always use `Object` as the null value\n    // to simplify checking later on.\n    return parentCtor || Object;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet _reflect = null;\n/**\n * @return {?}\n */\nfunction getReflect() {\n    return (_reflect = _reflect || new ReflectionCapabilities());\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction reflectDependencies(type) {\n    return convertDependencies(getReflect().parameters(type));\n}\n/**\n * @param {?} deps\n * @return {?}\n */\nfunction convertDependencies(deps) {\n    /** @type {?} */\n    const compiler = getCompilerFacade();\n    return deps.map((/**\n     * @param {?} dep\n     * @return {?}\n     */\n    dep => reflectDependency(compiler, dep)));\n}\n/**\n * @param {?} compiler\n * @param {?} dep\n * @return {?}\n */\nfunction reflectDependency(compiler, dep) {\n    /** @type {?} */\n    const meta = {\n        token: null,\n        host: false,\n        optional: false,\n        resolved: compiler.R3ResolvedDependencyType.Token,\n        self: false,\n        skipSelf: false,\n    };\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    function setTokenAndResolvedType(token) {\n        meta.resolved = compiler.R3ResolvedDependencyType.Token;\n        meta.token = token;\n    }\n    if (Array.isArray(dep)) {\n        if (dep.length === 0) {\n            throw new Error('Dependency array must have arguments.');\n        }\n        for (let j = 0; j < dep.length; j++) {\n            /** @type {?} */\n            const param = dep[j];\n            if (param === undefined) {\n                // param may be undefined if type of dep is not set by ngtsc\n                continue;\n            }\n            else if (param instanceof Optional || param.__proto__.ngMetadataName === 'Optional') {\n                meta.optional = true;\n            }\n            else if (param instanceof SkipSelf || param.__proto__.ngMetadataName === 'SkipSelf') {\n                meta.skipSelf = true;\n            }\n            else if (param instanceof Self || param.__proto__.ngMetadataName === 'Self') {\n                meta.self = true;\n            }\n            else if (param instanceof Host || param.__proto__.ngMetadataName === 'Host') {\n                meta.host = true;\n            }\n            else if (param instanceof Inject) {\n                meta.token = param.token;\n            }\n            else if (param instanceof Attribute) {\n                if (param.attributeName === undefined) {\n                    throw new Error(`Attribute name must be defined.`);\n                }\n                meta.token = param.attributeName;\n                meta.resolved = compiler.R3ResolvedDependencyType.Attribute;\n            }\n            else {\n                setTokenAndResolvedType(param);\n            }\n        }\n    }\n    else {\n        setTokenAndResolvedType(dep);\n    }\n    return meta;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting\n * `ngInjectableDef` onto the injectable type.\n * @param {?} type\n * @param {?=} srcMeta\n * @return {?}\n */\nfunction compileInjectable(type, srcMeta) {\n    /** @type {?} */\n    let def = null;\n    // if NG_INJECTABLE_DEF is already defined on this class then don't overwrite it\n    if (type.hasOwnProperty(NG_INJECTABLE_DEF))\n        return;\n    Object.defineProperty(type, NG_INJECTABLE_DEF, {\n        get: (/**\n         * @return {?}\n         */\n        () => {\n            if (def === null) {\n                // Allow the compilation of a class with a `@Injectable()` decorator without parameters\n                /** @type {?} */\n                const meta = srcMeta || { providedIn: null };\n                /** @type {?} */\n                const hasAProvider = isUseClassProvider(meta) || isUseFactoryProvider(meta) ||\n                    isUseValueProvider(meta) || isUseExistingProvider(meta);\n                /** @type {?} */\n                const compilerMeta = {\n                    name: type.name,\n                    type: type,\n                    typeArgumentCount: 0,\n                    providedIn: meta.providedIn,\n                    ctorDeps: reflectDependencies(type),\n                    userDeps: undefined,\n                };\n                if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {\n                    compilerMeta.userDeps = convertDependencies(meta.deps);\n                }\n                if (!hasAProvider) {\n                    // In the case the user specifies a type provider, treat it as {provide: X, useClass: X}.\n                    // The deps will have been reflected above, causing the factory to create the class by\n                    // calling\n                    // its constructor with injected deps.\n                    compilerMeta.useClass = type;\n                }\n                else if (isUseClassProvider(meta)) {\n                    // The user explicitly specified useClass, and may or may not have provided deps.\n                    compilerMeta.useClass = meta.useClass;\n                }\n                else if (isUseValueProvider(meta)) {\n                    // The user explicitly specified useValue.\n                    compilerMeta.useValue = meta.useValue;\n                }\n                else if (isUseFactoryProvider(meta)) {\n                    // The user explicitly specified useFactory.\n                    compilerMeta.useFactory = meta.useFactory;\n                }\n                else if (isUseExistingProvider(meta)) {\n                    // The user explicitly specified useExisting.\n                    compilerMeta.useExisting = meta.useExisting;\n                }\n                else {\n                    // Can't happen - either hasAProvider will be false, or one of the providers will be set.\n                    throw new Error(`Unreachable state.`);\n                }\n                def = getCompilerFacade().compileInjectable(angularCoreDiEnv, `ng:///${type.name}/ngInjectableDef.js`, compilerMeta);\n            }\n            return def;\n        }),\n    });\n}\nconst ɵ0$1 = getClosureSafeProperty;\n/** @type {?} */\nconst USE_VALUE = getClosureSafeProperty({ provide: String, useValue: ɵ0$1 });\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseClassProvider(meta) {\n    return ((/** @type {?} */ (meta))).useClass !== undefined;\n}\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseValueProvider(meta) {\n    return USE_VALUE in meta;\n}\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseFactoryProvider(meta) {\n    return ((/** @type {?} */ (meta))).useFactory !== undefined;\n}\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseExistingProvider(meta) {\n    return ((/** @type {?} */ (meta))).useExisting !== undefined;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst ɵ0$2 = getClosureSafeProperty;\n/** @type {?} */\nconst USE_VALUE$1 = getClosureSafeProperty({ provide: String, useValue: ɵ0$2 });\n/** @type {?} */\nconst EMPTY_ARRAY = [];\n/**\n * @param {?} type\n * @param {?=} provider\n * @return {?}\n */\nfunction convertInjectableProviderToFactory(type, provider) {\n    if (!provider) {\n        /** @type {?} */\n        const reflectionCapabilities = new ReflectionCapabilities();\n        /** @type {?} */\n        const deps = reflectionCapabilities.parameters(type);\n        // TODO - convert to flags.\n        return (/**\n         * @return {?}\n         */\n        () => new type(...injectArgs((/** @type {?} */ (deps)))));\n    }\n    if (USE_VALUE$1 in provider) {\n        /** @type {?} */\n        const valueProvider = ((/** @type {?} */ (provider)));\n        return (/**\n         * @return {?}\n         */\n        () => valueProvider.useValue);\n    }\n    else if (((/** @type {?} */ (provider))).useExisting) {\n        /** @type {?} */\n        const existingProvider = ((/** @type {?} */ (provider)));\n        return (/**\n         * @return {?}\n         */\n        () => ɵɵinject(existingProvider.useExisting));\n    }\n    else if (((/** @type {?} */ (provider))).useFactory) {\n        /** @type {?} */\n        const factoryProvider = ((/** @type {?} */ (provider)));\n        return (/**\n         * @return {?}\n         */\n        () => factoryProvider.useFactory(...injectArgs(factoryProvider.deps || EMPTY_ARRAY)));\n    }\n    else if (((/** @type {?} */ (provider))).useClass) {\n        /** @type {?} */\n        const classProvider = ((/** @type {?} */ (provider)));\n        /** @type {?} */\n        let deps = ((/** @type {?} */ (provider))).deps;\n        if (!deps) {\n            /** @type {?} */\n            const reflectionCapabilities = new ReflectionCapabilities();\n            deps = reflectionCapabilities.parameters(type);\n        }\n        return (/**\n         * @return {?}\n         */\n        () => new classProvider.useClass(...injectArgs(deps)));\n    }\n    else {\n        /** @type {?} */\n        let deps = ((/** @type {?} */ (provider))).deps;\n        if (!deps) {\n            /** @type {?} */\n            const reflectionCapabilities = new ReflectionCapabilities();\n            deps = reflectionCapabilities.parameters(type);\n        }\n        return (/**\n         * @return {?}\n         */\n        () => new type(...injectArgs((/** @type {?} */ (deps)))));\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// WARNING: interface has both a type and a value, skipping emit\nconst ɵ0$3 = /**\n * @param {?} type\n * @param {?} meta\n * @return {?}\n */\n(type, meta) => SWITCH_COMPILE_INJECTABLE((/** @type {?} */ (type)), meta);\n/**\n * Injectable decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Injectable = makeDecorator('Injectable', undefined, undefined, undefined, (ɵ0$3));\n/**\n * Supports \\@Injectable() in JIT mode for Render2.\n * @param {?} injectableType\n * @param {?} options\n * @return {?}\n */\nfunction render2CompileInjectable(injectableType, options) {\n    if (options && options.providedIn !== undefined && !getInjectableDef(injectableType)) {\n        /** @nocollapse */ injectableType.ngInjectableDef = ɵɵdefineInjectable({\n            providedIn: options.providedIn,\n            factory: convertInjectableProviderToFactory(injectableType, options),\n        });\n    }\n}\n/** @type {?} */\nconst SWITCH_COMPILE_INJECTABLE__POST_R3__ = compileInjectable;\n/** @type {?} */\nconst SWITCH_COMPILE_INJECTABLE__PRE_R3__ = render2CompileInjectable;\n/** @type {?} */\nconst SWITCH_COMPILE_INJECTABLE = SWITCH_COMPILE_INJECTABLE__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parameterized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function. See below for an example.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `\\@NgModule`. As\n * mentioned above, `'root'` is the default value for `providedIn`.\n *\n * \\@usageNotes\n * ### Basic Example\n *\n * ### Plain InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n *\n * \\@publicApi\n * @template T\n */\nclass InjectionToken {\n    /**\n     * @param {?} _desc\n     * @param {?=} options\n     */\n    constructor(_desc, options) {\n        this._desc = _desc;\n        /**\n         * \\@internal\n         */\n        this.ngMetadataName = 'InjectionToken';\n        /** @nocollapse */ this.ngInjectableDef = undefined;\n        if (typeof options == 'number') {\n            // This is a special hack to assign __NG_ELEMENT_ID__ to this instance.\n            // __NG_ELEMENT_ID__ is Used by Ivy to determine bloom filter id.\n            // We are using it to assign `-1` which is used to identify `Injector`.\n            ((/** @type {?} */ (this))).__NG_ELEMENT_ID__ = options;\n        }\n        else if (options !== undefined) {\n            /** @nocollapse */ this.ngInjectableDef = ɵɵdefineInjectable({\n                providedIn: options.providedIn || 'root',\n                factory: options.factory,\n            });\n        }\n    }\n    /**\n     * @return {?}\n     */\n    toString() { return `InjectionToken ${this._desc}`; }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst SOURCE = '__source';\n/** @type {?} */\nconst _THROW_IF_NOT_FOUND = new Object();\n/** @type {?} */\nconst THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n/**\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * \\@publicApi\n * @type {?}\n */\nconst INJECTOR = new InjectionToken('INJECTOR', (/** @type {?} */ (-1)));\nclass NullInjector {\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue = _THROW_IF_NOT_FOUND) {\n        if (notFoundValue === _THROW_IF_NOT_FOUND) {\n            // Intentionally left behind: With dev tools open the debugger will stop here. There is no\n            // reason why correctly written application should cause this exception.\n            // TODO(misko): uncomment the next line once `ngDevMode` works with closure.\n            // if(ngDevMode) debugger;\n            /** @type {?} */\n            const error = new Error(`NullInjectorError: No provider for ${stringify(token)}!`);\n            error.name = 'NullInjectorError';\n            throw error;\n        }\n        return notFoundValue;\n    }\n}\n/**\n * Concrete injectors implement this interface.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * \\@usageNotes\n * ### Example\n *\n * {\\@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n *\n * {\\@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n * \\@publicApi\n * @abstract\n */\nclass Injector {\n    /**\n     * Create a new Injector which is configure using `StaticProvider`s.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * {\\@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n     * @param {?} options\n     * @param {?=} parent\n     * @return {?}\n     */\n    static create(options, parent) {\n        if (Array.isArray(options)) {\n            return new StaticInjector(options, parent);\n        }\n        else {\n            return new StaticInjector(options.providers, options.parent, options.name || null);\n        }\n    }\n}\nInjector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\nInjector.NULL = new NullInjector();\n/** @nocollapse */\n/** @nocollapse */ Injector.ngInjectableDef = ɵɵdefineInjectable({\n    providedIn: (/** @type {?} */ ('any')),\n    factory: (/**\n     * @return {?}\n     */\n    () => ɵɵinject(INJECTOR)),\n});\n/**\n * \\@internal\n * @nocollapse\n */\nInjector.__NG_ELEMENT_ID__ = -1;\n/** @type {?} */\nconst IDENT = (/**\n * @template T\n * @param {?} value\n * @return {?}\n */\nfunction (value) {\n    return value;\n});\n/** @type {?} */\nconst EMPTY = (/** @type {?} */ ([]));\n/** @type {?} */\nconst CIRCULAR = IDENT;\n/** @type {?} */\nconst MULTI_PROVIDER_FN = (/**\n * @return {?}\n */\nfunction () {\n    return Array.prototype.slice.call(arguments);\n});\nconst ɵ2 = getClosureSafeProperty;\n/** @type {?} */\nconst USE_VALUE$2 = getClosureSafeProperty({ provide: String, useValue: ɵ2 });\n/** @type {?} */\nconst NG_TOKEN_PATH = 'ngTokenPath';\n/** @type {?} */\nconst NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\n/** @type {?} */\nconst NEW_LINE = /\\n/gm;\n/** @type {?} */\nconst NO_NEW_LINE = 'ɵ';\nclass StaticInjector {\n    /**\n     * @param {?} providers\n     * @param {?=} parent\n     * @param {?=} source\n     */\n    constructor(providers, parent = Injector.NULL, source = null) {\n        this.parent = parent;\n        this.source = source;\n        /** @type {?} */\n        const records = this._records = new Map();\n        records.set(Injector, (/** @type {?} */ ({ token: Injector, fn: IDENT, deps: EMPTY, value: this, useNew: false })));\n        records.set(INJECTOR, (/** @type {?} */ ({ token: INJECTOR, fn: IDENT, deps: EMPTY, value: this, useNew: false })));\n        recursivelyProcessProviders(records, providers);\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?}\n     */\n    get(token, notFoundValue, flags = InjectFlags.Default) {\n        /** @type {?} */\n        const record = this._records.get(token);\n        try {\n            return tryResolveToken(token, record, this._records, this.parent, notFoundValue, flags);\n        }\n        catch (e) {\n            return catchInjectorError(e, token, 'StaticInjectorError', this.source);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        /** @type {?} */\n        const tokens = (/** @type {?} */ ([]));\n        /** @type {?} */\n        const records = this._records;\n        records.forEach((/**\n         * @param {?} v\n         * @param {?} token\n         * @return {?}\n         */\n        (v, token) => tokens.push(stringify(token))));\n        return `StaticInjector[${tokens.join(', ')}]`;\n    }\n}\n/**\n * @param {?} provider\n * @return {?}\n */\nfunction resolveProvider(provider) {\n    /** @type {?} */\n    const deps = computeDeps(provider);\n    /** @type {?} */\n    let fn = IDENT;\n    /** @type {?} */\n    let value = EMPTY;\n    /** @type {?} */\n    let useNew = false;\n    /** @type {?} */\n    let provide = resolveForwardRef(provider.provide);\n    if (USE_VALUE$2 in provider) {\n        // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.\n        value = ((/** @type {?} */ (provider))).useValue;\n    }\n    else if (((/** @type {?} */ (provider))).useFactory) {\n        fn = ((/** @type {?} */ (provider))).useFactory;\n    }\n    else if (((/** @type {?} */ (provider))).useExisting) ;\n    else if (((/** @type {?} */ (provider))).useClass) {\n        useNew = true;\n        fn = resolveForwardRef(((/** @type {?} */ (provider))).useClass);\n    }\n    else if (typeof provide == 'function') {\n        useNew = true;\n        fn = provide;\n    }\n    else {\n        throw staticError('StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable', provider);\n    }\n    return { deps, fn, useNew, value };\n}\n/**\n * @param {?} token\n * @return {?}\n */\nfunction multiProviderMixError(token) {\n    return staticError('Cannot mix multi providers and regular providers', token);\n}\n/**\n * @param {?} records\n * @param {?} provider\n * @return {?}\n */\nfunction recursivelyProcessProviders(records, provider) {\n    if (provider) {\n        provider = resolveForwardRef(provider);\n        if (provider instanceof Array) {\n            // if we have an array recurse into the array\n            for (let i = 0; i < provider.length; i++) {\n                recursivelyProcessProviders(records, provider[i]);\n            }\n        }\n        else if (typeof provider === 'function') {\n            // Functions were supported in ReflectiveInjector, but are not here. For safety give useful\n            // error messages\n            throw staticError('Function/Class not supported', provider);\n        }\n        else if (provider && typeof provider === 'object' && provider.provide) {\n            // At this point we have what looks like a provider: {provide: ?, ....}\n            /** @type {?} */\n            let token = resolveForwardRef(provider.provide);\n            /** @type {?} */\n            const resolvedProvider = resolveProvider(provider);\n            if (provider.multi === true) {\n                // This is a multi provider.\n                /** @type {?} */\n                let multiProvider = records.get(token);\n                if (multiProvider) {\n                    if (multiProvider.fn !== MULTI_PROVIDER_FN) {\n                        throw multiProviderMixError(token);\n                    }\n                }\n                else {\n                    // Create a placeholder factory which will look up the constituents of the multi provider.\n                    records.set(token, multiProvider = (/** @type {?} */ ({\n                        token: provider.provide,\n                        deps: [],\n                        useNew: false,\n                        fn: MULTI_PROVIDER_FN,\n                        value: EMPTY\n                    })));\n                }\n                // Treat the provider as the token.\n                token = provider;\n                multiProvider.deps.push({ token, options: 6 /* Default */ });\n            }\n            /** @type {?} */\n            const record = records.get(token);\n            if (record && record.fn == MULTI_PROVIDER_FN) {\n                throw multiProviderMixError(token);\n            }\n            records.set(token, resolvedProvider);\n        }\n        else {\n            throw staticError('Unexpected provider', provider);\n        }\n    }\n}\n/**\n * @param {?} token\n * @param {?} record\n * @param {?} records\n * @param {?} parent\n * @param {?} notFoundValue\n * @param {?} flags\n * @return {?}\n */\nfunction tryResolveToken(token, record, records, parent, notFoundValue, flags) {\n    try {\n        return resolveToken(token, record, records, parent, notFoundValue, flags);\n    }\n    catch (e) {\n        // ensure that 'e' is of type Error.\n        if (!(e instanceof Error)) {\n            e = new Error(e);\n        }\n        /** @type {?} */\n        const path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n        path.unshift(token);\n        if (record && record.value == CIRCULAR) {\n            // Reset the Circular flag.\n            record.value = EMPTY;\n        }\n        throw e;\n    }\n}\n/**\n * @param {?} token\n * @param {?} record\n * @param {?} records\n * @param {?} parent\n * @param {?} notFoundValue\n * @param {?} flags\n * @return {?}\n */\nfunction resolveToken(token, record, records, parent, notFoundValue, flags) {\n    /** @type {?} */\n    let value;\n    if (record && !(flags & InjectFlags.SkipSelf)) {\n        // If we don't have a record, this implies that we don't own the provider hence don't know how\n        // to resolve it.\n        value = record.value;\n        if (value == CIRCULAR) {\n            throw Error(NO_NEW_LINE + 'Circular dependency');\n        }\n        else if (value === EMPTY) {\n            record.value = CIRCULAR;\n            /** @type {?} */\n            let obj = undefined;\n            /** @type {?} */\n            let useNew = record.useNew;\n            /** @type {?} */\n            let fn = record.fn;\n            /** @type {?} */\n            let depRecords = record.deps;\n            /** @type {?} */\n            let deps = EMPTY;\n            if (depRecords.length) {\n                deps = [];\n                for (let i = 0; i < depRecords.length; i++) {\n                    /** @type {?} */\n                    const depRecord = depRecords[i];\n                    /** @type {?} */\n                    const options = depRecord.options;\n                    /** @type {?} */\n                    const childRecord = options & 2 /* CheckSelf */ ? records.get(depRecord.token) : undefined;\n                    deps.push(tryResolveToken(\n                    // Current Token to resolve\n                    depRecord.token, \n                    // A record which describes how to resolve the token.\n                    // If undefined, this means we don't have such a record\n                    childRecord, \n                    // Other records we know about.\n                    records, \n                    // If we don't know how to resolve dependency and we should not check parent for it,\n                    // than pass in Null injector.\n                    !childRecord && !(options & 4 /* CheckParent */) ? Injector.NULL : parent, options & 1 /* Optional */ ? null : Injector.THROW_IF_NOT_FOUND, InjectFlags.Default));\n                }\n            }\n            record.value = value = useNew ? new ((/** @type {?} */ (fn)))(...deps) : fn.apply(obj, deps);\n        }\n    }\n    else if (!(flags & InjectFlags.Self)) {\n        value = parent.get(token, notFoundValue, InjectFlags.Default);\n    }\n    return value;\n}\n/**\n * @param {?} provider\n * @return {?}\n */\nfunction computeDeps(provider) {\n    /** @type {?} */\n    let deps = EMPTY;\n    /** @type {?} */\n    const providerDeps = ((/** @type {?} */ (provider))).deps;\n    if (providerDeps && providerDeps.length) {\n        deps = [];\n        for (let i = 0; i < providerDeps.length; i++) {\n            /** @type {?} */\n            let options = 6 /* Default */;\n            /** @type {?} */\n            let token = resolveForwardRef(providerDeps[i]);\n            if (token instanceof Array) {\n                for (let j = 0, annotations = token; j < annotations.length; j++) {\n                    /** @type {?} */\n                    const annotation = annotations[j];\n                    if (annotation instanceof Optional || annotation == Optional) {\n                        options = options | 1 /* Optional */;\n                    }\n                    else if (annotation instanceof SkipSelf || annotation == SkipSelf) {\n                        options = options & ~2 /* CheckSelf */;\n                    }\n                    else if (annotation instanceof Self || annotation == Self) {\n                        options = options & ~4 /* CheckParent */;\n                    }\n                    else if (annotation instanceof Inject) {\n                        token = ((/** @type {?} */ (annotation))).token;\n                    }\n                    else {\n                        token = resolveForwardRef(annotation);\n                    }\n                }\n            }\n            deps.push({ token, options });\n        }\n    }\n    else if (((/** @type {?} */ (provider))).useExisting) {\n        /** @type {?} */\n        const token = resolveForwardRef(((/** @type {?} */ (provider))).useExisting);\n        deps = [{ token, options: 6 /* Default */ }];\n    }\n    else if (!providerDeps && !(USE_VALUE$2 in provider)) {\n        // useValue & useExisting are the only ones which are exempt from deps all others need it.\n        throw staticError('\\'deps\\' required', provider);\n    }\n    return deps;\n}\n/**\n * @param {?} e\n * @param {?} token\n * @param {?} injectorErrorName\n * @param {?} source\n * @return {?}\n */\nfunction catchInjectorError(e, token, injectorErrorName, source) {\n    /** @type {?} */\n    const tokenPath = e[NG_TEMP_TOKEN_PATH];\n    if (token[SOURCE]) {\n        tokenPath.unshift(token[SOURCE]);\n    }\n    e.message = formatError('\\n' + e.message, tokenPath, injectorErrorName, source);\n    e[NG_TOKEN_PATH] = tokenPath;\n    e[NG_TEMP_TOKEN_PATH] = null;\n    throw e;\n}\n/**\n * @param {?} text\n * @param {?} obj\n * @param {?} injectorErrorName\n * @param {?=} source\n * @return {?}\n */\nfunction formatError(text, obj, injectorErrorName, source = null) {\n    text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;\n    /** @type {?} */\n    let context = stringify(obj);\n    if (obj instanceof Array) {\n        context = obj.map(stringify).join(' -> ');\n    }\n    else if (typeof obj === 'object') {\n        /** @type {?} */\n        let parts = (/** @type {?} */ ([]));\n        for (let key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                /** @type {?} */\n                let value = obj[key];\n                parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\n            }\n        }\n        context = `{${parts.join(', ')}}`;\n    }\n    return `${injectorErrorName}${source ? '(' + source + ')' : ''}[${context}]: ${text.replace(NEW_LINE, '\\n  ')}`;\n}\n/**\n * @param {?} text\n * @param {?} obj\n * @return {?}\n */\nfunction staticError(text, obj) {\n    return new Error(formatError(text, obj, 'StaticInjectorError'));\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst ERROR_DEBUG_CONTEXT = 'ngDebugContext';\nconst ERROR_ORIGINAL_ERROR = 'ngOriginalError';\nconst ERROR_LOGGER = 'ngErrorLogger';\nfunction wrappedError(message, originalError) {\n    const msg = `${message} caused by: ${originalError instanceof Error ? originalError.message : originalError}`;\n    const error = Error(msg);\n    error[ERROR_ORIGINAL_ERROR] = originalError;\n    return error;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction findFirstClosedCycle(keys) {\n    /** @type {?} */\n    const res = [];\n    for (let i = 0; i < keys.length; ++i) {\n        if (res.indexOf(keys[i]) > -1) {\n            res.push(keys[i]);\n            return res;\n        }\n        res.push(keys[i]);\n    }\n    return res;\n}\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction constructResolvingPath(keys) {\n    if (keys.length > 1) {\n        /** @type {?} */\n        const reversed = findFirstClosedCycle(keys.slice().reverse());\n        /** @type {?} */\n        const tokenStrs = reversed.map((/**\n         * @param {?} k\n         * @return {?}\n         */\n        k => stringify(k.token)));\n        return ' (' + tokenStrs.join(' -> ') + ')';\n    }\n    return '';\n}\n/**\n * @param {?} injector\n * @param {?} key\n * @param {?} constructResolvingMessage\n * @param {?=} originalError\n * @return {?}\n */\nfunction injectionError(injector, key, constructResolvingMessage, originalError) {\n    /** @type {?} */\n    const keys = [key];\n    /** @type {?} */\n    const errMsg = constructResolvingMessage(keys);\n    /** @type {?} */\n    const error = (/** @type {?} */ ((originalError ? wrappedError(errMsg, originalError) : Error(errMsg))));\n    error.addKey = addKey;\n    error.keys = keys;\n    error.injectors = [injector];\n    error.constructResolvingMessage = constructResolvingMessage;\n    ((/** @type {?} */ (error)))[ERROR_ORIGINAL_ERROR] = originalError;\n    return error;\n}\n/**\n * @this {?}\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nfunction addKey(injector, key) {\n    this.injectors.push(injector);\n    this.keys.push(key);\n    // Note: This updated message won't be reflected in the `.stack` property\n    this.message = this.constructResolvingMessage(this.keys);\n}\n/**\n * Thrown when trying to retrieve a dependency by key from {\\@link Injector}, but the\n * {\\@link Injector} does not have a {\\@link Provider} for the given key.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b:B) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nfunction noProviderError(injector, key) {\n    return injectionError(injector, key, (/**\n     * @param {?} keys\n     * @return {?}\n     */\n    function (keys) {\n        /** @type {?} */\n        const first = stringify(keys[0].token);\n        return `No provider for ${first}!${constructResolvingPath(keys)}`;\n    }));\n}\n/**\n * Thrown when dependencies form a cycle.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * var injector = Injector.resolveAndCreate([\n *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n * ]);\n *\n * expect(() => injector.get(\"one\")).toThrowError();\n * ```\n *\n * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nfunction cyclicDependencyError(injector, key) {\n    return injectionError(injector, key, (/**\n     * @param {?} keys\n     * @return {?}\n     */\n    function (keys) {\n        return `Cannot instantiate cyclic dependency!${constructResolvingPath(keys)}`;\n    }));\n}\n/**\n * Thrown when a constructing type returns with an Error.\n *\n * The `InstantiationError` class contains the original error plus the dependency graph which caused\n * this object to be instantiated.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor() {\n *     throw new Error('message');\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([A]);\n * try {\n *   injector.get(A);\n * } catch (e) {\n *   expect(e instanceof InstantiationError).toBe(true);\n *   expect(e.originalException.message).toEqual(\"message\");\n *   expect(e.originalStack).toBeDefined();\n * }\n * ```\n * @param {?} injector\n * @param {?} originalException\n * @param {?} originalStack\n * @param {?} key\n * @return {?}\n */\nfunction instantiationError(injector, originalException, originalStack, key) {\n    return injectionError(injector, key, (/**\n     * @param {?} keys\n     * @return {?}\n     */\n    function (keys) {\n        /** @type {?} */\n        const first = stringify(keys[0].token);\n        return `${originalException.message}: Error during instantiation of ${first}!${constructResolvingPath(keys)}.`;\n    }), originalException);\n}\n/**\n * Thrown when an object other then {\\@link Provider} (or `Type`) is passed to {\\@link Injector}\n * creation.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n * ```\n * @param {?} provider\n * @return {?}\n */\nfunction invalidProviderError(provider) {\n    return Error(`Invalid provider - only instances of Provider and Type are allowed, got: ${provider}`);\n}\n/**\n * Thrown when the class has no annotation information.\n *\n * Lack of annotation information prevents the {\\@link Injector} from determining which dependencies\n * need to be injected into the constructor.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n *\n * This error is also thrown when the class not marked with {\\@link Injectable} has parameter types.\n *\n * ```typescript\n * class B {}\n *\n * class A {\n *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n * }\n *\n * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n * ```\n *\n * @param {?} typeOrFunc\n * @param {?} params\n * @return {?}\n */\nfunction noAnnotationError(typeOrFunc, params) {\n    /** @type {?} */\n    const signature = [];\n    for (let i = 0, ii = params.length; i < ii; i++) {\n        /** @type {?} */\n        const parameter = params[i];\n        if (!parameter || parameter.length == 0) {\n            signature.push('?');\n        }\n        else {\n            signature.push(parameter.map(stringify).join(' '));\n        }\n    }\n    return Error('Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' +\n        signature.join(', ') + '). ' +\n        'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' +\n        stringify(typeOrFunc) + '\\' is decorated with Injectable.');\n}\n/**\n * Thrown when getting an object by index.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {}\n *\n * var injector = Injector.resolveAndCreate([A]);\n *\n * expect(() => injector.getAt(100)).toThrowError();\n * ```\n *\n * @param {?} index\n * @return {?}\n */\nfunction outOfBoundsError(index) {\n    return Error(`Index ${index} is out-of-bounds.`);\n}\n// TODO: add a working example after alpha38 is released\n/**\n * Thrown when a multi provider and a regular provider are bound to the same token.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\n *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n * ])).toThrowError();\n * ```\n * @param {?} provider1\n * @param {?} provider2\n * @return {?}\n */\nfunction mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {\n    return Error(`Cannot mix multi providers and regular providers, got: ${provider1} ${provider2}`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n *\n * @deprecated No replacement\n * \\@publicApi\n */\nclass ReflectiveKey {\n    /**\n     * Private\n     * @param {?} token\n     * @param {?} id\n     */\n    constructor(token, id) {\n        this.token = token;\n        this.id = id;\n        if (!token) {\n            throw new Error('Token must be defined!');\n        }\n        this.displayName = stringify(this.token);\n    }\n    /**\n     * Retrieves a `Key` for a token.\n     * @param {?} token\n     * @return {?}\n     */\n    static get(token) {\n        return _globalKeyRegistry.get(resolveForwardRef(token));\n    }\n    /**\n     * @return {?} the number of keys registered in the system.\n     */\n    static get numberOfKeys() { return _globalKeyRegistry.numberOfKeys; }\n}\nclass KeyRegistry {\n    constructor() {\n        this._allKeys = new Map();\n    }\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    get(token) {\n        if (token instanceof ReflectiveKey)\n            return token;\n        if (this._allKeys.has(token)) {\n            return (/** @type {?} */ (this._allKeys.get(token)));\n        }\n        /** @type {?} */\n        const newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n        this._allKeys.set(token, newKey);\n        return newKey;\n    }\n    /**\n     * @return {?}\n     */\n    get numberOfKeys() { return this._allKeys.size; }\n}\n/** @type {?} */\nconst _globalKeyRegistry = new KeyRegistry();\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides access to reflection data about symbols. Used internally by Angular\n * to power dependency injection and compilation.\n */\nclass Reflector {\n    constructor(reflectionCapabilities) {\n        this.reflectionCapabilities = reflectionCapabilities;\n    }\n    updateCapabilities(caps) { this.reflectionCapabilities = caps; }\n    factory(type) { return this.reflectionCapabilities.factory(type); }\n    parameters(typeOrFunc) {\n        return this.reflectionCapabilities.parameters(typeOrFunc);\n    }\n    annotations(typeOrFunc) {\n        return this.reflectionCapabilities.annotations(typeOrFunc);\n    }\n    propMetadata(typeOrFunc) {\n        return this.reflectionCapabilities.propMetadata(typeOrFunc);\n    }\n    hasLifecycleHook(type, lcProperty) {\n        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\n    }\n    getter(name) { return this.reflectionCapabilities.getter(name); }\n    setter(name) { return this.reflectionCapabilities.setter(name); }\n    method(name) { return this.reflectionCapabilities.method(name); }\n    importUri(type) { return this.reflectionCapabilities.importUri(type); }\n    resourceUri(type) { return this.reflectionCapabilities.resourceUri(type); }\n    resolveIdentifier(name, moduleUrl, members, runtime) {\n        return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);\n    }\n    resolveEnum(identifier, name) {\n        return this.reflectionCapabilities.resolveEnum(identifier, name);\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The {@link Reflector} used internally in Angular to access metadata\n * about symbols.\n */\nconst reflector = new Reflector(new ReflectionCapabilities());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nclass ReflectiveDependency {\n    /**\n     * @param {?} key\n     * @param {?} optional\n     * @param {?} visibility\n     */\n    constructor(key, optional, visibility) {\n        this.key = key;\n        this.optional = optional;\n        this.visibility = visibility;\n    }\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    static fromKey(key) {\n        return new ReflectiveDependency(key, false, null);\n    }\n}\n/** @type {?} */\nconst _EMPTY_LIST = [];\nclass ResolvedReflectiveProvider_ {\n    /**\n     * @param {?} key\n     * @param {?} resolvedFactories\n     * @param {?} multiProvider\n     */\n    constructor(key, resolvedFactories, multiProvider) {\n        this.key = key;\n        this.resolvedFactories = resolvedFactories;\n        this.multiProvider = multiProvider;\n        this.resolvedFactory = this.resolvedFactories[0];\n    }\n}\n/**\n * An internal resolved representation of a factory function created by resolving `Provider`.\n * \\@publicApi\n */\nclass ResolvedReflectiveFactory {\n    /**\n     * @param {?} factory\n     * @param {?} dependencies\n     */\n    constructor(factory, dependencies) {\n        this.factory = factory;\n        this.dependencies = dependencies;\n    }\n}\n/**\n * Resolve a single provider.\n * @param {?} provider\n * @return {?}\n */\nfunction resolveReflectiveFactory(provider) {\n    /** @type {?} */\n    let factoryFn;\n    /** @type {?} */\n    let resolvedDeps;\n    if (provider.useClass) {\n        /** @type {?} */\n        const useClass = resolveForwardRef(provider.useClass);\n        factoryFn = reflector.factory(useClass);\n        resolvedDeps = _dependenciesFor(useClass);\n    }\n    else if (provider.useExisting) {\n        factoryFn = (/**\n         * @param {?} aliasInstance\n         * @return {?}\n         */\n        (aliasInstance) => aliasInstance);\n        resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n    }\n    else if (provider.useFactory) {\n        factoryFn = provider.useFactory;\n        resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\n    }\n    else {\n        factoryFn = (/**\n         * @return {?}\n         */\n        () => provider.useValue);\n        resolvedDeps = _EMPTY_LIST;\n    }\n    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n}\n/**\n * Converts the `Provider` into `ResolvedProvider`.\n *\n * `Injector` internally only uses `ResolvedProvider`, `Provider` contains convenience provider\n * syntax.\n * @param {?} provider\n * @return {?}\n */\nfunction resolveReflectiveProvider(provider) {\n    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);\n}\n/**\n * Resolve a list of Providers.\n * @param {?} providers\n * @return {?}\n */\nfunction resolveReflectiveProviders(providers) {\n    /** @type {?} */\n    const normalized = _normalizeProviders(providers, []);\n    /** @type {?} */\n    const resolved = normalized.map(resolveReflectiveProvider);\n    /** @type {?} */\n    const resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\n    return Array.from(resolvedProviderMap.values());\n}\n/**\n * Merges a list of ResolvedProviders into a list where each key is contained exactly once and\n * multi providers have been merged.\n * @param {?} providers\n * @param {?} normalizedProvidersMap\n * @return {?}\n */\nfunction mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {\n    for (let i = 0; i < providers.length; i++) {\n        /** @type {?} */\n        const provider = providers[i];\n        /** @type {?} */\n        const existing = normalizedProvidersMap.get(provider.key.id);\n        if (existing) {\n            if (provider.multiProvider !== existing.multiProvider) {\n                throw mixingMultiProvidersWithRegularProvidersError(existing, provider);\n            }\n            if (provider.multiProvider) {\n                for (let j = 0; j < provider.resolvedFactories.length; j++) {\n                    existing.resolvedFactories.push(provider.resolvedFactories[j]);\n                }\n            }\n            else {\n                normalizedProvidersMap.set(provider.key.id, provider);\n            }\n        }\n        else {\n            /** @type {?} */\n            let resolvedProvider;\n            if (provider.multiProvider) {\n                resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\n            }\n            else {\n                resolvedProvider = provider;\n            }\n            normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n        }\n    }\n    return normalizedProvidersMap;\n}\n/**\n * @param {?} providers\n * @param {?} res\n * @return {?}\n */\nfunction _normalizeProviders(providers, res) {\n    providers.forEach((/**\n     * @param {?} b\n     * @return {?}\n     */\n    b => {\n        if (b instanceof Type) {\n            res.push({ provide: b, useClass: b });\n        }\n        else if (b && typeof b == 'object' && ((/** @type {?} */ (b))).provide !== undefined) {\n            res.push((/** @type {?} */ (b)));\n        }\n        else if (b instanceof Array) {\n            _normalizeProviders(b, res);\n        }\n        else {\n            throw invalidProviderError(b);\n        }\n    }));\n    return res;\n}\n/**\n * @param {?} typeOrFunc\n * @param {?=} dependencies\n * @return {?}\n */\nfunction constructDependencies(typeOrFunc, dependencies) {\n    if (!dependencies) {\n        return _dependenciesFor(typeOrFunc);\n    }\n    else {\n        /** @type {?} */\n        const params = dependencies.map((/**\n         * @param {?} t\n         * @return {?}\n         */\n        t => [t]));\n        return dependencies.map((/**\n         * @param {?} t\n         * @return {?}\n         */\n        t => _extractToken(typeOrFunc, t, params)));\n    }\n}\n/**\n * @param {?} typeOrFunc\n * @return {?}\n */\nfunction _dependenciesFor(typeOrFunc) {\n    /** @type {?} */\n    const params = reflector.parameters(typeOrFunc);\n    if (!params)\n        return [];\n    if (params.some((/**\n     * @param {?} p\n     * @return {?}\n     */\n    p => p == null))) {\n        throw noAnnotationError(typeOrFunc, params);\n    }\n    return params.map((/**\n     * @param {?} p\n     * @return {?}\n     */\n    p => _extractToken(typeOrFunc, p, params)));\n}\n/**\n * @param {?} typeOrFunc\n * @param {?} metadata\n * @param {?} params\n * @return {?}\n */\nfunction _extractToken(typeOrFunc, metadata, params) {\n    /** @type {?} */\n    let token = null;\n    /** @type {?} */\n    let optional = false;\n    if (!Array.isArray(metadata)) {\n        if (metadata instanceof Inject) {\n            return _createDependency(metadata.token, optional, null);\n        }\n        else {\n            return _createDependency(metadata, optional, null);\n        }\n    }\n    /** @type {?} */\n    let visibility = null;\n    for (let i = 0; i < metadata.length; ++i) {\n        /** @type {?} */\n        const paramMetadata = metadata[i];\n        if (paramMetadata instanceof Type) {\n            token = paramMetadata;\n        }\n        else if (paramMetadata instanceof Inject) {\n            token = paramMetadata.token;\n        }\n        else if (paramMetadata instanceof Optional) {\n            optional = true;\n        }\n        else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\n            visibility = paramMetadata;\n        }\n        else if (paramMetadata instanceof InjectionToken) {\n            token = paramMetadata;\n        }\n    }\n    token = resolveForwardRef(token);\n    if (token != null) {\n        return _createDependency(token, optional, visibility);\n    }\n    else {\n        throw noAnnotationError(typeOrFunc, params);\n    }\n}\n/**\n * @param {?} token\n * @param {?} optional\n * @param {?} visibility\n * @return {?}\n */\nfunction _createDependency(token, optional, visibility) {\n    return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Threshold for the dynamic version\n/** @type {?} */\nconst UNDEFINED = new Object();\n/**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n *\n * \\@usageNotes\n * ### Example\n *\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n *\n * ```typescript\n * \\@Injectable()\n * class Engine {\n * }\n *\n * \\@Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n *\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n * \\@publicApi\n * @abstract\n */\nclass ReflectiveInjector {\n    /**\n     * Turns an array of provider definitions into an array of resolved providers.\n     *\n     * A resolution is a process of flattening multiple nested arrays and converting individual\n     * providers into an array of `ResolvedReflectiveProvider`s.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *  /\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n     *\n     * expect(providers.length).toEqual(2);\n     *\n     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n     * expect(providers[0].key.displayName).toBe(\"Car\");\n     * expect(providers[0].dependencies.length).toEqual(1);\n     * expect(providers[0].factory).toBeDefined();\n     *\n     * expect(providers[1].key.displayName).toBe(\"Engine\");\n     * });\n     * ```\n     *\n     * @param {?} providers\n     * @return {?}\n     */\n    static resolve(providers) {\n        return resolveReflectiveProviders(providers);\n    }\n    /**\n     * Resolves an array of providers and creates an injector from those providers.\n     *\n     * The passed-in providers can be an array of `Type`, `Provider`,\n     * or a recursive array of more providers.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *  /\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * @param {?} providers\n     * @param {?=} parent\n     * @return {?}\n     */\n    static resolveAndCreate(providers, parent) {\n        /** @type {?} */\n        const ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n        return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\n    }\n    /**\n     * Creates an injector from previously resolved providers.\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *  /\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, Engine]);\n     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * @param {?} providers\n     * @param {?=} parent\n     * @return {?}\n     */\n    static fromResolvedProviders(providers, parent) {\n        return new ReflectiveInjector_(providers, parent);\n    }\n}\nclass ReflectiveInjector_ {\n    /**\n     * Private\n     * @param {?} _providers\n     * @param {?=} _parent\n     */\n    constructor(_providers, _parent) {\n        /**\n         * \\@internal\n         */\n        this._constructionCounter = 0;\n        this._providers = _providers;\n        this.parent = _parent || null;\n        /** @type {?} */\n        const len = _providers.length;\n        this.keyIds = new Array(len);\n        this.objs = new Array(len);\n        for (let i = 0; i < len; i++) {\n            this.keyIds[i] = _providers[i].key.id;\n            this.objs[i] = UNDEFINED;\n        }\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue = THROW_IF_NOT_FOUND) {\n        return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);\n    }\n    /**\n     * @param {?} providers\n     * @return {?}\n     */\n    resolveAndCreateChild(providers) {\n        /** @type {?} */\n        const ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n        return this.createChildFromResolved(ResolvedReflectiveProviders);\n    }\n    /**\n     * @param {?} providers\n     * @return {?}\n     */\n    createChildFromResolved(providers) {\n        /** @type {?} */\n        const inj = new ReflectiveInjector_(providers);\n        ((/** @type {?} */ (inj))).parent = this;\n        return inj;\n    }\n    /**\n     * @param {?} provider\n     * @return {?}\n     */\n    resolveAndInstantiate(provider) {\n        return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\n    }\n    /**\n     * @param {?} provider\n     * @return {?}\n     */\n    instantiateResolved(provider) {\n        return this._instantiateProvider(provider);\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    getProviderAtIndex(index) {\n        if (index < 0 || index >= this._providers.length) {\n            throw outOfBoundsError(index);\n        }\n        return this._providers[index];\n    }\n    /**\n     * \\@internal\n     * @param {?} provider\n     * @return {?}\n     */\n    _new(provider) {\n        if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {\n            throw cyclicDependencyError(this, provider.key);\n        }\n        return this._instantiateProvider(provider);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getMaxNumberOfObjects() { return this.objs.length; }\n    /**\n     * @private\n     * @param {?} provider\n     * @return {?}\n     */\n    _instantiateProvider(provider) {\n        if (provider.multiProvider) {\n            /** @type {?} */\n            const res = new Array(provider.resolvedFactories.length);\n            for (let i = 0; i < provider.resolvedFactories.length; ++i) {\n                res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\n            }\n            return res;\n        }\n        else {\n            return this._instantiate(provider, provider.resolvedFactories[0]);\n        }\n    }\n    /**\n     * @private\n     * @param {?} provider\n     * @param {?} ResolvedReflectiveFactory\n     * @return {?}\n     */\n    _instantiate(provider, ResolvedReflectiveFactory) {\n        /** @type {?} */\n        const factory = ResolvedReflectiveFactory.factory;\n        /** @type {?} */\n        let deps;\n        try {\n            deps =\n                ResolvedReflectiveFactory.dependencies.map((/**\n                 * @param {?} dep\n                 * @return {?}\n                 */\n                dep => this._getByReflectiveDependency(dep)));\n        }\n        catch (e) {\n            if (e.addKey) {\n                e.addKey(this, provider.key);\n            }\n            throw e;\n        }\n        /** @type {?} */\n        let obj;\n        try {\n            obj = factory(...deps);\n        }\n        catch (e) {\n            throw instantiationError(this, e, e.stack, provider.key);\n        }\n        return obj;\n    }\n    /**\n     * @private\n     * @param {?} dep\n     * @return {?}\n     */\n    _getByReflectiveDependency(dep) {\n        return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);\n    }\n    /**\n     * @private\n     * @param {?} key\n     * @param {?} visibility\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    _getByKey(key, visibility, notFoundValue) {\n        if (key === ReflectiveInjector_.INJECTOR_KEY) {\n            return this;\n        }\n        if (visibility instanceof Self) {\n            return this._getByKeySelf(key, notFoundValue);\n        }\n        else {\n            return this._getByKeyDefault(key, notFoundValue, visibility);\n        }\n    }\n    /**\n     * @private\n     * @param {?} keyId\n     * @return {?}\n     */\n    _getObjByKeyId(keyId) {\n        for (let i = 0; i < this.keyIds.length; i++) {\n            if (this.keyIds[i] === keyId) {\n                if (this.objs[i] === UNDEFINED) {\n                    this.objs[i] = this._new(this._providers[i]);\n                }\n                return this.objs[i];\n            }\n        }\n        return UNDEFINED;\n    }\n    /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    _throwOrNull(key, notFoundValue) {\n        if (notFoundValue !== THROW_IF_NOT_FOUND) {\n            return notFoundValue;\n        }\n        else {\n            throw noProviderError(this, key);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    _getByKeySelf(key, notFoundValue) {\n        /** @type {?} */\n        const obj = this._getObjByKeyId(key.id);\n        return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);\n    }\n    /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @param {?} visibility\n     * @return {?}\n     */\n    _getByKeyDefault(key, notFoundValue, visibility) {\n        /** @type {?} */\n        let inj;\n        if (visibility instanceof SkipSelf) {\n            inj = this.parent;\n        }\n        else {\n            inj = this;\n        }\n        while (inj instanceof ReflectiveInjector_) {\n            /** @type {?} */\n            const inj_ = (/** @type {?} */ (inj));\n            /** @type {?} */\n            const obj = inj_._getObjByKeyId(key.id);\n            if (obj !== UNDEFINED)\n                return obj;\n            inj = inj_.parent;\n        }\n        if (inj !== null) {\n            return inj.get(key.token, notFoundValue);\n        }\n        else {\n            return this._throwOrNull(key, notFoundValue);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get displayName() {\n        /** @type {?} */\n        const providers = _mapProviders(this, (/**\n         * @param {?} b\n         * @return {?}\n         */\n        (b) => ' \"' + b.key.displayName + '\" '))\n            .join(', ');\n        return `ReflectiveInjector(providers: [${providers}])`;\n    }\n    /**\n     * @return {?}\n     */\n    toString() { return this.displayName; }\n}\nReflectiveInjector_.INJECTOR_KEY = ReflectiveKey.get(Injector);\n/**\n * @param {?} injector\n * @param {?} fn\n * @return {?}\n */\nfunction _mapProviders(injector, fn) {\n    /** @type {?} */\n    const res = new Array(injector._providers.length);\n    for (let i = 0; i < injector._providers.length; ++i) {\n        res[i] = fn(injector.getProviderAtIndex(i));\n    }\n    return res;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A DI token that you can use to create a virtual [provider](guide/glossary#provider)\n * that will populate the `entryComponents` field of components and NgModules\n * based on its `useValue` property value.\n * All components that are referenced in the `useValue` value (either directly\n * or in a nested array or map) are added to the `entryComponents` property.\n *\n * \\@usageNotes\n *\n * The following example shows how the router can populate the `entryComponents`\n * field of an NgModule based on a router configuration that refers\n * to components.\n *\n * ```typescript\n * // helper function inside the router\n * function provideRoutes(routes) {\n *   return [\n *     {provide: ROUTES, useValue: routes},\n *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\n *   ];\n * }\n *\n * // user code\n * let routes = [\n *   {path: '/root', component: RootComp},\n *   {path: '/teams', component: TeamsComp}\n * ];\n *\n * \\@NgModule({\n *   providers: [provideRoutes(routes)]\n * })\n * class ModuleWithRoutes {}\n * ```\n *\n * \\@publicApi\n * @type {?}\n */\nconst ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken('AnalyzeForEntryComponents');\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Base class for query metadata.\n *\n * @see `ContentChildren`.\n * @see `ContentChild`.\n * @see `ViewChildren`.\n * @see `ViewChild`.\n *\n * \\@publicApi\n * @abstract\n */\nclass Query {\n}\nconst ɵ0$4 = /**\n * @param {?=} selector\n * @param {?=} data\n * @return {?}\n */\n(selector, data = {}) => (Object.assign({ selector, first: false, isViewQuery: false, descendants: false }, data));\n/**\n * ContentChildren decorator and metadata.\n *\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst ContentChildren = makePropDecorator('ContentChildren', (ɵ0$4), Query);\nconst ɵ1$1 = /**\n * @param {?=} selector\n * @param {?=} data\n * @return {?}\n */\n(selector, data = {}) => (Object.assign({ selector, first: true, isViewQuery: false, descendants: true }, data));\n/**\n * ContentChild decorator and metadata.\n *\n *\n * \\@Annotation\n *\n * \\@publicApi\n * @type {?}\n */\nconst ContentChild = makePropDecorator('ContentChild', (ɵ1$1), Query);\nconst ɵ2$1 = /**\n * @param {?=} selector\n * @param {?=} data\n * @return {?}\n */\n(selector, data = {}) => (Object.assign({ selector, first: false, isViewQuery: true, descendants: true }, data));\n/**\n * ViewChildren decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst ViewChildren = makePropDecorator('ViewChildren', (ɵ2$1), Query);\nconst ɵ3 = /**\n * @param {?} selector\n * @param {?} data\n * @return {?}\n */\n(selector, data) => (Object.assign({ selector, first: true, isViewQuery: true, descendants: true }, data));\n/**\n * ViewChild decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst ViewChild = makePropDecorator('ViewChild', (ɵ3), Query);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nconst ChangeDetectionStrategy = {\n    /**\n     * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n     * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n     * Change detection can still be explicitly invoked.\n     * This strategy applies to all child directives and cannot be overridden.\n     */\n    OnPush: 0,\n    /**\n     * Use the default `CheckAlways` strategy, in which change detection is automatic until\n     * explicitly deactivated.\n     */\n    Default: 1,\n};\nChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = 'OnPush';\nChangeDetectionStrategy[ChangeDetectionStrategy.Default] = 'Default';\n/** @enum {number} */\nconst ChangeDetectorStatus = {\n    /**\n     * A state in which, after calling `detectChanges()`, the change detector\n     * state becomes `Checked`, and must be explicitly invoked or reactivated.\n     */\n    CheckOnce: 0,\n    /**\n     * A state in which change detection is skipped until the change detector mode\n     * becomes `CheckOnce`.\n     */\n    Checked: 1,\n    /**\n     * A state in which change detection continues automatically until explicitly\n     * deactivated.\n     */\n    CheckAlways: 2,\n    /**\n     * A state in which a change detector sub tree is not a part of the main tree and\n     * should be skipped.\n     */\n    Detached: 3,\n    /**\n     * Indicates that the change detector encountered an error checking a binding\n     * or calling a directive lifecycle method and is now in an inconsistent state. Change\n     * detectors in this state do not detect changes.\n     */\n    Errored: 4,\n    /**\n     * Indicates that the change detector has been destroyed.\n     */\n    Destroyed: 5,\n};\nChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = 'CheckOnce';\nChangeDetectorStatus[ChangeDetectorStatus.Checked] = 'Checked';\nChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = 'CheckAlways';\nChangeDetectorStatus[ChangeDetectorStatus.Detached] = 'Detached';\nChangeDetectorStatus[ChangeDetectorStatus.Errored] = 'Errored';\nChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = 'Destroyed';\n/**\n * Reports whether a given strategy is currently the default for change detection.\n * @see `ChangeDetectorStatus` / `ChangeDetectorRef`\n * @param {?} changeDetectionStrategy The strategy to check.\n * @return {?} True if the given strategy is the current default, false otherwise.\n */\nfunction isDefaultChangeDetectionStrategy(changeDetectionStrategy) {\n    return changeDetectionStrategy == null ||\n        changeDetectionStrategy === ChangeDetectionStrategy.Default;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to resolve resource URLs on `\\@Component` when used with JIT compilation.\n *\n * Example:\n * ```\n * \\@Component({\n *   selector: 'my-comp',\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n * })\n * class MyComponent{\n * }\n *\n * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process\n * // and `MyComponent`'s `\\@Component.templateUrl` needs to be resolved asynchronously.\n *\n * // Calling `resolveComponentResources()` will resolve `\\@Component.templateUrl` into\n * // `\\@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\n *\n * // Use browser's `fetch()` function as the default resource resolution strategy.\n * resolveComponentResources(fetch).then(() => {\n *   // After resolution all URLs have been converted into `template` strings.\n *   renderComponent(MyComponent);\n * });\n *\n * ```\n *\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n * to call this method outside JIT mode.\n *\n * @param {?} resourceResolver a function which is responsible for returning a `Promise` to the\n * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.\n * @return {?}\n */\nfunction resolveComponentResources(resourceResolver) {\n    // Store all promises which are fetching the resources.\n    /** @type {?} */\n    const componentResolved = [];\n    // Cache so that we don't fetch the same resource more than once.\n    /** @type {?} */\n    const urlMap = new Map();\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    function cachedResourceResolve(url) {\n        /** @type {?} */\n        let promise = urlMap.get(url);\n        if (!promise) {\n            /** @type {?} */\n            const resp = resourceResolver(url);\n            urlMap.set(url, promise = resp.then(unwrapResponse));\n        }\n        return promise;\n    }\n    componentResourceResolutionQueue.forEach((/**\n     * @param {?} component\n     * @param {?} type\n     * @return {?}\n     */\n    (component, type) => {\n        /** @type {?} */\n        const promises = [];\n        if (component.templateUrl) {\n            promises.push(cachedResourceResolve(component.templateUrl).then((/**\n             * @param {?} template\n             * @return {?}\n             */\n            (template) => {\n                component.template = template;\n            })));\n        }\n        /** @type {?} */\n        const styleUrls = component.styleUrls;\n        /** @type {?} */\n        const styles = component.styles || (component.styles = []);\n        /** @type {?} */\n        const styleOffset = component.styles.length;\n        styleUrls && styleUrls.forEach((/**\n         * @param {?} styleUrl\n         * @param {?} index\n         * @return {?}\n         */\n        (styleUrl, index) => {\n            styles.push(''); // pre-allocate array.\n            promises.push(cachedResourceResolve(styleUrl).then((/**\n             * @param {?} style\n             * @return {?}\n             */\n            (style) => {\n                styles[styleOffset + index] = style;\n                styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n                if (styleUrls.length == 0) {\n                    component.styleUrls = undefined;\n                }\n            })));\n        }));\n        /** @type {?} */\n        const fullyResolved = Promise.all(promises).then((/**\n         * @return {?}\n         */\n        () => componentDefResolved(type)));\n        componentResolved.push(fullyResolved);\n    }));\n    clearResolutionOfComponentResourcesQueue();\n    return Promise.all(componentResolved).then((/**\n     * @return {?}\n     */\n    () => undefined));\n}\n/** @type {?} */\nlet componentResourceResolutionQueue = new Map();\n// Track when existing ngComponentDef for a Type is waiting on resources.\n/** @type {?} */\nconst componentDefPendingResolution = new Set();\n/**\n * @param {?} type\n * @param {?} metadata\n * @return {?}\n */\nfunction maybeQueueResolutionOfComponentResources(type, metadata) {\n    if (componentNeedsResolution(metadata)) {\n        componentResourceResolutionQueue.set(type, metadata);\n        componentDefPendingResolution.add(type);\n    }\n}\n/**\n * @param {?} component\n * @return {?}\n */\nfunction componentNeedsResolution(component) {\n    return !!((component.templateUrl && !component.template) ||\n        component.styleUrls && component.styleUrls.length);\n}\n/**\n * @return {?}\n */\nfunction clearResolutionOfComponentResourcesQueue() {\n    /** @type {?} */\n    const old = componentResourceResolutionQueue;\n    componentResourceResolutionQueue = new Map();\n    return old;\n}\n/**\n * @return {?}\n */\nfunction isComponentResourceResolutionQueueEmpty() {\n    return componentResourceResolutionQueue.size === 0;\n}\n/**\n * @param {?} response\n * @return {?}\n */\nfunction unwrapResponse(response) {\n    return typeof response == 'string' ? response : response.text();\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction componentDefResolved(type) {\n    componentDefPendingResolution.delete(type);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nconst ViewEncapsulation = {\n    /**\n     * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host\n     * Element and pre-processing the style rules provided via {@link Component#styles styles} or\n     * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all\n     * selectors.\n     *\n     * This is the default option.\n     */\n    Emulated: 0,\n    /**\n     * @deprecated v6.1.0 - use {ViewEncapsulation.ShadowDom} instead.\n     * Use the native encapsulation mechanism of the renderer.\n     *\n     * For the DOM this means using the deprecated [Shadow DOM\n     * v0](https://w3c.github.io/webcomponents/spec/shadow/) and\n     * creating a ShadowRoot for Component's Host Element.\n     */\n    Native: 1,\n    /**\n     * Don't provide any template or style encapsulation.\n     */\n    None: 2,\n    /**\n     * Use Shadow DOM to encapsulate styles.\n     *\n     * For the DOM this means using modern [Shadow\n     * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n     * creating a ShadowRoot for Component's Host Element.\n     */\n    ShadowDom: 3,\n};\nViewEncapsulation[ViewEncapsulation.Emulated] = 'Emulated';\nViewEncapsulation[ViewEncapsulation.Native] = 'Native';\nViewEncapsulation[ViewEncapsulation.None] = 'None';\nViewEncapsulation[ViewEncapsulation.ShadowDom] = 'ShadowDom';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction ngDevModeResetPerfCounters() {\n    const newCounters = {\n        firstTemplatePass: 0,\n        tNode: 0,\n        tView: 0,\n        rendererCreateTextNode: 0,\n        rendererSetText: 0,\n        rendererCreateElement: 0,\n        rendererAddEventListener: 0,\n        rendererSetAttribute: 0,\n        rendererRemoveAttribute: 0,\n        rendererSetProperty: 0,\n        rendererSetClassName: 0,\n        rendererAddClass: 0,\n        rendererRemoveClass: 0,\n        rendererSetStyle: 0,\n        rendererRemoveStyle: 0,\n        rendererDestroy: 0,\n        rendererDestroyNode: 0,\n        rendererMoveNode: 0,\n        rendererRemoveNode: 0,\n        rendererCreateComment: 0,\n        stylingMap: 0,\n        stylingMapCacheMiss: 0,\n        stylingProp: 0,\n        stylingPropCacheMiss: 0,\n        stylingApply: 0,\n        stylingApplyCacheMiss: 0,\n    };\n    // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n    _global['ngDevMode'] = newCounters;\n    return newCounters;\n}\n/**\n * This checks to see if the `ngDevMode` has been set. If yes,\n * then we honor it, otherwise we default to dev mode with additional checks.\n *\n * The idea is that unless we are doing production build where we explicitly\n * set `ngDevMode == false` we should be helping the developer by providing\n * as much early warning and errors as possible.\n *\n * NOTE: changes to the `ngDevMode` name must be synced with `compiler-cli/src/tooling.ts`.\n */\nif (typeof ngDevMode === 'undefined' || ngDevMode) {\n    ngDevModeResetPerfCounters();\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Convince closure compiler that the wrapped function has no side-effects.\n *\n * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to\n * allow us to execute a function but have closure compiler mark the call as no-side-effects.\n * It is important that the return value for the `noSideEffects` function be assigned\n * to something which is retained otherwise the call to `noSideEffects` will be removed by closure\n * compiler.\n */\nfunction noSideEffects(fn) {\n    return '' + { toString: fn };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This file contains reuseable \"empty\" symbols that can be used as default return values\n * in different parts of the rendering code. Because the same symbols are returned, this\n * allows for identity checks against these values to be consistently used by the framework\n * code.\n * @type {?}\n */\nconst EMPTY_OBJ = {};\n/** @type {?} */\nconst EMPTY_ARRAY$1 = [];\n// freezing the values prevents any code from accidentally inserting new values in\nif (typeof ngDevMode !== 'undefined' && ngDevMode) {\n    // These property accesses can be ignored because ngDevMode will be set to false\n    // when optimizing code and the whole if statement will be dropped.\n    // tslint:disable-next-line:no-toplevel-property-access\n    Object.freeze(EMPTY_OBJ);\n    // tslint:disable-next-line:no-toplevel-property-access\n    Object.freeze(EMPTY_ARRAY$1);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst NG_COMPONENT_DEF = getClosureSafeProperty({ ngComponentDef: getClosureSafeProperty });\n/** @type {?} */\nconst NG_DIRECTIVE_DEF = getClosureSafeProperty({ ngDirectiveDef: getClosureSafeProperty });\n/** @type {?} */\nconst NG_PIPE_DEF = getClosureSafeProperty({ ngPipeDef: getClosureSafeProperty });\n/** @type {?} */\nconst NG_MODULE_DEF = getClosureSafeProperty({ ngModuleDef: getClosureSafeProperty });\n/** @type {?} */\nconst NG_BASE_DEF = getClosureSafeProperty({ ngBaseDef: getClosureSafeProperty });\n// TODO(misko): This is wrong. The NG_ELEMENT_ID should never be minified.\n/**\n * If a directive is diPublic, bloomAdd sets a property on the type with this constant as\n * the key and the directive's unique ID as the value. This allows us to map directives to their\n * bloom filter bit for DI.\n * @type {?}\n */\nconst NG_ELEMENT_ID = getClosureSafeProperty({ __NG_ELEMENT_ID__: getClosureSafeProperty });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet _renderCompCount = 0;\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngComponentDef = defineComponent({\n *     ...\n *   });\n * }\n * ```\n * \\@codeGenApi\n * @template T\n * @param {?} componentDefinition\n * @return {?}\n */\nfunction ɵɵdefineComponent(componentDefinition) {\n    /** @type {?} */\n    const type = componentDefinition.type;\n    /** @type {?} */\n    const typePrototype = type.prototype;\n    /** @type {?} */\n    const declaredInputs = (/** @type {?} */ ({}));\n    /** @type {?} */\n    const def = {\n        type: type,\n        providersResolver: null,\n        consts: componentDefinition.consts,\n        vars: componentDefinition.vars,\n        factory: componentDefinition.factory,\n        template: componentDefinition.template || (/** @type {?} */ (null)),\n        ngContentSelectors: componentDefinition.ngContentSelectors,\n        hostBindings: componentDefinition.hostBindings || null,\n        contentQueries: componentDefinition.contentQueries || null,\n        declaredInputs: declaredInputs,\n        inputs: (/** @type {?} */ (null)),\n        // assigned in noSideEffects\n        outputs: (/** @type {?} */ (null)),\n        // assigned in noSideEffects\n        exportAs: componentDefinition.exportAs || null,\n        onChanges: null,\n        onInit: typePrototype.ngOnInit || null,\n        doCheck: typePrototype.ngDoCheck || null,\n        afterContentInit: typePrototype.ngAfterContentInit || null,\n        afterContentChecked: typePrototype.ngAfterContentChecked || null,\n        afterViewInit: typePrototype.ngAfterViewInit || null,\n        afterViewChecked: typePrototype.ngAfterViewChecked || null,\n        onDestroy: typePrototype.ngOnDestroy || null,\n        onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\n        directiveDefs: (/** @type {?} */ (null)),\n        // assigned in noSideEffects\n        pipeDefs: (/** @type {?} */ (null)),\n        // assigned in noSideEffects\n        selectors: componentDefinition.selectors,\n        viewQuery: componentDefinition.viewQuery || null,\n        features: componentDefinition.features || null,\n        data: componentDefinition.data || {},\n        // TODO(misko): convert ViewEncapsulation into const enum so that it can be used directly in the\n        // next line. Also `None` should be 0 not 2.\n        encapsulation: componentDefinition.encapsulation || ViewEncapsulation.Emulated,\n        id: 'c',\n        styles: componentDefinition.styles || EMPTY_ARRAY$1,\n        _: (/** @type {?} */ (null)),\n        setInput: null,\n        schemas: componentDefinition.schemas || null,\n    };\n    def._ = (/** @type {?} */ (noSideEffects((/**\n     * @return {?}\n     */\n    () => {\n        /** @type {?} */\n        const directiveTypes = (/** @type {?} */ (componentDefinition.directives));\n        /** @type {?} */\n        const feature = componentDefinition.features;\n        /** @type {?} */\n        const pipeTypes = (/** @type {?} */ (componentDefinition.pipes));\n        def.id += _renderCompCount++;\n        def.inputs = invertObject(componentDefinition.inputs, declaredInputs),\n            def.outputs = invertObject(componentDefinition.outputs),\n            feature && feature.forEach((/**\n             * @param {?} fn\n             * @return {?}\n             */\n            (fn) => fn(def)));\n        def.directiveDefs = directiveTypes ?\n            (/**\n             * @return {?}\n             */\n            () => (typeof directiveTypes === 'function' ? directiveTypes() : directiveTypes)\n                .map(extractDirectiveDef)) :\n            null;\n        def.pipeDefs = pipeTypes ?\n            (/**\n             * @return {?}\n             */\n            () => (typeof pipeTypes === 'function' ? pipeTypes() : pipeTypes).map(extractPipeDef)) :\n            null;\n        // Add ngInjectableDef so components are reachable through the module injector by default\n        // (unless it has already been set by the @Injectable decorator). This is mostly to\n        // support injecting components in tests. In real application code, components should\n        // be retrieved through the node injector, so this isn't a problem.\n        if (!type.hasOwnProperty(NG_INJECTABLE_DEF)) {\n            ((/** @type {?} */ (type)))[NG_INJECTABLE_DEF] =\n                ɵɵdefineInjectable({ factory: (/** @type {?} */ (componentDefinition.factory)) });\n        }\n    }))));\n    return (/** @type {?} */ (def));\n}\n/**\n * \\@codeGenApi\n * @param {?} type\n * @param {?} directives\n * @param {?} pipes\n * @return {?}\n */\nfunction ɵɵsetComponentScope(type, directives, pipes) {\n    /** @type {?} */\n    const def = ((/** @type {?} */ (type.ngComponentDef)));\n    def.directiveDefs = (/**\n     * @return {?}\n     */\n    () => directives.map(extractDirectiveDef));\n    def.pipeDefs = (/**\n     * @return {?}\n     */\n    () => pipes.map(extractPipeDef));\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction extractDirectiveDef(type) {\n    /** @type {?} */\n    const def = getComponentDef(type) || getDirectiveDef(type);\n    if (ngDevMode && !def) {\n        throw new Error(`'${type.name}' is neither 'ComponentType' or 'DirectiveType'.`);\n    }\n    return (/** @type {?} */ (def));\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction extractPipeDef(type) {\n    /** @type {?} */\n    const def = getPipeDef(type);\n    if (ngDevMode && !def) {\n        throw new Error(`'${type.name}' is not a 'PipeType'.`);\n    }\n    return (/** @type {?} */ (def));\n}\n/**\n * \\@codeGenApi\n * @template T\n * @param {?} def\n * @return {?}\n */\nfunction ɵɵdefineNgModule(def) {\n    /** @type {?} */\n    const res = {\n        type: def.type,\n        bootstrap: def.bootstrap || EMPTY_ARRAY$1,\n        declarations: def.declarations || EMPTY_ARRAY$1,\n        imports: def.imports || EMPTY_ARRAY$1,\n        exports: def.exports || EMPTY_ARRAY$1,\n        transitiveCompileScopes: null,\n        schemas: def.schemas || null,\n    };\n    return (/** @type {?} */ (res));\n}\n/**\n * Adds the module metadata that is necessary to compute the module's transitive scope to an\n * existing module definition.\n *\n * Scope metadata of modules is not used in production builds, so calls to this function can be\n * marked pure to tree-shake it from the bundle, allowing for all referenced declarations\n * to become eligible for tree-shaking as well.\n *\n * \\@codeGenApi\n * @param {?} type\n * @param {?} scope\n * @return {?}\n */\nfunction ɵɵsetNgModuleScope(type, scope) {\n    return (/** @type {?} */ (noSideEffects((/**\n     * @return {?}\n     */\n    () => {\n        /** @type {?} */\n        /** @nocollapse */ const ngModuleDef = getNgModuleDef(type, true);\n        ngModuleDef.declarations = scope.declarations || EMPTY_ARRAY$1;\n        ngModuleDef.imports = scope.imports || EMPTY_ARRAY$1;\n        ngModuleDef.exports = scope.exports || EMPTY_ARRAY$1;\n    }))));\n}\n/**\n * Inverts an inputs or outputs lookup such that the keys, which were the\n * minified keys, are part of the values, and the values are parsed so that\n * the publicName of the property is the new key\n *\n * e.g. for\n *\n * ```\n * class Comp {\n * \\@Input()\n *   propName1: string;\n *\n * \\@Input('publicName2')\n *   declaredPropName2: number;\n * }\n * ```\n *\n * will be serialized as\n *\n * ```\n * {\n *   propName1: 'propName1',\n *   declaredPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * which is than translated by the minifier as:\n *\n * ```\n * {\n *   minifiedPropName1: 'propName1',\n *   minifiedPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * becomes: (public name => minifiedName)\n *\n * ```\n * {\n *  'propName1': 'minifiedPropName1',\n *  'publicName2': 'minifiedPropName2',\n * }\n * ```\n *\n * Optionally the function can take `secondary` which will result in: (public name => declared name)\n *\n * ```\n * {\n *  'propName1': 'propName1',\n *  'publicName2': 'declaredPropName2',\n * }\n * ```\n *\n * @template T\n * @param {?=} obj\n * @param {?=} secondary\n * @return {?}\n */\nfunction invertObject(obj, secondary) {\n    if (obj == null)\n        return (/** @type {?} */ (EMPTY_OBJ));\n    /** @type {?} */\n    const newLookup = {};\n    for (const minifiedKey in obj) {\n        if (obj.hasOwnProperty(minifiedKey)) {\n            /** @type {?} */\n            let publicName = (/** @type {?} */ (obj[minifiedKey]));\n            /** @type {?} */\n            let declaredName = publicName;\n            if (Array.isArray(publicName)) {\n                declaredName = publicName[1];\n                publicName = publicName[0];\n            }\n            newLookup[publicName] = minifiedKey;\n            if (secondary) {\n                (secondary[publicName] = (/** @type {?} */ (declaredName)));\n            }\n        }\n    }\n    return newLookup;\n}\n/**\n * Create a base definition\n *\n * # Example\n * ```ts\n * class ShouldBeInherited {\n *   static ngBaseDef = ɵɵdefineBase({\n *      ...\n *   })\n * }\n * ```\n *\n * \\@codeGenApi\n * @template T\n * @param {?} baseDefinition The base definition parameters\n *\n * @return {?}\n */\nfunction ɵɵdefineBase(baseDefinition) {\n    /** @type {?} */\n    const declaredInputs = (/** @type {?} */ ({}));\n    return {\n        inputs: invertObject((/** @type {?} */ (baseDefinition.inputs)), declaredInputs),\n        declaredInputs: declaredInputs,\n        outputs: invertObject((/** @type {?} */ (baseDefinition.outputs))),\n        viewQuery: baseDefinition.viewQuery || null,\n        contentQueries: baseDefinition.contentQueries || null,\n    };\n}\n/**\n * Create a directive definition object.\n *\n * # Example\n * ```ts\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngDirectiveDef = ɵɵdefineDirective({\n *     ...\n *   });\n * }\n * ```\n *\n * \\@codeGenApi\n * @type {?}\n */\nconst ɵɵdefineDirective = (/** @type {?} */ ((/** @type {?} */ (ɵɵdefineComponent))));\n/**\n * Create a pipe definition object.\n *\n * # Example\n * ```\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ngPipeDef = definePipe({\n *     ...\n *   });\n * }\n * ```\n * \\@codeGenApi\n * @template T\n * @param {?} pipeDef Pipe definition generated by the compiler\n *\n * @return {?}\n */\nfunction ɵɵdefinePipe(pipeDef) {\n    return (/** @type {?} */ (((/** @type {?} */ ({\n        name: pipeDef.name,\n        factory: pipeDef.factory,\n        pure: pipeDef.pure !== false,\n        onDestroy: pipeDef.type.prototype.ngOnDestroy || null\n    })))));\n}\n/**\n * The following getter methods retrieve the definition form the type. Currently the retrieval\n * honors inheritance, but in the future we may change the rule to require that definitions are\n * explicit. This would require some sort of migration strategy.\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction getComponentDef(type) {\n    return ((/** @type {?} */ (type)))[NG_COMPONENT_DEF] || null;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction getDirectiveDef(type) {\n    return ((/** @type {?} */ (type)))[NG_DIRECTIVE_DEF] || null;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction getPipeDef(type) {\n    return ((/** @type {?} */ (type)))[NG_PIPE_DEF] || null;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction getBaseDef(type) {\n    return ((/** @type {?} */ (type)))[NG_BASE_DEF] || null;\n}\n/**\n * @template T\n * @param {?} type\n * @param {?=} throwNotFound\n * @return {?}\n */\nfunction getNgModuleDef(type, throwNotFound) {\n    /** @type {?} */\n    /** @nocollapse */ const ngModuleDef = ((/** @type {?} */ (type)))[NG_MODULE_DEF] || null;\n    if (!ngModuleDef && throwNotFound === true) {\n        throw new Error(`Type ${stringify(type)} does not have 'ngModuleDef' property.`);\n    }\n    return ngModuleDef;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns whether the values are different from a change detection stand point.\n *\n * Constraints are relaxed in checkNoChanges mode. See `devModeEqual` for details.\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction isDifferent(a, b) {\n    // NaN is the only value that is not equal to itself so the first\n    // test checks if both a and b are not NaN\n    return !(a !== a && b !== b) && a !== b;\n}\n/**\n * Used for stringify render output in Ivy.\n * Important! This function is very performance-sensitive and we should\n * be extra careful not to introduce megamorphic reads in it.\n * @param {?} value\n * @return {?}\n */\nfunction renderStringify(value) {\n    if (typeof value === 'function')\n        return value.name || value;\n    if (typeof value === 'string')\n        return value;\n    if (value == null)\n        return '';\n    return '' + value;\n}\n/**\n * Used to stringify a value so that it can be displayed in an error message.\n * Important! This function contains a megamorphic read and should only be\n * used for error messages.\n * @param {?} value\n * @return {?}\n */\nfunction stringifyForError(value) {\n    if (typeof value === 'object' && value != null && typeof value.type === 'function') {\n        return value.type.name || value.type;\n    }\n    return renderStringify(value);\n}\nconst ɵ0$5 = /**\n * @return {?}\n */\n() => (typeof requestAnimationFrame !== 'undefined' && requestAnimationFrame || // browser only\n    setTimeout // everything else\n).bind(_global);\n/** @type {?} */\nconst defaultScheduler = ((ɵ0$5))();\n/**\n *\n * \\@codeGenApi\n * @param {?} element\n * @return {?}\n */\nfunction ɵɵresolveWindow(element) {\n    return { name: 'window', target: element.ownerDocument.defaultView };\n}\n/**\n *\n * \\@codeGenApi\n * @param {?} element\n * @return {?}\n */\nfunction ɵɵresolveDocument(element) {\n    return { name: 'document', target: element.ownerDocument };\n}\n/**\n *\n * \\@codeGenApi\n * @param {?} element\n * @return {?}\n */\nfunction ɵɵresolveBody(element) {\n    return { name: 'body', target: element.ownerDocument.body };\n}\n/**\n * The special delimiter we use to separate property names, prefixes, and suffixes\n * in property binding metadata. See storeBindingMetadata().\n *\n * We intentionally use the Unicode \"REPLACEMENT CHARACTER\" (U+FFFD) as a delimiter\n * because it is a very uncommon character that is unlikely to be part of a user's\n * property names or interpolation strings. If it is in fact used in a property\n * binding, DebugElement.properties will not return the correct value for that\n * binding. However, there should be no runtime effect for real applications.\n *\n * This character is typically rendered as a question mark inside of a diamond.\n * See https://en.wikipedia.org/wiki/Specials_(Unicode_block)\n *\n * @type {?}\n */\nconst INTERPOLATION_DELIMITER = `�`;\n/**\n * Determines whether or not the given string is a property metadata string.\n * See storeBindingMetadata().\n * @param {?} str\n * @return {?}\n */\nfunction isPropMetadataString(str) {\n    return str.indexOf(INTERPOLATION_DELIMITER) >= 0;\n}\n/**\n * Unwrap a value which might be behind a closure (for forward declaration reasons).\n * @template T\n * @param {?} value\n * @return {?}\n */\nfunction maybeUnwrapFn(value) {\n    if (value instanceof Function) {\n        return value();\n    }\n    else {\n        return value;\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction assertEqual(actual, expected, msg) {\n    if (actual != expected) {\n        throwError(msg);\n    }\n}\nfunction assertNotEqual(actual, expected, msg) {\n    if (actual == expected) {\n        throwError(msg);\n    }\n}\nfunction assertNotSame(actual, expected, msg) {\n    if (actual === expected) {\n        throwError(msg);\n    }\n}\nfunction assertLessThan(actual, expected, msg) {\n    if (actual >= expected) {\n        throwError(msg);\n    }\n}\nfunction assertGreaterThan(actual, expected, msg) {\n    if (actual <= expected) {\n        throwError(msg);\n    }\n}\nfunction assertDefined(actual, msg) {\n    if (actual == null) {\n        throwError(msg);\n    }\n}\nfunction throwError(msg) {\n    // tslint:disable-next-line\n    debugger; // Left intentionally for better debugger experience.\n    throw new Error(`ASSERTION ERROR: ${msg}`);\n}\nfunction assertDomNode(node) {\n    // If we're in a worker, `Node` will not be defined.\n    assertEqual((typeof Node !== 'undefined' && node instanceof Node) ||\n        (typeof node === 'object' && node.constructor.name === 'WebWorkerRenderNode'), true, 'The provided value must be an instance of a DOM Node');\n}\nfunction assertDataInRange(arr, index) {\n    assertLessThan(index, arr ? arr.length : 0, 'index expected to be a valid data index');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Below are constants for LView indices to help us look up LView members\n// without having to remember the specific indices.\n// Uglify will inline these when minifying so there shouldn't be a cost.\n/** @type {?} */\nconst HOST = 0;\n/** @type {?} */\nconst TVIEW = 1;\n/** @type {?} */\nconst FLAGS = 2;\n/** @type {?} */\nconst PARENT = 3;\n/** @type {?} */\nconst NEXT = 4;\n/** @type {?} */\nconst QUERIES = 5;\n/** @type {?} */\nconst T_HOST = 6;\n/** @type {?} */\nconst BINDING_INDEX = 7;\n/** @type {?} */\nconst CLEANUP = 8;\n/** @type {?} */\nconst CONTEXT = 9;\n/** @type {?} */\nconst INJECTOR$1 = 10;\n/** @type {?} */\nconst RENDERER_FACTORY = 11;\n/** @type {?} */\nconst RENDERER = 12;\n/** @type {?} */\nconst SANITIZER = 13;\n/** @type {?} */\nconst CHILD_HEAD = 14;\n/** @type {?} */\nconst CHILD_TAIL = 15;\n/** @type {?} */\nconst CONTENT_QUERIES = 16;\n/** @type {?} */\nconst DECLARATION_VIEW = 17;\n/** @type {?} */\nconst PREORDER_HOOK_FLAGS = 18;\n/**\n * Size of LView's header. Necessary to adjust for it when setting slots.\n * @type {?}\n */\nconst HEADER_OFFSET = 20;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Special location which allows easy identification of type. If we have an array which was\n * retrieved from the `LView` and that array has `true` at `TYPE` location, we know it is\n * `LContainer`.\n * @type {?}\n */\nconst TYPE = 1;\n/**\n * Below are constants for LContainer indices to help us look up LContainer members\n * without having to remember the specific indices.\n * Uglify will inline these when minifying so there shouldn't be a cost.\n * @type {?}\n */\nconst ACTIVE_INDEX = 2;\n// PARENT, NEXT, QUERIES and T_HOST are indices 3, 4, 5 and 6.\n// As we already have these constants in LView, we don't need to re-create them.\n/** @type {?} */\nconst NATIVE = 7;\n/** @type {?} */\nconst VIEWS = 8;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This property will be monkey-patched on elements, components and directives\n * @type {?}\n */\nconst MONKEY_PATCH_KEY_NAME = '__ngContext__';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * For efficiency reasons we often put several different data types (`RNode`, `LView`, `LContainer`,\n * `StylingContext`) in same location in `LView`. This is because we don't want to pre-allocate\n * space for it because the storage is sparse. This file contains utilities for dealing with such\n * data types.\n *\n * How do we know what is stored at a given location in `LView`.\n * - `Array.isArray(value) === false` => `RNode` (The normal storage value)\n * - `Array.isArray(value) === true` => then the `value[0]` represents the wrapped value.\n *   - `typeof value[TYPE] === 'object'` => `LView`\n *      - This happens when we have a component at a given location\n *   - `typeof value[TYPE] === 'number'` => `StylingContext`\n *      - This happens when we have style/class binding at a given location.\n *   - `typeof value[TYPE] === true` => `LContainer`\n *      - This happens when we have `LContainer` binding at a given location.\n *\n *\n * NOTE: it is assumed that `Array.isArray` and `typeof` operations are very efficient.\n */\n/**\n * Returns `RNode`.\n * @param {?} value wrapped value of `RNode`, `LView`, `LContainer`, `StylingContext`\n * @return {?}\n */\nfunction unwrapRNode(value) {\n    while (Array.isArray(value)) {\n        value = (/** @type {?} */ (value[HOST]));\n    }\n    return (/** @type {?} */ (value));\n}\n/**\n * True if `value` is `LView`.\n * @param {?} value wrapped value of `RNode`, `LView`, `LContainer`, `StylingContext`\n * @return {?}\n */\nfunction isLView(value) {\n    return Array.isArray(value) && typeof value[TYPE] === 'object';\n}\n/**\n * True if `value` is `LContainer`.\n * @param {?} value wrapped value of `RNode`, `LView`, `LContainer`, `StylingContext`\n * @return {?}\n */\nfunction isLContainer(value) {\n    return Array.isArray(value) && value[TYPE] === true;\n}\n/**\n * True if `value` is `StylingContext`.\n * @param {?} value wrapped value of `RNode`, `LView`, `LContainer`, `StylingContext`\n * @return {?}\n */\nfunction isStylingContext(value) {\n    return Array.isArray(value) && typeof value[TYPE] === 'number';\n}\n/**\n * Retrieves an element value from the provided `viewData`, by unwrapping\n * from any containers, component views, or style contexts.\n * @param {?} index\n * @param {?} lView\n * @return {?}\n */\nfunction getNativeByIndex(index, lView) {\n    return unwrapRNode(lView[index + HEADER_OFFSET]);\n}\n/**\n * @param {?} tNode\n * @param {?} hostView\n * @return {?}\n */\nfunction getNativeByTNode(tNode, hostView) {\n    return unwrapRNode(hostView[tNode.index]);\n}\n/**\n * A helper function that returns `true` if a given `TNode` has any matching directives.\n * @param {?} tNode\n * @return {?}\n */\nfunction hasDirectives(tNode) {\n    return tNode.directiveEnd > tNode.directiveStart;\n}\n/**\n * @param {?} index\n * @param {?} view\n * @return {?}\n */\nfunction getTNode(index, view) {\n    ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');\n    ngDevMode && assertLessThan(index, view[TVIEW].data.length, 'wrong index for TNode');\n    return (/** @type {?} */ (view[TVIEW].data[index + HEADER_OFFSET]));\n}\n/**\n * Retrieves a value from any `LView` or `TData`.\n * @template T\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction loadInternal(view, index) {\n    ngDevMode && assertDataInRange(view, index + HEADER_OFFSET);\n    return view[index + HEADER_OFFSET];\n}\n/**\n * @param {?} nodeIndex\n * @param {?} hostView\n * @return {?}\n */\nfunction getComponentViewByIndex(nodeIndex, hostView) {\n    // Could be an LView or an LContainer. If LContainer, unwrap to find LView.\n    /** @type {?} */\n    const slotValue = hostView[nodeIndex];\n    /** @type {?} */\n    const lView = isLView(slotValue) ? slotValue : slotValue[HOST];\n    return lView;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction isContentQueryHost(tNode) {\n    return (tNode.flags & 4 /* hasContentQuery */) !== 0;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction isComponent(tNode) {\n    return (tNode.flags & 1 /* isComponent */) === 1 /* isComponent */;\n}\n/**\n * @template T\n * @param {?} def\n * @return {?}\n */\nfunction isComponentDef(def) {\n    return ((/** @type {?} */ (def))).template !== null;\n}\n/**\n * @param {?} target\n * @return {?}\n */\nfunction isRootView(target) {\n    return (target[FLAGS] & 512 /* IsRoot */) !== 0;\n}\n/**\n * Returns the monkey-patch value data present on the target (which could be\n * a component, directive or a DOM node).\n * @param {?} target\n * @return {?}\n */\nfunction readPatchedData(target) {\n    ngDevMode && assertDefined(target, 'Target expected');\n    return target[MONKEY_PATCH_KEY_NAME];\n}\n/**\n * @param {?} target\n * @return {?}\n */\nfunction readPatchedLView(target) {\n    /** @type {?} */\n    const value = readPatchedData(target);\n    if (value) {\n        return Array.isArray(value) ? value : ((/** @type {?} */ (value))).lView;\n    }\n    return null;\n}\n/**\n * Returns a boolean for whether the view is attached to the change detection tree.\n *\n * Note: This determines whether a view should be checked, not whether it's inserted\n * into a container. For that, you'll want `viewAttachedToContainer` below.\n * @param {?} view\n * @return {?}\n */\nfunction viewAttachedToChangeDetector(view) {\n    return (view[FLAGS] & 128 /* Attached */) === 128 /* Attached */;\n}\n/**\n * Returns a boolean for whether the view is attached to a container.\n * @param {?} view\n * @return {?}\n */\nfunction viewAttachedToContainer(view) {\n    return isLContainer(view[PARENT]);\n}\n/**\n * Resets the pre-order hook flags of the view.\n * @param {?} lView the LView on which the flags are reset\n * @return {?}\n */\nfunction resetPreOrderHookFlags(lView) {\n    lView[PREORDER_HOOK_FLAGS] = 0;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} actual\n * @param {?=} msg\n * @return {?}\n */\nfunction assertComponentType(actual, msg = 'Type passed in is not ComponentType, it does not have \\'ngComponentDef\\' property.') {\n    if (!getComponentDef(actual)) {\n        throwError(msg);\n    }\n}\n/**\n * @param {?} actual\n * @param {?=} msg\n * @return {?}\n */\nfunction assertNgModuleType(actual, msg = 'Type passed in is not NgModuleType, it does not have \\'ngModuleDef\\' property.') {\n    if (!getNgModuleDef(actual)) {\n        throwError(msg);\n    }\n}\n/**\n * @param {?} isParent\n * @return {?}\n */\nfunction assertPreviousIsParent(isParent) {\n    assertEqual(isParent, true, 'previousOrParentTNode should be a parent');\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction assertHasParent(tNode) {\n    assertDefined(tNode.parent, 'previousOrParentTNode should have a parent');\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction assertLContainerOrUndefined(value) {\n    value && assertEqual(isLContainer(value), true, 'Expecting LContainer or undefined or null');\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction assertLContainer(value) {\n    assertDefined(value, 'LContainer must be defined');\n    assertEqual(isLContainer(value), true, 'Expecting LContainer');\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction assertLViewOrUndefined(value) {\n    value && assertEqual(isLView(value), true, 'Expecting LView or undefined or null');\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction assertLView(value) {\n    assertDefined(value, 'LView must be defined');\n    assertEqual(isLView(value), true, 'Expecting LView');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nconst TNODE = 8;\n/** @type {?} */\nconst PARENT_INJECTOR = 8;\n/** @type {?} */\nconst INJECTOR_BLOOM_PARENT_SIZE = 9;\n/** @type {?} */\nconst NO_PARENT_INJECTOR = (/** @type {?} */ (-1));\n/**\n * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in\n * `TView.data`. This allows us to store information about the current node's tokens (which\n * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be\n * shared, so they live in `LView`).\n *\n * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter\n * determines whether a directive is available on the associated node or not. This prevents us\n * from searching the directives array at this level unless it's probable the directive is in it.\n *\n * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.\n *\n * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed\n * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`\n * will differ based on where it is flattened into the main array, so it's not possible to know\n * the indices ahead of time and save their types here. The interfaces are still included here\n * for documentation purposes.\n *\n * export interface LInjector extends Array<any> {\n *\n *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Cumulative bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Cumulative bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Cumulative bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Cumulative bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Cumulative bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Cumulative bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Cumulative bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // We need to store a reference to the injector's parent so DI can keep looking up\n *    // the injector tree until it finds the dependency it's looking for.\n *    [PARENT_INJECTOR]: number;\n * }\n *\n * export interface TInjector extends Array<any> {\n *\n *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Shared node bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Shared node bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Shared node bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Shared node bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Shared node bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Shared node bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Shared node bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // Necessary to find directive indices for a particular node.\n *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;\n *  }\n */\n/**\n * Factory for creating instances of injectors in the NodeInjector.\n *\n * This factory is complicated by the fact that it can resolve `multi` factories as well.\n *\n * NOTE: Some of the fields are optional which means that this class has two hidden classes.\n * - One without `multi` support (most common)\n * - One with `multi` values, (rare).\n *\n * Since VMs can cache up to 4 inline hidden classes this is OK.\n *\n * - Single factory: Only `resolving` and `factory` is defined.\n * - `providers` factory: `componentProviders` is a number and `index = -1`.\n * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\n */\nclass NodeInjectorFactory {\n    /**\n     * @param {?} factory\n     * @param {?} isViewProvider\n     * @param {?} injectImplementation\n     */\n    constructor(factory, \n    /**\n     * Set to `true` if the token is declared in `viewProviders` (or if it is component).\n     */\n    isViewProvider, injectImplementation) {\n        this.factory = factory;\n        /**\n         * Marker set to true during factory invocation to see if we get into recursive loop.\n         * Recursive loop causes an error to be displayed.\n         */\n        this.resolving = false;\n        this.canSeeViewProviders = isViewProvider;\n        this.injectImpl = injectImplementation;\n    }\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction isFactory(obj) {\n    // See: https://jsperf.com/instanceof-vs-getprototypeof\n    return obj !== null && typeof obj == 'object' &&\n        Object.getPrototypeOf(obj) == NodeInjectorFactory.prototype;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} tNode\n * @param {?} type\n * @return {?}\n */\nfunction assertNodeType(tNode, type) {\n    assertDefined(tNode, 'should be called with a TNode');\n    assertEqual(tNode.type, type, `should be a ${typeName(type)}`);\n}\n/**\n * @param {?} tNode\n * @param {...?} types\n * @return {?}\n */\nfunction assertNodeOfPossibleTypes(tNode, ...types) {\n    assertDefined(tNode, 'should be called with a TNode');\n    /** @type {?} */\n    const found = types.some((/**\n     * @param {?} type\n     * @return {?}\n     */\n    type => tNode.type === type));\n    assertEqual(found, true, `Should be one of ${types.map(typeName).join(', ')} but got ${typeName(tNode.type)}`);\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction typeName(type) {\n    if (type == 1 /* Projection */)\n        return 'Projection';\n    if (type == 0 /* Container */)\n        return 'Container';\n    if (type == 2 /* View */)\n        return 'View';\n    if (type == 3 /* Element */)\n        return 'Element';\n    if (type == 4 /* ElementContainer */)\n        return 'ElementContainer';\n    return '<unknown>';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Adds all directive lifecycle hooks from the given `DirectiveDef` to the given `TView`.\n *\n * Must be run *only* on the first template pass.\n *\n * Sets up the pre-order hooks on the provided `tView`,\n * see {\\@link HookData} for details about the data structure.\n *\n * @param {?} directiveIndex The index of the directive in LView\n * @param {?} directiveDef The definition containing the hooks to setup in tView\n * @param {?} tView The current TView\n * @param {?} nodeIndex The index of the node to which the directive is attached\n * @param {?} initialPreOrderHooksLength the number of pre-order hooks already registered before the\n * current process, used to know if the node index has to be added to the array. If it is -1,\n * the node index is never added.\n * @param {?} initialPreOrderCheckHooksLength same as previous for pre-order check hooks\n * @return {?}\n */\nfunction registerPreOrderHooks(directiveIndex, directiveDef, tView, nodeIndex, initialPreOrderHooksLength, initialPreOrderCheckHooksLength) {\n    ngDevMode &&\n        assertEqual(tView.firstTemplatePass, true, 'Should only be called on first template pass');\n    const { onChanges, onInit, doCheck } = directiveDef;\n    if (initialPreOrderHooksLength >= 0 &&\n        (!tView.preOrderHooks || initialPreOrderHooksLength === tView.preOrderHooks.length) &&\n        (onChanges || onInit || doCheck)) {\n        (tView.preOrderHooks || (tView.preOrderHooks = [])).push(nodeIndex);\n    }\n    if (initialPreOrderCheckHooksLength >= 0 &&\n        (!tView.preOrderCheckHooks ||\n            initialPreOrderCheckHooksLength === tView.preOrderCheckHooks.length) &&\n        (onChanges || doCheck)) {\n        (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(nodeIndex);\n    }\n    if (onChanges) {\n        (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, onChanges);\n        (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, onChanges);\n    }\n    if (onInit) {\n        (tView.preOrderHooks || (tView.preOrderHooks = [])).push(-directiveIndex, onInit);\n    }\n    if (doCheck) {\n        (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, doCheck);\n        (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, doCheck);\n    }\n}\n/**\n *\n * Loops through the directives on the provided `tNode` and queues hooks to be\n * run that are not initialization hooks.\n *\n * Should be executed during `elementEnd()` and similar to\n * preserve hook execution order. Content, view, and destroy hooks for projected\n * components and directives must be called *before* their hosts.\n *\n * Sets up the content, view, and destroy hooks on the provided `tView`,\n * see {\\@link HookData} for details about the data structure.\n *\n * NOTE: This does not set up `onChanges`, `onInit` or `doCheck`, those are set up\n * separately at `elementStart`.\n *\n * @param {?} tView The current TView\n * @param {?} tNode The TNode whose directives are to be searched for hooks to queue\n * @return {?}\n */\nfunction registerPostOrderHooks(tView, tNode) {\n    if (tView.firstTemplatePass) {\n        // It's necessary to loop through the directives at elementEnd() (rather than processing in\n        // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\n        // hooks for projected components and directives must be called *before* their hosts.\n        for (let i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {\n            /** @type {?} */\n            const directiveDef = (/** @type {?} */ (tView.data[i]));\n            if (directiveDef.afterContentInit) {\n                (tView.contentHooks || (tView.contentHooks = [])).push(-i, directiveDef.afterContentInit);\n            }\n            if (directiveDef.afterContentChecked) {\n                (tView.contentHooks || (tView.contentHooks = [])).push(i, directiveDef.afterContentChecked);\n                (tView.contentCheckHooks || (tView.contentCheckHooks = [])).push(i, directiveDef.afterContentChecked);\n            }\n            if (directiveDef.afterViewInit) {\n                (tView.viewHooks || (tView.viewHooks = [])).push(-i, directiveDef.afterViewInit);\n            }\n            if (directiveDef.afterViewChecked) {\n                (tView.viewHooks || (tView.viewHooks = [])).push(i, directiveDef.afterViewChecked);\n                (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, directiveDef.afterViewChecked);\n            }\n            if (directiveDef.onDestroy != null) {\n                (tView.destroyHooks || (tView.destroyHooks = [])).push(i, directiveDef.onDestroy);\n            }\n        }\n    }\n}\n/**\n * Executing hooks requires complex logic as we need to deal with 2 constraints.\n *\n * 1. Init hooks (ngOnInit, ngAfterContentInit, ngAfterViewInit) must all be executed once and only\n * once, across many change detection cycles. This must be true even if some hooks throw, or if\n * some recursively trigger a change detection cycle.\n * To solve that, it is required to track the state of the execution of these init hooks.\n * This is done by storing and maintaining flags in the view: the {@link InitPhaseState},\n * and the index within that phase. They can be seen as a cursor in the following structure:\n * [[onInit1, onInit2], [afterContentInit1], [afterViewInit1, afterViewInit2, afterViewInit3]]\n * They are are stored as flags in LView[FLAGS].\n *\n * 2. Pre-order hooks can be executed in batches, because of the select instruction.\n * To be able to pause and resume their execution, we also need some state about the hook's array\n * that is being processed:\n * - the index of the next hook to be executed\n * - the number of init hooks already found in the processed part of the  array\n * They are are stored as flags in LView[PREORDER_HOOK_FLAGS].\n */\n/**\n * Executes necessary hooks at the start of executing a template.\n *\n * Executes hooks that are to be run during the initialization of a directive such\n * as `onChanges`, `onInit`, and `doCheck`.\n *\n * @param {?} currentView\n * @param {?} tView Static data for the view containing the hooks to be executed\n * @param {?} checkNoChangesMode Whether or not we're in checkNoChanges mode.\n * @param {?} currentNodeIndex\n * @return {?}\n */\nfunction executePreOrderHooks(currentView, tView, checkNoChangesMode, currentNodeIndex) {\n    if (!checkNoChangesMode) {\n        executeHooks(currentView, tView.preOrderHooks, tView.preOrderCheckHooks, checkNoChangesMode, 0 /* OnInitHooksToBeRun */, currentNodeIndex !== undefined ? currentNodeIndex : null);\n    }\n}\n/**\n * Executes hooks against the given `LView` based off of whether or not\n * This is the first pass.\n *\n * @param {?} currentView The view instance data to run the hooks against\n * @param {?} firstPassHooks An array of hooks to run if we're in the first view pass\n * @param {?} checkHooks An Array of hooks to run if we're not in the first view pass.\n * @param {?} checkNoChangesMode Whether or not we're in no changes mode.\n * @param {?} initPhaseState the current state of the init phase\n * @param {?} currentNodeIndex 3 cases depending the the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n * @return {?}\n */\nfunction executeHooks(currentView, firstPassHooks, checkHooks, checkNoChangesMode, initPhaseState, currentNodeIndex) {\n    if (checkNoChangesMode)\n        return;\n    /** @type {?} */\n    const hooksToCall = (currentView[FLAGS] & 3 /* InitPhaseStateMask */) === initPhaseState ?\n        firstPassHooks :\n        checkHooks;\n    if (hooksToCall) {\n        callHooks(currentView, hooksToCall, initPhaseState, currentNodeIndex);\n    }\n    // The init phase state must be always checked here as it may have been recursively updated\n    if (currentNodeIndex == null &&\n        (currentView[FLAGS] & 3 /* InitPhaseStateMask */) === initPhaseState &&\n        initPhaseState !== 3 /* InitPhaseCompleted */) {\n        currentView[FLAGS] &= 1023 /* IndexWithinInitPhaseReset */;\n        currentView[FLAGS] += 1 /* InitPhaseStateIncrementer */;\n    }\n}\n/**\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\n * the first LView pass\n *\n * @param {?} currentView The current view\n * @param {?} arr The array in which the hooks are found\n * @param {?} initPhase\n * @param {?} currentNodeIndex 3 cases depending the the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n * @return {?}\n */\nfunction callHooks(currentView, arr, initPhase, currentNodeIndex) {\n    /** @type {?} */\n    const startIndex = currentNodeIndex !== undefined ?\n        (currentView[PREORDER_HOOK_FLAGS] & 65535 /* IndexOfTheNextPreOrderHookMaskMask */) :\n        0;\n    /** @type {?} */\n    const nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;\n    /** @type {?} */\n    let lastNodeIndexFound = 0;\n    for (let i = startIndex; i < arr.length; i++) {\n        /** @type {?} */\n        const hook = (/** @type {?} */ (arr[i + 1]));\n        if (typeof hook === 'number') {\n            lastNodeIndexFound = (/** @type {?} */ (arr[i]));\n            if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {\n                break;\n            }\n        }\n        else {\n            /** @type {?} */\n            const isInitHook = arr[i] < 0;\n            if (isInitHook)\n                currentView[PREORDER_HOOK_FLAGS] += 65536 /* NumberOfInitHooksCalledIncrementer */;\n            if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {\n                callHook(currentView, initPhase, arr, i);\n                currentView[PREORDER_HOOK_FLAGS] =\n                    (currentView[PREORDER_HOOK_FLAGS] & 4294901760 /* NumberOfInitHooksCalledMask */) + i +\n                        2;\n            }\n            i++;\n        }\n    }\n}\n/**\n * Execute one hook against the current `LView`.\n *\n * @param {?} currentView The current view\n * @param {?} initPhase\n * @param {?} arr The array in which the hooks are found\n * @param {?} i The current index within the hook data array\n * @return {?}\n */\nfunction callHook(currentView, initPhase, arr, i) {\n    /** @type {?} */\n    const isInitHook = arr[i] < 0;\n    /** @type {?} */\n    const hook = (/** @type {?} */ (arr[i + 1]));\n    /** @type {?} */\n    const directiveIndex = isInitHook ? -arr[i] : (/** @type {?} */ (arr[i]));\n    /** @type {?} */\n    const directive = currentView[directiveIndex];\n    if (isInitHook) {\n        /** @type {?} */\n        const indexWithintInitPhase = currentView[FLAGS] >> 10 /* IndexWithinInitPhaseShift */;\n        // The init phase state must be always checked here as it may have been recursively\n        // updated\n        if (indexWithintInitPhase <\n            (currentView[PREORDER_HOOK_FLAGS] >> 16 /* NumberOfInitHooksCalledShift */) &&\n            (currentView[FLAGS] & 3 /* InitPhaseStateMask */) === initPhase) {\n            currentView[FLAGS] += 1024 /* IndexWithinInitPhaseIncrementer */;\n            hook.call(directive);\n        }\n    }\n    else {\n        hook.call(directive);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet stylingContext = null;\n/**\n * Gets the most recent styling context value.\n *\n * Note that only one styling context is stored at a given time.\n * @return {?}\n */\nfunction getCachedStylingContext() {\n    return stylingContext;\n}\n/**\n * Sets the most recent styling context value.\n *\n * Note that only one styling context is stored at a given time.\n *\n * @param {?} context The styling context value that will be stored\n * @return {?}\n */\nfunction setCachedStylingContext(context) {\n    stylingContext = context;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Store the element depth count. This is used to identify the root elements of the template\n * so that we can than attach `LView` to only those elements.\n * @type {?}\n */\nlet elementDepthCount;\n/**\n * @return {?}\n */\nfunction getElementDepthCount() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return elementDepthCount;\n}\n/**\n * @return {?}\n */\nfunction increaseElementDepthCount() {\n    elementDepthCount++;\n}\n/**\n * @return {?}\n */\nfunction decreaseElementDepthCount() {\n    elementDepthCount--;\n}\n/** @type {?} */\nlet currentDirectiveDef = null;\n/**\n * @return {?}\n */\nfunction getCurrentDirectiveDef() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return currentDirectiveDef;\n}\n/**\n * @param {?} def\n * @return {?}\n */\nfunction setCurrentDirectiveDef(def) {\n    currentDirectiveDef = def;\n}\n/**\n * Stores whether directives should be matched to elements.\n *\n * When template contains `ngNonBindable` than we need to prevent the runtime form matching\n * directives on children of that element.\n *\n * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n * </div>\n * ```\n * @type {?}\n */\nlet bindingsEnabled;\n/**\n * @return {?}\n */\nfunction getBindingsEnabled() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return bindingsEnabled;\n}\n/**\n * Enables directive matching on elements.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- ɵɵdisableBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- ɵɵenableBindings() -->\n * </div>\n * ```\n *\n * \\@codeGenApi\n * @return {?}\n */\nfunction ɵɵenableBindings() {\n    bindingsEnabled = true;\n}\n/**\n * Disables directive matching on element.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- ɵɵdisableBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- ɵɵenableBindings() -->\n * </div>\n * ```\n *\n * \\@codeGenApi\n * @return {?}\n */\nfunction ɵɵdisableBindings() {\n    bindingsEnabled = false;\n}\n/**\n * @return {?}\n */\nfunction getLView() {\n    return lView;\n}\n/**\n * Used as the starting directive id value.\n *\n * All subsequent directives are incremented from this value onwards.\n * The reason why this value is `1` instead of `0` is because the `0`\n * value is reserved for the template.\n * @type {?}\n */\nconst MIN_DIRECTIVE_ID = 1;\n/** @type {?} */\nlet activeDirectiveId = MIN_DIRECTIVE_ID;\n/**\n * Position depth (with respect from leaf to root) in a directive sub-class inheritance chain.\n * @type {?}\n */\nlet activeDirectiveSuperClassDepthPosition = 0;\n/**\n * Total count of how many directives are a part of an inheritance chain.\n *\n * When directives are sub-classed (extended) from one to another, Angular\n * needs to keep track of exactly how many were encountered so it can accurately\n * generate the next directive id (once the next directive id is visited).\n * Normally the next directive id just a single incremented value from the\n * previous one, however, if the previous directive is a part of an inheritance\n * chain (a series of sub-classed directives) then the incremented value must\n * also take into account the total amount of sub-classed values.\n *\n * Note that this value resets back to zero once the next directive is\n * visited (when `incrementActiveDirectiveId` or `setActiveHostElement`\n * is called).\n * @type {?}\n */\nlet activeDirectiveSuperClassHeight = 0;\n/**\n * Sets the active directive host element and resets the directive id value\n * (when the provided elementIndex value has changed).\n *\n * @param {?=} elementIndex the element index value for the host element where\n *                     the directive/component instance lives\n * @return {?}\n */\nfunction setActiveHostElement(elementIndex = null) {\n    if (_selectedIndex !== elementIndex) {\n        setSelectedIndex(elementIndex == null ? -1 : elementIndex);\n        activeDirectiveId = MIN_DIRECTIVE_ID;\n        activeDirectiveSuperClassDepthPosition = 0;\n        activeDirectiveSuperClassHeight = 0;\n    }\n}\n/**\n * Returns the current id value of the current directive.\n *\n * For example we have an element that has two directives on it:\n * <div dir-one dir-two></div>\n *\n * dirOne->hostBindings() (id == 1)\n * dirTwo->hostBindings() (id == 2)\n *\n * Note that this is only active when `hostBinding` functions are being processed.\n *\n * Note that directive id values are specific to an element (this means that\n * the same id value could be present on another element with a completely\n * different set of directives).\n * @return {?}\n */\nfunction getActiveDirectiveId() {\n    return activeDirectiveId;\n}\n/**\n * Increments the current directive id value.\n *\n * For example we have an element that has two directives on it:\n * <div dir-one dir-two></div>\n *\n * dirOne->hostBindings() (index = 1)\n * // increment\n * dirTwo->hostBindings() (index = 2)\n *\n * Depending on whether or not a previous directive had any inherited\n * directives present, that value will be incremented in addition\n * to the id jumping up by one.\n *\n * Note that this is only active when `hostBinding` functions are being processed.\n *\n * Note that directive id values are specific to an element (this means that\n * the same id value could be present on another element with a completely\n * different set of directives).\n * @return {?}\n */\nfunction incrementActiveDirectiveId() {\n    activeDirectiveId += 1 + activeDirectiveSuperClassHeight;\n    // because we are dealing with a new directive this\n    // means we have exited out of the inheritance chain\n    activeDirectiveSuperClassDepthPosition = 0;\n    activeDirectiveSuperClassHeight = 0;\n}\n/**\n * Set the current super class (reverse inheritance) position depth for a directive.\n *\n * For example we have two directives: Child and Other (but Child is a sub-class of Parent)\n * <div child-dir other-dir></div>\n *\n * // increment\n * parentInstance->hostBindings() (depth = 1)\n * // decrement\n * childInstance->hostBindings() (depth = 0)\n * otherInstance->hostBindings() (depth = 0 b/c it's a different directive)\n *\n * Note that this is only active when `hostBinding` functions are being processed.\n * @param {?} delta\n * @return {?}\n */\nfunction adjustActiveDirectiveSuperClassDepthPosition(delta) {\n    activeDirectiveSuperClassDepthPosition += delta;\n    // we keep track of the height value so that when the next directive is visited\n    // then Angular knows to generate a new directive id value which has taken into\n    // account how many sub-class directives were a part of the previous directive.\n    activeDirectiveSuperClassHeight =\n        Math.max(activeDirectiveSuperClassHeight, activeDirectiveSuperClassDepthPosition);\n}\n/**\n * Returns the current super class (reverse inheritance) depth for a directive.\n *\n * This is designed to help instruction code distinguish different hostBindings\n * calls from each other when a directive has extended from another directive.\n * Normally using the directive id value is enough, but with the case\n * of parent/sub-class directive inheritance more information is required.\n *\n * Note that this is only active when `hostBinding` functions are being processed.\n * @return {?}\n */\nfunction getActiveDirectiveSuperClassDepth() {\n    return activeDirectiveSuperClassDepthPosition;\n}\n/**\n * Restores `contextViewData` to the given OpaqueViewState instance.\n *\n * Used in conjunction with the getCurrentView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * \\@codeGenApi\n * @param {?} viewToRestore The OpaqueViewState instance to restore.\n *\n * @return {?}\n */\nfunction ɵɵrestoreView(viewToRestore) {\n    contextLView = (/** @type {?} */ ((/** @type {?} */ (viewToRestore))));\n}\n/**\n * Used to set the parent property when nodes are created and track query results.\n * @type {?}\n */\nlet previousOrParentTNode;\n/**\n * @return {?}\n */\nfunction getPreviousOrParentTNode() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return previousOrParentTNode;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction setPreviousOrParentTNode(tNode) {\n    previousOrParentTNode = tNode;\n}\n/**\n * @param {?} tNode\n * @param {?} view\n * @return {?}\n */\nfunction setTNodeAndViewData(tNode, view) {\n    ngDevMode && assertLViewOrUndefined(view);\n    previousOrParentTNode = tNode;\n    lView = view;\n}\n/**\n * If `isParent` is:\n *  - `true`: then `previousOrParentTNode` points to a parent node.\n *  - `false`: then `previousOrParentTNode` points to previous node (sibling).\n * @type {?}\n */\nlet isParent;\n/**\n * @return {?}\n */\nfunction getIsParent() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return isParent;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction setIsParent(value) {\n    isParent = value;\n}\n/**\n * Checks whether a given view is in creation mode\n * @param {?=} view\n * @return {?}\n */\nfunction isCreationMode(view = lView) {\n    return (view[FLAGS] & 4 /* CreationMode */) === 4 /* CreationMode */;\n}\n/**\n * State of the current view being processed.\n *\n * An array of nodes (text, element, container, etc), pipes, their bindings, and\n * any local variables that need to be stored between invocations.\n * @type {?}\n */\nlet lView;\n/**\n * The last viewData retrieved by nextContext().\n * Allows building nextContext() and reference() calls.\n *\n * e.g. const inner = x().$implicit; const outer = x().$implicit;\n * @type {?}\n */\nlet contextLView = (/** @type {?} */ (null));\n/**\n * @return {?}\n */\nfunction getContextLView() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return contextLView;\n}\n/**\n * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\n *\n * Necessary to support ChangeDetectorRef.checkNoChanges().\n * @type {?}\n */\nlet checkNoChangesMode = false;\n/**\n * @return {?}\n */\nfunction getCheckNoChangesMode() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return checkNoChangesMode;\n}\n/**\n * @param {?} mode\n * @return {?}\n */\nfunction setCheckNoChangesMode(mode) {\n    checkNoChangesMode = mode;\n}\n/**\n * The root index from which pure function instructions should calculate their binding\n * indices. In component views, this is TView.bindingStartIndex. In a host binding\n * context, this is the TView.expandoStartIndex + any dirs/hostVars before the given dir.\n * @type {?}\n */\nlet bindingRootIndex = -1;\n// top level variables should not be exported for performance reasons (PERF_NOTES.md)\n/**\n * @return {?}\n */\nfunction getBindingRoot() {\n    return bindingRootIndex;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction setBindingRoot(value) {\n    bindingRootIndex = value;\n}\n/**\n * Current index of a View or Content Query which needs to be processed next.\n * We iterate over the list of Queries and increment current query index at every step.\n * @type {?}\n */\nlet currentQueryIndex = 0;\n/**\n * @return {?}\n */\nfunction getCurrentQueryIndex() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return currentQueryIndex;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction setCurrentQueryIndex(value) {\n    currentQueryIndex = value;\n}\n/**\n * Swap the current state with a new state.\n *\n * For performance reasons we store the state in the top level of the module.\n * This way we minimize the number of properties to read. Whenever a new view\n * is entered we have to store the state for later, and when the view is\n * exited the state has to be restored\n *\n * @param {?} newView New state to become active\n * @param {?} hostTNode\n * @return {?} the previous state;\n */\nfunction enterView(newView, hostTNode) {\n    ngDevMode && assertLViewOrUndefined(newView);\n    /** @type {?} */\n    const oldView = lView;\n    if (newView) {\n        /** @type {?} */\n        const tView = newView[TVIEW];\n        bindingRootIndex = tView.bindingStartIndex;\n    }\n    previousOrParentTNode = (/** @type {?} */ (hostTNode));\n    isParent = true;\n    lView = contextLView = newView;\n    return oldView;\n}\n/**\n * @template T\n * @param {?=} level\n * @return {?}\n */\nfunction nextContextImpl(level = 1) {\n    contextLView = walkUpViews(level, (/** @type {?} */ (contextLView)));\n    return (/** @type {?} */ (contextLView[CONTEXT]));\n}\n/**\n * @param {?} nestingLevel\n * @param {?} currentView\n * @return {?}\n */\nfunction walkUpViews(nestingLevel, currentView) {\n    while (nestingLevel > 0) {\n        ngDevMode && assertDefined(currentView[DECLARATION_VIEW], 'Declaration view should be defined if nesting level is greater than 0.');\n        currentView = (/** @type {?} */ (currentView[DECLARATION_VIEW]));\n        nestingLevel--;\n    }\n    return currentView;\n}\n/**\n * Resets the application state.\n * @return {?}\n */\nfunction resetComponentState() {\n    isParent = false;\n    previousOrParentTNode = (/** @type {?} */ (null));\n    elementDepthCount = 0;\n    bindingsEnabled = true;\n}\n/**\n * Used in lieu of enterView to make it clear when we are exiting a child view. This makes\n * the direction of traversal (up or down the view tree) a bit clearer.\n *\n * @param {?} newView New state to become active\n * @return {?}\n */\nfunction leaveView(newView) {\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    if (isCreationMode(lView)) {\n        lView[FLAGS] &= ~4 /* CreationMode */;\n    }\n    else {\n        try {\n            resetPreOrderHookFlags(lView);\n            executeHooks(lView, tView.viewHooks, tView.viewCheckHooks, checkNoChangesMode, 2 /* AfterViewInitHooksToBeRun */, undefined);\n        }\n        finally {\n            // Views are clean and in update mode after being checked, so these bits are cleared\n            lView[FLAGS] &= ~(64 /* Dirty */ | 8 /* FirstLViewPass */);\n            lView[BINDING_INDEX] = tView.bindingStartIndex;\n        }\n    }\n    setCachedStylingContext(null);\n    enterView(newView, null);\n}\n/** @type {?} */\nlet _selectedIndex = -1;\n/**\n * Gets the most recent index passed to {\\@link select}\n *\n * Used with {\\@link property} instruction (and more in the future) to identify the index in the\n * current `LView` to act on.\n * @return {?}\n */\nfunction getSelectedIndex() {\n    return _selectedIndex;\n}\n/**\n * Sets the most recent index passed to {\\@link select}\n *\n * Used with {\\@link property} instruction (and more in the future) to identify the index in the\n * current `LView` to act on.\n * @param {?} index\n * @return {?}\n */\nfunction setSelectedIndex(index) {\n    _selectedIndex = index;\n    // remove the styling context from the cache\n    // because we are now on a different element\n    setCachedStylingContext(null);\n}\n/** @type {?} */\nlet _currentNamespace = null;\n/**\n * Sets the namespace used to create elements to `'http://www.w3.org/2000/svg'` in global state.\n *\n * \\@codeGenApi\n * @return {?}\n */\nfunction ɵɵnamespaceSVG() {\n    _currentNamespace = 'http://www.w3.org/2000/svg';\n}\n/**\n * Sets the namespace used to create elements to `'http://www.w3.org/1998/MathML/'` in global state.\n *\n * \\@codeGenApi\n * @return {?}\n */\nfunction ɵɵnamespaceMathML() {\n    _currentNamespace = 'http://www.w3.org/1998/MathML/';\n}\n/**\n * Sets the namespace used to create elements no `null`, which forces element creation to use\n * `createElement` rather than `createElementNS`.\n *\n * \\@codeGenApi\n * @return {?}\n */\nfunction ɵɵnamespaceHTML() {\n    _currentNamespace = null;\n}\n/**\n * @return {?}\n */\nfunction getNamespace() {\n    return _currentNamespace;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The goal here is to make sure that the browser DOM API is the Renderer.\n * We do this by defining a subset of DOM API to be the renderer and than\n * use that time for rendering.\n *\n * At runtime we can then use the DOM api directly, in server or web-worker\n * it will be easy to implement such API.\n */\n/** @enum {number} */\nconst RendererStyleFlags3 = {\n    Important: 1,\n    DashCase: 2,\n};\nRendererStyleFlags3[RendererStyleFlags3.Important] = 'Important';\nRendererStyleFlags3[RendererStyleFlags3.DashCase] = 'DashCase';\n/**\n * Returns whether the `renderer` is a `ProceduralRenderer3`\n * @param {?} renderer\n * @return {?}\n */\nfunction isProceduralRenderer(renderer) {\n    return !!(((/** @type {?} */ (renderer))).listen);\n}\nconst ɵ0$6 = /**\n * @param {?} hostElement\n * @param {?} rendererType\n * @return {?}\n */\n(hostElement, rendererType) => { return document; };\n/** @type {?} */\nconst domRendererFactory3 = {\n    createRenderer: (ɵ0$6)\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns the matching `LContext` data for a given DOM node, directive or component instance.\n *\n * This function will examine the provided DOM element, component, or directive instance\\'s\n * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched\n * value will be that of the newly created `LContext`.\n *\n * If the monkey-patched value is the `LView` instance then the context value for that\n * target will be created and the monkey-patch reference will be updated. Therefore when this\n * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\n * directive\\'s monkey-patch values.\n *\n * If the monkey-patch value is not detected then the code will walk up the DOM until an element\n * is found which contains a monkey-patch reference. When that occurs then the provided element\n * will be updated with a new context (which is then returned). If the monkey-patch value is not\n * detected for a component/directive instance then it will throw an error (all components and\n * directives should be automatically monkey-patched by ivy).\n *\n * @param {?} target Component, Directive or DOM Node.\n * @return {?}\n */\nfunction getLContext(target) {\n    /** @type {?} */\n    let mpValue = readPatchedData(target);\n    if (mpValue) {\n        // only when it's an array is it considered an LView instance\n        // ... otherwise it's an already constructed LContext instance\n        if (Array.isArray(mpValue)) {\n            /** @type {?} */\n            const lView = (/** @type {?} */ (mpValue));\n            /** @type {?} */\n            let nodeIndex;\n            /** @type {?} */\n            let component = undefined;\n            /** @type {?} */\n            let directives = undefined;\n            if (isComponentInstance(target)) {\n                nodeIndex = findViaComponent(lView, target);\n                if (nodeIndex == -1) {\n                    throw new Error('The provided component was not found in the application');\n                }\n                component = target;\n            }\n            else if (isDirectiveInstance(target)) {\n                nodeIndex = findViaDirective(lView, target);\n                if (nodeIndex == -1) {\n                    throw new Error('The provided directive was not found in the application');\n                }\n                directives = getDirectivesAtNodeIndex(nodeIndex, lView, false);\n            }\n            else {\n                nodeIndex = findViaNativeElement(lView, (/** @type {?} */ (target)));\n                if (nodeIndex == -1) {\n                    return null;\n                }\n            }\n            // the goal is not to fill the entire context full of data because the lookups\n            // are expensive. Instead, only the target data (the element, component, container, ICU\n            // expression or directive details) are filled into the context. If called multiple times\n            // with different target values then the missing target data will be filled in.\n            /** @type {?} */\n            const native = unwrapRNode(lView[nodeIndex]);\n            /** @type {?} */\n            const existingCtx = readPatchedData(native);\n            /** @type {?} */\n            const context = (existingCtx && !Array.isArray(existingCtx)) ?\n                existingCtx :\n                createLContext(lView, nodeIndex, native);\n            // only when the component has been discovered then update the monkey-patch\n            if (component && context.component === undefined) {\n                context.component = component;\n                attachPatchData(context.component, context);\n            }\n            // only when the directives have been discovered then update the monkey-patch\n            if (directives && context.directives === undefined) {\n                context.directives = directives;\n                for (let i = 0; i < directives.length; i++) {\n                    attachPatchData(directives[i], context);\n                }\n            }\n            attachPatchData(context.native, context);\n            mpValue = context;\n        }\n    }\n    else {\n        /** @type {?} */\n        const rElement = (/** @type {?} */ (target));\n        ngDevMode && assertDomNode(rElement);\n        // if the context is not found then we need to traverse upwards up the DOM\n        // to find the nearest element that has already been monkey patched with data\n        /** @type {?} */\n        let parent = (/** @type {?} */ (rElement));\n        while (parent = parent.parentNode) {\n            /** @type {?} */\n            const parentContext = readPatchedData(parent);\n            if (parentContext) {\n                /** @type {?} */\n                let lView;\n                if (Array.isArray(parentContext)) {\n                    lView = (/** @type {?} */ (parentContext));\n                }\n                else {\n                    lView = parentContext.lView;\n                }\n                // the edge of the app was also reached here through another means\n                // (maybe because the DOM was changed manually).\n                if (!lView) {\n                    return null;\n                }\n                /** @type {?} */\n                const index = findViaNativeElement(lView, rElement);\n                if (index >= 0) {\n                    /** @type {?} */\n                    const native = unwrapRNode(lView[index]);\n                    /** @type {?} */\n                    const context = createLContext(lView, index, native);\n                    attachPatchData(native, context);\n                    mpValue = context;\n                    break;\n                }\n            }\n        }\n    }\n    return ((/** @type {?} */ (mpValue))) || null;\n}\n/**\n * Creates an empty instance of a `LContext` context\n * @param {?} lView\n * @param {?} nodeIndex\n * @param {?} native\n * @return {?}\n */\nfunction createLContext(lView, nodeIndex, native) {\n    return {\n        lView,\n        nodeIndex,\n        native,\n        component: undefined,\n        directives: undefined,\n        localRefs: undefined,\n    };\n}\n/**\n * Takes a component instance and returns the view for that component.\n *\n * @param {?} componentInstance\n * @return {?} The component's view\n */\nfunction getComponentViewByInstance(componentInstance) {\n    /** @type {?} */\n    let lView = readPatchedData(componentInstance);\n    /** @type {?} */\n    let view;\n    if (Array.isArray(lView)) {\n        /** @type {?} */\n        const nodeIndex = findViaComponent(lView, componentInstance);\n        view = getComponentViewByIndex(nodeIndex, lView);\n        /** @type {?} */\n        const context = createLContext(lView, nodeIndex, (/** @type {?} */ (view[HOST])));\n        context.component = componentInstance;\n        attachPatchData(componentInstance, context);\n        attachPatchData(context.native, context);\n    }\n    else {\n        /** @type {?} */\n        const context = (/** @type {?} */ ((/** @type {?} */ (lView))));\n        view = getComponentViewByIndex(context.nodeIndex, context.lView);\n    }\n    return view;\n}\n/**\n * Assigns the given data to the given target (which could be a component,\n * directive or DOM node instance) using monkey-patching.\n * @param {?} target\n * @param {?} data\n * @return {?}\n */\nfunction attachPatchData(target, data) {\n    target[MONKEY_PATCH_KEY_NAME] = data;\n}\n/**\n * @param {?} instance\n * @return {?}\n */\nfunction isComponentInstance(instance) {\n    return instance && instance.constructor && instance.constructor.ngComponentDef;\n}\n/**\n * @param {?} instance\n * @return {?}\n */\nfunction isDirectiveInstance(instance) {\n    return instance && instance.constructor && instance.constructor.ngDirectiveDef;\n}\n/**\n * Locates the element within the given LView and returns the matching index\n * @param {?} lView\n * @param {?} target\n * @return {?}\n */\nfunction findViaNativeElement(lView, target) {\n    /** @type {?} */\n    let tNode = lView[TVIEW].firstChild;\n    while (tNode) {\n        /** @type {?} */\n        const native = (/** @type {?} */ (getNativeByTNode(tNode, lView)));\n        if (native === target) {\n            return tNode.index;\n        }\n        tNode = traverseNextElement(tNode);\n    }\n    return -1;\n}\n/**\n * Locates the next tNode (child, sibling or parent).\n * @param {?} tNode\n * @return {?}\n */\nfunction traverseNextElement(tNode) {\n    if (tNode.child) {\n        return tNode.child;\n    }\n    else if (tNode.next) {\n        return tNode.next;\n    }\n    else {\n        // Let's take the following template: <div><span>text</span></div><component/>\n        // After checking the text node, we need to find the next parent that has a \"next\" TNode,\n        // in this case the parent `div`, so that we can find the component.\n        while (tNode.parent && !tNode.parent.next) {\n            tNode = tNode.parent;\n        }\n        return tNode.parent && tNode.parent.next;\n    }\n}\n/**\n * Locates the component within the given LView and returns the matching index\n * @param {?} lView\n * @param {?} componentInstance\n * @return {?}\n */\nfunction findViaComponent(lView, componentInstance) {\n    /** @type {?} */\n    const componentIndices = lView[TVIEW].components;\n    if (componentIndices) {\n        for (let i = 0; i < componentIndices.length; i++) {\n            /** @type {?} */\n            const elementComponentIndex = componentIndices[i];\n            /** @type {?} */\n            const componentView = getComponentViewByIndex(elementComponentIndex, lView);\n            if (componentView[CONTEXT] === componentInstance) {\n                return elementComponentIndex;\n            }\n        }\n    }\n    else {\n        /** @type {?} */\n        const rootComponentView = getComponentViewByIndex(HEADER_OFFSET, lView);\n        /** @type {?} */\n        const rootComponent = rootComponentView[CONTEXT];\n        if (rootComponent === componentInstance) {\n            // we are dealing with the root element here therefore we know that the\n            // element is the very first element after the HEADER data in the lView\n            return HEADER_OFFSET;\n        }\n    }\n    return -1;\n}\n/**\n * Locates the directive within the given LView and returns the matching index\n * @param {?} lView\n * @param {?} directiveInstance\n * @return {?}\n */\nfunction findViaDirective(lView, directiveInstance) {\n    // if a directive is monkey patched then it will (by default)\n    // have a reference to the LView of the current view. The\n    // element bound to the directive being search lives somewhere\n    // in the view data. We loop through the nodes and check their\n    // list of directives for the instance.\n    /** @type {?} */\n    let tNode = lView[TVIEW].firstChild;\n    while (tNode) {\n        /** @type {?} */\n        const directiveIndexStart = tNode.directiveStart;\n        /** @type {?} */\n        const directiveIndexEnd = tNode.directiveEnd;\n        for (let i = directiveIndexStart; i < directiveIndexEnd; i++) {\n            if (lView[i] === directiveInstance) {\n                return tNode.index;\n            }\n        }\n        tNode = traverseNextElement(tNode);\n    }\n    return -1;\n}\n/**\n * Returns a list of directives extracted from the given view based on the\n * provided list of directive index values.\n *\n * @param {?} nodeIndex The node index\n * @param {?} lView The target view data\n * @param {?} includeComponents Whether or not to include components in returned directives\n * @return {?}\n */\nfunction getDirectivesAtNodeIndex(nodeIndex, lView, includeComponents) {\n    /** @type {?} */\n    const tNode = (/** @type {?} */ (lView[TVIEW].data[nodeIndex]));\n    /** @type {?} */\n    let directiveStartIndex = tNode.directiveStart;\n    if (directiveStartIndex == 0)\n        return EMPTY_ARRAY$1;\n    /** @type {?} */\n    const directiveEndIndex = tNode.directiveEnd;\n    if (!includeComponents && tNode.flags & 1 /* isComponent */)\n        directiveStartIndex++;\n    return lView.slice(directiveStartIndex, directiveEndIndex);\n}\n/**\n * @param {?} nodeIndex\n * @param {?} lView\n * @return {?}\n */\nfunction getComponentAtNodeIndex(nodeIndex, lView) {\n    /** @type {?} */\n    const tNode = (/** @type {?} */ (lView[TVIEW].data[nodeIndex]));\n    /** @type {?} */\n    let directiveStartIndex = tNode.directiveStart;\n    return tNode.flags & 1 /* isComponent */ ? lView[directiveStartIndex] : null;\n}\n/**\n * Returns a map of local references (local reference name => element or directive instance) that\n * exist on a given element.\n * @param {?} lView\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction discoverLocalRefs(lView, nodeIndex) {\n    /** @type {?} */\n    const tNode = (/** @type {?} */ (lView[TVIEW].data[nodeIndex]));\n    if (tNode && tNode.localNames) {\n        /** @type {?} */\n        const result = {};\n        /** @type {?} */\n        let localIndex = tNode.index + 1;\n        for (let i = 0; i < tNode.localNames.length; i += 2) {\n            result[tNode.localNames[i]] = lView[localIndex];\n            localIndex++;\n        }\n        return result;\n    }\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CorePlayerHandler {\n    constructor() {\n        this._players = [];\n    }\n    /**\n     * @return {?}\n     */\n    flushPlayers() {\n        for (let i = 0; i < this._players.length; i++) {\n            /** @type {?} */\n            const player = this._players[i];\n            if (!player.parent && player.state === 0 /* Pending */) {\n                player.play();\n            }\n        }\n        this._players.length = 0;\n    }\n    /**\n     * @param {?} player\n     * @return {?}\n     */\n    queuePlayer(player) { this._players.push(player); }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The default directive styling index value for template-based bindings.\n *\n * All host-level bindings (e.g. `hostStyleProp` and `hostStylingMap`) are\n * assigned a directive styling index value based on the current directive\n * uniqueId and the directive super-class inheritance depth. But for template\n * bindings they always have the same directive styling index value.\n * @type {?}\n */\nconst DEFAULT_TEMPLATE_DIRECTIVE_INDEX = 0;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ANIMATION_PROP_PREFIX = '@';\n/**\n * @param {?=} wrappedElement\n * @param {?=} sanitizer\n * @param {?=} initialStyles\n * @param {?=} initialClasses\n * @return {?}\n */\nfunction createEmptyStylingContext(wrappedElement, sanitizer, initialStyles, initialClasses) {\n    /** @type {?} */\n    const context = [\n        wrappedElement || null,\n        0,\n        (/** @type {?} */ ([])),\n        initialStyles || [null, null],\n        initialClasses || [null, null],\n        [0, 0],\n        [0],\n        [0],\n        null,\n        null,\n    ];\n    // whenever a context is created there is always a `null` directive\n    // that is registered (which is a placeholder for the \"template\").\n    allocateOrUpdateDirectiveIntoContext(context, DEFAULT_TEMPLATE_DIRECTIVE_INDEX);\n    return context;\n}\n/**\n * Allocates (registers) a directive into the directive registry within the provided styling\n * context.\n *\n * For each and every `[style]`, `[style.prop]`, `[class]`, `[class.name]` binding\n * (as well as static style and class attributes) a directive, component or template\n * is marked as the owner. When an owner is determined (this happens when the template\n * is first passed over) the directive owner is allocated into the styling context. When\n * this happens, each owner gets its own index value. This then ensures that once any\n * style and/or class binding are assigned into the context then they are marked to\n * that directive's index value.\n *\n * @param {?} context the target StylingContext\n * @param {?} directiveIndex\n * @param {?=} singlePropValuesIndex\n * @param {?=} styleSanitizer\n * @return {?} the index where the directive was inserted into\n */\nfunction allocateOrUpdateDirectiveIntoContext(context, directiveIndex, singlePropValuesIndex = -1, styleSanitizer) {\n    /** @type {?} */\n    const directiveRegistry = context[2 /* DirectiveRegistryPosition */];\n    /** @type {?} */\n    const index = directiveIndex * 2 /* Size */;\n    // we preemptively make space into the directives array and then\n    // assign values slot-by-slot to ensure that if the directive ordering\n    // changes then it will still function\n    /** @type {?} */\n    const limit = index + 2 /* Size */;\n    for (let i = directiveRegistry.length; i < limit; i += 2 /* Size */) {\n        // -1 is used to signal that the directive has been allocated, but\n        // no actual style or class bindings have been registered yet...\n        directiveRegistry.push(-1, null);\n    }\n    /** @type {?} */\n    const propValuesStartPosition = index + 0 /* SinglePropValuesIndexOffset */;\n    if (singlePropValuesIndex >= 0 && directiveRegistry[propValuesStartPosition] === -1) {\n        directiveRegistry[propValuesStartPosition] = singlePropValuesIndex;\n        directiveRegistry[index + 1 /* StyleSanitizerOffset */] =\n            styleSanitizer || null;\n    }\n}\n/**\n * Used clone a copy of a pre-computed template of a styling context.\n *\n * A pre-computed template is designed to be computed once for a given element\n * (instructions.ts has logic for caching this).\n * @param {?} element\n * @param {?} templateStyleContext\n * @return {?}\n */\nfunction allocStylingContext(element, templateStyleContext) {\n    // each instance gets a copy\n    /** @type {?} */\n    const context = (/** @type {?} */ ((/** @type {?} */ (templateStyleContext.slice()))));\n    // the HEADER values contain arrays which also need\n    // to be copied over into the new context\n    for (let i = 0; i < 10 /* SingleStylesStartPosition */; i++) {\n        /** @type {?} */\n        const value = templateStyleContext[i];\n        if (Array.isArray(value)) {\n            context[i] = value.slice();\n        }\n    }\n    context[0 /* ElementPosition */] = element;\n    // this will prevent any other directives from extending the context\n    context[1 /* MasterFlagPosition */] |= 16 /* BindingAllocationLocked */;\n    return context;\n}\n/**\n * Retrieve the `StylingContext` at a given index.\n *\n * This method lazily creates the `StylingContext`. This is because in most cases\n * we have styling without any bindings. Creating `StylingContext` eagerly would mean that\n * every style declaration such as `<div style=\"color: red\">` would result `StyleContext`\n * which would create unnecessary memory pressure.\n *\n * @param {?} index Index of the style allocation. See: `elementStyling`.\n * @param {?} viewData The view to search for the styling context\n * @return {?}\n */\nfunction getStylingContextFromLView(index, viewData) {\n    /** @type {?} */\n    let storageIndex = index;\n    /** @type {?} */\n    let slotValue = viewData[storageIndex];\n    /** @type {?} */\n    let wrapper = viewData;\n    while (Array.isArray(slotValue)) {\n        wrapper = slotValue;\n        slotValue = (/** @type {?} */ (slotValue[HOST]));\n    }\n    if (isStylingContext(wrapper)) {\n        return wrapper;\n    }\n    else {\n        // This is an LView or an LContainer\n        /** @type {?} */\n        const stylingTemplate = getTNode(index - HEADER_OFFSET, viewData).stylingTemplate;\n        if (wrapper !== viewData) {\n            storageIndex = HOST;\n        }\n        return wrapper[storageIndex] = stylingTemplate ?\n            allocStylingContext(slotValue, stylingTemplate) :\n            createEmptyStylingContext(slotValue);\n    }\n}\n/**\n * @param {?} name\n * @return {?}\n */\nfunction isAnimationProp(name) {\n    return name[0] === ANIMATION_PROP_PREFIX;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction hasClassInput(tNode) {\n    return (tNode.flags & 8 /* hasClassInput */) !== 0;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction hasStyleInput(tNode) {\n    return (tNode.flags & 16 /* hasStyleInput */) !== 0;\n}\n/**\n * @param {?} classes\n * @return {?}\n */\nfunction forceClassesAsString(classes) {\n    if (classes && typeof classes !== 'string') {\n        classes = Object.keys(classes).join(' ');\n    }\n    return ((/** @type {?} */ (classes))) || '';\n}\n/**\n * @param {?} styles\n * @return {?}\n */\nfunction forceStylesAsString(styles) {\n    /** @type {?} */\n    let str = '';\n    if (styles) {\n        /** @type {?} */\n        const props = Object.keys(styles);\n        for (let i = 0; i < props.length; i++) {\n            /** @type {?} */\n            const prop = props[i];\n            str += (i ? ';' : '') + `${prop}:${styles[prop]}`;\n        }\n    }\n    return str;\n}\n/**\n * @param {?} playerContext\n * @param {?} rootContext\n * @param {?} element\n * @param {?} player\n * @param {?} playerContextIndex\n * @param {?=} ref\n * @return {?}\n */\nfunction addPlayerInternal(playerContext, rootContext, element, player, playerContextIndex, ref) {\n    ref = ref || element;\n    if (playerContextIndex) {\n        playerContext[playerContextIndex] = player;\n    }\n    else {\n        playerContext.push(player);\n    }\n    if (player) {\n        player.addEventListener(200 /* Destroyed */, (/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const index = playerContext.indexOf(player);\n            /** @type {?} */\n            const nonFactoryPlayerIndex = playerContext[0 /* NonBuilderPlayersStart */];\n            // if the player is being removed from the factory side of the context\n            // (which is where the [style] and [class] bindings do their thing) then\n            // that side of the array cannot be resized since the respective bindings\n            // have pointer index values that point to the associated factory instance\n            if (index) {\n                if (index < nonFactoryPlayerIndex) {\n                    playerContext[index] = null;\n                }\n                else {\n                    playerContext.splice(index, 1);\n                }\n            }\n            player.destroy();\n        }));\n        /** @type {?} */\n        const playerHandler = rootContext.playerHandler || (rootContext.playerHandler = new CorePlayerHandler());\n        playerHandler.queuePlayer(player, ref);\n        return true;\n    }\n    return false;\n}\n/**\n * @param {?} playerContext\n * @return {?}\n */\nfunction getPlayersInternal(playerContext) {\n    /** @type {?} */\n    const players = [];\n    /** @type {?} */\n    const nonFactoryPlayersStart = playerContext[0 /* NonBuilderPlayersStart */];\n    // add all factory-based players (which are apart of [style] and [class] bindings)\n    for (let i = 1 /* PlayerBuildersStartPosition */ + 1 /* PlayerOffsetPosition */; i < nonFactoryPlayersStart; i += 2 /* PlayerAndPlayerBuildersTupleSize */) {\n        /** @type {?} */\n        const player = (/** @type {?} */ (playerContext[i]));\n        if (player) {\n            players.push(player);\n        }\n    }\n    // add all custom players (not apart of [style] and [class] bindings)\n    for (let i = nonFactoryPlayersStart; i < playerContext.length; i++) {\n        players.push((/** @type {?} */ (playerContext[i])));\n    }\n    return players;\n}\n/**\n * @param {?} target\n * @param {?=} context\n * @return {?}\n */\nfunction getOrCreatePlayerContext(target, context) {\n    context = context || (/** @type {?} */ (getLContext(target)));\n    if (!context) {\n        ngDevMode && throwInvalidRefError();\n        return null;\n    }\n    const { lView, nodeIndex } = context;\n    /** @type {?} */\n    const stylingContext = getStylingContextFromLView(nodeIndex, lView);\n    return getPlayerContext(stylingContext) || allocPlayerContext(stylingContext);\n}\n/**\n * @param {?} stylingContext\n * @return {?}\n */\nfunction getPlayerContext(stylingContext) {\n    return stylingContext[9 /* PlayerContext */];\n}\n/**\n * @param {?} data\n * @return {?}\n */\nfunction allocPlayerContext(data) {\n    return data[9 /* PlayerContext */] =\n        [5 /* SinglePlayerBuildersStartPosition */, null, null, null, null];\n}\n/**\n * @return {?}\n */\nfunction throwInvalidRefError() {\n    throw new Error('Only elements that exist in an Angular application can be used for animations');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Assigns all attribute values to the provided element via the inferred renderer.\n *\n * This function accepts two forms of attribute entries:\n *\n * default: (key, value):\n *  attrs = [key1, value1, key2, value2]\n *\n * namespaced: (NAMESPACE_MARKER, uri, name, value)\n *  attrs = [NAMESPACE_MARKER, uri, name, value, NAMESPACE_MARKER, uri, name, value]\n *\n * The `attrs` array can contain a mix of both the default and namespaced entries.\n * The \"default\" values are set without a marker, but if the function comes across\n * a marker value then it will attempt to set a namespaced value. If the marker is\n * not of a namespaced value then the function will quit and return the index value\n * where it stopped during the iteration of the attrs array.\n *\n * See [AttributeMarker] to understand what the namespace marker value is.\n *\n * Note that this instruction does not support assigning style and class values to\n * an element. See `elementStart` and `elementHostAttrs` to learn how styling values\n * are applied to an element.\n *\n * @param {?} native The element that the attributes will be assigned to\n * @param {?} attrs The attribute array of values that will be assigned to the element\n * @return {?} the index value that was last accessed in the attributes array\n */\nfunction setUpAttributes(native, attrs) {\n    /** @type {?} */\n    const renderer = getLView()[RENDERER];\n    /** @type {?} */\n    const isProc = isProceduralRenderer(renderer);\n    /** @type {?} */\n    let i = 0;\n    while (i < attrs.length) {\n        /** @type {?} */\n        const value = attrs[i];\n        if (typeof value === 'number') {\n            // only namespaces are supported. Other value types (such as style/class\n            // entries) are not supported in this function.\n            if (value !== 0 /* NamespaceURI */) {\n                break;\n            }\n            // we just landed on the marker value ... therefore\n            // we should skip to the next entry\n            i++;\n            /** @type {?} */\n            const namespaceURI = (/** @type {?} */ (attrs[i++]));\n            /** @type {?} */\n            const attrName = (/** @type {?} */ (attrs[i++]));\n            /** @type {?} */\n            const attrVal = (/** @type {?} */ (attrs[i++]));\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            isProc ?\n                ((/** @type {?} */ (renderer))).setAttribute(native, attrName, attrVal, namespaceURI) :\n                native.setAttributeNS(namespaceURI, attrName, attrVal);\n        }\n        else {\n            // attrName is string;\n            /** @type {?} */\n            const attrName = (/** @type {?} */ (value));\n            /** @type {?} */\n            const attrVal = attrs[++i];\n            // Standard attributes\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            if (isAnimationProp(attrName)) {\n                if (isProc) {\n                    ((/** @type {?} */ (renderer))).setProperty(native, attrName, attrVal);\n                }\n            }\n            else {\n                isProc ?\n                    ((/** @type {?} */ (renderer)))\n                        .setAttribute(native, (/** @type {?} */ (attrName)), (/** @type {?} */ (attrVal))) :\n                    native.setAttribute((/** @type {?} */ (attrName)), (/** @type {?} */ (attrVal)));\n            }\n            i++;\n        }\n    }\n    // another piece of code may iterate over the same attributes array. Therefore\n    // it may be helpful to return the exact spot where the attributes array exited\n    // whether by running into an unsupported marker or if all the static values were\n    // iterated over.\n    return i;\n}\n/**\n * @param {?} attrs\n * @param {?} startIndex\n * @return {?}\n */\nfunction attrsStylingIndexOf(attrs, startIndex) {\n    for (let i = startIndex; i < attrs.length; i++) {\n        /** @type {?} */\n        const val = attrs[i];\n        if (val === 1 /* Classes */ || val === 2 /* Styles */) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Test whether the given value is a marker that indicates that the following\n * attribute values in a `TAttributes` array are only the names of attributes,\n * and not name-value pairs.\n * @param {?} marker The attribute marker to test.\n * @return {?} true if the marker is a \"name-only\" marker (e.g. `Bindings` or `Template`).\n */\nfunction isNameOnlyAttributeMarker(marker) {\n    return marker === 3 /* Bindings */ || marker === 4 /* Template */;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/// Parent Injector Utils ///////////////////////////////////////////////////////////////\n/**\n * @param {?} parentLocation\n * @return {?}\n */\nfunction hasParentInjector(parentLocation) {\n    return parentLocation !== NO_PARENT_INJECTOR;\n}\n/**\n * @param {?} parentLocation\n * @return {?}\n */\nfunction getParentInjectorIndex(parentLocation) {\n    return ((/** @type {?} */ ((/** @type {?} */ (parentLocation))))) & 32767 /* InjectorIndexMask */;\n}\n/**\n * @param {?} parentLocation\n * @return {?}\n */\nfunction getParentInjectorViewOffset(parentLocation) {\n    return ((/** @type {?} */ ((/** @type {?} */ (parentLocation))))) >> 16 /* ViewOffsetShift */;\n}\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the view is found that contains the parent\n * injector.\n *\n * @param {?} location The location of the parent injector, which contains the view offset\n * @param {?} startView The LView instance from which to start walking up the view tree\n * @return {?} The LView instance that contains the parent injector\n */\nfunction getParentInjectorView(location, startView) {\n    /** @type {?} */\n    let viewOffset = getParentInjectorViewOffset(location);\n    /** @type {?} */\n    let parentView = startView;\n    // For most cases, the parent injector can be found on the host node (e.g. for component\n    // or container), but we must keep the loop here to support the rarer case of deeply nested\n    // <ng-template> tags or inline views, where the parent injector might live many views\n    // above the child injector.\n    while (viewOffset > 0) {\n        parentView = (/** @type {?} */ (parentView[DECLARATION_VIEW]));\n        viewOffset--;\n    }\n    return parentView;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Gets the parent LView of the passed LView, if the PARENT is an LContainer, will get the parent of\n * that LContainer, which is an LView\n * @param {?} lView the lView whose parent to get\n * @return {?}\n */\nfunction getLViewParent(lView) {\n    ngDevMode && assertLView(lView);\n    /** @type {?} */\n    const parent = lView[PARENT];\n    return isLContainer(parent) ? (/** @type {?} */ (parent[PARENT])) : parent;\n}\n/**\n * Retrieve the root view from any component or `LView` by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param {?} componentOrLView any component or `LView`\n * @return {?}\n */\nfunction getRootView(componentOrLView) {\n    ngDevMode && assertDefined(componentOrLView, 'component');\n    /** @type {?} */\n    let lView = isLView(componentOrLView) ? componentOrLView : (/** @type {?} */ (readPatchedLView(componentOrLView)));\n    while (lView && !(lView[FLAGS] & 512 /* IsRoot */)) {\n        lView = (/** @type {?} */ (getLViewParent(lView)));\n    }\n    ngDevMode && assertLView(lView);\n    return lView;\n}\n/**\n * Given a current view, finds the nearest component's host (LElement).\n *\n * @param {?} lView LView for which we want a host element node\n * @return {?} The host node\n */\nfunction findComponentView(lView) {\n    /** @type {?} */\n    let rootTNode = lView[T_HOST];\n    while (rootTNode && rootTNode.type === 2 /* View */) {\n        ngDevMode && assertDefined(lView[DECLARATION_VIEW], 'lView[DECLARATION_VIEW]');\n        lView = (/** @type {?} */ (lView[DECLARATION_VIEW]));\n        rootTNode = lView[T_HOST];\n    }\n    ngDevMode && assertLView(lView);\n    return lView;\n}\n/**\n * Returns the `RootContext` instance that is associated with\n * the application where the target is situated. It does this by walking the parent views until it\n * gets to the root view, then getting the context off of that.\n *\n * @param {?} viewOrComponent the `LView` or component to get the root context for.\n * @return {?}\n */\nfunction getRootContext(viewOrComponent) {\n    /** @type {?} */\n    const rootView = getRootView(viewOrComponent);\n    ngDevMode &&\n        assertDefined(rootView[CONTEXT], 'RootView has no context. Perhaps it is disconnected?');\n    return (/** @type {?} */ (rootView[CONTEXT]));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Defines if the call to `inject` should include `viewProviders` in its resolution.\n *\n * This is set to true when we try to instantiate a component. This value is reset in\n * `getNodeInjectable` to a value which matches the declaration location of the token about to be\n * instantiated. This is done so that if we are injecting a token which was declared outside of\n * `viewProviders` we don't accidentally pull `viewProviders` in.\n *\n * Example:\n *\n * ```\n * \\@Injectable()\n * class MyService {\n *   constructor(public value: String) {}\n * }\n *\n * \\@Component({\n *   providers: [\n *     MyService,\n *     {provide: String, value: 'providers' }\n *   ]\n *   viewProviders: [\n *     {provide: String, value: 'viewProviders'}\n *   ]\n * })\n * class MyComponent {\n *   constructor(myService: MyService, value: String) {\n *     // We expect that Component can see into `viewProviders`.\n *     expect(value).toEqual('viewProviders');\n *     // `MyService` was not declared in `viewProviders` hence it can't see it.\n *     expect(myService.value).toEqual('providers');\n *   }\n * }\n *\n * ```\n * @type {?}\n */\nlet includeViewProviders = true;\n/**\n * @param {?} v\n * @return {?}\n */\nfunction setIncludeViewProviders(v) {\n    /** @type {?} */\n    const oldValue = includeViewProviders;\n    includeViewProviders = v;\n    return oldValue;\n}\n/**\n * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\n * directives that will share slots, and thus, the fewer false positives when checking for\n * the existence of a directive.\n * @type {?}\n */\nconst BLOOM_SIZE = 256;\n/** @type {?} */\nconst BLOOM_MASK = BLOOM_SIZE - 1;\n/**\n * Counter used to generate unique IDs for directives.\n * @type {?}\n */\nlet nextNgElementId = 0;\n/**\n * Registers this directive as present in its node's injector by flipping the directive's\n * corresponding bit in the injector's bloom filter.\n *\n * @param {?} injectorIndex The index of the node injector where this token should be registered\n * @param {?} tView The TView for the injector's bloom filters\n * @param {?} type The directive token to register\n * @return {?}\n */\nfunction bloomAdd(injectorIndex, tView, type) {\n    ngDevMode && assertEqual(tView.firstTemplatePass, true, 'expected firstTemplatePass to be true');\n    /** @type {?} */\n    let id = typeof type !== 'string' ? ((/** @type {?} */ (type)))[NG_ELEMENT_ID] : type.charCodeAt(0) || 0;\n    // Set a unique ID on the directive type, so if something tries to inject the directive,\n    // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\n    if (id == null) {\n        id = ((/** @type {?} */ (type)))[NG_ELEMENT_ID] = nextNgElementId++;\n    }\n    // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),\n    // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.\n    /** @type {?} */\n    const bloomBit = id & BLOOM_MASK;\n    // Create a mask that targets the specific bit associated with the directive.\n    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n    // to bit positions 0 - 31 in a 32 bit integer.\n    /** @type {?} */\n    const mask = 1 << bloomBit;\n    // Use the raw bloomBit number to determine which bloom filter bucket we should check\n    // e.g: bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc\n    /** @type {?} */\n    const b7 = bloomBit & 0x80;\n    /** @type {?} */\n    const b6 = bloomBit & 0x40;\n    /** @type {?} */\n    const b5 = bloomBit & 0x20;\n    /** @type {?} */\n    const tData = (/** @type {?} */ (tView.data));\n    if (b7) {\n        b6 ? (b5 ? (tData[injectorIndex + 7] |= mask) : (tData[injectorIndex + 6] |= mask)) :\n            (b5 ? (tData[injectorIndex + 5] |= mask) : (tData[injectorIndex + 4] |= mask));\n    }\n    else {\n        b6 ? (b5 ? (tData[injectorIndex + 3] |= mask) : (tData[injectorIndex + 2] |= mask)) :\n            (b5 ? (tData[injectorIndex + 1] |= mask) : (tData[injectorIndex] |= mask));\n    }\n}\n/**\n * Creates (or gets an existing) injector for a given element or container.\n *\n * @param {?} tNode for which an injector should be retrieved / created.\n * @param {?} hostView View where the node is stored\n * @return {?} Node injector\n */\nfunction getOrCreateNodeInjectorForNode(tNode, hostView) {\n    /** @type {?} */\n    const existingInjectorIndex = getInjectorIndex(tNode, hostView);\n    if (existingInjectorIndex !== -1) {\n        return existingInjectorIndex;\n    }\n    /** @type {?} */\n    const tView = hostView[TVIEW];\n    if (tView.firstTemplatePass) {\n        tNode.injectorIndex = hostView.length;\n        insertBloom(tView.data, tNode); // foundation for node bloom\n        insertBloom(hostView, null); // foundation for cumulative bloom\n        insertBloom(tView.blueprint, null);\n        ngDevMode && assertEqual(tNode.flags === 0 || tNode.flags === 1 /* isComponent */, true, 'expected tNode.flags to not be initialized');\n    }\n    /** @type {?} */\n    const parentLoc = getParentInjectorLocation(tNode, hostView);\n    /** @type {?} */\n    const parentIndex = getParentInjectorIndex(parentLoc);\n    /** @type {?} */\n    const parentLView = getParentInjectorView(parentLoc, hostView);\n    /** @type {?} */\n    const injectorIndex = tNode.injectorIndex;\n    // If a parent injector can't be found, its location is set to -1.\n    // In that case, we don't need to set up a cumulative bloom\n    if (hasParentInjector(parentLoc)) {\n        /** @type {?} */\n        const parentData = (/** @type {?} */ (parentLView[TVIEW].data));\n        // Creates a cumulative bloom filter that merges the parent's bloom filter\n        // and its own cumulative bloom (which contains tokens for all ancestors)\n        for (let i = 0; i < 8; i++) {\n            hostView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];\n        }\n    }\n    hostView[injectorIndex + PARENT_INJECTOR] = parentLoc;\n    return injectorIndex;\n}\n/**\n * @param {?} arr\n * @param {?} footer\n * @return {?}\n */\nfunction insertBloom(arr, footer) {\n    arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);\n}\n/**\n * @param {?} tNode\n * @param {?} hostView\n * @return {?}\n */\nfunction getInjectorIndex(tNode, hostView) {\n    if (tNode.injectorIndex === -1 ||\n        // If the injector index is the same as its parent's injector index, then the index has been\n        // copied down from the parent node. No injector has been created yet on this node.\n        (tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex) ||\n        // After the first template pass, the injector index might exist but the parent values\n        // might not have been calculated yet for this instance\n        hostView[tNode.injectorIndex + PARENT_INJECTOR] == null) {\n        return -1;\n    }\n    else {\n        return tNode.injectorIndex;\n    }\n}\n/**\n * Finds the index of the parent injector, with a view offset if applicable. Used to set the\n * parent injector initially.\n *\n * Returns a combination of number of `ViewData` we have to go up and index in that `Viewdata`\n * @param {?} tNode\n * @param {?} view\n * @return {?}\n */\nfunction getParentInjectorLocation(tNode, view) {\n    if (tNode.parent && tNode.parent.injectorIndex !== -1) {\n        return (/** @type {?} */ (tNode.parent.injectorIndex)); // ViewOffset is 0\n    }\n    // For most cases, the parent injector index can be found on the host node (e.g. for component\n    // or container), so this loop will be skipped, but we must keep the loop here to support\n    // the rarer case of deeply nested <ng-template> tags or inline views.\n    /** @type {?} */\n    let hostTNode = view[T_HOST];\n    /** @type {?} */\n    let viewOffset = 1;\n    while (hostTNode && hostTNode.injectorIndex === -1) {\n        view = (/** @type {?} */ (view[DECLARATION_VIEW]));\n        hostTNode = view ? view[T_HOST] : null;\n        viewOffset++;\n    }\n    return hostTNode ?\n        hostTNode.injectorIndex | (viewOffset << 16 /* ViewOffsetShift */) :\n        (/** @type {?} */ (-1));\n}\n/**\n * Makes a type or an injection token public to the DI system by adding it to an\n * injector's bloom filter.\n *\n * @param {?} injectorIndex\n * @param {?} view\n * @param {?} token The type or the injection token to be made public\n * @return {?}\n */\nfunction diPublicInInjector(injectorIndex, view, token) {\n    bloomAdd(injectorIndex, view[TVIEW], token);\n}\n/**\n * Inject static attribute value into directive constructor.\n *\n * This method is used with `factory` functions which are generated as part of\n * `defineDirective` or `defineComponent`. The method retrieves the static value\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\n *  at the time of injection and can change over time.)\n *\n * # Example\n * Given:\n * ```\n * \\@Component(...)\n * class MyComponent {\n *   constructor(\\@Attribute('title') title: string) { ... }\n * }\n * ```\n * When instantiated with\n * ```\n * <my-component title=\"Hello\"></my-component>\n * ```\n *\n * Then factory method generated is:\n * ```\n * MyComponent.ngComponentDef = defineComponent({\n *   factory: () => new MyComponent(injectAttribute('title'))\n *   ...\n * })\n * ```\n *\n * \\@publicApi\n * @param {?} tNode\n * @param {?} attrNameToInject\n * @return {?}\n */\nfunction injectAttributeImpl(tNode, attrNameToInject) {\n    ngDevMode && assertNodeOfPossibleTypes(tNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);\n    ngDevMode && assertDefined(tNode, 'expecting tNode');\n    /** @type {?} */\n    const attrs = tNode.attrs;\n    if (attrs) {\n        /** @type {?} */\n        const attrsLength = attrs.length;\n        /** @type {?} */\n        let i = 0;\n        while (i < attrsLength) {\n            /** @type {?} */\n            const value = attrs[i];\n            // If we hit a `Bindings` or `Template` marker then we are done.\n            if (isNameOnlyAttributeMarker(value))\n                break;\n            // Skip namespaced attributes\n            if (value === 0 /* NamespaceURI */) {\n                // we skip the next two values\n                // as namespaced attributes looks like\n                // [..., AttributeMarker.NamespaceURI, 'http://someuri.com/test', 'test:exist',\n                // 'existValue', ...]\n                i = i + 2;\n            }\n            else if (typeof value === 'number') {\n                // Skip to the first value of the marked attribute.\n                i++;\n                if (value === 1 /* Classes */ && attrNameToInject === 'class') {\n                    /** @type {?} */\n                    let accumulatedClasses = '';\n                    while (i < attrsLength && typeof attrs[i] === 'string') {\n                        accumulatedClasses += ' ' + attrs[i++];\n                    }\n                    return accumulatedClasses.trim();\n                }\n                else if (value === 2 /* Styles */ && attrNameToInject === 'style') {\n                    /** @type {?} */\n                    let accumulatedStyles = '';\n                    while (i < attrsLength && typeof attrs[i] === 'string') {\n                        accumulatedStyles += `${attrs[i++]}: ${attrs[i++]}; `;\n                    }\n                    return accumulatedStyles.trim();\n                }\n                else {\n                    while (i < attrsLength && typeof attrs[i] === 'string') {\n                        i++;\n                    }\n                }\n            }\n            else if (value === attrNameToInject) {\n                return (/** @type {?} */ (attrs[i + 1]));\n            }\n            else {\n                i = i + 2;\n            }\n        }\n    }\n    return null;\n}\n/**\n * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.\n *\n * Look for the injector providing the token by walking up the node injector tree and then\n * the module injector tree.\n *\n * This function patches `token` with `__NG_ELEMENT_ID__` which contains the id for the bloom\n * filter. Negative values are reserved for special objects.\n *   - `-1` is reserved for injecting `Injector` (implemented by `NodeInjector`)\n *\n * @template T\n * @param {?} tNode The Node where the search for the injector should start\n * @param {?} lView The `LView` that contains the `tNode`\n * @param {?} token The token to look for\n * @param {?=} flags Injection flags\n * @param {?=} notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @return {?} the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nfunction getOrCreateInjectable(tNode, lView, token, flags = InjectFlags.Default, notFoundValue) {\n    if (tNode) {\n        /** @type {?} */\n        const bloomHash = bloomHashBitOrFactory(token);\n        // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef\n        // so just call the factory function to create it.\n        if (typeof bloomHash === 'function') {\n            /** @type {?} */\n            const savePreviousOrParentTNode = getPreviousOrParentTNode();\n            /** @type {?} */\n            const saveLView = getLView();\n            setTNodeAndViewData(tNode, lView);\n            try {\n                /** @type {?} */\n                const value = bloomHash();\n                if (value == null && !(flags & InjectFlags.Optional)) {\n                    throw new Error(`No provider for ${stringifyForError(token)}!`);\n                }\n                else {\n                    return value;\n                }\n            }\n            finally {\n                setTNodeAndViewData(savePreviousOrParentTNode, saveLView);\n            }\n        }\n        else if (typeof bloomHash == 'number') {\n            if (bloomHash === -1) {\n                // `-1` is a special value used to identify `Injector` types.\n                return (/** @type {?} */ (new NodeInjector(tNode, lView)));\n            }\n            // If the token has a bloom hash, then it is a token which could be in NodeInjector.\n            // A reference to the previous injector TView that was found while climbing the element\n            // injector tree. This is used to know if viewProviders can be accessed on the current\n            // injector.\n            /** @type {?} */\n            let previousTView = null;\n            /** @type {?} */\n            let injectorIndex = getInjectorIndex(tNode, lView);\n            /** @type {?} */\n            let parentLocation = NO_PARENT_INJECTOR;\n            /** @type {?} */\n            let hostTElementNode = flags & InjectFlags.Host ? findComponentView(lView)[T_HOST] : null;\n            // If we should skip this injector, or if there is no injector on this node, start by\n            // searching\n            // the parent injector.\n            if (injectorIndex === -1 || flags & InjectFlags.SkipSelf) {\n                parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) :\n                    lView[injectorIndex + PARENT_INJECTOR];\n                if (!shouldSearchParent(flags, false)) {\n                    injectorIndex = -1;\n                }\n                else {\n                    previousTView = lView[TVIEW];\n                    injectorIndex = getParentInjectorIndex(parentLocation);\n                    lView = getParentInjectorView(parentLocation, lView);\n                }\n            }\n            // Traverse up the injector tree until we find a potential match or until we know there\n            // *isn't* a match.\n            while (injectorIndex !== -1) {\n                parentLocation = lView[injectorIndex + PARENT_INJECTOR];\n                // Check the current injector. If it matches, see if it contains token.\n                /** @type {?} */\n                const tView = lView[TVIEW];\n                if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {\n                    // At this point, we have an injector which *may* contain the token, so we step through\n                    // the providers and directives associated with the injector's corresponding node to get\n                    // the instance.\n                    /** @type {?} */\n                    const instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);\n                    if (instance !== NOT_FOUND) {\n                        return instance;\n                    }\n                }\n                if (shouldSearchParent(flags, lView[TVIEW].data[injectorIndex + TNODE] === hostTElementNode) &&\n                    bloomHasToken(bloomHash, injectorIndex, lView)) {\n                    // The def wasn't found anywhere on this node, so it was a false positive.\n                    // Traverse up the tree and continue searching.\n                    previousTView = tView;\n                    injectorIndex = getParentInjectorIndex(parentLocation);\n                    lView = getParentInjectorView(parentLocation, lView);\n                }\n                else {\n                    // If we should not search parent OR If the ancestor bloom filter value does not have the\n                    // bit corresponding to the directive we can give up on traversing up to find the specific\n                    // injector.\n                    injectorIndex = -1;\n                }\n            }\n        }\n    }\n    if (flags & InjectFlags.Optional && notFoundValue === undefined) {\n        // This must be set or the NullInjector will throw for optional deps\n        notFoundValue = null;\n    }\n    if ((flags & (InjectFlags.Self | InjectFlags.Host)) === 0) {\n        /** @type {?} */\n        const moduleInjector = lView[INJECTOR$1];\n        // switch to `injectInjectorOnly` implementation for module injector, since module injector\n        // should not have access to Component/Directive DI scope (that may happen through\n        // `directiveInject` implementation)\n        /** @type {?} */\n        const previousInjectImplementation = setInjectImplementation(undefined);\n        try {\n            if (moduleInjector) {\n                return moduleInjector.get(token, notFoundValue, flags & InjectFlags.Optional);\n            }\n            else {\n                return injectRootLimpMode(token, notFoundValue, flags & InjectFlags.Optional);\n            }\n        }\n        finally {\n            setInjectImplementation(previousInjectImplementation);\n        }\n    }\n    if (flags & InjectFlags.Optional) {\n        return notFoundValue;\n    }\n    else {\n        throw new Error(`NodeInjector: NOT_FOUND [${stringifyForError(token)}]`);\n    }\n}\n/** @type {?} */\nconst NOT_FOUND = {};\n/**\n * @template T\n * @param {?} injectorIndex\n * @param {?} lView\n * @param {?} token\n * @param {?} previousTView\n * @param {?} flags\n * @param {?} hostTElementNode\n * @return {?}\n */\nfunction searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {\n    /** @type {?} */\n    const currentTView = lView[TVIEW];\n    /** @type {?} */\n    const tNode = (/** @type {?} */ (currentTView.data[injectorIndex + TNODE]));\n    // First, we need to determine if view providers can be accessed by the starting element.\n    // There are two possibities\n    /** @type {?} */\n    const canAccessViewProviders = previousTView == null ?\n        // 1) This is the first invocation `previousTView == null` which means that we are at the\n        // `TNode` of where injector is starting to look. In such a case the only time we are allowed\n        // to look into the ViewProviders is if:\n        // - we are on a component\n        // - AND the injector set `includeViewProviders` to true (implying that the token can see\n        // ViewProviders because it is the Component or a Service which itself was declared in\n        // ViewProviders)\n        (isComponent(tNode) && includeViewProviders) :\n        // 2) `previousTView != null` which means that we are now walking across the parent nodes.\n        // In such a case we are only allowed to look into the ViewProviders if:\n        // - We just crossed from child View to Parent View `previousTView != currentTView`\n        // - AND the parent TNode is an Element.\n        // This means that we just came from the Component's View and therefore are allowed to see\n        // into the ViewProviders.\n        (previousTView != currentTView && (tNode.type === 3 /* Element */));\n    // This special case happens when there is a @host on the inject and when we are searching\n    // on the host element node.\n    /** @type {?} */\n    const isHostSpecialCase = (flags & InjectFlags.Host) && hostTElementNode === tNode;\n    /** @type {?} */\n    const injectableIdx = locateDirectiveOrProvider(tNode, lView, token, canAccessViewProviders, isHostSpecialCase);\n    if (injectableIdx !== null) {\n        return getNodeInjectable(currentTView.data, lView, injectableIdx, (/** @type {?} */ (tNode)));\n    }\n    else {\n        return NOT_FOUND;\n    }\n}\n/**\n * Searches for the given token among the node's directives and providers.\n *\n * @template T\n * @param {?} tNode TNode on which directives are present.\n * @param {?} lView The view we are currently processing\n * @param {?} token Provider token or type of a directive to look for.\n * @param {?} canAccessViewProviders Whether view providers should be considered.\n * @param {?} isHostSpecialCase Whether the host special case applies.\n * @return {?} Index of a found directive or provider, or null when none found.\n */\nfunction locateDirectiveOrProvider(tNode, lView, token, canAccessViewProviders, isHostSpecialCase) {\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const nodeProviderIndexes = tNode.providerIndexes;\n    /** @type {?} */\n    const tInjectables = tView.data;\n    /** @type {?} */\n    const injectablesStart = nodeProviderIndexes & 65535 /* ProvidersStartIndexMask */;\n    /** @type {?} */\n    const directivesStart = tNode.directiveStart;\n    /** @type {?} */\n    const directiveEnd = tNode.directiveEnd;\n    /** @type {?} */\n    const cptViewProvidersCount = nodeProviderIndexes >> 16 /* CptViewProvidersCountShift */;\n    /** @type {?} */\n    const startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount;\n    // When the host special case applies, only the viewProviders and the component are visible\n    /** @type {?} */\n    const endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;\n    for (let i = startingIndex; i < endIndex; i++) {\n        /** @type {?} */\n        const providerTokenOrDef = (/** @type {?} */ (tInjectables[i]));\n        if (i < directivesStart && token === providerTokenOrDef ||\n            i >= directivesStart && ((/** @type {?} */ (providerTokenOrDef))).type === token) {\n            return i;\n        }\n    }\n    if (isHostSpecialCase) {\n        /** @type {?} */\n        const dirDef = (/** @type {?} */ (tInjectables[directivesStart]));\n        if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {\n            return directivesStart;\n        }\n    }\n    return null;\n}\n/**\n * Retrieve or instantiate the injectable from the `lData` at particular `index`.\n *\n * This function checks to see if the value has already been instantiated and if so returns the\n * cached `injectable`. Otherwise if it detects that the value is still a factory it\n * instantiates the `injectable` and caches the value.\n * @param {?} tData\n * @param {?} lData\n * @param {?} index\n * @param {?} tNode\n * @return {?}\n */\nfunction getNodeInjectable(tData, lData, index, tNode) {\n    /** @type {?} */\n    let value = lData[index];\n    if (isFactory(value)) {\n        /** @type {?} */\n        const factory = value;\n        if (factory.resolving) {\n            throw new Error(`Circular dep for ${stringifyForError(tData[index])}`);\n        }\n        /** @type {?} */\n        const previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);\n        factory.resolving = true;\n        /** @type {?} */\n        let previousInjectImplementation;\n        if (factory.injectImpl) {\n            previousInjectImplementation = setInjectImplementation(factory.injectImpl);\n        }\n        /** @type {?} */\n        const savePreviousOrParentTNode = getPreviousOrParentTNode();\n        /** @type {?} */\n        const saveLView = getLView();\n        setTNodeAndViewData(tNode, lData);\n        try {\n            value = lData[index] = factory.factory(null, tData, lData, tNode);\n        }\n        finally {\n            if (factory.injectImpl)\n                setInjectImplementation(previousInjectImplementation);\n            setIncludeViewProviders(previousIncludeViewProviders);\n            factory.resolving = false;\n            setTNodeAndViewData(savePreviousOrParentTNode, saveLView);\n        }\n    }\n    return value;\n}\n/**\n * Returns the bit in an injector's bloom filter that should be used to determine whether or not\n * the directive might be provided by the injector.\n *\n * When a directive is public, it is added to the bloom filter and given a unique ID that can be\n * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\n * is returned as the node injector can not possibly provide that token.\n *\n * @param {?} token the injection token\n * @return {?} the matching bit to check in the bloom filter or `null` if the token is not known.\n *   When the returned value is negative then it represents special values such as `Injector`.\n */\nfunction bloomHashBitOrFactory(token) {\n    ngDevMode && assertDefined(token, 'token must be defined');\n    if (typeof token === 'string') {\n        return token.charCodeAt(0) || 0;\n    }\n    /** @type {?} */\n    const tokenId = ((/** @type {?} */ (token)))[NG_ELEMENT_ID];\n    // Negative token IDs are used for special objects such as `Injector`\n    return (typeof tokenId === 'number' && tokenId > 0) ? tokenId & BLOOM_MASK : tokenId;\n}\n/**\n * @param {?} bloomHash\n * @param {?} injectorIndex\n * @param {?} injectorView\n * @return {?}\n */\nfunction bloomHasToken(bloomHash, injectorIndex, injectorView) {\n    // Create a mask that targets the specific bit associated with the directive we're looking for.\n    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n    // to bit positions 0 - 31 in a 32 bit integer.\n    /** @type {?} */\n    const mask = 1 << bloomHash;\n    /** @type {?} */\n    const b7 = bloomHash & 0x80;\n    /** @type {?} */\n    const b6 = bloomHash & 0x40;\n    /** @type {?} */\n    const b5 = bloomHash & 0x20;\n    // Our bloom filter size is 256 bits, which is eight 32-bit bloom filter buckets:\n    // bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc.\n    // Get the bloom filter value from the appropriate bucket based on the directive's bloomBit.\n    /** @type {?} */\n    let value;\n    if (b7) {\n        value = b6 ? (b5 ? injectorView[injectorIndex + 7] : injectorView[injectorIndex + 6]) :\n            (b5 ? injectorView[injectorIndex + 5] : injectorView[injectorIndex + 4]);\n    }\n    else {\n        value = b6 ? (b5 ? injectorView[injectorIndex + 3] : injectorView[injectorIndex + 2]) :\n            (b5 ? injectorView[injectorIndex + 1] : injectorView[injectorIndex]);\n    }\n    // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\n    // this injector is a potential match.\n    return !!(value & mask);\n}\n/**\n * Returns true if flags prevent parent injector from being searched for tokens\n * @param {?} flags\n * @param {?} isFirstHostTNode\n * @return {?}\n */\nfunction shouldSearchParent(flags, isFirstHostTNode) {\n    return !(flags & InjectFlags.Self) && !(flags & InjectFlags.Host && isFirstHostTNode);\n}\nclass NodeInjector {\n    /**\n     * @param {?} _tNode\n     * @param {?} _lView\n     */\n    constructor(_tNode, _lView) {\n        this._tNode = _tNode;\n        this._lView = _lView;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue) {\n        return getOrCreateInjectable(this._tNode, this._lView, token, undefined, notFoundValue);\n    }\n}\n/**\n * \\@codeGenApi\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction ɵɵgetFactoryOf(type) {\n    /** @type {?} */\n    const typeAny = (/** @type {?} */ (type));\n    /** @type {?} */\n    const def = getComponentDef(typeAny) || getDirectiveDef(typeAny) ||\n        getPipeDef(typeAny) || getInjectableDef(typeAny) || getInjectorDef(typeAny);\n    if (!def || def.factory === undefined) {\n        return null;\n    }\n    return def.factory;\n}\n/**\n * \\@codeGenApi\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction ɵɵgetInheritedFactory(type) {\n    /** @type {?} */\n    const proto = (/** @type {?} */ (Object.getPrototypeOf(type.prototype).constructor));\n    /** @type {?} */\n    const factory = ɵɵgetFactoryOf(proto);\n    if (factory !== null) {\n        return factory;\n    }\n    else {\n        // There is no factory defined. Either this was improper usage of inheritance\n        // (no Angular decorator on the superclass) or there is no constructor at all\n        // in the inheritance chain. Since the two cases cannot be distinguished, the\n        // latter has to be assumed.\n        return (/**\n         * @param {?} t\n         * @return {?}\n         */\n        (t) => new t());\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} error\n * @return {?}\n */\nfunction getDebugContext(error) {\n    return ((/** @type {?} */ (error)))[ERROR_DEBUG_CONTEXT];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nfunction getOriginalError(error) {\n    return ((/** @type {?} */ (error)))[ERROR_ORIGINAL_ERROR];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nfunction getErrorLogger(error) {\n    return ((/** @type {?} */ (error)))[ERROR_LOGGER] || defaultErrorLogger;\n}\n/**\n * @param {?} console\n * @param {...?} values\n * @return {?}\n */\nfunction defaultErrorLogger(console, ...values) {\n    ((/** @type {?} */ (console.error)))(...values);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * \\@NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * \\@publicApi\n */\nclass ErrorHandler {\n    constructor() {\n        /**\n         * \\@internal\n         */\n        this._console = console;\n    }\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    handleError(error) {\n        /** @type {?} */\n        const originalError = this._findOriginalError(error);\n        /** @type {?} */\n        const context = this._findContext(error);\n        // Note: Browser consoles show the place from where console.error was called.\n        // We can use this to give users additional information about the error.\n        /** @type {?} */\n        const errorLogger = getErrorLogger(error);\n        errorLogger(this._console, `ERROR`, error);\n        if (originalError) {\n            errorLogger(this._console, `ORIGINAL ERROR`, originalError);\n        }\n        if (context) {\n            errorLogger(this._console, 'ERROR CONTEXT', context);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    _findContext(error) {\n        if (error) {\n            return getDebugContext(error) ? getDebugContext(error) :\n                this._findContext(getOriginalError(error));\n        }\n        return null;\n    }\n    /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    _findOriginalError(error) {\n        /** @type {?} */\n        let e = getOriginalError(error);\n        while (e && getOriginalError(e)) {\n            e = getOriginalError(e);\n        }\n        return e;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Defines a schema that allows an NgModule to contain the following:\n * - Non-Angular elements named with dash case (`-`).\n * - Element properties named with dash case (`-`).\n * Dash case is the naming convention for custom elements.\n *\n * \\@publicApi\n * @type {?}\n */\nconst CUSTOM_ELEMENTS_SCHEMA = {\n    name: 'custom-elements'\n};\n/**\n * Defines a schema that allows any property on any element.\n *\n * \\@publicApi\n * @type {?}\n */\nconst NO_ERRORS_SCHEMA = {\n    name: 'no-errors-schema'\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nconst BRAND = '__SANITIZER_TRUSTED_BRAND__';\n/**\n * @param {?} value\n * @param {?} type\n * @return {?}\n */\nfunction allowSanitizationBypass(value, type) {\n    return (value instanceof String && ((/** @type {?} */ (value)))[BRAND] === type);\n}\n/**\n * Mark `html` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link htmlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedHtml `html` string which needs to be implicitly trusted.\n * @return {?} a `html` `String` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustHtml(trustedHtml) {\n    return bypassSanitizationTrustString(trustedHtml, \"Html\" /* Html */);\n}\n/**\n * Mark `style` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link styleSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedStyle `style` string which needs to be implicitly trusted.\n * @return {?} a `style` `String` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustStyle(trustedStyle) {\n    return bypassSanitizationTrustString(trustedStyle, \"Style\" /* Style */);\n}\n/**\n * Mark `script` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link scriptSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedScript `script` string which needs to be implicitly trusted.\n * @return {?} a `script` `String` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustScript(trustedScript) {\n    return bypassSanitizationTrustString(trustedScript, \"Script\" /* Script */);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link urlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedUrl `url` string which needs to be implicitly trusted.\n * @return {?} a `url` `String` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustUrl(trustedUrl) {\n    return bypassSanitizationTrustString(trustedUrl, \"Url\" /* Url */);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link resourceUrlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedResourceUrl `url` string which needs to be implicitly trusted.\n * @return {?} a `url` `String` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustResourceUrl(trustedResourceUrl) {\n    return bypassSanitizationTrustString(trustedResourceUrl, \"ResourceUrl\" /* ResourceUrl */);\n}\n/**\n * @param {?} trustedString\n * @param {?} mode\n * @return {?}\n */\nfunction bypassSanitizationTrustString(trustedString, mode) {\n    /** @type {?} */\n    const trusted = (/** @type {?} */ (new String(trustedString)));\n    trusted[BRAND] = mode;\n    return trusted;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This file is used to control if the default rendering pipeline should be `ViewEngine` or `Ivy`.\n *\n * For more information on how to run and debug tests with either Ivy or View Engine (legacy),\n * please see [BAZEL.md](./docs/BAZEL.md).\n */\nlet _devMode = true;\nlet _runModeLocked = false;\n/**\n * Returns whether Angular is in development mode. After called once,\n * the value is locked and won't change any more.\n *\n * By default, this is true, unless a user calls `enableProdMode` before calling this.\n *\n * @publicApi\n */\nfunction isDevMode() {\n    _runModeLocked = true;\n    return _devMode;\n}\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n *\n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n *\n * @publicApi\n */\nfunction enableProdMode() {\n    if (_runModeLocked) {\n        throw new Error('Cannot enable prod mode after platform setup.');\n    }\n    _devMode = false;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we must use one of three strategies for doing this.\n * Support: Safari 10.x -> XHR strategy\n * Support: Firefox -> DomParser strategy\n * Default: InertDocument strategy\n */\nclass InertBodyHelper {\n    /**\n     * @param {?} defaultDoc\n     */\n    constructor(defaultDoc) {\n        this.defaultDoc = defaultDoc;\n        this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\n        this.inertBodyElement = this.inertDocument.body;\n        if (this.inertBodyElement == null) {\n            // usually there should be only one body element in the document, but IE doesn't have any, so\n            // we need to create one.\n            /** @type {?} */\n            const inertHtml = this.inertDocument.createElement('html');\n            this.inertDocument.appendChild(inertHtml);\n            this.inertBodyElement = this.inertDocument.createElement('body');\n            inertHtml.appendChild(this.inertBodyElement);\n        }\n        this.inertBodyElement.innerHTML = '<svg><g onload=\"this.parentNode.remove()\"></g></svg>';\n        if (this.inertBodyElement.querySelector && !this.inertBodyElement.querySelector('svg')) {\n            // We just hit the Safari 10.1 bug - which allows JS to run inside the SVG G element\n            // so use the XHR strategy.\n            this.getInertBodyElement = this.getInertBodyElement_XHR;\n            return;\n        }\n        this.inertBodyElement.innerHTML =\n            '<svg><p><style><img src=\"</style><img src=x onerror=alert(1)//\">';\n        if (this.inertBodyElement.querySelector && this.inertBodyElement.querySelector('svg img')) {\n            // We just hit the Firefox bug - which prevents the inner img JS from being sanitized\n            // so use the DOMParser strategy, if it is available.\n            // If the DOMParser is not available then we are not in Firefox (Server/WebWorker?) so we\n            // fall through to the default strategy below.\n            if (isDOMParserAvailable()) {\n                this.getInertBodyElement = this.getInertBodyElement_DOMParser;\n                return;\n            }\n        }\n        // None of the bugs were hit so it is safe for us to use the default InertDocument strategy\n        this.getInertBodyElement = this.getInertBodyElement_InertDocument;\n    }\n    /**\n     * Use XHR to create and fill an inert body element (on Safari 10.1)\n     * See\n     * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449\n     * @private\n     * @param {?} html\n     * @return {?}\n     */\n    getInertBodyElement_XHR(html) {\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n        // `<head>` tag.\n        html = '<body><remove></remove>' + html + '</body>';\n        try {\n            html = encodeURI(html);\n        }\n        catch (_a) {\n            return null;\n        }\n        /** @type {?} */\n        const xhr = new XMLHttpRequest();\n        xhr.responseType = 'document';\n        xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);\n        xhr.send(undefined);\n        /** @type {?} */\n        const body = xhr.response.body;\n        body.removeChild((/** @type {?} */ (body.firstChild)));\n        return body;\n    }\n    /**\n     * Use DOMParser to create and fill an inert body element (on Firefox)\n     * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7\n     *\n     * @private\n     * @param {?} html\n     * @return {?}\n     */\n    getInertBodyElement_DOMParser(html) {\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n        // `<head>` tag.\n        html = '<body><remove></remove>' + html + '</body>';\n        try {\n            /** @type {?} */\n            const body = (/** @type {?} */ (new ((/** @type {?} */ (window)))\n                .DOMParser()\n                .parseFromString(html, 'text/html')\n                .body));\n            body.removeChild((/** @type {?} */ (body.firstChild)));\n            return body;\n        }\n        catch (_a) {\n            return null;\n        }\n    }\n    /**\n     * Use an HTML5 `template` element, if supported, or an inert body element created via\n     * `createHtmlDocument` to create and fill an inert DOM element.\n     * This is the default sane strategy to use if the browser does not require one of the specialised\n     * strategies above.\n     * @private\n     * @param {?} html\n     * @return {?}\n     */\n    getInertBodyElement_InertDocument(html) {\n        // Prefer using <template> element if supported.\n        /** @type {?} */\n        const templateEl = this.inertDocument.createElement('template');\n        if ('content' in templateEl) {\n            templateEl.innerHTML = html;\n            return templateEl;\n        }\n        this.inertBodyElement.innerHTML = html;\n        // Support: IE 9-11 only\n        // strip custom-namespaced attributes on IE<=11\n        if (((/** @type {?} */ (this.defaultDoc))).documentMode) {\n            this.stripCustomNsAttrs(this.inertBodyElement);\n        }\n        return this.inertBodyElement;\n    }\n    /**\n     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\n     * 'ns1:xlink:foo').\n     *\n     * This is undesirable since we don't want to allow any of these custom attributes. This method\n     * strips them all.\n     * @private\n     * @param {?} el\n     * @return {?}\n     */\n    stripCustomNsAttrs(el) {\n        /** @type {?} */\n        const elAttrs = el.attributes;\n        // loop backwards so that we can support removals.\n        for (let i = elAttrs.length - 1; 0 < i; i--) {\n            /** @type {?} */\n            const attrib = elAttrs.item(i);\n            /** @type {?} */\n            const attrName = (/** @type {?} */ (attrib)).name;\n            if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\n                el.removeAttribute(attrName);\n            }\n        }\n        /** @type {?} */\n        let childNode = (/** @type {?} */ (el.firstChild));\n        while (childNode) {\n            if (childNode.nodeType === Node.ELEMENT_NODE)\n                this.stripCustomNsAttrs((/** @type {?} */ (childNode)));\n            childNode = childNode.nextSibling;\n        }\n    }\n}\n/**\n * We need to determine whether the DOMParser exists in the global context.\n * The try-catch is because, on some browsers, trying to access this property\n * on window can actually throw an error.\n *\n * @suppress {uselessCode}\n * @return {?}\n */\nfunction isDOMParserAvailable() {\n    try {\n        return !!((/** @type {?} */ (window))).DOMParser;\n    }\n    catch (_a) {\n        return false;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if (comment from here on and regex copied from\n * Soy's EscapingConventions):\n * (1) Either an allowed protocol (http, https, mailto or ftp).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * The pattern disallows &, used in HTML entity declarations before\n * one of the characters in [/?#]. This disallows HTML entities used in the\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n * It also disallows HTML entities in the first path part of a relative path,\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n * that. More importantly, it disallows masking of a colon,\n * e.g. \"javascript&#58;...\".\n *\n * This regular expression was taken from the Closure sanitization library.\n * @type {?}\n */\nconst SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n/**\n * A pattern that matches safe data URLs. Only matches image, video and audio types.\n * @type {?}\n */\nconst DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\\/]+=*$/i;\n/**\n * @param {?} url\n * @return {?}\n */\nfunction _sanitizeUrl(url) {\n    url = String(url);\n    if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))\n        return url;\n    if (isDevMode()) {\n        console.warn(`WARNING: sanitizing unsafe URL value ${url} (see http://g.co/ng/security#xss)`);\n    }\n    return 'unsafe:' + url;\n}\n/**\n * @param {?} srcset\n * @return {?}\n */\nfunction sanitizeSrcset(srcset) {\n    srcset = String(srcset);\n    return srcset.split(',').map((/**\n     * @param {?} srcset\n     * @return {?}\n     */\n    (srcset) => _sanitizeUrl(srcset.trim()))).join(', ');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} tags\n * @return {?}\n */\nfunction tagSet(tags) {\n    /** @type {?} */\n    const res = {};\n    for (const t of tags.split(','))\n        res[t] = true;\n    return res;\n}\n/**\n * @param {...?} sets\n * @return {?}\n */\nfunction merge(...sets) {\n    /** @type {?} */\n    const res = {};\n    for (const s of sets) {\n        for (const v in s) {\n            if (s.hasOwnProperty(v))\n                res[v] = true;\n        }\n    }\n    return res;\n}\n// Good source of info about elements and attributes\n// http://dev.w3.org/html5/spec/Overview.html#semantics\n// http://simon.html5.org/html-elements\n// Safe Void Elements - HTML5\n// http://dev.w3.org/html5/spec/Overview.html#void-elements\n/** @type {?} */\nconst VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n// Elements that you can, intentionally, leave open (and which close themselves)\n// http://dev.w3.org/html5/spec/Overview.html#optional-tags\n/** @type {?} */\nconst OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\n/** @type {?} */\nconst OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\n/** @type {?} */\nconst OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n// Safe Block Elements - HTML5\n/** @type {?} */\nconst BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +\n    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n// Inline Elements - HTML5\n/** @type {?} */\nconst INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +\n    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\n    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\n/** @type {?} */\nconst VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n// Attributes that have href and hence need to be sanitized\n/** @type {?} */\nconst URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\n// Attributes that have special href set hence need to be sanitized\n/** @type {?} */\nconst SRCSET_ATTRS = tagSet('srcset');\n/** @type {?} */\nconst HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\n    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\n    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\n    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +\n    'valign,value,vspace,width');\n// Accessibility attributes as per WAI-ARIA 1.1 (W3C Working Draft 14 December 2018)\n/** @type {?} */\nconst ARIA_ATTRS = tagSet('aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,' +\n    'aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,' +\n    'aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,' +\n    'aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,' +\n    'aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,' +\n    'aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,' +\n    'aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext');\n// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n// innerHTML is required, SVG attributes should be added here.\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\n// are left out here.\n/** @type {?} */\nconst VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS, ARIA_ATTRS);\n// Elements whose content should not be traversed/preserved, if the elements themselves are invalid.\n//\n// Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)\n// `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we\n// don't want to preserve the content, if the elements themselves are going to be removed.\n/** @type {?} */\nconst SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet('script,style,template');\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nclass SanitizingHtmlSerializer {\n    constructor() {\n        // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just\n        // because characters were re-encoded.\n        this.sanitizedSomething = false;\n        this.buf = [];\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    sanitizeChildren(el) {\n        // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n        // However this code never accesses properties off of `document` before deleting its contents\n        // again, so it shouldn't be vulnerable to DOM clobbering.\n        /** @type {?} */\n        let current = (/** @type {?} */ (el.firstChild));\n        /** @type {?} */\n        let traverseContent = true;\n        while (current) {\n            if (current.nodeType === Node.ELEMENT_NODE) {\n                traverseContent = this.startElement((/** @type {?} */ (current)));\n            }\n            else if (current.nodeType === Node.TEXT_NODE) {\n                this.chars((/** @type {?} */ (current.nodeValue)));\n            }\n            else {\n                // Strip non-element, non-text nodes.\n                this.sanitizedSomething = true;\n            }\n            if (traverseContent && current.firstChild) {\n                current = (/** @type {?} */ (current.firstChild));\n                continue;\n            }\n            while (current) {\n                // Leaving the element. Walk up and to the right, closing tags as we go.\n                if (current.nodeType === Node.ELEMENT_NODE) {\n                    this.endElement((/** @type {?} */ (current)));\n                }\n                /** @type {?} */\n                let next = this.checkClobberedElement(current, (/** @type {?} */ (current.nextSibling)));\n                if (next) {\n                    current = next;\n                    break;\n                }\n                current = this.checkClobberedElement(current, (/** @type {?} */ (current.parentNode)));\n            }\n        }\n        return this.buf.join('');\n    }\n    /**\n     * Sanitizes an opening element tag (if valid) and returns whether the element's contents should\n     * be traversed. Element content must always be traversed (even if the element itself is not\n     * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.\n     *\n     * @private\n     * @param {?} element The element to sanitize.\n     * @return {?} True if the element's contents should be traversed.\n     */\n    startElement(element) {\n        /** @type {?} */\n        const tagName = element.nodeName.toLowerCase();\n        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.sanitizedSomething = true;\n            return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);\n        }\n        this.buf.push('<');\n        this.buf.push(tagName);\n        /** @type {?} */\n        const elAttrs = element.attributes;\n        for (let i = 0; i < elAttrs.length; i++) {\n            /** @type {?} */\n            const elAttr = elAttrs.item(i);\n            /** @type {?} */\n            const attrName = (/** @type {?} */ (elAttr)).name;\n            /** @type {?} */\n            const lower = attrName.toLowerCase();\n            if (!VALID_ATTRS.hasOwnProperty(lower)) {\n                this.sanitizedSomething = true;\n                continue;\n            }\n            /** @type {?} */\n            let value = (/** @type {?} */ (elAttr)).value;\n            // TODO(martinprobst): Special case image URIs for data:image/...\n            if (URI_ATTRS[lower])\n                value = _sanitizeUrl(value);\n            if (SRCSET_ATTRS[lower])\n                value = sanitizeSrcset(value);\n            this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n        }\n        this.buf.push('>');\n        return true;\n    }\n    /**\n     * @private\n     * @param {?} current\n     * @return {?}\n     */\n    endElement(current) {\n        /** @type {?} */\n        const tagName = current.nodeName.toLowerCase();\n        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.buf.push('</');\n            this.buf.push(tagName);\n            this.buf.push('>');\n        }\n    }\n    /**\n     * @private\n     * @param {?} chars\n     * @return {?}\n     */\n    chars(chars) { this.buf.push(encodeEntities(chars)); }\n    /**\n     * @param {?} node\n     * @param {?} nextNode\n     * @return {?}\n     */\n    checkClobberedElement(node, nextNode) {\n        if (nextNode &&\n            (node.compareDocumentPosition(nextNode) &\n                Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {\n            throw new Error(`Failed to sanitize html because the element is clobbered: ${((/** @type {?} */ (node))).outerHTML}`);\n        }\n        return nextNode;\n    }\n}\n// Regular Expressions for parsing tags and attributes\n/** @type {?} */\nconst SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// ! to ~ is the ASCII range.\n/** @type {?} */\nconst NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param {?} value\n * @return {?}\n */\nfunction encodeEntities(value) {\n    return value.replace(/&/g, '&amp;')\n        .replace(SURROGATE_PAIR_REGEXP, (/**\n     * @param {?} match\n     * @return {?}\n     */\n    function (match) {\n        /** @type {?} */\n        const hi = match.charCodeAt(0);\n        /** @type {?} */\n        const low = match.charCodeAt(1);\n        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n    }))\n        .replace(NON_ALPHANUMERIC_REGEXP, (/**\n     * @param {?} match\n     * @return {?}\n     */\n    function (match) { return '&#' + match.charCodeAt(0) + ';'; }))\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n}\n/** @type {?} */\nlet inertBodyHelper;\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n * @param {?} defaultDoc\n * @param {?} unsafeHtmlInput\n * @return {?}\n */\nfunction _sanitizeHtml(defaultDoc, unsafeHtmlInput) {\n    /** @type {?} */\n    let inertBodyElement = null;\n    try {\n        inertBodyHelper = inertBodyHelper || new InertBodyHelper(defaultDoc);\n        // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n        /** @type {?} */\n        let unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n        inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n        // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n        /** @type {?} */\n        let mXSSAttempts = 5;\n        /** @type {?} */\n        let parsedHtml = unsafeHtml;\n        do {\n            if (mXSSAttempts === 0) {\n                throw new Error('Failed to sanitize html because the input is unstable');\n            }\n            mXSSAttempts--;\n            unsafeHtml = parsedHtml;\n            parsedHtml = (/** @type {?} */ (inertBodyElement)).innerHTML;\n            inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        } while (unsafeHtml !== parsedHtml);\n        /** @type {?} */\n        const sanitizer = new SanitizingHtmlSerializer();\n        /** @type {?} */\n        const safeHtml = sanitizer.sanitizeChildren((/** @type {?} */ (getTemplateContent((/** @type {?} */ (inertBodyElement))))) || inertBodyElement);\n        if (isDevMode() && sanitizer.sanitizedSomething) {\n            console.warn('WARNING: sanitizing HTML stripped some content, see http://g.co/ng/security#xss');\n        }\n        return safeHtml;\n    }\n    finally {\n        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n        if (inertBodyElement) {\n            /** @type {?} */\n            const parent = getTemplateContent(inertBodyElement) || inertBodyElement;\n            while (parent.firstChild) {\n                parent.removeChild(parent.firstChild);\n            }\n        }\n    }\n}\n/**\n * @param {?} el\n * @return {?}\n */\nfunction getTemplateContent(el) {\n    return 'content' in ((/** @type {?} */ (el))) && isTemplateElement(el) ?\n        el.content :\n        null;\n}\n/**\n * @param {?} el\n * @return {?}\n */\nfunction isTemplateElement(el) {\n    return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nconst SecurityContext = {\n    NONE: 0,\n    HTML: 1,\n    STYLE: 2,\n    SCRIPT: 3,\n    URL: 4,\n    RESOURCE_URL: 5,\n};\nSecurityContext[SecurityContext.NONE] = 'NONE';\nSecurityContext[SecurityContext.HTML] = 'HTML';\nSecurityContext[SecurityContext.STYLE] = 'STYLE';\nSecurityContext[SecurityContext.SCRIPT] = 'SCRIPT';\nSecurityContext[SecurityContext.URL] = 'URL';\nSecurityContext[SecurityContext.RESOURCE_URL] = 'RESOURCE_URL';\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * \\@publicApi\n * @abstract\n */\nclass Sanitizer {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Regular expression for safe style values.\n *\n * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.\n *\n * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or\n * font-family) and hence could allow multiple values to get injected, but that should pose no risk\n * of XSS.\n *\n * The function expression checks only for XSS safety, not for CSS validity.\n *\n * This regular expression was taken from the Closure sanitization library, and augmented for\n * transformation values.\n * @type {?}\n */\nconst VALUES = '[-,.\"\\'%_!# a-zA-Z0-9]+';\n/** @type {?} */\nconst TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';\n/** @type {?} */\nconst COLOR_FNS = '(?:rgb|hsl)a?';\n/** @type {?} */\nconst GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';\n/** @type {?} */\nconst CSS3_FNS = '(?:calc|attr)';\n/** @type {?} */\nconst FN_ARGS = '\\\\([-0-9.%, #a-zA-Z]+\\\\)';\n/** @type {?} */\nconst SAFE_STYLE_VALUE = new RegExp(`^(${VALUES}|` +\n    `(?:${TRANSFORMATION_FNS}|${COLOR_FNS}|${GRADIENTS}|${CSS3_FNS})` +\n    `${FN_ARGS})$`, 'g');\n/**\n * Matches a `url(...)` value with an arbitrary argument as long as it does\n * not contain parentheses.\n *\n * The URL value still needs to be sanitized separately.\n *\n * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted\n * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.\n * by observing whether scroll bars are displayed, or character ranges used by a font face\n * definition.\n *\n * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that\n * binding a URL value without further cooperation from the page will cause an information leak, and\n * if so, it is just a leak, not a full blown XSS vulnerability.\n *\n * Given the common use case, low likelihood of attack vector, and low impact of an attack, this\n * code is permissive and allows URLs that sanitize otherwise.\n * @type {?}\n */\nconst URL_RE = /^url\\(([^)]+)\\)$/;\n/**\n * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\n * that neither escape (\\) nor any other character that could result in\n * breaking out of a string parsing context are allowed;\n * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\n *\n * This code was taken from the Closure sanitization library.\n * @param {?} value\n * @return {?}\n */\nfunction hasBalancedQuotes(value) {\n    /** @type {?} */\n    let outsideSingle = true;\n    /** @type {?} */\n    let outsideDouble = true;\n    for (let i = 0; i < value.length; i++) {\n        /** @type {?} */\n        const c = value.charAt(i);\n        if (c === '\\'' && outsideDouble) {\n            outsideSingle = !outsideSingle;\n        }\n        else if (c === '\"' && outsideSingle) {\n            outsideDouble = !outsideDouble;\n        }\n    }\n    return outsideSingle && outsideDouble;\n}\n/**\n * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\n * value) and returns a value that is safe to use in a browser environment.\n * @param {?} value\n * @return {?}\n */\nfunction _sanitizeStyle(value) {\n    value = String(value).trim(); // Make sure it's actually a string.\n    if (!value)\n        return '';\n    // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for\n    // reasoning behind this.\n    /** @type {?} */\n    const urlMatch = value.match(URL_RE);\n    if ((urlMatch && _sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||\n        value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {\n        return value; // Safe style values.\n    }\n    if (isDevMode()) {\n        console.warn(`WARNING: sanitizing unsafe style value ${value} (see http://g.co/ng/security#xss).`);\n    }\n    return 'unsafe';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `html` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustHtml}.\n *\n * \\@publicApi\n * @param {?} unsafeHtml untrusted `html`, typically from the user.\n * @return {?} `html` string which is safe to display to user, because all of the dangerous javascript\n * and urls have been removed.\n *\n */\nfunction ɵɵsanitizeHtml(unsafeHtml) {\n    /** @type {?} */\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || '';\n    }\n    if (allowSanitizationBypass(unsafeHtml, \"Html\" /* Html */)) {\n        return unsafeHtml.toString();\n    }\n    return _sanitizeHtml(document, renderStringify(unsafeHtml));\n}\n/**\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `style` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustStyle}.\n *\n * \\@publicApi\n * @param {?} unsafeStyle untrusted `style`, typically from the user.\n * @return {?} `style` string which is safe to bind to the `style` properties, because all of the\n * dangerous javascript and urls have been removed.\n *\n */\nfunction ɵɵsanitizeStyle(unsafeStyle) {\n    /** @type {?} */\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || '';\n    }\n    if (allowSanitizationBypass(unsafeStyle, \"Style\" /* Style */)) {\n        return unsafeStyle.toString();\n    }\n    return _sanitizeStyle(renderStringify(unsafeStyle));\n}\n/**\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n * dangerous\n * content.\n *\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n * removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustUrl}.\n *\n * \\@publicApi\n * @param {?} unsafeUrl untrusted `url`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * all of the dangerous javascript has been removed.\n *\n */\nfunction ɵɵsanitizeUrl(unsafeUrl) {\n    /** @type {?} */\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || '';\n    }\n    if (allowSanitizationBypass(unsafeUrl, \"Url\" /* Url */)) {\n        return unsafeUrl.toString();\n    }\n    return _sanitizeUrl(renderStringify(unsafeUrl));\n}\n/**\n * A `url` sanitizer which only lets trusted `url`s through.\n *\n * This passes only `url`s marked trusted by calling {\\@link bypassSanitizationTrustResourceUrl}.\n *\n * \\@publicApi\n * @param {?} unsafeResourceUrl untrusted `url`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * only trusted `url`s have been allowed to pass.\n *\n */\nfunction ɵɵsanitizeResourceUrl(unsafeResourceUrl) {\n    /** @type {?} */\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '';\n    }\n    if (allowSanitizationBypass(unsafeResourceUrl, \"ResourceUrl\" /* ResourceUrl */)) {\n        return unsafeResourceUrl.toString();\n    }\n    throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n}\n/**\n * A `script` sanitizer which only lets trusted javascript through.\n *\n * This passes only `script`s marked trusted by calling {\\@link\n * bypassSanitizationTrustScript}.\n *\n * \\@publicApi\n * @param {?} unsafeScript untrusted `script`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n * because only trusted `scripts` have been allowed to pass.\n *\n */\nfunction ɵɵsanitizeScript(unsafeScript) {\n    /** @type {?} */\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || '';\n    }\n    if (allowSanitizationBypass(unsafeScript, \"Script\" /* Script */)) {\n        return unsafeScript.toString();\n    }\n    throw new Error('unsafe value used in a script context');\n}\n/**\n * Detects which sanitizer to use for URL property, based on tag name and prop name.\n *\n * The rules are based on the RESOURCE_URL context config from\n * `packages/compiler/src/schema/dom_security_schema.ts`.\n * If tag and prop names don't match Resource URL schema, use URL sanitizer.\n * @param {?} tag\n * @param {?} prop\n * @return {?}\n */\nfunction getUrlSanitizer(tag, prop) {\n    if ((prop === 'src' && (tag === 'embed' || tag === 'frame' || tag === 'iframe' ||\n        tag === 'media' || tag === 'script')) ||\n        (prop === 'href' && (tag === 'base' || tag === 'link'))) {\n        return ɵɵsanitizeResourceUrl;\n    }\n    return ɵɵsanitizeUrl;\n}\n/**\n * Sanitizes URL, selecting sanitizer function based on tag and property names.\n *\n * This function is used in case we can't define security context at compile time, when only prop\n * name is available. This happens when we generate host bindings for Directives/Components. The\n * host element is unknown at compile time, so we defer calculation of specific sanitizer to\n * runtime.\n *\n * \\@publicApi\n * @param {?} unsafeUrl untrusted `url`, typically from the user.\n * @param {?} tag target element tag name.\n * @param {?} prop name of the property that contains the value.\n * @return {?} `url` string which is safe to bind.\n *\n */\nfunction ɵɵsanitizeUrlOrResourceUrl(unsafeUrl, tag, prop) {\n    return getUrlSanitizer(tag, prop)(unsafeUrl);\n}\n/**\n * The default style sanitizer will handle sanitization for style properties by\n * sanitizing any CSS property that can include a `url` value (usually image-based properties)\n *\n * \\@publicApi\n * @type {?}\n */\nconst ɵɵdefaultStyleSanitizer = ((/** @type {?} */ ((/**\n * @param {?} prop\n * @param {?=} value\n * @return {?}\n */\nfunction (prop, value) {\n    if (value === undefined) {\n        return prop === 'background-image' || prop === 'background' || prop === 'border-image' ||\n            prop === 'filter' || prop === 'list-style' || prop === 'list-style-image';\n    }\n    return ɵɵsanitizeStyle(value);\n}))));\n/**\n * @param {?} name\n * @return {?}\n */\nfunction validateAgainstEventProperties(name) {\n    if (name.toLowerCase().startsWith('on')) {\n        /** @type {?} */\n        const msg = `Binding to event property '${name}' is disallowed for security reasons, ` +\n            `please use (${name.slice(2)})=...` +\n            `\\nIf '${name}' is a directive input, make sure the directive is imported by the` +\n            ` current module.`;\n        throw new Error(msg);\n    }\n}\n/**\n * @param {?} name\n * @return {?}\n */\nfunction validateAgainstEventAttributes(name) {\n    if (name.toLowerCase().startsWith('on')) {\n        /** @type {?} */\n        const msg = `Binding to event attribute '${name}' is disallowed for security reasons, ` +\n            `please use (${name.slice(2)})=...`;\n        throw new Error(msg);\n    }\n}\n/**\n * @return {?}\n */\nfunction getSanitizer() {\n    /** @type {?} */\n    const lView = getLView();\n    return lView && lView[SANITIZER];\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction normalizeDebugBindingName(name) {\n    // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\n    name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\n    return `ng-reflect-${name}`;\n}\nconst CAMEL_CASE_REGEXP = /([A-Z])/g;\nfunction camelCaseToDashCase(input) {\n    return input.replace(CAMEL_CASE_REGEXP, (...m) => '-' + m[1].toLowerCase());\n}\nfunction normalizeDebugBindingValue(value) {\n    try {\n        // Limit the size of the value as otherwise the DOM just gets polluted.\n        return value != null ? value.toString().slice(0, 30) : value;\n    }\n    catch (e) {\n        return '[ERROR] Exception while trying to serialize the value';\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Marks that the next string is for element.\n *\n * See `I18nMutateOpCodes` documentation.\n * @type {?}\n */\nconst ELEMENT_MARKER = {\n    marker: 'element'\n};\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Marks that the next string is for comment.\n *\n * See `I18nMutateOpCodes` documentation.\n * @type {?}\n */\nconst COMMENT_MARKER = {\n    marker: 'comment'\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} obj\n * @param {?} debug\n * @return {?}\n */\nfunction attachDebugObject(obj, debug) {\n    Object.defineProperty(obj, 'debug', { value: debug, enumerable: false });\n}\n/*\n * This file contains conditionally attached classes which provide human readable (debug) level\n * information for `LView`, `LContainer` and other internal data structures. These data structures\n * are stored internally as array which makes it very difficult during debugging to reason about the\n * current state of the system.\n *\n * Patching the array with extra property does change the array's hidden class' but it does not\n * change the cost of access, therefore this patching should not have significant if any impact in\n * `ngDevMode` mode. (see: https://jsperf.com/array-vs-monkey-patch-array)\n *\n * So instead of seeing:\n * ```\n * Array(30) [Object, 659, null, …]\n * ```\n *\n * You get to see:\n * ```\n * LViewDebug {\n *   views: [...],\n *   flags: {attached: true, ...}\n *   nodes: [\n *     {html: '<div id=\"123\">', ..., nodes: [\n *       {html: '<span>', ..., nodes: null}\n *     ]}\n *   ]\n * }\n * ```\n */\n/**\n * @param {?} lView\n * @return {?}\n */\nfunction attachLViewDebug(lView) {\n    attachDebugObject(lView, new LViewDebug(lView));\n}\n/**\n * @param {?} lContainer\n * @return {?}\n */\nfunction attachLContainerDebug(lContainer) {\n    attachDebugObject(lContainer, new LContainerDebug(lContainer));\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction toDebug(obj) {\n    if (obj) {\n        /** @type {?} */\n        const debug = ((/** @type {?} */ (obj))).debug;\n        assertDefined(debug, 'Object does not have a debug representation.');\n        return debug;\n    }\n    else {\n        return obj;\n    }\n}\n/**\n * Use this method to unwrap a native element in `LView` and convert it into HTML for easier\n * reading.\n *\n * @param {?} value possibly wrapped native DOM node.\n * @param {?=} includeChildren If `true` then the serialized HTML form will include child elements (same\n * as `outerHTML`). If `false` then the serialized HTML form will only contain the element itself\n * (will not serialize child elements).\n * @return {?}\n */\nfunction toHtml(value, includeChildren = false) {\n    /** @type {?} */\n    const node = (/** @type {?} */ (unwrapRNode(value)));\n    if (node) {\n        /** @type {?} */\n        const isTextNode = node.nodeType === Node.TEXT_NODE;\n        /** @type {?} */\n        const outerHTML = (isTextNode ? node.textContent : node.outerHTML) || '';\n        if (includeChildren || isTextNode) {\n            return outerHTML;\n        }\n        else {\n            /** @type {?} */\n            const innerHTML = node.innerHTML;\n            return outerHTML.split(innerHTML)[0] || null;\n        }\n    }\n    else {\n        return null;\n    }\n}\nclass LViewDebug {\n    /**\n     * @param {?} _raw_lView\n     */\n    constructor(_raw_lView) {\n        this._raw_lView = _raw_lView;\n    }\n    /**\n     * Flags associated with the `LView` unpacked into a more readable state.\n     * @return {?}\n     */\n    get flags() {\n        /** @type {?} */\n        const flags = this._raw_lView[FLAGS];\n        return {\n            __raw__flags__: flags,\n            initPhaseState: flags & 3 /* InitPhaseStateMask */,\n            creationMode: !!(flags & 4 /* CreationMode */),\n            firstViewPass: !!(flags & 8 /* FirstLViewPass */),\n            checkAlways: !!(flags & 16 /* CheckAlways */),\n            dirty: !!(flags & 64 /* Dirty */),\n            attached: !!(flags & 128 /* Attached */),\n            destroyed: !!(flags & 256 /* Destroyed */),\n            isRoot: !!(flags & 512 /* IsRoot */),\n            indexWithinInitPhase: flags >> 10 /* IndexWithinInitPhaseShift */,\n        };\n    }\n    /**\n     * @return {?}\n     */\n    get parent() { return toDebug(this._raw_lView[PARENT]); }\n    /**\n     * @return {?}\n     */\n    get host() { return toHtml(this._raw_lView[HOST], true); }\n    /**\n     * @return {?}\n     */\n    get context() { return this._raw_lView[CONTEXT]; }\n    /**\n     * The tree of nodes associated with the current `LView`. The nodes have been normalized into a\n     * tree structure with relevant details pulled out for readability.\n     * @return {?}\n     */\n    get nodes() {\n        /** @type {?} */\n        const lView = this._raw_lView;\n        /** @type {?} */\n        const tNode = lView[TVIEW].firstChild;\n        return toDebugNodes(tNode, lView);\n    }\n    /**\n     * Additional information which is hidden behind a property. The extra level of indirection is\n     * done so that the debug view would not be cluttered with properties which are only rarely\n     * relevant to the developer.\n     * @return {?}\n     */\n    get __other__() {\n        return {\n            tView: this._raw_lView[TVIEW],\n            cleanup: this._raw_lView[CLEANUP],\n            injector: this._raw_lView[INJECTOR$1],\n            rendererFactory: this._raw_lView[RENDERER_FACTORY],\n            renderer: this._raw_lView[RENDERER],\n            sanitizer: this._raw_lView[SANITIZER],\n            childHead: toDebug(this._raw_lView[CHILD_HEAD]),\n            next: toDebug(this._raw_lView[NEXT]),\n            childTail: toDebug(this._raw_lView[CHILD_TAIL]),\n            declarationView: toDebug(this._raw_lView[DECLARATION_VIEW]),\n            contentQueries: this._raw_lView[CONTENT_QUERIES],\n            queries: this._raw_lView[QUERIES],\n            tHost: this._raw_lView[T_HOST],\n            bindingIndex: this._raw_lView[BINDING_INDEX],\n        };\n    }\n    /**\n     * Normalized view of child views (and containers) attached at this location.\n     * @return {?}\n     */\n    get childViews() {\n        /** @type {?} */\n        const childViews = [];\n        /** @type {?} */\n        let child = this.__other__.childHead;\n        while (child) {\n            childViews.push(child);\n            child = child.__other__.next;\n        }\n        return childViews;\n    }\n}\n/**\n * Turns a flat list of nodes into a tree by walking the associated `TNode` tree.\n *\n * @param {?} tNode\n * @param {?} lView\n * @return {?}\n */\nfunction toDebugNodes(tNode, lView) {\n    if (tNode) {\n        /** @type {?} */\n        const debugNodes = [];\n        /** @type {?} */\n        let tNodeCursor = tNode;\n        while (tNodeCursor) {\n            /** @type {?} */\n            const rawValue = lView[tNode.index];\n            /** @type {?} */\n            const native = unwrapRNode(rawValue);\n            /** @type {?} */\n            const componentLViewDebug = toDebug(readLViewValue(rawValue));\n            debugNodes.push({\n                html: toHtml(native),\n                native: (/** @type {?} */ (native)),\n                nodes: toDebugNodes(tNode.child, lView),\n                component: componentLViewDebug\n            });\n            tNodeCursor = tNodeCursor.next;\n        }\n        return debugNodes;\n    }\n    else {\n        return null;\n    }\n}\nclass LContainerDebug {\n    /**\n     * @param {?} _raw_lContainer\n     */\n    constructor(_raw_lContainer) {\n        this._raw_lContainer = _raw_lContainer;\n    }\n    /**\n     * @return {?}\n     */\n    get activeIndex() { return this._raw_lContainer[ACTIVE_INDEX]; }\n    /**\n     * @return {?}\n     */\n    get views() {\n        return this._raw_lContainer[VIEWS].map((/** @type {?} */ (toDebug)));\n    }\n    /**\n     * @return {?}\n     */\n    get parent() { return toDebug(this._raw_lContainer[PARENT]); }\n    /**\n     * @return {?}\n     */\n    get queries() { return this._raw_lContainer[QUERIES]; }\n    /**\n     * @return {?}\n     */\n    get host() { return this._raw_lContainer[HOST]; }\n    /**\n     * @return {?}\n     */\n    get native() { return this._raw_lContainer[NATIVE]; }\n    /**\n     * @return {?}\n     */\n    get __other__() {\n        return {\n            next: toDebug(this._raw_lContainer[NEXT]),\n        };\n    }\n}\n/**\n * Return an `LView` value if found.\n *\n * @param {?} value `LView` if any\n * @return {?}\n */\nfunction readLViewValue(value) {\n    while (Array.isArray(value)) {\n        // This check is not quite right, as it does not take into account `StylingContext`\n        // This is why it is in debug, not in util.ts\n        if (value.length >= HEADER_OFFSET - 1)\n            return (/** @type {?} */ (value));\n        value = value[HOST];\n    }\n    return null;\n}\nclass I18NDebugItem {\n    /**\n     * @param {?} __raw_opCode\n     * @param {?} _lView\n     * @param {?} nodeIndex\n     * @param {?} type\n     */\n    constructor(__raw_opCode, _lView, nodeIndex, type) {\n        this.__raw_opCode = __raw_opCode;\n        this._lView = _lView;\n        this.nodeIndex = nodeIndex;\n        this.type = type;\n    }\n    /**\n     * @return {?}\n     */\n    get tNode() { return getTNode(this.nodeIndex, this._lView); }\n}\n/**\n * Turns a list of \"Create\" & \"Update\" OpCodes into a human-readable list of operations for\n * debugging purposes.\n * @param {?} mutateOpCodes mutation opCodes to read\n * @param {?} updateOpCodes update opCodes to read\n * @param {?} icus list of ICU expressions\n * @param {?} lView The view the opCodes are acting on\n * @return {?}\n */\nfunction attachI18nOpCodesDebug(mutateOpCodes, updateOpCodes, icus, lView) {\n    attachDebugObject(mutateOpCodes, new I18nMutateOpCodesDebug(mutateOpCodes, lView));\n    attachDebugObject(updateOpCodes, new I18nUpdateOpCodesDebug(updateOpCodes, icus, lView));\n    if (icus) {\n        icus.forEach((/**\n         * @param {?} icu\n         * @return {?}\n         */\n        icu => {\n            icu.create.forEach((/**\n             * @param {?} icuCase\n             * @return {?}\n             */\n            icuCase => { attachDebugObject(icuCase, new I18nMutateOpCodesDebug(icuCase, lView)); }));\n            icu.update.forEach((/**\n             * @param {?} icuCase\n             * @return {?}\n             */\n            icuCase => {\n                attachDebugObject(icuCase, new I18nUpdateOpCodesDebug(icuCase, icus, lView));\n            }));\n        }));\n    }\n}\nclass I18nMutateOpCodesDebug {\n    /**\n     * @param {?} __raw_opCodes\n     * @param {?} __lView\n     */\n    constructor(__raw_opCodes, __lView) {\n        this.__raw_opCodes = __raw_opCodes;\n        this.__lView = __lView;\n    }\n    /**\n     * A list of operation information about how the OpCodes will act on the view.\n     * @return {?}\n     */\n    get operations() {\n        const { __lView, __raw_opCodes } = this;\n        /** @type {?} */\n        const results = [];\n        for (let i = 0; i < __raw_opCodes.length; i++) {\n            /** @type {?} */\n            const opCode = __raw_opCodes[i];\n            /** @type {?} */\n            let result;\n            if (typeof opCode === 'string') {\n                result = {\n                    __raw_opCode: opCode,\n                    type: 'Create Text Node',\n                    nodeIndex: __raw_opCodes[++i],\n                    text: opCode,\n                };\n            }\n            if (typeof opCode === 'number') {\n                switch (opCode & 7 /* MASK_OPCODE */) {\n                    case 1 /* AppendChild */:\n                        /** @type {?} */\n                        const destinationNodeIndex = opCode >>> 17 /* SHIFT_PARENT */;\n                        result = new I18NDebugItem(opCode, __lView, destinationNodeIndex, 'AppendChild');\n                        break;\n                    case 0 /* Select */:\n                        /** @type {?} */\n                        const nodeIndex = opCode >>> 3 /* SHIFT_REF */;\n                        result = new I18NDebugItem(opCode, __lView, nodeIndex, 'Select');\n                        break;\n                    case 5 /* ElementEnd */:\n                        /** @type {?} */\n                        let elementIndex = opCode >>> 3 /* SHIFT_REF */;\n                        result = new I18NDebugItem(opCode, __lView, elementIndex, 'ElementEnd');\n                        break;\n                    case 4 /* Attr */:\n                        elementIndex = opCode >>> 3 /* SHIFT_REF */;\n                        result = new I18NDebugItem(opCode, __lView, elementIndex, 'Attr');\n                        result['attrName'] = __raw_opCodes[++i];\n                        result['attrValue'] = __raw_opCodes[++i];\n                        break;\n                }\n            }\n            if (!result) {\n                switch (opCode) {\n                    case COMMENT_MARKER:\n                        result = {\n                            __raw_opCode: opCode,\n                            type: 'COMMENT_MARKER',\n                            commentValue: __raw_opCodes[++i],\n                            nodeIndex: __raw_opCodes[++i],\n                        };\n                        break;\n                    case ELEMENT_MARKER:\n                        result = {\n                            __raw_opCode: opCode,\n                            type: 'ELEMENT_MARKER',\n                        };\n                        break;\n                }\n            }\n            if (!result) {\n                result = {\n                    __raw_opCode: opCode,\n                    type: 'Unknown Op Code',\n                    code: opCode,\n                };\n            }\n            results.push(result);\n        }\n        return results;\n    }\n}\nclass I18nUpdateOpCodesDebug {\n    /**\n     * @param {?} __raw_opCodes\n     * @param {?} icus\n     * @param {?} __lView\n     */\n    constructor(__raw_opCodes, icus, __lView) {\n        this.__raw_opCodes = __raw_opCodes;\n        this.icus = icus;\n        this.__lView = __lView;\n    }\n    /**\n     * A list of operation information about how the OpCodes will act on the view.\n     * @return {?}\n     */\n    get operations() {\n        const { __lView, __raw_opCodes, icus } = this;\n        /** @type {?} */\n        const results = [];\n        for (let i = 0; i < __raw_opCodes.length; i++) {\n            // bit code to check if we should apply the next update\n            /** @type {?} */\n            const checkBit = (/** @type {?} */ (__raw_opCodes[i]));\n            // Number of opCodes to skip until next set of update codes\n            /** @type {?} */\n            const skipCodes = (/** @type {?} */ (__raw_opCodes[++i]));\n            /** @type {?} */\n            let value = '';\n            for (let j = i + 1; j <= (i + skipCodes); j++) {\n                /** @type {?} */\n                const opCode = __raw_opCodes[j];\n                if (typeof opCode === 'string') {\n                    value += opCode;\n                }\n                else if (typeof opCode == 'number') {\n                    if (opCode < 0) {\n                        // It's a binding index whose value is negative\n                        // We cannot know the value of the binding so we only show the index\n                        value += `�${-opCode - 1}�`;\n                    }\n                    else {\n                        /** @type {?} */\n                        const nodeIndex = opCode >>> 2 /* SHIFT_REF */;\n                        /** @type {?} */\n                        let tIcuIndex;\n                        /** @type {?} */\n                        let tIcu;\n                        switch (opCode & 3 /* MASK_OPCODE */) {\n                            case 1 /* Attr */:\n                                /** @type {?} */\n                                const attrName = (/** @type {?} */ (__raw_opCodes[++j]));\n                                /** @type {?} */\n                                const sanitizeFn = __raw_opCodes[++j];\n                                results.push({\n                                    __raw_opCode: opCode,\n                                    checkBit,\n                                    type: 'Attr',\n                                    attrValue: value, attrName, sanitizeFn,\n                                });\n                                break;\n                            case 0 /* Text */:\n                                results.push({\n                                    __raw_opCode: opCode,\n                                    checkBit,\n                                    type: 'Text', nodeIndex,\n                                    text: value,\n                                });\n                                break;\n                            case 2 /* IcuSwitch */:\n                                tIcuIndex = (/** @type {?} */ (__raw_opCodes[++j]));\n                                tIcu = (/** @type {?} */ (icus))[tIcuIndex];\n                                /** @type {?} */\n                                let result = new I18NDebugItem(opCode, __lView, nodeIndex, 'IcuSwitch');\n                                result['tIcuIndex'] = tIcuIndex;\n                                result['checkBit'] = checkBit;\n                                result['mainBinding'] = value;\n                                result['tIcu'] = tIcu;\n                                results.push(result);\n                                break;\n                            case 3 /* IcuUpdate */:\n                                tIcuIndex = (/** @type {?} */ (__raw_opCodes[++j]));\n                                tIcu = (/** @type {?} */ (icus))[tIcuIndex];\n                                result = new I18NDebugItem(opCode, __lView, nodeIndex, 'IcuUpdate');\n                                result['tIcuIndex'] = tIcuIndex;\n                                result['checkBit'] = checkBit;\n                                result['tIcu'] = tIcu;\n                                results.push(result);\n                                break;\n                        }\n                    }\n                }\n            }\n            i += skipCodes;\n        }\n        return results;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Called when there are multiple component selectors that match a given node\n * @param {?} tNode\n * @return {?}\n */\nfunction throwMultipleComponentError(tNode) {\n    throw new Error(`Multiple components match node with tagname ${tNode.tagName}`);\n}\n/**\n * Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on.\n * @param {?} creationMode\n * @param {?} oldValue\n * @param {?} currValue\n * @return {?}\n */\nfunction throwErrorIfNoChangesMode(creationMode, oldValue, currValue) {\n    /** @type {?} */\n    let msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '${oldValue}'. Current value: '${currValue}'.`;\n    if (creationMode) {\n        msg +=\n            ` It seems like the view has been created after its parent and its children have been dirty checked.` +\n                ` Has it been created in a change detection hook ?`;\n    }\n    // TODO: include debug context\n    throw new Error(msg);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * A special value which designates that a value has not changed.\n * @type {?}\n */\nconst NO_CHANGE = (/** @type {?} */ ({}));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/*\n * This file contains the logic to defer all hostBindings-related styling code to run\n * at a later point, instead of immediately (as is the case with how template-level\n * styling instructions are run).\n *\n * Certain styling instructions, present within directives, components and sub-classed\n * directives, are evaluated at different points (depending on priority) and will therefore\n * not be applied to the styling context of an element immediately. They are instead\n * designed to be applied just before styling is applied to an element.\n *\n * (The priority for when certain host-related styling operations are executed is discussed\n * more within `interfaces/styling.ts`.)\n */\n/**\n * @param {?} context\n * @param {?} directiveIndex\n * @return {?}\n */\nfunction registerHostDirective(context, directiveIndex) {\n    /** @type {?} */\n    let buffer = context[8 /* HostInstructionsQueue */];\n    if (!buffer) {\n        buffer = context[8 /* HostInstructionsQueue */] = [DEFAULT_TEMPLATE_DIRECTIVE_INDEX];\n    }\n    buffer[0 /* LastRegisteredDirectiveIndexPosition */] = directiveIndex;\n}\n/**\n * Queues a styling instruction to be run just before `renderStyling()` is executed.\n * @template T\n * @param {?} context\n * @param {?} priority\n * @param {?} instructionFn\n * @param {?} instructionFnArgs\n * @return {?}\n */\nfunction enqueueHostInstruction(context, priority, instructionFn, instructionFnArgs) {\n    /** @type {?} */\n    const buffer = (/** @type {?} */ (context[8 /* HostInstructionsQueue */]));\n    /** @type {?} */\n    const index = findNextInsertionIndex(buffer, priority);\n    buffer.splice(index, 0, priority, instructionFn, instructionFnArgs);\n}\n/**\n * Figures out where exactly to to insert the next host instruction queue entry.\n * @param {?} buffer\n * @param {?} priority\n * @return {?}\n */\nfunction findNextInsertionIndex(buffer, priority) {\n    for (let i = 1 /* ValuesStartPosition */; i < buffer.length; i += 3 /* Size */) {\n        /** @type {?} */\n        const p = (/** @type {?} */ (buffer[i + 0 /* DirectiveIndexOffset */]));\n        if (p > priority) {\n            return i;\n        }\n    }\n    return buffer.length;\n}\n/**\n * Iterates through the host instructions queue (if present within the provided\n * context) and executes each queued instruction entry.\n * @param {?} context\n * @return {?}\n */\nfunction flushQueue(context) {\n    /** @type {?} */\n    const buffer = context[8 /* HostInstructionsQueue */];\n    if (buffer) {\n        for (let i = 1 /* ValuesStartPosition */; i < buffer.length; i += 3 /* Size */) {\n            /** @type {?} */\n            const fn = (/** @type {?} */ (buffer[i + 1 /* InstructionFnOffset */]));\n            /** @type {?} */\n            const args = (/** @type {?} */ (buffer[i + 2 /* ParamsOffset */]));\n            fn.apply(this, args);\n        }\n        buffer.length = 1 /* ValuesStartPosition */;\n    }\n}\n/**\n * Determines whether or not to allow the host instructions queue to be flushed or not.\n *\n * Because the hostBindings function code is unaware of the presence of other host bindings\n * (as well as the template function) then styling is evaluated multiple times per element.\n * To prevent style and class values from being applied to the element multiple times, a\n * flush is only allowed when the last directive (the directive that was registered into\n * the styling context) attempts to render its styling.\n * @param {?} context\n * @param {?} directiveIndex\n * @return {?}\n */\nfunction allowFlush(context, directiveIndex) {\n    /** @type {?} */\n    const buffer = context[8 /* HostInstructionsQueue */];\n    if (buffer) {\n        return buffer[0 /* LastRegisteredDirectiveIndexPosition */] ===\n            directiveIndex;\n    }\n    return true;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Combines the binding value and a factory for an animation player.\n *\n * Used to bind a player to an element template binding (currently only\n * `[style]`, `[style.prop]`, `[class]` and `[class.name]` bindings\n * supported). The provided `factoryFn` function will be run once all\n * the associated bindings have been evaluated on the element and is\n * designed to return a player which will then be placed on the element.\n *\n * @template T\n * @param {?} factoryFn The function that is used to create a player\n *   once all the rendering-related (styling values) have been\n *   processed for the element binding.\n * @param {?} value The raw value that will be exposed to the binding\n *   so that the binding can update its internal values when\n *   any changes are evaluated.\n * @return {?}\n */\nfunction bindPlayerFactory(factoryFn, value) {\n    return (/** @type {?} */ (new BoundPlayerFactory(factoryFn, value)));\n}\n/**\n * @template T\n */\nclass BoundPlayerFactory {\n    /**\n     * @param {?} fn\n     * @param {?} value\n     */\n    constructor(fn, value) {\n        this.fn = fn;\n        this.value = value;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This file includes the code to power all styling-binding operations in Angular.\n *\n * These include:\n * [style]=\"myStyleObj\"\n * [class]=\"myClassObj\"\n * [style.prop]=\"myPropValue\"\n * [class.name]=\"myClassValue\"\n *\n * It also includes code that will allow style binding code to operate within host\n * bindings for components/directives.\n *\n * There are many different ways in which these functions below are called. Please see\n * `render3/interfaces/styling.ts` to get a better idea of how the styling algorithm works.\n */\n/**\n * Creates a new StylingContext an fills it with the provided static styling attribute values.\n * @param {?} attrs\n * @param {?} stylingStartIndex\n * @param {?=} directiveIndex\n * @return {?}\n */\nfunction initializeStaticContext(attrs, stylingStartIndex, directiveIndex = 0) {\n    /** @type {?} */\n    const context = createEmptyStylingContext();\n    patchContextWithStaticAttrs(context, attrs, stylingStartIndex, directiveIndex);\n    return context;\n}\n/**\n * Designed to update an existing styling context with new static styling\n * data (classes and styles).\n *\n * @param {?} context the existing styling context\n * @param {?} attrs an array of new static styling attributes that will be\n *              assigned to the context\n * @param {?} attrsStylingStartIndex what index to start iterating within the\n *              provided `attrs` array to start reading style and class values\n * @param {?} directiveIndex\n * @return {?}\n */\nfunction patchContextWithStaticAttrs(context, attrs, attrsStylingStartIndex, directiveIndex) {\n    // this means the context has already been set and instantiated\n    if (context[1 /* MasterFlagPosition */] & 16 /* BindingAllocationLocked */)\n        return;\n    allocateOrUpdateDirectiveIntoContext(context, directiveIndex);\n    /** @type {?} */\n    let initialClasses = null;\n    /** @type {?} */\n    let initialStyles = null;\n    /** @type {?} */\n    let mode = -1;\n    for (let i = attrsStylingStartIndex; i < attrs.length; i++) {\n        /** @type {?} */\n        const attr = attrs[i];\n        if (typeof attr == 'number') {\n            mode = attr;\n        }\n        else if (mode == 1 /* Classes */) {\n            initialClasses = initialClasses || context[4 /* InitialClassValuesPosition */];\n            patchInitialStylingValue(initialClasses, (/** @type {?} */ (attr)), true, directiveIndex);\n        }\n        else if (mode == 2 /* Styles */) {\n            initialStyles = initialStyles || context[3 /* InitialStyleValuesPosition */];\n            patchInitialStylingValue(initialStyles, (/** @type {?} */ (attr)), attrs[++i], directiveIndex);\n        }\n    }\n}\n/**\n * Designed to add a style or class value into the existing set of initial styles.\n *\n * The function will search and figure out if a style/class value is already present\n * within the provided initial styling array. If and when a style/class value is\n * present (allocated) then the code below will set the new value depending on the\n * following cases:\n *\n *  1) if the existing value is falsy (this happens because a `[class.prop]` or\n *     `[style.prop]` binding was set, but there wasn't a matching static style\n *     or class present on the context)\n *  2) if the value was set already by the template, component or directive, but the\n *     new value is set on a higher level (i.e. a sub component which extends a parent\n *     component sets its value after the parent has already set the same one)\n *  3) if the same directive provides a new set of styling values to set\n *\n * @param {?} initialStyling the initial styling array where the new styling entry will be added to\n * @param {?} prop the property value of the new entry (e.g. `width` (styles) or `foo` (classes))\n * @param {?} value the styling value of the new entry (e.g. `absolute` (styles) or `true` (classes))\n * @param {?} directiveOwnerIndex the directive owner index value of the styling source responsible\n *        for these styles (see `interfaces/styling.ts#directives` for more info)\n * @return {?}\n */\nfunction patchInitialStylingValue(initialStyling, prop, value, directiveOwnerIndex) {\n    for (let i = 2 /* KeyValueStartPosition */; i < initialStyling.length; i += 3 /* Size */) {\n        /** @type {?} */\n        const key = initialStyling[i + 0 /* PropOffset */];\n        if (key === prop) {\n            /** @type {?} */\n            const existingValue = (/** @type {?} */ (initialStyling[i + 1 /* ValueOffset */]));\n            /** @type {?} */\n            const existingOwner = (/** @type {?} */ (initialStyling[i + 2 /* DirectiveOwnerOffset */]));\n            if (allowValueChange(existingValue, value, existingOwner, directiveOwnerIndex)) {\n                addOrUpdateStaticStyle(i, initialStyling, prop, value, directiveOwnerIndex);\n            }\n            return;\n        }\n    }\n    // We did not find existing key, add a new one.\n    addOrUpdateStaticStyle(null, initialStyling, prop, value, directiveOwnerIndex);\n}\n/**\n * Runs through the initial class values present in the provided\n * context and renders them via the provided renderer on the element.\n *\n * @param {?} element the element the styling will be applied to\n * @param {?} context the source styling context which contains the initial class values\n * @param {?} renderer the renderer instance that will be used to apply the class\n * @param {?=} startIndex\n * @return {?} the index that the classes were applied up until\n */\nfunction renderInitialClasses(element, context, renderer, startIndex) {\n    /** @type {?} */\n    const initialClasses = context[4 /* InitialClassValuesPosition */];\n    /** @type {?} */\n    let i = startIndex || 2 /* KeyValueStartPosition */;\n    while (i < initialClasses.length) {\n        /** @type {?} */\n        const value = initialClasses[i + 1 /* ValueOffset */];\n        if (value) {\n            setClass(element, (/** @type {?} */ (initialClasses[i + 0 /* PropOffset */])), true, renderer, null);\n        }\n        i += 3 /* Size */;\n    }\n    return i;\n}\n/**\n * Runs through the initial styles values present in the provided\n * context and renders them via the provided renderer on the element.\n *\n * @param {?} element the element the styling will be applied to\n * @param {?} context the source styling context which contains the initial class values\n * @param {?} renderer the renderer instance that will be used to apply the class\n * @param {?=} startIndex\n * @return {?} the index that the styles were applied up until\n */\nfunction renderInitialStyles(element, context, renderer, startIndex) {\n    /** @type {?} */\n    const initialStyles = context[3 /* InitialStyleValuesPosition */];\n    /** @type {?} */\n    let i = startIndex || 2 /* KeyValueStartPosition */;\n    while (i < initialStyles.length) {\n        /** @type {?} */\n        const value = initialStyles[i + 1 /* ValueOffset */];\n        if (value) {\n            setStyle(element, (/** @type {?} */ (initialStyles[i + 0 /* PropOffset */])), (/** @type {?} */ (value)), renderer, null);\n        }\n        i += 3 /* Size */;\n    }\n    return i;\n}\n/**\n * Adds in new binding values to a styling context.\n *\n * If a directive value is provided then all provided class/style binding names will\n * reference the provided directive.\n *\n * @param {?} context the existing styling context\n * @param {?} directiveIndex\n * @param {?=} classBindingNames an array of class binding names that will be added to the context\n * @param {?=} styleBindingNames an array of style binding names that will be added to the context\n * @param {?=} styleSanitizer an optional sanitizer that handle all sanitization on for each of\n *    the bindings added to the context. Note that if a directive is provided then the sanitizer\n *    instance will only be active if and when the directive updates the bindings that it owns.\n * @return {?}\n */\nfunction updateContextWithBindings(context, directiveIndex, classBindingNames, styleBindingNames, styleSanitizer) {\n    if (context[1 /* MasterFlagPosition */] & 16 /* BindingAllocationLocked */)\n        return;\n    // this means the context has already been patched with the directive's bindings\n    /** @type {?} */\n    const isNewDirective = findOrPatchDirectiveIntoRegistry(context, directiveIndex, false, styleSanitizer);\n    if (!isNewDirective) {\n        // this means the directive has already been patched in ... No point in doing anything\n        return;\n    }\n    if (styleBindingNames) {\n        styleBindingNames = hyphenateEntries(styleBindingNames);\n    }\n    // there are alot of variables being used below to track where in the context the new\n    // binding values will be placed. Because the context consists of multiple types of\n    // entries (single classes/styles and multi classes/styles) alot of the index positions\n    // need to be computed ahead of time and the context needs to be extended before the values\n    // are inserted in.\n    /** @type {?} */\n    const singlePropOffsetValues = context[5 /* SinglePropOffsetPositions */];\n    /** @type {?} */\n    const totalCurrentClassBindings = singlePropOffsetValues[1 /* ClassesCountPosition */];\n    /** @type {?} */\n    const totalCurrentStyleBindings = singlePropOffsetValues[0 /* StylesCountPosition */];\n    /** @type {?} */\n    const cachedClassMapValues = context[6 /* CachedMultiClasses */];\n    /** @type {?} */\n    const cachedStyleMapValues = context[7 /* CachedMultiStyles */];\n    /** @type {?} */\n    const classesOffset = totalCurrentClassBindings * 4 /* Size */;\n    /** @type {?} */\n    const stylesOffset = totalCurrentStyleBindings * 4 /* Size */;\n    /** @type {?} */\n    const singleStylesStartIndex = 10 /* SingleStylesStartPosition */;\n    /** @type {?} */\n    let singleClassesStartIndex = singleStylesStartIndex + stylesOffset;\n    /** @type {?} */\n    let multiStylesStartIndex = singleClassesStartIndex + classesOffset;\n    /** @type {?} */\n    let multiClassesStartIndex = multiStylesStartIndex + stylesOffset;\n    // because we're inserting more bindings into the context, this means that the\n    // binding values need to be referenced the singlePropOffsetValues array so that\n    // the template/directive can easily find them inside of the `elementStyleProp`\n    // and the `elementClassProp` functions without iterating through the entire context.\n    // The first step to setting up these reference points is to mark how many bindings\n    // are being added. Even if these bindings already exist in the context, the directive\n    // or template code will still call them unknowingly. Therefore the total values need\n    // to be registered so that we know how many bindings are assigned to each directive.\n    /** @type {?} */\n    const currentSinglePropsLength = singlePropOffsetValues.length;\n    singlePropOffsetValues.push(styleBindingNames ? styleBindingNames.length : 0, classBindingNames ? classBindingNames.length : 0);\n    // the code below will check to see if a new style binding already exists in the context\n    // if so then there is no point in inserting it into the context again. Whether or not it\n    // exists the styling offset code will now know exactly where it is\n    /** @type {?} */\n    let insertionOffset = 0;\n    /** @type {?} */\n    const filteredStyleBindingNames = [];\n    if (styleBindingNames && styleBindingNames.length) {\n        for (let i = 0; i < styleBindingNames.length; i++) {\n            /** @type {?} */\n            const name = styleBindingNames[i];\n            /** @type {?} */\n            let singlePropIndex = getMatchingBindingIndex(context, name, singleStylesStartIndex, singleClassesStartIndex);\n            if (singlePropIndex == -1) {\n                singlePropIndex = singleClassesStartIndex + insertionOffset;\n                insertionOffset += 4 /* Size */;\n                filteredStyleBindingNames.push(name);\n            }\n            singlePropOffsetValues.push(singlePropIndex);\n        }\n    }\n    // just like with the style binding loop above, the new class bindings get the same treatment...\n    /** @type {?} */\n    const filteredClassBindingNames = [];\n    if (classBindingNames && classBindingNames.length) {\n        for (let i = 0; i < classBindingNames.length; i++) {\n            /** @type {?} */\n            const name = classBindingNames[i];\n            /** @type {?} */\n            let singlePropIndex = getMatchingBindingIndex(context, name, singleClassesStartIndex, multiStylesStartIndex);\n            if (singlePropIndex == -1) {\n                singlePropIndex = multiStylesStartIndex + insertionOffset;\n                insertionOffset += 4 /* Size */;\n                filteredClassBindingNames.push(name);\n            }\n            else {\n                singlePropIndex += filteredStyleBindingNames.length * 4 /* Size */;\n            }\n            singlePropOffsetValues.push(singlePropIndex);\n        }\n    }\n    // because new styles are being inserted, this means the existing collection of style offset\n    // index values are incorrect (they point to the wrong values). The code below will run through\n    // the entire offset array and update the existing set of index values to point to their new\n    // locations while taking the new binding values into consideration.\n    /** @type {?} */\n    let i = 2 /* ValueStartPosition */;\n    if (filteredStyleBindingNames.length) {\n        while (i < currentSinglePropsLength) {\n            /** @type {?} */\n            const totalStyles = singlePropOffsetValues[i + 0 /* StylesCountPosition */];\n            /** @type {?} */\n            const totalClasses = singlePropOffsetValues[i + 1 /* ClassesCountPosition */];\n            if (totalClasses) {\n                /** @type {?} */\n                const start = i + 2 /* ValueStartPosition */ + totalStyles;\n                for (let j = start; j < start + totalClasses; j++) {\n                    singlePropOffsetValues[j] += filteredStyleBindingNames.length * 4 /* Size */;\n                }\n            }\n            /** @type {?} */\n            const total = totalStyles + totalClasses;\n            i += 2 /* ValueStartPosition */ + total;\n        }\n    }\n    /** @type {?} */\n    const totalNewEntries = filteredClassBindingNames.length + filteredStyleBindingNames.length;\n    // in the event that there are new style values being inserted, all existing class and style\n    // bindings need to have their pointer values offsetted with the new amount of space that is\n    // used for the new style/class bindings.\n    for (let i = singleStylesStartIndex; i < context.length; i += 4 /* Size */) {\n        /** @type {?} */\n        const isMultiBased = i >= multiStylesStartIndex;\n        /** @type {?} */\n        const isClassBased = i >= (isMultiBased ? multiClassesStartIndex : singleClassesStartIndex);\n        /** @type {?} */\n        const flag = getPointers(context, i);\n        /** @type {?} */\n        const staticIndex = getInitialIndex(flag);\n        /** @type {?} */\n        let singleOrMultiIndex = getMultiOrSingleIndex(flag);\n        if (isMultiBased) {\n            singleOrMultiIndex +=\n                isClassBased ? (filteredStyleBindingNames.length * 4 /* Size */) : 0;\n        }\n        else {\n            singleOrMultiIndex += (totalNewEntries * 4 /* Size */) +\n                ((isClassBased ? filteredStyleBindingNames.length : 0) * 4 /* Size */);\n        }\n        setFlag(context, i, pointers(flag, staticIndex, singleOrMultiIndex));\n    }\n    // this is where we make space in the context for the new style bindings\n    for (let i = 0; i < filteredStyleBindingNames.length * 4 /* Size */; i++) {\n        context.splice(multiClassesStartIndex, 0, null);\n        context.splice(singleClassesStartIndex, 0, null);\n        singleClassesStartIndex++;\n        multiStylesStartIndex++;\n        multiClassesStartIndex += 2; // both single + multi slots were inserted\n    }\n    // this is where we make space in the context for the new class bindings\n    for (let i = 0; i < filteredClassBindingNames.length * 4 /* Size */; i++) {\n        context.splice(multiStylesStartIndex, 0, null);\n        context.push(null);\n        multiStylesStartIndex++;\n        multiClassesStartIndex++;\n    }\n    /** @type {?} */\n    const initialClasses = context[4 /* InitialClassValuesPosition */];\n    /** @type {?} */\n    const initialStyles = context[3 /* InitialStyleValuesPosition */];\n    // the code below will insert each new entry into the context and assign the appropriate\n    // flags and index values to them. It's important this runs at the end of this function\n    // because the context, property offset and index values have all been computed just before.\n    for (let i = 0; i < totalNewEntries; i++) {\n        /** @type {?} */\n        const entryIsClassBased = i >= filteredStyleBindingNames.length;\n        /** @type {?} */\n        const adjustedIndex = entryIsClassBased ? (i - filteredStyleBindingNames.length) : i;\n        /** @type {?} */\n        const propName = entryIsClassBased ? filteredClassBindingNames[adjustedIndex] :\n            filteredStyleBindingNames[adjustedIndex];\n        /** @type {?} */\n        let multiIndex;\n        /** @type {?} */\n        let singleIndex;\n        if (entryIsClassBased) {\n            multiIndex = multiClassesStartIndex +\n                ((totalCurrentClassBindings + adjustedIndex) * 4 /* Size */);\n            singleIndex = singleClassesStartIndex +\n                ((totalCurrentClassBindings + adjustedIndex) * 4 /* Size */);\n        }\n        else {\n            multiIndex =\n                multiStylesStartIndex + ((totalCurrentStyleBindings + adjustedIndex) * 4 /* Size */);\n            singleIndex = singleStylesStartIndex +\n                ((totalCurrentStyleBindings + adjustedIndex) * 4 /* Size */);\n        }\n        // if a property is not found in the initial style values list then it\n        // is ALWAYS added in case a follow-up directive introduces the same initial\n        // style/class value later on.\n        /** @type {?} */\n        let initialValuesToLookup = entryIsClassBased ? initialClasses : initialStyles;\n        /** @type {?} */\n        let indexForInitial = getInitialStylingValuesIndexOf(initialValuesToLookup, propName);\n        if (indexForInitial === -1) {\n            indexForInitial = addOrUpdateStaticStyle(null, initialValuesToLookup, propName, entryIsClassBased ? false : null, directiveIndex) +\n                1 /* ValueOffset */;\n        }\n        else {\n            indexForInitial += 1 /* ValueOffset */;\n        }\n        /** @type {?} */\n        const initialFlag = prepareInitialFlag(context, propName, entryIsClassBased, styleSanitizer || null);\n        setFlag(context, singleIndex, pointers(initialFlag, indexForInitial, multiIndex));\n        setProp(context, singleIndex, propName);\n        setValue(context, singleIndex, null);\n        setPlayerBuilderIndex(context, singleIndex, 0, directiveIndex);\n        setFlag(context, multiIndex, pointers(initialFlag, indexForInitial, singleIndex));\n        setProp(context, multiIndex, propName);\n        setValue(context, multiIndex, null);\n        setPlayerBuilderIndex(context, multiIndex, 0, directiveIndex);\n    }\n    // the total classes/style values are updated so the next time the context is patched\n    // additional style/class bindings from another directive then it knows exactly where\n    // to insert them in the context\n    singlePropOffsetValues[1 /* ClassesCountPosition */] =\n        totalCurrentClassBindings + filteredClassBindingNames.length;\n    singlePropOffsetValues[0 /* StylesCountPosition */] =\n        totalCurrentStyleBindings + filteredStyleBindingNames.length;\n    // the map-based values also need to know how many entries got inserted\n    cachedClassMapValues[0 /* EntriesCountPosition */] +=\n        filteredClassBindingNames.length;\n    cachedStyleMapValues[0 /* EntriesCountPosition */] +=\n        filteredStyleBindingNames.length;\n    /** @type {?} */\n    const newStylesSpaceAllocationSize = filteredStyleBindingNames.length * 4 /* Size */;\n    /** @type {?} */\n    const newClassesSpaceAllocationSize = filteredClassBindingNames.length * 4 /* Size */;\n    // update the multi styles cache with a reference for the directive that was just inserted\n    /** @type {?} */\n    const directiveMultiStylesStartIndex = multiStylesStartIndex + totalCurrentStyleBindings * 4 /* Size */;\n    /** @type {?} */\n    const cachedStyleMapIndex = cachedStyleMapValues.length;\n    registerMultiMapEntry(context, directiveIndex, false, directiveMultiStylesStartIndex, filteredStyleBindingNames.length);\n    for (let i = 1 /* ValuesStartPosition */; i < cachedStyleMapIndex; i += 4 /* Size */) {\n        // multi values start after all the single values (which is also where classes are) in the\n        // context therefore the new class allocation size should be taken into account\n        cachedStyleMapValues[i + 1 /* PositionStartOffset */] +=\n            newClassesSpaceAllocationSize + newStylesSpaceAllocationSize;\n    }\n    // update the multi classes cache with a reference for the directive that was just inserted\n    /** @type {?} */\n    const directiveMultiClassesStartIndex = multiClassesStartIndex + totalCurrentClassBindings * 4 /* Size */;\n    /** @type {?} */\n    const cachedClassMapIndex = cachedClassMapValues.length;\n    registerMultiMapEntry(context, directiveIndex, true, directiveMultiClassesStartIndex, filteredClassBindingNames.length);\n    for (let i = 1 /* ValuesStartPosition */; i < cachedClassMapIndex; i += 4 /* Size */) {\n        // the reason why both the styles + classes space is allocated to the existing offsets is\n        // because the styles show up before the classes in the context and any new inserted\n        // styles will offset any existing class entries in the context (even if there are no\n        // new class entries added) also the reason why it's *2 is because both single + multi\n        // entries for each new style have been added in the context before the multi class values\n        // actually start\n        cachedClassMapValues[i + 1 /* PositionStartOffset */] +=\n            (newStylesSpaceAllocationSize * 2) + newClassesSpaceAllocationSize;\n    }\n    // there is no initial value flag for the master index since it doesn't\n    // reference an initial style value\n    /** @type {?} */\n    const masterFlag = pointers(0, 0, multiStylesStartIndex);\n    setFlag(context, 1 /* MasterFlagPosition */, masterFlag);\n}\n/**\n * Searches through the existing registry of directives\n * @param {?} context\n * @param {?} directiveIndex\n * @param {?} staticModeOnly\n * @param {?=} styleSanitizer\n * @return {?}\n */\nfunction findOrPatchDirectiveIntoRegistry(context, directiveIndex, staticModeOnly, styleSanitizer) {\n    /** @type {?} */\n    const directiveRegistry = context[2 /* DirectiveRegistryPosition */];\n    /** @type {?} */\n    const index = directiveIndex * 2 /* Size */;\n    /** @type {?} */\n    const singlePropStartPosition = index + 0 /* SinglePropValuesIndexOffset */;\n    // this means that the directive has already been registered into the registry\n    if (index < directiveRegistry.length &&\n        ((/** @type {?} */ (directiveRegistry[singlePropStartPosition]))) >= 0)\n        return false;\n    /** @type {?} */\n    const singlePropsStartIndex = staticModeOnly ? -1 : context[5 /* SinglePropOffsetPositions */].length;\n    allocateOrUpdateDirectiveIntoContext(context, directiveIndex, singlePropsStartIndex, styleSanitizer);\n    return true;\n}\n/**\n * @param {?} context\n * @param {?} bindingName\n * @param {?} start\n * @param {?} end\n * @return {?}\n */\nfunction getMatchingBindingIndex(context, bindingName, start, end) {\n    for (let j = start; j < end; j += 4 /* Size */) {\n        if (getProp(context, j) === bindingName)\n            return j;\n    }\n    return -1;\n}\n/**\n * Registers the provided multi styling (`[style]` and `[class]`) values to the context.\n *\n * This function will iterate over the provided `classesInput` and `stylesInput` map\n * values and insert/update or remove them from the context at exactly the right\n * spot.\n *\n * This function also takes in a directive which implies that the styling values will\n * be evaluated for that directive with respect to any other styling that already exists\n * on the context. When there are styles that conflict (e.g. say `ngStyle` and `[style]`\n * both update the `width` property at the same time) then the styling algorithm code below\n * will decide which one wins based on the directive styling prioritization mechanism. This\n * mechanism is better explained in render3/interfaces/styling.ts#directives).\n *\n * This function will not render any styling values on screen, but is rather designed to\n * prepare the context for that. `renderStyling` must be called afterwards to render any\n * styling data that was set in this function (note that `updateClassProp` and\n * `updateStyleProp` are designed to be run after this function is run).\n *\n * @param {?} context The styling context that will be updated with the\n *    newly provided style values.\n * @param {?} classesInput The key/value map of CSS class names that will be used for the update.\n * @param {?=} stylesInput The key/value map of CSS styles that will be used for the update.\n * @param {?=} directiveIndex\n * @return {?}\n */\nfunction updateStylingMap(context, classesInput, stylesInput, directiveIndex = 0) {\n    ngDevMode && ngDevMode.stylingMap++;\n    ngDevMode && assertValidDirectiveIndex(context, directiveIndex);\n    classesInput = classesInput || null;\n    stylesInput = stylesInput || null;\n    /** @type {?} */\n    const ignoreAllClassUpdates = isMultiValueCacheHit(context, true, directiveIndex, classesInput);\n    /** @type {?} */\n    const ignoreAllStyleUpdates = isMultiValueCacheHit(context, false, directiveIndex, stylesInput);\n    // early exit (this is what's done to avoid using ctx.bind() to cache the value)\n    if (ignoreAllClassUpdates && ignoreAllStyleUpdates)\n        return;\n    classesInput =\n        classesInput === NO_CHANGE ? readCachedMapValue(context, true, directiveIndex) : classesInput;\n    stylesInput =\n        stylesInput === NO_CHANGE ? readCachedMapValue(context, false, directiveIndex) : stylesInput;\n    /** @type {?} */\n    const element = (/** @type {?} */ ((/** @type {?} */ (context[0 /* ElementPosition */]))));\n    /** @type {?} */\n    const classesPlayerBuilder = classesInput instanceof BoundPlayerFactory ?\n        new ClassAndStylePlayerBuilder((/** @type {?} */ (classesInput)), element, 1 /* Class */) :\n        null;\n    /** @type {?} */\n    const stylesPlayerBuilder = stylesInput instanceof BoundPlayerFactory ?\n        new ClassAndStylePlayerBuilder((/** @type {?} */ (stylesInput)), element, 2 /* Style */) :\n        null;\n    /** @type {?} */\n    const classesValue = classesPlayerBuilder ?\n        (/** @type {?} */ (((/** @type {?} */ (classesInput))))).value :\n        classesInput;\n    /** @type {?} */\n    const stylesValue = stylesPlayerBuilder ? (/** @type {?} */ (stylesInput))['value'] : stylesInput;\n    /** @type {?} */\n    let classNames = EMPTY_ARRAY$1;\n    /** @type {?} */\n    let applyAllClasses = false;\n    /** @type {?} */\n    let playerBuildersAreDirty = false;\n    /** @type {?} */\n    const classesPlayerBuilderIndex = classesPlayerBuilder ? 1 /* ClassMapPlayerBuilderPosition */ : 0;\n    if (hasPlayerBuilderChanged(context, classesPlayerBuilder, 1 /* ClassMapPlayerBuilderPosition */)) {\n        setPlayerBuilder(context, classesPlayerBuilder, 1 /* ClassMapPlayerBuilderPosition */);\n        playerBuildersAreDirty = true;\n    }\n    /** @type {?} */\n    const stylesPlayerBuilderIndex = stylesPlayerBuilder ? 3 /* StyleMapPlayerBuilderPosition */ : 0;\n    if (hasPlayerBuilderChanged(context, stylesPlayerBuilder, 3 /* StyleMapPlayerBuilderPosition */)) {\n        setPlayerBuilder(context, stylesPlayerBuilder, 3 /* StyleMapPlayerBuilderPosition */);\n        playerBuildersAreDirty = true;\n    }\n    // each time a string-based value pops up then it shouldn't require a deep\n    // check of what's changed.\n    if (!ignoreAllClassUpdates) {\n        if (typeof classesValue == 'string') {\n            classNames = classesValue.split(/\\s+/);\n            // this boolean is used to avoid having to create a key/value map of `true` values\n            // since a classname string implies that all those classes are added\n            applyAllClasses = true;\n        }\n        else {\n            classNames = classesValue ? Object.keys(classesValue) : EMPTY_ARRAY$1;\n        }\n    }\n    /** @type {?} */\n    const multiStylesStartIndex = getMultiStylesStartIndex(context);\n    /** @type {?} */\n    let multiClassesStartIndex = getMultiClassesStartIndex(context);\n    /** @type {?} */\n    let multiClassesEndIndex = context.length;\n    if (!ignoreAllStyleUpdates) {\n        /** @type {?} */\n        const styleProps = stylesValue ? Object.keys(stylesValue) : EMPTY_ARRAY$1;\n        /** @type {?} */\n        const styles = stylesValue || EMPTY_OBJ;\n        /** @type {?} */\n        const totalNewEntries = patchStylingMapIntoContext(context, directiveIndex, stylesPlayerBuilderIndex, multiStylesStartIndex, multiClassesStartIndex, styleProps, styles, stylesInput, false);\n        if (totalNewEntries) {\n            multiClassesStartIndex += totalNewEntries * 4 /* Size */;\n            multiClassesEndIndex += totalNewEntries * 4 /* Size */;\n        }\n    }\n    if (!ignoreAllClassUpdates) {\n        /** @type {?} */\n        const classes = (/** @type {?} */ ((classesValue || EMPTY_OBJ)));\n        patchStylingMapIntoContext(context, directiveIndex, classesPlayerBuilderIndex, multiClassesStartIndex, multiClassesEndIndex, classNames, applyAllClasses || classes, classesInput, true);\n    }\n    if (playerBuildersAreDirty) {\n        setContextPlayersDirty(context, true);\n    }\n    ngDevMode && ngDevMode.stylingMapCacheMiss++;\n}\n/**\n * Applies the given multi styling (styles or classes) values to the context.\n *\n * The styling algorithm code that applies multi-level styling (things like `[style]` and `[class]`\n * values) resides here.\n *\n * Because this function understands that multiple directives may all write to the `[style]` and\n * `[class]` bindings (through host bindings), it relies of each directive applying its binding\n * value in order. This means that a directive like `classADirective` will always fire before\n * `classBDirective` and therefore its styling values (classes and styles) will always be evaluated\n * in the same order. Because of this consistent ordering, the first directive has a higher priority\n * than the second one. It is with this prioritzation mechanism that the styling algorithm knows how\n * to merge and apply redudant styling properties.\n *\n * The function itself applies the key/value entries (or an array of keys) to\n * the context in the following steps.\n *\n * STEP 1:\n *    First check to see what properties are already set and in use by another directive in the\n *    context (e.g. `ngClass` set the `width` value and `[style.width]=\"w\"` in a directive is\n *    attempting to set it as well).\n *\n * STEP 2:\n *    All remaining properties (that were not set prior to this directive) are now updated in\n *    the context. Any new properties are inserted exactly at their spot in the context and any\n *    previously set properties are shifted to exactly where the cursor sits while iterating over\n *    the context. The end result is a balanced context that includes the exact ordering of the\n *    styling properties/values for the provided input from the directive.\n *\n * STEP 3:\n *    Any unmatched properties in the context that belong to the directive are set to null\n *\n * Once the updating phase is done, then the algorithm will decide whether or not to flag the\n * follow-up directives (the directives that will pass in their styling values) depending on if\n * the \"shape\" of the multi-value map has changed (either if any keys are removed or added or\n * if there are any new `null` values). If any follow-up directives are flagged as dirty then the\n * algorithm will run again for them. Otherwise if the shape did not change then any follow-up\n * directives will not run (so long as their binding values stay the same).\n *\n * @param {?} context\n * @param {?} directiveIndex\n * @param {?} playerBuilderIndex\n * @param {?} ctxStart\n * @param {?} ctxEnd\n * @param {?} props\n * @param {?} values\n * @param {?} cacheValue\n * @param {?} entryIsClassBased\n * @return {?} the total amount of new slots that were allocated into the context due to new styling\n *          properties that were detected.\n */\nfunction patchStylingMapIntoContext(context, directiveIndex, playerBuilderIndex, ctxStart, ctxEnd, props, values, cacheValue, entryIsClassBased) {\n    /** @type {?} */\n    let dirty = false;\n    /** @type {?} */\n    const cacheIndex = 1 /* ValuesStartPosition */ +\n        directiveIndex * 4 /* Size */;\n    // the cachedValues array is the registry of all multi style values (map values). Each\n    // value is stored (cached) each time is updated.\n    /** @type {?} */\n    const cachedValues = context[entryIsClassBased ? 6 /* CachedMultiClasses */ : 7 /* CachedMultiStyles */];\n    // this is the index in which this directive has ownership access to write to this\n    // value (anything before is owned by a previous directive that is more important)\n    /** @type {?} */\n    const ownershipValuesStartIndex = cachedValues[cacheIndex + 1 /* PositionStartOffset */];\n    /** @type {?} */\n    const existingCachedValue = cachedValues[cacheIndex + 2 /* ValueOffset */];\n    /** @type {?} */\n    const existingCachedValueCount = cachedValues[cacheIndex + 3 /* ValueCountOffset */];\n    /** @type {?} */\n    const existingCachedValueIsDirty = cachedValues[cacheIndex + 0 /* DirtyFlagOffset */] === 1;\n    // A shape change means the provided map value has either removed or added new properties\n    // compared to what were in the last time. If a shape change occurs then it means that all\n    // follow-up multi-styling entries are obsolete and will be examined again when CD runs\n    // them. If a shape change has not occurred then there is no reason to check any other\n    // directive values if their identity has not changed. If a previous directive set this\n    // value as dirty (because its own shape changed) then this means that the object has been\n    // offset to a different area in the context. Because its value has been offset then it\n    // can't write to a region that it wrote to before (which may have been apart of another\n    // directive) and therefore its shape changes too.\n    /** @type {?} */\n    let valuesEntryShapeChange = existingCachedValueIsDirty || ((!existingCachedValue && cacheValue) ? true : false);\n    /** @type {?} */\n    let totalUniqueValues = 0;\n    /** @type {?} */\n    let totalNewAllocatedSlots = 0;\n    // this is a trick to avoid building {key:value} map where all the values\n    // are `true` (this happens when a className string is provided instead of a\n    // map as an input value to this styling algorithm)\n    /** @type {?} */\n    const applyAllProps = values === true;\n    // STEP 1:\n    // loop through the earlier directives and figure out if any properties here will be placed\n    // in their area (this happens when the value is null because the earlier directive erased it).\n    /** @type {?} */\n    let ctxIndex = ctxStart;\n    /** @type {?} */\n    let totalRemainingProperties = props.length;\n    while (ctxIndex < ownershipValuesStartIndex) {\n        /** @type {?} */\n        const currentProp = getProp(context, ctxIndex);\n        if (totalRemainingProperties) {\n            for (let i = 0; i < props.length; i++) {\n                /** @type {?} */\n                const mapProp = props[i];\n                /** @type {?} */\n                const normalizedProp = mapProp ? (entryIsClassBased ? mapProp : hyphenate(mapProp)) : null;\n                if (normalizedProp && currentProp === normalizedProp) {\n                    /** @type {?} */\n                    const currentValue = getValue(context, ctxIndex);\n                    /** @type {?} */\n                    const currentDirectiveIndex = getDirectiveIndexFromEntry(context, ctxIndex);\n                    /** @type {?} */\n                    const value = applyAllProps ? true : ((/** @type {?} */ (values)))[normalizedProp];\n                    /** @type {?} */\n                    const currentFlag = getPointers(context, ctxIndex);\n                    if (hasValueChanged(currentFlag, currentValue, value) &&\n                        allowValueChange(currentValue, value, currentDirectiveIndex, directiveIndex)) {\n                        setValue(context, ctxIndex, value);\n                        setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex, directiveIndex);\n                        if (hasInitialValueChanged(context, currentFlag, value)) {\n                            setDirty(context, ctxIndex, true);\n                            dirty = true;\n                        }\n                    }\n                    props[i] = null;\n                    totalRemainingProperties--;\n                    break;\n                }\n            }\n        }\n        ctxIndex += 4 /* Size */;\n    }\n    // STEP 2:\n    // apply the left over properties to the context in the correct order.\n    if (totalRemainingProperties) {\n        /** @type {?} */\n        const sanitizer = entryIsClassBased ? null : getStyleSanitizer(context, directiveIndex);\n        propertiesLoop: for (let i = 0; i < props.length; i++) {\n            /** @type {?} */\n            const mapProp = props[i];\n            if (!mapProp) {\n                // this is an early exit in case a value was already encountered above in the\n                // previous loop (which means that the property was applied or rejected)\n                continue;\n            }\n            /** @type {?} */\n            const value = applyAllProps ? true : ((/** @type {?} */ (values)))[mapProp];\n            /** @type {?} */\n            const normalizedProp = entryIsClassBased ? mapProp : hyphenate(mapProp);\n            /** @type {?} */\n            const isInsideOwnershipArea = ctxIndex >= ownershipValuesStartIndex;\n            for (let j = ctxIndex; j < ctxEnd; j += 4 /* Size */) {\n                /** @type {?} */\n                const distantCtxProp = getProp(context, j);\n                if (distantCtxProp === normalizedProp) {\n                    /** @type {?} */\n                    const distantCtxDirectiveIndex = getDirectiveIndexFromEntry(context, j);\n                    /** @type {?} */\n                    const distantCtxPlayerBuilderIndex = getPlayerBuilderIndex(context, j);\n                    /** @type {?} */\n                    const distantCtxValue = getValue(context, j);\n                    /** @type {?} */\n                    const distantCtxFlag = getPointers(context, j);\n                    if (allowValueChange(distantCtxValue, value, distantCtxDirectiveIndex, directiveIndex)) {\n                        // even if the entry isn't updated (by value or directiveIndex) then\n                        // it should still be moved over to the correct spot in the array so\n                        // the iteration loop is tighter.\n                        if (isInsideOwnershipArea) {\n                            swapMultiContextEntries(context, ctxIndex, j);\n                            totalUniqueValues++;\n                        }\n                        if (hasValueChanged(distantCtxFlag, distantCtxValue, value)) {\n                            if (value === null || value === undefined && value !== distantCtxValue) {\n                                valuesEntryShapeChange = true;\n                            }\n                            setValue(context, ctxIndex, value);\n                            // SKIP IF INITIAL CHECK\n                            // If the former `value` is `null` then it means that an initial value\n                            // could be being rendered on screen. If that is the case then there is\n                            // no point in updating the value in case it matches. In other words if the\n                            // new value is the exact same as the previously rendered value (which\n                            // happens to be the initial value) then do nothing.\n                            if (distantCtxValue !== null ||\n                                hasInitialValueChanged(context, distantCtxFlag, value)) {\n                                setDirty(context, ctxIndex, true);\n                                dirty = true;\n                            }\n                        }\n                        if (distantCtxDirectiveIndex !== directiveIndex ||\n                            playerBuilderIndex !== distantCtxPlayerBuilderIndex) {\n                            setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex, directiveIndex);\n                        }\n                    }\n                    ctxIndex += 4 /* Size */;\n                    continue propertiesLoop;\n                }\n            }\n            // fallback case ... value not found at all in the context\n            if (value != null) {\n                valuesEntryShapeChange = true;\n                totalUniqueValues++;\n                /** @type {?} */\n                const flag = prepareInitialFlag(context, normalizedProp, entryIsClassBased, sanitizer) |\n                    1 /* Dirty */;\n                /** @type {?} */\n                const insertionIndex = isInsideOwnershipArea ?\n                    ctxIndex :\n                    (ownershipValuesStartIndex + totalNewAllocatedSlots * 4 /* Size */);\n                insertNewMultiProperty(context, insertionIndex, entryIsClassBased, normalizedProp, flag, value, directiveIndex, playerBuilderIndex);\n                totalNewAllocatedSlots++;\n                ctxEnd += 4 /* Size */;\n                ctxIndex += 4 /* Size */;\n                dirty = true;\n            }\n        }\n    }\n    // STEP 3:\n    // Remove (nullify) any existing entries in the context that were not apart of the\n    // map input value that was passed into this algorithm for this directive.\n    while (ctxIndex < ctxEnd) {\n        valuesEntryShapeChange = true; // some values are missing\n        // some values are missing\n        /** @type {?} */\n        const ctxValue = getValue(context, ctxIndex);\n        /** @type {?} */\n        const ctxFlag = getPointers(context, ctxIndex);\n        /** @type {?} */\n        const ctxDirective = getDirectiveIndexFromEntry(context, ctxIndex);\n        if (ctxValue != null) {\n            valuesEntryShapeChange = true;\n        }\n        if (hasValueChanged(ctxFlag, ctxValue, null)) {\n            setValue(context, ctxIndex, null);\n            // only if the initial value is falsy then\n            if (hasInitialValueChanged(context, ctxFlag, ctxValue)) {\n                setDirty(context, ctxIndex, true);\n                dirty = true;\n            }\n            setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex, directiveIndex);\n        }\n        ctxIndex += 4 /* Size */;\n    }\n    // Because the object shape has changed, this means that all follow-up directives will need to\n    // reapply their values into the object. For this to happen, the cached array needs to be updated\n    // with dirty flags so that follow-up calls to `updateStylingMap` will reapply their styling code.\n    // the reapplication of styling code within the context will reshape it and update the offset\n    // values (also follow-up directives can write new values in case earlier directives set anything\n    // to null due to removals or falsy values).\n    valuesEntryShapeChange = valuesEntryShapeChange || existingCachedValueCount !== totalUniqueValues;\n    updateCachedMapValue(context, directiveIndex, entryIsClassBased, cacheValue, ownershipValuesStartIndex, ctxEnd, totalUniqueValues, valuesEntryShapeChange);\n    if (dirty) {\n        setContextDirty(context, true);\n    }\n    return totalNewAllocatedSlots;\n}\n/**\n * Sets and resolves a single class value on the provided `StylingContext` so\n * that they can be applied to the element once `renderStyling` is called.\n *\n * @param {?} context The styling context that will be updated with the\n *    newly provided class value.\n * @param {?} offset The index of the CSS class which is being updated.\n * @param {?} input\n * @param {?=} directiveIndex\n * @param {?=} forceOverride whether or not to skip all directive prioritization\n *    and just apply the value regardless.\n * @return {?}\n */\nfunction updateClassProp(context, offset, input, directiveIndex = 0, forceOverride) {\n    updateSingleStylingValue(context, offset, input, true, directiveIndex, forceOverride);\n}\n/**\n * Sets and resolves a single style value on the provided `StylingContext` so\n * that they can be applied to the element once `renderStyling` is called.\n *\n * Note that prop-level styling values are considered higher priority than any styling that\n * has been applied using `updateStylingMap`, therefore, when styling values are rendered\n * then any styles/classes that have been applied using this function will be considered first\n * (then multi values second and then initial values as a backup).\n *\n * @param {?} context The styling context that will be updated with the\n *    newly provided style value.\n * @param {?} offset The index of the property which is being updated.\n * @param {?} input\n * @param {?=} directiveIndex\n * @param {?=} forceOverride whether or not to skip all directive prioritization\n *    and just apply the value regardless.\n * @return {?}\n */\nfunction updateStyleProp(context, offset, input, directiveIndex = 0, forceOverride) {\n    updateSingleStylingValue(context, offset, input, false, directiveIndex, forceOverride);\n}\n/**\n * @param {?} context\n * @param {?} offset\n * @param {?} input\n * @param {?} isClassBased\n * @param {?} directiveIndex\n * @param {?=} forceOverride\n * @return {?}\n */\nfunction updateSingleStylingValue(context, offset, input, isClassBased, directiveIndex, forceOverride) {\n    ngDevMode && assertValidDirectiveIndex(context, directiveIndex);\n    /** @type {?} */\n    const singleIndex = getSinglePropIndexValue(context, directiveIndex, offset, isClassBased);\n    /** @type {?} */\n    const currValue = getValue(context, singleIndex);\n    /** @type {?} */\n    const currFlag = getPointers(context, singleIndex);\n    /** @type {?} */\n    const currDirective = getDirectiveIndexFromEntry(context, singleIndex);\n    /** @type {?} */\n    const value = (input instanceof BoundPlayerFactory) ? input.value : input;\n    ngDevMode && ngDevMode.stylingProp++;\n    if (hasValueChanged(currFlag, currValue, value) &&\n        (forceOverride || allowValueChange(currValue, value, currDirective, directiveIndex))) {\n        /** @type {?} */\n        const isClassBased = (currFlag & 2 /* Class */) === 2 /* Class */;\n        /** @type {?} */\n        const element = (/** @type {?} */ ((/** @type {?} */ (context[0 /* ElementPosition */]))));\n        /** @type {?} */\n        const playerBuilder = input instanceof BoundPlayerFactory ?\n            new ClassAndStylePlayerBuilder((/** @type {?} */ (input)), element, isClassBased ? 1 /* Class */ : 2 /* Style */) :\n            null;\n        /** @type {?} */\n        const value = (/** @type {?} */ ((playerBuilder ? ((/** @type {?} */ (input))).value : input)));\n        /** @type {?} */\n        const currPlayerIndex = getPlayerBuilderIndex(context, singleIndex);\n        /** @type {?} */\n        let playerBuildersAreDirty = false;\n        /** @type {?} */\n        let playerBuilderIndex = playerBuilder ? currPlayerIndex : 0;\n        if (hasPlayerBuilderChanged(context, playerBuilder, currPlayerIndex)) {\n            /** @type {?} */\n            const newIndex = setPlayerBuilder(context, playerBuilder, currPlayerIndex);\n            playerBuilderIndex = playerBuilder ? newIndex : 0;\n            playerBuildersAreDirty = true;\n        }\n        if (playerBuildersAreDirty || currDirective !== directiveIndex) {\n            setPlayerBuilderIndex(context, singleIndex, playerBuilderIndex, directiveIndex);\n        }\n        if (currDirective !== directiveIndex) {\n            /** @type {?} */\n            const prop = getProp(context, singleIndex);\n            /** @type {?} */\n            const sanitizer = getStyleSanitizer(context, directiveIndex);\n            setSanitizeFlag(context, singleIndex, (sanitizer && sanitizer(prop)) ? true : false);\n        }\n        // the value will always get updated (even if the dirty flag is skipped)\n        setValue(context, singleIndex, value);\n        /** @type {?} */\n        const indexForMulti = getMultiOrSingleIndex(currFlag);\n        // if the value is the same in the multi-area then there's no point in re-assembling\n        /** @type {?} */\n        const valueForMulti = getValue(context, indexForMulti);\n        if (!valueForMulti || hasValueChanged(currFlag, valueForMulti, value)) {\n            /** @type {?} */\n            let multiDirty = false;\n            /** @type {?} */\n            let singleDirty = true;\n            // only when the value is set to `null` should the multi-value get flagged\n            if (!valueExists(value, isClassBased) && valueExists(valueForMulti, isClassBased)) {\n                multiDirty = true;\n                singleDirty = false;\n            }\n            setDirty(context, indexForMulti, multiDirty);\n            setDirty(context, singleIndex, singleDirty);\n            setContextDirty(context, true);\n        }\n        if (playerBuildersAreDirty) {\n            setContextPlayersDirty(context, true);\n        }\n        ngDevMode && ngDevMode.stylingPropCacheMiss++;\n    }\n}\n/**\n * Renders all queued styling using a renderer onto the given element.\n *\n * This function works by rendering any styles (that have been applied\n * using `updateStylingMap`) and any classes (that have been applied using\n * `updateStyleProp`) onto the provided element using the provided renderer.\n * Just before the styles/classes are rendered a final key/value style map\n * will be assembled (if `styleStore` or `classStore` are provided).\n *\n * @param {?} context The styling context that will be used to determine\n *      what styles will be rendered\n * @param {?} renderer the renderer that will be used to apply the styling\n * @param {?} rootOrView\n * @param {?} isFirstRender\n * @param {?=} classesStore if provided, the updated class values will be applied\n *    to this key/value map instead of being renderered via the renderer.\n * @param {?=} stylesStore if provided, the updated style values will be applied\n *    to this key/value map instead of being renderered via the renderer.\n * @param {?=} directiveIndex\n * @return {?} number the total amount of players that got queued for animation (if any)\n */\nfunction renderStyling(context, renderer, rootOrView, isFirstRender, classesStore, stylesStore, directiveIndex = 0) {\n    /** @type {?} */\n    let totalPlayersQueued = 0;\n    ngDevMode && ngDevMode.stylingApply++;\n    // this prevents multiple attempts to render style/class values on\n    // the same element...\n    if (allowFlush(context, directiveIndex)) {\n        // all styling instructions present within any hostBindings functions\n        // do not update the context immediately when called. They are instead\n        // queued up and applied to the context right at this point. Why? This\n        // is because Angular evaluates component/directive and directive\n        // sub-class code at different points and it's important that the\n        // styling values are applied to the context in the right order\n        // (see `interfaces/styling.ts` for more information).\n        flushQueue(context);\n        if (isContextDirty(context)) {\n            ngDevMode && ngDevMode.stylingApplyCacheMiss++;\n            // this is here to prevent things like <ng-container [style] [class]>...</ng-container>\n            // or if there are any host style or class bindings present in a directive set on\n            // a container node\n            /** @type {?} */\n            const native = (/** @type {?} */ ((/** @type {?} */ (context[0 /* ElementPosition */]))));\n            /** @type {?} */\n            const flushPlayerBuilders = context[1 /* MasterFlagPosition */] & 8 /* PlayerBuildersDirty */;\n            /** @type {?} */\n            const multiStartIndex = getMultiStylesStartIndex(context);\n            for (let i = 10 /* SingleStylesStartPosition */; i < context.length; i += 4 /* Size */) {\n                // there is no point in rendering styles that have not changed on screen\n                if (isDirty(context, i)) {\n                    /** @type {?} */\n                    const flag = getPointers(context, i);\n                    /** @type {?} */\n                    const directiveIndex = getDirectiveIndexFromEntry(context, i);\n                    /** @type {?} */\n                    const prop = getProp(context, i);\n                    /** @type {?} */\n                    const value = getValue(context, i);\n                    /** @type {?} */\n                    const styleSanitizer = (flag & 4 /* Sanitize */) ? getStyleSanitizer(context, directiveIndex) : null;\n                    /** @type {?} */\n                    const playerBuilder = getPlayerBuilder(context, i);\n                    /** @type {?} */\n                    const isClassBased = flag & 2 /* Class */ ? true : false;\n                    /** @type {?} */\n                    const isInSingleRegion = i < multiStartIndex;\n                    /** @type {?} */\n                    let valueToApply = value;\n                    // VALUE DEFER CASE 1: Use a multi value instead of a null single value\n                    // this check implies that a single value was removed and we\n                    // should now defer to a multi value and use that (if set).\n                    if (isInSingleRegion && !valueExists(valueToApply, isClassBased)) {\n                        // single values ALWAYS have a reference to a multi index\n                        /** @type {?} */\n                        const multiIndex = getMultiOrSingleIndex(flag);\n                        valueToApply = getValue(context, multiIndex);\n                    }\n                    // VALUE DEFER CASE 2: Use the initial value if all else fails (is falsy)\n                    // the initial value will always be a string or null,\n                    // therefore we can safely adopt it in case there's nothing else\n                    // note that this should always be a falsy check since `false` is used\n                    // for both class and style comparisons (styles can't be false and false\n                    // classes are turned off and should therefore defer to their initial values)\n                    // Note that we ignore class-based deferals because otherwise a class can never\n                    // be removed in the case that it exists as true in the initial classes list...\n                    if (!valueExists(valueToApply, isClassBased)) {\n                        valueToApply = getInitialValue(context, flag);\n                    }\n                    // if the first render is true then we do not want to start applying falsy\n                    // values to the DOM element's styling. Otherwise then we know there has\n                    // been a change and even if it's falsy then it's removing something that\n                    // was truthy before.\n                    /** @type {?} */\n                    const doApplyValue = renderer && (isFirstRender ? valueToApply : true);\n                    if (doApplyValue) {\n                        if (isClassBased) {\n                            setClass(native, prop, valueToApply ? true : false, (/** @type {?} */ (renderer)), classesStore, playerBuilder);\n                        }\n                        else {\n                            setStyle(native, prop, (/** @type {?} */ (valueToApply)), (/** @type {?} */ (renderer)), styleSanitizer, stylesStore, playerBuilder);\n                        }\n                    }\n                    setDirty(context, i, false);\n                }\n            }\n            if (flushPlayerBuilders) {\n                /** @type {?} */\n                const rootContext = Array.isArray(rootOrView) ? getRootContext(rootOrView) : (/** @type {?} */ (rootOrView));\n                /** @type {?} */\n                const playerContext = (/** @type {?} */ (getPlayerContext(context)));\n                /** @type {?} */\n                const playersStartIndex = playerContext[0 /* NonBuilderPlayersStart */];\n                for (let i = 1 /* PlayerBuildersStartPosition */; i < playersStartIndex; i += 2 /* PlayerAndPlayerBuildersTupleSize */) {\n                    /** @type {?} */\n                    const builder = (/** @type {?} */ (playerContext[i]));\n                    /** @type {?} */\n                    const playerInsertionIndex = i + 1 /* PlayerOffsetPosition */;\n                    /** @type {?} */\n                    const oldPlayer = (/** @type {?} */ (playerContext[playerInsertionIndex]));\n                    if (builder) {\n                        /** @type {?} */\n                        const player = builder.buildPlayer(oldPlayer, isFirstRender);\n                        if (player !== undefined) {\n                            if (player != null) {\n                                /** @type {?} */\n                                const wasQueued = addPlayerInternal(playerContext, rootContext, (/** @type {?} */ (native)), player, playerInsertionIndex);\n                                wasQueued && totalPlayersQueued++;\n                            }\n                            if (oldPlayer) {\n                                oldPlayer.destroy();\n                            }\n                        }\n                    }\n                    else if (oldPlayer) {\n                        // the player builder has been removed ... therefore we should delete the associated\n                        // player\n                        oldPlayer.destroy();\n                    }\n                }\n                setContextPlayersDirty(context, false);\n            }\n            setContextDirty(context, false);\n        }\n    }\n    return totalPlayersQueued;\n}\n/**\n * Assigns a style value to a style property for the given element.\n *\n * This function renders a given CSS prop/value entry using the\n * provided renderer. If a `store` value is provided then\n * that will be used a render context instead of the provided\n * renderer.\n *\n * @param {?} native the DOM Element\n * @param {?} prop the CSS style property that will be rendered\n * @param {?} value the CSS style value that will be rendered\n * @param {?} renderer\n * @param {?} sanitizer\n * @param {?=} store an optional key/value map that will be used as a context to render styles on\n * @param {?=} playerBuilder\n * @return {?}\n */\nfunction setStyle(native, prop, value, renderer, sanitizer, store, playerBuilder) {\n    value = sanitizer && value ? sanitizer(prop, value) : value;\n    if (store || playerBuilder) {\n        if (store) {\n            store.setValue(prop, value);\n        }\n        if (playerBuilder) {\n            playerBuilder.setValue(prop, value);\n        }\n    }\n    else if (value) {\n        value = value.toString(); // opacity, z-index and flexbox all have number values which may not\n        // assign as numbers\n        ngDevMode && ngDevMode.rendererSetStyle++;\n        isProceduralRenderer(renderer) ?\n            renderer.setStyle(native, prop, value, RendererStyleFlags3.DashCase) :\n            native.style.setProperty(prop, value);\n    }\n    else {\n        ngDevMode && ngDevMode.rendererRemoveStyle++;\n        isProceduralRenderer(renderer) ?\n            renderer.removeStyle(native, prop, RendererStyleFlags3.DashCase) :\n            native.style.removeProperty(prop);\n    }\n}\n/**\n * Adds/removes the provided className value to the provided element.\n *\n * This function renders a given CSS class value using the provided\n * renderer (by adding or removing it from the provided element).\n * If a `store` value is provided then that will be used a render\n * context instead of the provided renderer.\n *\n * @param {?} native the DOM Element\n * @param {?} className\n * @param {?} add\n * @param {?} renderer\n * @param {?=} store an optional key/value map that will be used as a context to render styles on\n * @param {?=} playerBuilder\n * @return {?}\n */\nfunction setClass(native, className, add, renderer, store, playerBuilder) {\n    if (store || playerBuilder) {\n        if (store) {\n            store.setValue(className, add);\n        }\n        if (playerBuilder) {\n            playerBuilder.setValue(className, add);\n        }\n        // DOMTokenList will throw if we try to add or remove an empty string.\n    }\n    else if (className !== '') {\n        if (add) {\n            ngDevMode && ngDevMode.rendererAddClass++;\n            isProceduralRenderer(renderer) ? renderer.addClass(native, className) :\n                native['classList'].add(className);\n        }\n        else {\n            ngDevMode && ngDevMode.rendererRemoveClass++;\n            isProceduralRenderer(renderer) ? renderer.removeClass(native, className) :\n                native['classList'].remove(className);\n        }\n    }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} sanitizeYes\n * @return {?}\n */\nfunction setSanitizeFlag(context, index, sanitizeYes) {\n    if (sanitizeYes) {\n        ((/** @type {?} */ (context[index]))) |= 4 /* Sanitize */;\n    }\n    else {\n        ((/** @type {?} */ (context[index]))) &= ~4 /* Sanitize */;\n    }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} isDirtyYes\n * @return {?}\n */\nfunction setDirty(context, index, isDirtyYes) {\n    /** @type {?} */\n    const adjustedIndex = index >= 10 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    if (isDirtyYes) {\n        ((/** @type {?} */ (context[adjustedIndex]))) |= 1 /* Dirty */;\n    }\n    else {\n        ((/** @type {?} */ (context[adjustedIndex]))) &= ~1 /* Dirty */;\n    }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction isDirty(context, index) {\n    /** @type {?} */\n    const adjustedIndex = index >= 10 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    return (((/** @type {?} */ (context[adjustedIndex]))) & 1 /* Dirty */) == 1 /* Dirty */;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction isClassBasedValue(context, index) {\n    /** @type {?} */\n    const adjustedIndex = index >= 10 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    return (((/** @type {?} */ (context[adjustedIndex]))) & 2 /* Class */) == 2 /* Class */;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction isSanitizable(context, index) {\n    /** @type {?} */\n    const adjustedIndex = index >= 10 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    return (((/** @type {?} */ (context[adjustedIndex]))) & 4 /* Sanitize */) == 4 /* Sanitize */;\n}\n/**\n * @param {?} configFlag\n * @param {?} staticIndex\n * @param {?} dynamicIndex\n * @return {?}\n */\nfunction pointers(configFlag, staticIndex, dynamicIndex) {\n    return (configFlag & 31 /* BitMask */) | (staticIndex << 5 /* BitCountSize */) |\n        (dynamicIndex << (14 /* BitCountSize */ + 5 /* BitCountSize */));\n}\n/**\n * @param {?} context\n * @param {?} flag\n * @return {?}\n */\nfunction getInitialValue(context, flag) {\n    /** @type {?} */\n    const index = getInitialIndex(flag);\n    /** @type {?} */\n    const entryIsClassBased = flag & 2 /* Class */;\n    /** @type {?} */\n    const initialValues = entryIsClassBased ? context[4 /* InitialClassValuesPosition */] :\n        context[3 /* InitialStyleValuesPosition */];\n    return (/** @type {?} */ (initialValues[index]));\n}\n/**\n * @param {?} flag\n * @return {?}\n */\nfunction getInitialIndex(flag) {\n    return (flag >> 5 /* BitCountSize */) & 16383 /* BitMask */;\n}\n/**\n * @param {?} flag\n * @return {?}\n */\nfunction getMultiOrSingleIndex(flag) {\n    /** @type {?} */\n    const index = (flag >> (14 /* BitCountSize */ + 5 /* BitCountSize */)) & 16383 /* BitMask */;\n    return index >= 10 /* SingleStylesStartPosition */ ? index : -1;\n}\n/**\n * @param {?} context\n * @return {?}\n */\nfunction getMultiClassesStartIndex(context) {\n    /** @type {?} */\n    const classCache = context[6 /* CachedMultiClasses */];\n    return classCache[1 /* ValuesStartPosition */ +\n        1 /* PositionStartOffset */];\n}\n/**\n * @param {?} context\n * @return {?}\n */\nfunction getMultiStylesStartIndex(context) {\n    /** @type {?} */\n    const stylesCache = context[7 /* CachedMultiStyles */];\n    return stylesCache[1 /* ValuesStartPosition */ +\n        1 /* PositionStartOffset */];\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} prop\n * @return {?}\n */\nfunction setProp(context, index, prop) {\n    context[index + 1 /* PropertyOffset */] = prop;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nfunction setValue(context, index, value) {\n    context[index + 2 /* ValueOffset */] = value;\n}\n/**\n * @param {?} context\n * @param {?} builder\n * @param {?} index\n * @return {?}\n */\nfunction hasPlayerBuilderChanged(context, builder, index) {\n    /** @type {?} */\n    const playerContext = (/** @type {?} */ (context[9 /* PlayerContext */]));\n    if (builder) {\n        if (!playerContext || index === 0) {\n            return true;\n        }\n    }\n    else if (!playerContext) {\n        return false;\n    }\n    return playerContext[index] !== builder;\n}\n/**\n * @param {?} context\n * @param {?} builder\n * @param {?} insertionIndex\n * @return {?}\n */\nfunction setPlayerBuilder(context, builder, insertionIndex) {\n    /** @type {?} */\n    let playerContext = context[9 /* PlayerContext */] || allocPlayerContext(context);\n    if (insertionIndex > 0) {\n        playerContext[insertionIndex] = builder;\n    }\n    else {\n        insertionIndex = playerContext[0 /* NonBuilderPlayersStart */];\n        playerContext.splice(insertionIndex, 0, builder, null);\n        playerContext[0 /* NonBuilderPlayersStart */] +=\n            2 /* PlayerAndPlayerBuildersTupleSize */;\n    }\n    return insertionIndex;\n}\n/**\n * @param {?} directiveIndex\n * @param {?} playerIndex\n * @return {?}\n */\nfunction directiveOwnerPointers(directiveIndex, playerIndex) {\n    return (playerIndex << 16 /* BitCountSize */) | directiveIndex;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} playerBuilderIndex\n * @param {?} directiveIndex\n * @return {?}\n */\nfunction setPlayerBuilderIndex(context, index, playerBuilderIndex, directiveIndex) {\n    /** @type {?} */\n    const value = directiveOwnerPointers(directiveIndex, playerBuilderIndex);\n    context[index + 3 /* PlayerBuilderIndexOffset */] = value;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getPlayerBuilderIndex(context, index) {\n    /** @type {?} */\n    const flag = (/** @type {?} */ (context[index + 3 /* PlayerBuilderIndexOffset */]));\n    /** @type {?} */\n    const playerBuilderIndex = (flag >> 16 /* BitCountSize */) &\n        65535 /* BitMask */;\n    return playerBuilderIndex;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getPlayerBuilder(context, index) {\n    /** @type {?} */\n    const playerBuilderIndex = getPlayerBuilderIndex(context, index);\n    if (playerBuilderIndex) {\n        /** @type {?} */\n        const playerContext = context[9 /* PlayerContext */];\n        if (playerContext) {\n            return (/** @type {?} */ (playerContext[playerBuilderIndex]));\n        }\n    }\n    return null;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} flag\n * @return {?}\n */\nfunction setFlag(context, index, flag) {\n    /** @type {?} */\n    const adjustedIndex = index === 1 /* MasterFlagPosition */ ? index : (index + 0 /* FlagsOffset */);\n    context[adjustedIndex] = flag;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getPointers(context, index) {\n    /** @type {?} */\n    const adjustedIndex = index === 1 /* MasterFlagPosition */ ? index : (index + 0 /* FlagsOffset */);\n    return (/** @type {?} */ (context[adjustedIndex]));\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getValue(context, index) {\n    return (/** @type {?} */ (context[index + 2 /* ValueOffset */]));\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getProp(context, index) {\n    return (/** @type {?} */ (context[index + 1 /* PropertyOffset */]));\n}\n/**\n * @param {?} context\n * @return {?}\n */\nfunction isContextDirty(context) {\n    return isDirty(context, 1 /* MasterFlagPosition */);\n}\n/**\n * @param {?} context\n * @param {?} isDirtyYes\n * @return {?}\n */\nfunction setContextDirty(context, isDirtyYes) {\n    setDirty(context, 1 /* MasterFlagPosition */, isDirtyYes);\n}\n/**\n * @param {?} context\n * @param {?} isDirtyYes\n * @return {?}\n */\nfunction setContextPlayersDirty(context, isDirtyYes) {\n    if (isDirtyYes) {\n        ((/** @type {?} */ (context[1 /* MasterFlagPosition */]))) |= 8 /* PlayerBuildersDirty */;\n    }\n    else {\n        ((/** @type {?} */ (context[1 /* MasterFlagPosition */]))) &= ~8 /* PlayerBuildersDirty */;\n    }\n}\n/**\n * @param {?} context\n * @param {?} indexA\n * @param {?} indexB\n * @return {?}\n */\nfunction swapMultiContextEntries(context, indexA, indexB) {\n    if (indexA === indexB)\n        return;\n    /** @type {?} */\n    const tmpValue = getValue(context, indexA);\n    /** @type {?} */\n    const tmpProp = getProp(context, indexA);\n    /** @type {?} */\n    const tmpFlag = getPointers(context, indexA);\n    /** @type {?} */\n    const tmpPlayerBuilderIndex = getPlayerBuilderIndex(context, indexA);\n    /** @type {?} */\n    const tmpDirectiveIndex = getDirectiveIndexFromEntry(context, indexA);\n    /** @type {?} */\n    let flagA = tmpFlag;\n    /** @type {?} */\n    let flagB = getPointers(context, indexB);\n    /** @type {?} */\n    const singleIndexA = getMultiOrSingleIndex(flagA);\n    if (singleIndexA >= 0) {\n        /** @type {?} */\n        const _flag = getPointers(context, singleIndexA);\n        /** @type {?} */\n        const _initial = getInitialIndex(_flag);\n        setFlag(context, singleIndexA, pointers(_flag, _initial, indexB));\n    }\n    /** @type {?} */\n    const singleIndexB = getMultiOrSingleIndex(flagB);\n    if (singleIndexB >= 0) {\n        /** @type {?} */\n        const _flag = getPointers(context, singleIndexB);\n        /** @type {?} */\n        const _initial = getInitialIndex(_flag);\n        setFlag(context, singleIndexB, pointers(_flag, _initial, indexA));\n    }\n    setValue(context, indexA, getValue(context, indexB));\n    setProp(context, indexA, getProp(context, indexB));\n    setFlag(context, indexA, getPointers(context, indexB));\n    /** @type {?} */\n    const playerIndexA = getPlayerBuilderIndex(context, indexB);\n    /** @type {?} */\n    const directiveIndexA = getDirectiveIndexFromEntry(context, indexB);\n    setPlayerBuilderIndex(context, indexA, playerIndexA, directiveIndexA);\n    setValue(context, indexB, tmpValue);\n    setProp(context, indexB, tmpProp);\n    setFlag(context, indexB, tmpFlag);\n    setPlayerBuilderIndex(context, indexB, tmpPlayerBuilderIndex, tmpDirectiveIndex);\n}\n/**\n * @param {?} context\n * @param {?} indexStartPosition\n * @return {?}\n */\nfunction updateSinglePointerValues(context, indexStartPosition) {\n    for (let i = indexStartPosition; i < context.length; i += 4 /* Size */) {\n        /** @type {?} */\n        const multiFlag = getPointers(context, i);\n        /** @type {?} */\n        const singleIndex = getMultiOrSingleIndex(multiFlag);\n        if (singleIndex > 0) {\n            /** @type {?} */\n            const singleFlag = getPointers(context, singleIndex);\n            /** @type {?} */\n            const initialIndexForSingle = getInitialIndex(singleFlag);\n            /** @type {?} */\n            const flagValue = (isDirty(context, singleIndex) ? 1 /* Dirty */ : 0 /* None */) |\n                (isClassBasedValue(context, singleIndex) ? 2 /* Class */ : 0 /* None */) |\n                (isSanitizable(context, singleIndex) ? 4 /* Sanitize */ : 0 /* None */);\n            /** @type {?} */\n            const updatedFlag = pointers(flagValue, initialIndexForSingle, i);\n            setFlag(context, singleIndex, updatedFlag);\n        }\n    }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} classBased\n * @param {?} name\n * @param {?} flag\n * @param {?} value\n * @param {?} directiveIndex\n * @param {?} playerIndex\n * @return {?}\n */\nfunction insertNewMultiProperty(context, index, classBased, name, flag, value, directiveIndex, playerIndex) {\n    /** @type {?} */\n    const doShift = index < context.length;\n    // prop does not exist in the list, add it in\n    context.splice(index, 0, flag | 1 /* Dirty */ | (classBased ? 2 /* Class */ : 0 /* None */), name, value, 0);\n    setPlayerBuilderIndex(context, index, playerIndex, directiveIndex);\n    if (doShift) {\n        // because the value was inserted midway into the array then we\n        // need to update all the shifted multi values' single value\n        // pointers to point to the newly shifted location\n        updateSinglePointerValues(context, index + 4 /* Size */);\n    }\n}\n/**\n * @param {?} value\n * @param {?=} isClassBased\n * @return {?}\n */\nfunction valueExists(value, isClassBased) {\n    return value !== null;\n}\n/**\n * @param {?} context\n * @param {?} prop\n * @param {?} entryIsClassBased\n * @param {?=} sanitizer\n * @return {?}\n */\nfunction prepareInitialFlag(context, prop, entryIsClassBased, sanitizer) {\n    /** @type {?} */\n    let flag = (sanitizer && sanitizer(prop)) ? 4 /* Sanitize */ : 0 /* None */;\n    /** @type {?} */\n    let initialIndex;\n    if (entryIsClassBased) {\n        flag |= 2 /* Class */;\n        initialIndex =\n            getInitialStylingValuesIndexOf(context[4 /* InitialClassValuesPosition */], prop);\n    }\n    else {\n        initialIndex =\n            getInitialStylingValuesIndexOf(context[3 /* InitialStyleValuesPosition */], prop);\n    }\n    initialIndex = initialIndex > 0 ? (initialIndex + 1 /* ValueOffset */) : 0;\n    return pointers(flag, initialIndex, 0);\n}\n/**\n * @param {?} context\n * @param {?} flag\n * @param {?} newValue\n * @return {?}\n */\nfunction hasInitialValueChanged(context, flag, newValue) {\n    /** @type {?} */\n    const initialValue = getInitialValue(context, flag);\n    return !initialValue || hasValueChanged(flag, initialValue, newValue);\n}\n/**\n * @param {?} flag\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction hasValueChanged(flag, a, b) {\n    /** @type {?} */\n    const isClassBased = flag & 2 /* Class */;\n    /** @type {?} */\n    const hasValues = a && b;\n    /** @type {?} */\n    const usesSanitizer = flag & 4 /* Sanitize */;\n    // the toString() comparison ensures that a value is checked\n    // ... otherwise (during sanitization bypassing) the === comparsion\n    // would fail since a new String() instance is created\n    if (!isClassBased && hasValues && usesSanitizer) {\n        // we know for sure we're dealing with strings at this point\n        return ((/** @type {?} */ (a))).toString() !== ((/** @type {?} */ (b))).toString();\n    }\n    // everything else is safe to check with a normal equality check\n    return a !== b;\n}\n/**\n * @template T\n */\nclass ClassAndStylePlayerBuilder {\n    /**\n     * @param {?} factory\n     * @param {?} _element\n     * @param {?} _type\n     */\n    constructor(factory, _element, _type) {\n        this._element = _element;\n        this._type = _type;\n        this._values = {};\n        this._dirty = false;\n        this._factory = (/** @type {?} */ (factory));\n    }\n    /**\n     * @param {?} prop\n     * @param {?} value\n     * @return {?}\n     */\n    setValue(prop, value) {\n        if (this._values[prop] !== value) {\n            this._values[prop] = value;\n            this._dirty = true;\n        }\n    }\n    /**\n     * @param {?} currentPlayer\n     * @param {?} isFirstRender\n     * @return {?}\n     */\n    buildPlayer(currentPlayer, isFirstRender) {\n        // if no values have been set here then this means the binding didn't\n        // change and therefore the binding values were not updated through\n        // `setValue` which means no new player will be provided.\n        if (this._dirty) {\n            /** @type {?} */\n            const player = this._factory.fn(this._element, this._type, (/** @type {?} */ (this._values)), isFirstRender, currentPlayer || null);\n            this._values = {};\n            this._dirty = false;\n            return player;\n        }\n        return undefined;\n    }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getDirectiveIndexFromEntry(context, index) {\n    /** @type {?} */\n    const value = (/** @type {?} */ (context[index + 3 /* PlayerBuilderIndexOffset */]));\n    return value & 65535 /* BitMask */;\n}\n/**\n * @param {?} keyValues\n * @param {?} key\n * @return {?}\n */\nfunction getInitialStylingValuesIndexOf(keyValues, key) {\n    for (let i = 2 /* KeyValueStartPosition */; i < keyValues.length; i += 3 /* Size */) {\n        if (keyValues[i] === key)\n            return i;\n    }\n    return -1;\n}\n/**\n * @param {?} context\n * @param {?} directiveIndex\n * @param {?} offset\n * @param {?} isClassBased\n * @return {?}\n */\nfunction getSinglePropIndexValue(context, directiveIndex, offset, isClassBased) {\n    /** @type {?} */\n    const singlePropOffsetRegistryIndex = (/** @type {?} */ (context[2 /* DirectiveRegistryPosition */][(directiveIndex * 2 /* Size */) +\n        0 /* SinglePropValuesIndexOffset */]));\n    /** @type {?} */\n    const offsets = context[5 /* SinglePropOffsetPositions */];\n    /** @type {?} */\n    const indexForOffset = singlePropOffsetRegistryIndex +\n        2 /* ValueStartPosition */ +\n        (isClassBased ?\n            offsets[singlePropOffsetRegistryIndex + 0 /* StylesCountPosition */] :\n            0) +\n        offset;\n    return offsets[indexForOffset];\n}\n/**\n * @param {?} context\n * @param {?} directiveIndex\n * @return {?}\n */\nfunction getStyleSanitizer(context, directiveIndex) {\n    /** @type {?} */\n    const dirs = context[2 /* DirectiveRegistryPosition */];\n    /** @type {?} */\n    const value = dirs[directiveIndex * 2 /* Size */ +\n        1 /* StyleSanitizerOffset */] ||\n        dirs[1 /* StyleSanitizerOffset */] || null;\n    return (/** @type {?} */ (value));\n}\n/**\n * @param {?} currentValue\n * @param {?} newValue\n * @param {?} currentDirectiveOwner\n * @param {?} newDirectiveOwner\n * @return {?}\n */\nfunction allowValueChange(currentValue, newValue, currentDirectiveOwner, newDirectiveOwner) {\n    // the code below relies the importance of directive's being tied to their\n    // index value. The index values for each directive are derived from being\n    // registered into the styling context directive registry. The most important\n    // directive is the parent component directive (the template) and each directive\n    // that is added after is considered less important than the previous entry. This\n    // prioritization of directives enables the styling algorithm to decide if a style\n    // or class should be allowed to be updated/replaced in case an earlier directive\n    // already wrote to the exact same style-property or className value. In other words\n    // this decides what to do if and when there is a collision.\n    if (currentValue != null) {\n        if (newValue != null) {\n            // if a directive index is lower than it always has priority over the\n            // previous directive's value...\n            return newDirectiveOwner <= currentDirectiveOwner;\n        }\n        else {\n            // only write a null value in case it's the same owner writing it.\n            // this avoids having a higher-priority directive write to null\n            // only to have a lesser-priority directive change right to a\n            // non-null value immediately afterwards.\n            return currentDirectiveOwner === newDirectiveOwner;\n        }\n    }\n    return true;\n}\n/**\n * Returns the className string of all the initial classes for the element.\n *\n * This function is designed to populate and cache all the static class\n * values into a className string. The caching mechanism works by placing\n * the completed className string into the initial values array into a\n * dedicated slot. This will prevent the function from having to populate\n * the string each time an element is created or matched.\n *\n * @param {?} context\n * @return {?} the className string (e.g. `on active red`)\n */\nfunction getInitialClassNameValue(context) {\n    /** @type {?} */\n    const initialClassValues = context[4 /* InitialClassValuesPosition */];\n    /** @type {?} */\n    let className = initialClassValues[1 /* CachedStringValuePosition */];\n    if (className === null) {\n        className = '';\n        for (let i = 2 /* KeyValueStartPosition */; i < initialClassValues.length; i += 3 /* Size */) {\n            /** @type {?} */\n            const isPresent = initialClassValues[i + 1];\n            if (isPresent) {\n                className += (className.length ? ' ' : '') + initialClassValues[i];\n            }\n        }\n        initialClassValues[1 /* CachedStringValuePosition */] = className;\n    }\n    return className;\n}\n/**\n * Returns the style string of all the initial styles for the element.\n *\n * This function is designed to populate and cache all the static style\n * values into a style string. The caching mechanism works by placing\n * the completed style string into the initial values array into a\n * dedicated slot. This will prevent the function from having to populate\n * the string each time an element is created or matched.\n *\n * @param {?} context\n * @return {?} the style string (e.g. `width:100px;height:200px`)\n */\nfunction getInitialStyleStringValue(context) {\n    /** @type {?} */\n    const initialStyleValues = context[3 /* InitialStyleValuesPosition */];\n    /** @type {?} */\n    let styleString = initialStyleValues[1 /* CachedStringValuePosition */];\n    if (styleString === null) {\n        styleString = '';\n        for (let i = 2 /* KeyValueStartPosition */; i < initialStyleValues.length; i += 3 /* Size */) {\n            /** @type {?} */\n            const value = initialStyleValues[i + 1];\n            if (value !== null) {\n                styleString += (styleString.length ? ';' : '') + `${initialStyleValues[i]}:${value}`;\n            }\n        }\n        initialStyleValues[1 /* CachedStringValuePosition */] = styleString;\n    }\n    return styleString;\n}\n/**\n * Returns the current cached mutli-value for a given directiveIndex within the provided context.\n * @param {?} context\n * @param {?} entryIsClassBased\n * @param {?} directiveIndex\n * @return {?}\n */\nfunction readCachedMapValue(context, entryIsClassBased, directiveIndex) {\n    /** @type {?} */\n    const values = context[entryIsClassBased ? 6 /* CachedMultiClasses */ : 7 /* CachedMultiStyles */];\n    /** @type {?} */\n    const index = 1 /* ValuesStartPosition */ +\n        directiveIndex * 4 /* Size */;\n    return values[index + 2 /* ValueOffset */] || null;\n}\n/**\n * Determines whether the provided multi styling value should be updated or not.\n *\n * Because `[style]` and `[class]` bindings rely on an identity change to occur before\n * applying new values, the styling algorithm may not update an existing entry into\n * the context if a previous directive's entry changed shape.\n *\n * This function will decide whether or not a value should be applied (if there is a\n * cache miss) to the context based on the following rules:\n *\n * - If there is an identity change between the existing value and new value\n * - If there is no existing value cached (first write)\n * - If a previous directive flagged the existing cached value as dirty\n * @param {?} context\n * @param {?} entryIsClassBased\n * @param {?} directiveIndex\n * @param {?} newValue\n * @return {?}\n */\nfunction isMultiValueCacheHit(context, entryIsClassBased, directiveIndex, newValue) {\n    /** @type {?} */\n    const indexOfCachedValues = entryIsClassBased ? 6 /* CachedMultiClasses */ : 7 /* CachedMultiStyles */;\n    /** @type {?} */\n    const cachedValues = (/** @type {?} */ (context[indexOfCachedValues]));\n    /** @type {?} */\n    const index = 1 /* ValuesStartPosition */ +\n        directiveIndex * 4 /* Size */;\n    if (cachedValues[index + 0 /* DirtyFlagOffset */])\n        return false;\n    return newValue === NO_CHANGE ||\n        readCachedMapValue(context, entryIsClassBased, directiveIndex) === newValue;\n}\n/**\n * Updates the cached status of a multi-styling value in the context.\n *\n * The cached map array (which exists in the context) contains a manifest of\n * each multi-styling entry (`[style]` and `[class]` entries) for the template\n * as well as all directives.\n *\n * This function will update the cached status of the provided multi-style\n * entry within the cache.\n *\n * When called, this function will update the following information:\n * - The actual cached value (the raw value that was passed into `[style]` or `[class]`)\n * - The total amount of unique styling entries that this value has written into the context\n * - The exact position of where the multi styling entries start in the context for this binding\n * - The dirty flag will be set to true\n *\n * If the `dirtyFutureValues` param is provided then it will update all future entries (binding\n * entries that exist as apart of other directives) to be dirty as well. This will force the\n * styling algorithm to reapply those values once change detection checks them (which will in\n * turn cause the styling context to update itself and the correct styling values will be\n * rendered on screen).\n * @param {?} context\n * @param {?} directiveIndex\n * @param {?} entryIsClassBased\n * @param {?} cacheValue\n * @param {?} startPosition\n * @param {?} endPosition\n * @param {?} totalValues\n * @param {?} dirtyFutureValues\n * @return {?}\n */\nfunction updateCachedMapValue(context, directiveIndex, entryIsClassBased, cacheValue, startPosition, endPosition, totalValues, dirtyFutureValues) {\n    /** @type {?} */\n    const values = context[entryIsClassBased ? 6 /* CachedMultiClasses */ : 7 /* CachedMultiStyles */];\n    /** @type {?} */\n    const index = 1 /* ValuesStartPosition */ +\n        directiveIndex * 4 /* Size */;\n    // in the event that this is true we assume that future values are dirty and therefore\n    // will be checked again in the next CD cycle\n    if (dirtyFutureValues) {\n        /** @type {?} */\n        const nextStartPosition = startPosition + totalValues * 4 /* Size */;\n        for (let i = index + 4 /* Size */; i < values.length; i += 4 /* Size */) {\n            values[i + 1 /* PositionStartOffset */] = nextStartPosition;\n            values[i + 0 /* DirtyFlagOffset */] = 1;\n        }\n    }\n    values[index + 0 /* DirtyFlagOffset */] = 0;\n    values[index + 1 /* PositionStartOffset */] = startPosition;\n    values[index + 2 /* ValueOffset */] = cacheValue;\n    values[index + 3 /* ValueCountOffset */] = totalValues;\n    // the code below counts the total amount of styling values that exist in\n    // the context up until this directive. This value will be later used to\n    // update the cached value map's total counter value.\n    /** @type {?} */\n    let totalStylingEntries = totalValues;\n    for (let i = 1 /* ValuesStartPosition */; i < index; i += 4 /* Size */) {\n        totalStylingEntries += values[i + 3 /* ValueCountOffset */];\n    }\n    // because style values come before class values in the context this means\n    // that if any new values were inserted then the cache values array for\n    // classes is out of sync. The code below will update the offsets to point\n    // to their new values.\n    if (!entryIsClassBased) {\n        /** @type {?} */\n        const classCache = context[6 /* CachedMultiClasses */];\n        /** @type {?} */\n        const classesStartPosition = classCache[1 /* ValuesStartPosition */ +\n            1 /* PositionStartOffset */];\n        /** @type {?} */\n        const diffInStartPosition = endPosition - classesStartPosition;\n        for (let i = 1 /* ValuesStartPosition */; i < classCache.length; i += 4 /* Size */) {\n            classCache[i + 1 /* PositionStartOffset */] += diffInStartPosition;\n        }\n    }\n    values[0 /* EntriesCountPosition */] = totalStylingEntries;\n}\n/**\n * @param {?} entries\n * @return {?}\n */\nfunction hyphenateEntries(entries) {\n    /** @type {?} */\n    const newEntries = [];\n    for (let i = 0; i < entries.length; i++) {\n        newEntries.push(hyphenate(entries[i]));\n    }\n    return newEntries;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction hyphenate(value) {\n    return value.replace(/[a-z][A-Z]/g, (/**\n     * @param {?} match\n     * @return {?}\n     */\n    match => `${match.charAt(0)}-${match.charAt(1).toLowerCase()}`));\n}\n/**\n * @param {?} context\n * @param {?} directiveIndex\n * @param {?} entryIsClassBased\n * @param {?} startPosition\n * @param {?=} count\n * @return {?}\n */\nfunction registerMultiMapEntry(context, directiveIndex, entryIsClassBased, startPosition, count = 0) {\n    /** @type {?} */\n    const cachedValues = context[entryIsClassBased ? 6 /* CachedMultiClasses */ : 7 /* CachedMultiStyles */];\n    if (directiveIndex > 0) {\n        /** @type {?} */\n        const limit = 1 /* ValuesStartPosition */ +\n            (directiveIndex * 4 /* Size */);\n        while (cachedValues.length < limit) {\n            // this means that ONLY directive class styling (like ngClass) was used\n            // therefore the root directive will still need to be filled in as well\n            // as any other directive spaces in case they only used static values\n            cachedValues.push(0, startPosition, null, 0);\n        }\n    }\n    cachedValues.push(0, startPosition, null, count);\n}\n/**\n * Inserts or updates an existing entry in the provided `staticStyles` collection.\n *\n * @param {?} index the index representing an existing styling entry in the collection:\n *  if provided (numeric): then it will update the existing entry at the given position\n *  if null: then it will insert a new entry within the collection\n * @param {?} staticStyles a collection of style or class entries where the value will\n *  be inserted or patched\n * @param {?} prop the property value of the entry (e.g. `width` (styles) or `foo` (classes))\n * @param {?} value the styling value of the entry (e.g. `absolute` (styles) or `true` (classes))\n * @param {?} directiveOwnerIndex the directive owner index value of the styling source responsible\n *        for these styles (see `interfaces/styling.ts#directives` for more info)\n * @return {?} the index of the updated or new entry within the collection\n */\nfunction addOrUpdateStaticStyle(index, staticStyles, prop, value, directiveOwnerIndex) {\n    if (index === null) {\n        index = staticStyles.length;\n        staticStyles.push(null, null, null);\n        staticStyles[index + 0 /* PropOffset */] = prop;\n    }\n    staticStyles[index + 1 /* ValueOffset */] = value;\n    staticStyles[index + 2 /* DirectiveOwnerOffset */] = directiveOwnerIndex;\n    return index;\n}\n/**\n * @param {?} context\n * @param {?} directiveIndex\n * @return {?}\n */\nfunction assertValidDirectiveIndex(context, directiveIndex) {\n    /** @type {?} */\n    const dirs = context[2 /* DirectiveRegistryPosition */];\n    /** @type {?} */\n    const index = directiveIndex * 2 /* Size */;\n    if (index >= dirs.length ||\n        dirs[index + 0 /* SinglePropValuesIndexOffset */] === -1) {\n        throw new Error('The provided directive is not registered with the styling context');\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst NG_TEMPLATE_SELECTOR = 'ng-template';\n/**\n * @param {?} nodeClassAttrVal\n * @param {?} cssClassToMatch\n * @return {?}\n */\nfunction isCssClassMatching(nodeClassAttrVal, cssClassToMatch) {\n    /** @type {?} */\n    const nodeClassesLen = nodeClassAttrVal.length;\n    /** @type {?} */\n    const matchIndex = (/** @type {?} */ (nodeClassAttrVal)).indexOf(cssClassToMatch);\n    /** @type {?} */\n    const matchEndIdx = matchIndex + cssClassToMatch.length;\n    if (matchIndex === -1 // no match\n        || (matchIndex > 0 && (/** @type {?} */ (nodeClassAttrVal))[matchIndex - 1] !== ' ') // no space before\n        ||\n            (matchEndIdx < nodeClassesLen && (/** @type {?} */ (nodeClassAttrVal))[matchEndIdx] !== ' ')) // no space after\n     {\n        return false;\n    }\n    return true;\n}\n/**\n * Function that checks whether a given tNode matches tag-based selector and has a valid type.\n *\n * Matching can be performed in 2 modes: projection mode (when we project nodes) and regular\n * directive matching mode:\n * - in the \"directive matching\" mode we do _not_ take TContainer's tagName into account if it is\n * different from NG_TEMPLATE_SELECTOR (value different from NG_TEMPLATE_SELECTOR indicates that a\n * tag name was extracted from * syntax so we would match the same directive twice);\n * - in the \"projection\" mode, we use a tag name potentially extracted from the * syntax processing\n * (applicable to TNodeType.Container only).\n * @param {?} tNode\n * @param {?} currentSelector\n * @param {?} isProjectionMode\n * @return {?}\n */\nfunction hasTagAndTypeMatch(tNode, currentSelector, isProjectionMode) {\n    /** @type {?} */\n    const tagNameToCompare = tNode.type === 0 /* Container */ && !isProjectionMode ?\n        NG_TEMPLATE_SELECTOR :\n        tNode.tagName;\n    return currentSelector === tagNameToCompare;\n}\n/**\n * A utility function to match an Ivy node static data against a simple CSS selector\n *\n * @param {?} tNode\n * @param {?} selector The selector to try matching against the node.\n * @param {?} isProjectionMode if `true` we are matching for content projection, otherwise we are doing\n * directive matching.\n * @return {?} true if node matches the selector.\n */\nfunction isNodeMatchingSelector(tNode, selector, isProjectionMode) {\n    ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');\n    /** @type {?} */\n    let mode = 4 /* ELEMENT */;\n    /** @type {?} */\n    const nodeAttrs = tNode.attrs || [];\n    // Find the index of first attribute that has no value, only a name.\n    /** @type {?} */\n    const nameOnlyMarkerIdx = getNameOnlyMarkerIndex(nodeAttrs);\n    // When processing \":not\" selectors, we skip to the next \":not\" if the\n    // current one doesn't match\n    /** @type {?} */\n    let skipToNextSelector = false;\n    for (let i = 0; i < selector.length; i++) {\n        /** @type {?} */\n        const current = selector[i];\n        if (typeof current === 'number') {\n            // If we finish processing a :not selector and it hasn't failed, return false\n            if (!skipToNextSelector && !isPositive(mode) && !isPositive((/** @type {?} */ (current)))) {\n                return false;\n            }\n            // If we are skipping to the next :not() and this mode flag is positive,\n            // it's a part of the current :not() selector, and we should keep skipping\n            if (skipToNextSelector && isPositive(current))\n                continue;\n            skipToNextSelector = false;\n            mode = ((/** @type {?} */ (current))) | (mode & 1 /* NOT */);\n            continue;\n        }\n        if (skipToNextSelector)\n            continue;\n        if (mode & 4 /* ELEMENT */) {\n            mode = 2 /* ATTRIBUTE */ | mode & 1 /* NOT */;\n            if (current !== '' && !hasTagAndTypeMatch(tNode, current, isProjectionMode) ||\n                current === '' && selector.length === 1) {\n                if (isPositive(mode))\n                    return false;\n                skipToNextSelector = true;\n            }\n        }\n        else {\n            /** @type {?} */\n            const selectorAttrValue = mode & 8 /* CLASS */ ? current : selector[++i];\n            // special case for matching against classes when a tNode has been instantiated with\n            // class and style values as separate attribute values (e.g. ['title', CLASS, 'foo'])\n            if ((mode & 8 /* CLASS */) && tNode.stylingTemplate) {\n                if (!isCssClassMatching(readClassValueFromTNode(tNode), (/** @type {?} */ (selectorAttrValue)))) {\n                    if (isPositive(mode))\n                        return false;\n                    skipToNextSelector = true;\n                }\n                continue;\n            }\n            /** @type {?} */\n            const isInlineTemplate = tNode.type == 0 /* Container */ && tNode.tagName !== NG_TEMPLATE_SELECTOR;\n            /** @type {?} */\n            const attrName = (mode & 8 /* CLASS */) ? 'class' : current;\n            /** @type {?} */\n            const attrIndexInNode = findAttrIndexInNode(attrName, nodeAttrs, isInlineTemplate, isProjectionMode);\n            if (attrIndexInNode === -1) {\n                if (isPositive(mode))\n                    return false;\n                skipToNextSelector = true;\n                continue;\n            }\n            if (selectorAttrValue !== '') {\n                /** @type {?} */\n                let nodeAttrValue;\n                if (attrIndexInNode > nameOnlyMarkerIdx) {\n                    nodeAttrValue = '';\n                }\n                else {\n                    ngDevMode && assertNotEqual(nodeAttrs[attrIndexInNode], 0 /* NamespaceURI */, 'We do not match directives on namespaced attributes');\n                    nodeAttrValue = (/** @type {?} */ (nodeAttrs[attrIndexInNode + 1]));\n                }\n                /** @type {?} */\n                const compareAgainstClassName = mode & 8 /* CLASS */ ? nodeAttrValue : null;\n                if (compareAgainstClassName &&\n                    !isCssClassMatching(compareAgainstClassName, (/** @type {?} */ (selectorAttrValue))) ||\n                    mode & 2 /* ATTRIBUTE */ && selectorAttrValue !== nodeAttrValue) {\n                    if (isPositive(mode))\n                        return false;\n                    skipToNextSelector = true;\n                }\n            }\n        }\n    }\n    return isPositive(mode) || skipToNextSelector;\n}\n/**\n * @param {?} mode\n * @return {?}\n */\nfunction isPositive(mode) {\n    return (mode & 1 /* NOT */) === 0;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction readClassValueFromTNode(tNode) {\n    // comparing against CSS class values is complex because the compiler doesn't place them as\n    // regular attributes when an element is created. Instead, the classes (and styles for\n    // that matter) are placed in a special styling context that is used for resolving all\n    // class/style values across static attributes, [style]/[class] and [style.prop]/[class.name]\n    // bindings. Therefore if and when the styling context exists then the class values are to be\n    // extracted by the context helper code below...\n    return tNode.stylingTemplate ? getInitialClassNameValue(tNode.stylingTemplate) : '';\n}\n/**\n * Examines the attribute's definition array for a node to find the index of the\n * attribute that matches the given `name`.\n *\n * NOTE: This will not match namespaced attributes.\n *\n * Attribute matching depends upon `isInlineTemplate` and `isProjectionMode`.\n * The following table summarizes which types of attributes we attempt to match:\n *\n * =========================================================================================\n * Modes                   | Normal Attributes | Bindings Attributes | Template Attributes\n * =========================================================================================\n * Inline + Projection     | YES               | YES                 | NO\n * -----------------------------------------------------------------------------------------\n * Inline + Directive      | NO                | NO                  | YES\n * -----------------------------------------------------------------------------------------\n * Non-inline + Projection | YES               | YES                 | NO\n * -----------------------------------------------------------------------------------------\n * Non-inline + Directive  | YES               | YES                 | NO\n * =========================================================================================\n *\n * @param {?} name the name of the attribute to find\n * @param {?} attrs the attribute array to examine\n * @param {?} isInlineTemplate true if the node being matched is an inline template (e.g. `*ngFor`)\n * rather than a manually expanded template node (e.g `<ng-template>`).\n * @param {?} isProjectionMode true if we are matching against content projection otherwise we are\n * matching against directives.\n * @return {?}\n */\nfunction findAttrIndexInNode(name, attrs, isInlineTemplate, isProjectionMode) {\n    if (attrs === null)\n        return -1;\n    /** @type {?} */\n    let i = 0;\n    if (isProjectionMode || !isInlineTemplate) {\n        /** @type {?} */\n        let bindingsMode = false;\n        while (i < attrs.length) {\n            /** @type {?} */\n            const maybeAttrName = attrs[i];\n            if (maybeAttrName === name) {\n                return i;\n            }\n            else if (maybeAttrName === 3 /* Bindings */) {\n                bindingsMode = true;\n            }\n            else if (maybeAttrName === 1 /* Classes */) {\n                /** @type {?} */\n                let value = attrs[++i];\n                // We should skip classes here because we have a separate mechanism for\n                // matching classes in projection mode.\n                while (typeof value === 'string') {\n                    value = attrs[++i];\n                }\n                continue;\n            }\n            else if (maybeAttrName === 4 /* Template */) {\n                // We do not care about Template attributes in this scenario.\n                break;\n            }\n            else if (maybeAttrName === 0 /* NamespaceURI */) {\n                // Skip the whole namespaced attribute and value. This is by design.\n                i += 4;\n                continue;\n            }\n            // In binding mode there are only names, rather than name-value pairs.\n            i += bindingsMode ? 1 : 2;\n        }\n        // We did not match the attribute\n        return -1;\n    }\n    else {\n        return matchTemplateAttribute(attrs, name);\n    }\n}\n/**\n * @param {?} tNode\n * @param {?} selector\n * @param {?=} isProjectionMode\n * @return {?}\n */\nfunction isNodeMatchingSelectorList(tNode, selector, isProjectionMode = false) {\n    for (let i = 0; i < selector.length; i++) {\n        if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction getProjectAsAttrValue(tNode) {\n    /** @type {?} */\n    const nodeAttrs = tNode.attrs;\n    if (nodeAttrs != null) {\n        /** @type {?} */\n        const ngProjectAsAttrIdx = nodeAttrs.indexOf(5 /* ProjectAs */);\n        // only check for ngProjectAs in attribute names, don't accidentally match attribute's value\n        // (attribute names are stored at even indexes)\n        if ((ngProjectAsAttrIdx & 1) === 0) {\n            return (/** @type {?} */ (nodeAttrs[ngProjectAsAttrIdx + 1]));\n        }\n    }\n    return null;\n}\n/**\n * Checks a given node against matching projection selectors and returns\n * selector index (or 0 if none matched).\n *\n * This function takes into account the parsed ngProjectAs selector from the node's attributes.\n * If present, it will check whether the ngProjectAs selector matches any of the projection\n * selectors.\n * @param {?} tNode\n * @param {?} selectors\n * @return {?}\n */\nfunction matchingProjectionSelectorIndex(tNode, selectors) {\n    /** @type {?} */\n    const ngProjectAsAttrVal = getProjectAsAttrValue(tNode);\n    for (let i = 0; i < selectors.length; i++) {\n        // If we ran into an `ngProjectAs` attribute, we should match its parsed selector\n        // to the list of selectors, otherwise we fall back to matching against the node.\n        if (ngProjectAsAttrVal === null ?\n            isNodeMatchingSelectorList(tNode, selectors[i], /* isProjectionMode */ true) :\n            isSelectorInSelectorList(ngProjectAsAttrVal, selectors[i])) {\n            return i + 1; // first matching selector \"captures\" a given node\n        }\n    }\n    return 0;\n}\n/**\n * @param {?} nodeAttrs\n * @return {?}\n */\nfunction getNameOnlyMarkerIndex(nodeAttrs) {\n    for (let i = 0; i < nodeAttrs.length; i++) {\n        /** @type {?} */\n        const nodeAttr = nodeAttrs[i];\n        if (isNameOnlyAttributeMarker(nodeAttr)) {\n            return i;\n        }\n    }\n    return nodeAttrs.length;\n}\n/**\n * @param {?} attrs\n * @param {?} name\n * @return {?}\n */\nfunction matchTemplateAttribute(attrs, name) {\n    /** @type {?} */\n    let i = attrs.indexOf(4 /* Template */);\n    if (i > -1) {\n        i++;\n        while (i < attrs.length) {\n            if (attrs[i] === name)\n                return i;\n            i++;\n        }\n    }\n    return -1;\n}\n/**\n * Checks whether a selector is inside a CssSelectorList\n * @param {?} selector Selector to be checked.\n * @param {?} list List in which to look for the selector.\n * @return {?}\n */\nfunction isSelectorInSelectorList(selector, list) {\n    selectorListLoop: for (let i = 0; i < list.length; i++) {\n        /** @type {?} */\n        const currentSelectorInList = list[i];\n        if (selector.length !== currentSelectorInList.length) {\n            continue;\n        }\n        for (let j = 0; j < selector.length; j++) {\n            if (selector[j] !== currentSelectorInList[j]) {\n                continue selectorListLoop;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst ɵ0$7 = /**\n * @return {?}\n */\n() => Promise.resolve(null);\n/**\n * A permanent marker promise which signifies that the current CD tree is\n * clean.\n * @type {?}\n */\nconst _CLEAN_PROMISE = ((ɵ0$7))();\n/**\n * Refreshes the view, executing the following steps in that order:\n * triggers init hooks, refreshes dynamic embedded views, triggers content hooks, sets host\n * bindings, refreshes child components.\n * Note: view hooks are triggered later when leaving the view.\n * @param {?} lView\n * @return {?}\n */\nfunction refreshDescendantViews(lView) {\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const creationMode = isCreationMode(lView);\n    // This needs to be set before children are processed to support recursive components\n    tView.firstTemplatePass = false;\n    // Resetting the bindingIndex of the current LView as the next steps may trigger change detection.\n    lView[BINDING_INDEX] = tView.bindingStartIndex;\n    // If this is a creation pass, we should not call lifecycle hooks or evaluate bindings.\n    // This will be done in the update pass.\n    if (!creationMode) {\n        /** @type {?} */\n        const checkNoChangesMode = getCheckNoChangesMode();\n        executePreOrderHooks(lView, tView, checkNoChangesMode, undefined);\n        refreshDynamicEmbeddedViews(lView);\n        // Content query results must be refreshed before content hooks are called.\n        refreshContentQueries(tView, lView);\n        resetPreOrderHookFlags(lView);\n        executeHooks(lView, tView.contentHooks, tView.contentCheckHooks, checkNoChangesMode, 1 /* AfterContentInitHooksToBeRun */, undefined);\n        setHostBindings(tView, lView);\n    }\n    // We resolve content queries specifically marked as `static` in creation mode. Dynamic\n    // content queries are resolved during change detection (i.e. update mode), after embedded\n    // views are refreshed (see block above).\n    if (creationMode && tView.staticContentQueries) {\n        refreshContentQueries(tView, lView);\n    }\n    refreshChildComponents(tView.components);\n}\n/**\n * Sets the host bindings for the current view.\n * @param {?} tView\n * @param {?} viewData\n * @return {?}\n */\nfunction setHostBindings(tView, viewData) {\n    /** @type {?} */\n    const selectedIndex = getSelectedIndex();\n    try {\n        if (tView.expandoInstructions) {\n            /** @type {?} */\n            let bindingRootIndex = viewData[BINDING_INDEX] = tView.expandoStartIndex;\n            setBindingRoot(bindingRootIndex);\n            /** @type {?} */\n            let currentDirectiveIndex = -1;\n            /** @type {?} */\n            let currentElementIndex = -1;\n            for (let i = 0; i < tView.expandoInstructions.length; i++) {\n                /** @type {?} */\n                const instruction = tView.expandoInstructions[i];\n                if (typeof instruction === 'number') {\n                    if (instruction <= 0) {\n                        // Negative numbers mean that we are starting new EXPANDO block and need to update\n                        // the current element and directive index.\n                        currentElementIndex = -instruction;\n                        setActiveHostElement(currentElementIndex);\n                        // Injector block and providers are taken into account.\n                        /** @type {?} */\n                        const providerCount = ((/** @type {?} */ (tView.expandoInstructions[++i])));\n                        bindingRootIndex += INJECTOR_BLOOM_PARENT_SIZE + providerCount;\n                        currentDirectiveIndex = bindingRootIndex;\n                    }\n                    else {\n                        // This is either the injector size (so the binding root can skip over directives\n                        // and get to the first set of host bindings on this node) or the host var count\n                        // (to get to the next set of host bindings on this node).\n                        bindingRootIndex += instruction;\n                    }\n                    setBindingRoot(bindingRootIndex);\n                }\n                else {\n                    // If it's not a number, it's a host binding function that needs to be executed.\n                    if (instruction !== null) {\n                        viewData[BINDING_INDEX] = bindingRootIndex;\n                        /** @type {?} */\n                        const hostCtx = unwrapRNode(viewData[currentDirectiveIndex]);\n                        instruction(2 /* Update */, hostCtx, currentElementIndex);\n                        // Each directive gets a uniqueId value that is the same for both\n                        // create and update calls when the hostBindings function is called. The\n                        // directive uniqueId is not set anywhere--it is just incremented between\n                        // each hostBindings call and is useful for helping instruction code\n                        // uniquely determine which directive is currently active when executed.\n                        incrementActiveDirectiveId();\n                    }\n                    currentDirectiveIndex++;\n                }\n            }\n        }\n    }\n    finally {\n        setActiveHostElement(selectedIndex);\n    }\n}\n/**\n * Refreshes content queries for all directives in the given view.\n * @param {?} tView\n * @param {?} lView\n * @return {?}\n */\nfunction refreshContentQueries(tView, lView) {\n    if (tView.contentQueries != null) {\n        setCurrentQueryIndex(0);\n        for (let i = 0; i < tView.contentQueries.length; i++) {\n            /** @type {?} */\n            const directiveDefIdx = tView.contentQueries[i];\n            /** @type {?} */\n            const directiveDef = (/** @type {?} */ (tView.data[directiveDefIdx]));\n            ngDevMode &&\n                assertDefined(directiveDef.contentQueries, 'contentQueries function should be defined');\n            (/** @type {?} */ (directiveDef.contentQueries))(2 /* Update */, lView[directiveDefIdx], directiveDefIdx);\n        }\n    }\n}\n/**\n * Refreshes child components in the current view.\n * @param {?} components\n * @return {?}\n */\nfunction refreshChildComponents(components) {\n    if (components != null) {\n        for (let i = 0; i < components.length; i++) {\n            componentRefresh(components[i]);\n        }\n    }\n}\n/**\n * Creates a native element from a tag name, using a renderer.\n * @param {?} name the tag name\n * @param {?=} overriddenRenderer Optional A renderer to override the default one\n * @return {?} the element created\n */\nfunction elementCreate(name, overriddenRenderer) {\n    /** @type {?} */\n    let native;\n    /** @type {?} */\n    const rendererToUse = overriddenRenderer || getLView()[RENDERER];\n    /** @type {?} */\n    const namespace = getNamespace();\n    if (isProceduralRenderer(rendererToUse)) {\n        native = rendererToUse.createElement(name, namespace);\n    }\n    else {\n        if (namespace === null) {\n            native = rendererToUse.createElement(name);\n        }\n        else {\n            native = rendererToUse.createElementNS(namespace, name);\n        }\n    }\n    return native;\n}\n/**\n * @template T\n * @param {?} parentLView\n * @param {?} tView\n * @param {?} context\n * @param {?} flags\n * @param {?} host\n * @param {?} tHostNode\n * @param {?=} rendererFactory\n * @param {?=} renderer\n * @param {?=} sanitizer\n * @param {?=} injector\n * @return {?}\n */\nfunction createLView(parentLView, tView, context, flags, host, tHostNode, rendererFactory, renderer, sanitizer, injector) {\n    /** @type {?} */\n    const lView = (/** @type {?} */ (tView.blueprint.slice()));\n    lView[HOST] = host;\n    lView[FLAGS] = flags | 4 /* CreationMode */ | 128 /* Attached */ | 8 /* FirstLViewPass */;\n    resetPreOrderHookFlags(lView);\n    lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;\n    lView[CONTEXT] = context;\n    lView[RENDERER_FACTORY] = (/** @type {?} */ ((rendererFactory || parentLView && parentLView[RENDERER_FACTORY])));\n    ngDevMode && assertDefined(lView[RENDERER_FACTORY], 'RendererFactory is required');\n    lView[RENDERER] = (/** @type {?} */ ((renderer || parentLView && parentLView[RENDERER])));\n    ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');\n    lView[SANITIZER] = sanitizer || parentLView && parentLView[SANITIZER] || (/** @type {?} */ (null));\n    lView[(/** @type {?} */ (INJECTOR$1))] = injector || parentLView && parentLView[INJECTOR$1] || null;\n    lView[T_HOST] = tHostNode;\n    ngDevMode && attachLViewDebug(lView);\n    return lView;\n}\n/**\n * @param {?} index\n * @param {?} type\n * @param {?} native\n * @param {?} name\n * @param {?} attrs\n * @return {?}\n */\nfunction createNodeAtIndex(index, type, native, name, attrs) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const adjustedIndex = index + HEADER_OFFSET;\n    ngDevMode &&\n        assertLessThan(adjustedIndex, lView.length, `Slot should have been initialized with null`);\n    lView[adjustedIndex] = native;\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    const isParent = getIsParent();\n    /** @type {?} */\n    let tNode = (/** @type {?} */ (tView.data[adjustedIndex]));\n    if (tNode == null) {\n        /** @type {?} */\n        const parent = isParent ? previousOrParentTNode : previousOrParentTNode && previousOrParentTNode.parent;\n        // Parents cannot cross component boundaries because components will be used in multiple places,\n        // so it's only set if the view is the same.\n        /** @type {?} */\n        const parentInSameView = parent && parent !== lView[T_HOST];\n        /** @type {?} */\n        const tParentNode = parentInSameView ? (/** @type {?} */ (parent)) : null;\n        tNode = tView.data[adjustedIndex] = createTNode(tParentNode, type, adjustedIndex, name, attrs);\n    }\n    // Now link ourselves into the tree.\n    // We need this even if tNode exists, otherwise we might end up pointing to unexisting tNodes when\n    // we use i18n (especially with ICU expressions that update the DOM during the update phase).\n    if (previousOrParentTNode) {\n        if (isParent && previousOrParentTNode.child == null &&\n            (tNode.parent !== null || previousOrParentTNode.type === 2 /* View */)) {\n            // We are in the same view, which means we are adding content node to the parent view.\n            previousOrParentTNode.child = tNode;\n        }\n        else if (!isParent) {\n            previousOrParentTNode.next = tNode;\n        }\n    }\n    if (tView.firstChild == null) {\n        tView.firstChild = tNode;\n    }\n    setPreviousOrParentTNode(tNode);\n    setIsParent(true);\n    return (/** @type {?} */ (tNode));\n}\n/**\n * @param {?} tView\n * @param {?} tParentNode\n * @param {?} index\n * @param {?} lView\n * @return {?}\n */\nfunction assignTViewNodeToLView(tView, tParentNode, index, lView) {\n    // View nodes are not stored in data because they can be added / removed at runtime (which\n    // would cause indices to change). Their TNodes are instead stored in tView.node.\n    /** @type {?} */\n    let tNode = tView.node;\n    if (tNode == null) {\n        ngDevMode && tParentNode &&\n            assertNodeOfPossibleTypes(tParentNode, 3 /* Element */, 0 /* Container */);\n        tView.node = tNode = (/** @type {?} */ (createTNode((/** @type {?} */ (tParentNode)), //\n        2 /* View */, index, null, null)));\n    }\n    return lView[T_HOST] = (/** @type {?} */ (tNode));\n}\n/**\n * When elements are created dynamically after a view blueprint is created (e.g. through\n * i18nApply() or ComponentFactory.create), we need to adjust the blueprint for future\n * template passes.\n * @param {?} view\n * @param {?} numSlotsToAlloc\n * @return {?}\n */\nfunction allocExpando(view, numSlotsToAlloc) {\n    /** @type {?} */\n    const tView = view[TVIEW];\n    if (tView.firstTemplatePass) {\n        for (let i = 0; i < numSlotsToAlloc; i++) {\n            tView.blueprint.push(null);\n            tView.data.push(null);\n            view.push(null);\n        }\n        // We should only increment the expando start index if there aren't already directives\n        // and injectors saved in the \"expando\" section\n        if (!tView.expandoInstructions) {\n            tView.expandoStartIndex += numSlotsToAlloc;\n        }\n        else {\n            // Since we're adding the dynamic nodes into the expando section, we need to let the host\n            // bindings know that they should skip x slots\n            tView.expandoInstructions.push(numSlotsToAlloc);\n        }\n    }\n}\n/**\n * Used for creating the LViewNode of a dynamic embedded view,\n * either through ViewContainerRef.createEmbeddedView() or TemplateRef.createEmbeddedView().\n * Such lViewNode will then be renderer with renderEmbeddedTemplate() (see below).\n * @template T\n * @param {?} tView\n * @param {?} context\n * @param {?} declarationView\n * @param {?} queries\n * @param {?} injectorIndex\n * @return {?}\n */\nfunction createEmbeddedViewAndNode(tView, context, declarationView, queries, injectorIndex) {\n    /** @type {?} */\n    const _isParent = getIsParent();\n    /** @type {?} */\n    const _previousOrParentTNode = getPreviousOrParentTNode();\n    setIsParent(true);\n    setPreviousOrParentTNode((/** @type {?} */ (null)));\n    /** @type {?} */\n    const lView = createLView(declarationView, tView, context, 16 /* CheckAlways */, null, null);\n    lView[DECLARATION_VIEW] = declarationView;\n    if (queries) {\n        lView[QUERIES] = queries.createView();\n    }\n    assignTViewNodeToLView(tView, null, -1, lView);\n    if (tView.firstTemplatePass) {\n        (/** @type {?} */ (tView.node)).injectorIndex = injectorIndex;\n    }\n    setIsParent(_isParent);\n    setPreviousOrParentTNode(_previousOrParentTNode);\n    return lView;\n}\n/**\n * Used for rendering embedded views (e.g. dynamically created views)\n *\n * Dynamically created views must store/retrieve their TViews differently from component views\n * because their template functions are nested in the template functions of their hosts, creating\n * closures. If their host template happens to be an embedded template in a loop (e.g. ngFor inside\n * an ngFor), the nesting would mean we'd have multiple instances of the template function, so we\n * can't store TViews in the template function itself (as we do for comps). Instead, we store the\n * TView for dynamically created views on their host TNode, which only has one instance.\n * @template T\n * @param {?} viewToRender\n * @param {?} tView\n * @param {?} context\n * @return {?}\n */\nfunction renderEmbeddedTemplate(viewToRender, tView, context) {\n    /** @type {?} */\n    const _isParent = getIsParent();\n    /** @type {?} */\n    const _previousOrParentTNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    let oldView;\n    if (viewToRender[FLAGS] & 512 /* IsRoot */) {\n        // This is a root view inside the view tree\n        tickRootContext(getRootContext(viewToRender));\n    }\n    else {\n        try {\n            setIsParent(true);\n            setPreviousOrParentTNode((/** @type {?} */ (null)));\n            oldView = enterView(viewToRender, viewToRender[T_HOST]);\n            resetPreOrderHookFlags(viewToRender);\n            executeTemplate((/** @type {?} */ (tView.template)), getRenderFlags(viewToRender), context);\n            // This must be set to false immediately after the first creation run because in an\n            // ngFor loop, all the views will be created together before update mode runs and turns\n            // off firstTemplatePass. If we don't set it here, instances will perform directive\n            // matching, etc again and again.\n            viewToRender[TVIEW].firstTemplatePass = false;\n            refreshDescendantViews(viewToRender);\n        }\n        finally {\n            leaveView((/** @type {?} */ (oldView)));\n            setIsParent(_isParent);\n            setPreviousOrParentTNode(_previousOrParentTNode);\n        }\n    }\n}\n/**\n * @template T\n * @param {?} hostView\n * @param {?} context\n * @param {?=} templateFn\n * @return {?}\n */\nfunction renderComponentOrTemplate(hostView, context, templateFn) {\n    /** @type {?} */\n    const rendererFactory = hostView[RENDERER_FACTORY];\n    /** @type {?} */\n    const oldView = enterView(hostView, hostView[T_HOST]);\n    /** @type {?} */\n    const normalExecutionPath = !getCheckNoChangesMode();\n    /** @type {?} */\n    const creationModeIsActive = isCreationMode(hostView);\n    try {\n        if (normalExecutionPath && !creationModeIsActive && rendererFactory.begin) {\n            rendererFactory.begin();\n        }\n        if (creationModeIsActive) {\n            // creation mode pass\n            templateFn && executeTemplate(templateFn, 1 /* Create */, context);\n            refreshDescendantViews(hostView);\n            hostView[FLAGS] &= ~4 /* CreationMode */;\n        }\n        // update mode pass\n        resetPreOrderHookFlags(hostView);\n        templateFn && executeTemplate(templateFn, 2 /* Update */, context);\n        refreshDescendantViews(hostView);\n    }\n    finally {\n        if (normalExecutionPath && !creationModeIsActive && rendererFactory.end) {\n            rendererFactory.end();\n        }\n        leaveView(oldView);\n    }\n}\n/**\n * @template T\n * @param {?} templateFn\n * @param {?} rf\n * @param {?} context\n * @return {?}\n */\nfunction executeTemplate(templateFn, rf, context) {\n    ɵɵnamespaceHTML();\n    /** @type {?} */\n    const prevSelectedIndex = getSelectedIndex();\n    try {\n        setActiveHostElement(null);\n        templateFn(rf, context);\n    }\n    finally {\n        setSelectedIndex(prevSelectedIndex);\n    }\n}\n/**\n * This function returns the default configuration of rendering flags depending on when the\n * template is in creation mode or update mode. Update block and create block are\n * always run separately.\n * @param {?} view\n * @return {?}\n */\nfunction getRenderFlags(view) {\n    return isCreationMode(view) ? 1 /* Create */ : 2 /* Update */;\n}\n//////////////////////////\n//// Element\n//////////////////////////\n/**\n * Appropriately sets `stylingTemplate` on a TNode\n *\n * Does not apply styles to DOM nodes\n *\n * @param {?} tView\n * @param {?} tNode The node whose `stylingTemplate` to set\n * @param {?} attrs The attribute array source to set the attributes from\n * @param {?} attrsStartIndex Optional start index to start processing the `attrs` from\n * @return {?}\n */\nfunction setNodeStylingTemplate(tView, tNode, attrs, attrsStartIndex) {\n    if (tView.firstTemplatePass && !tNode.stylingTemplate) {\n        /** @type {?} */\n        const stylingAttrsStartIndex = attrsStylingIndexOf(attrs, attrsStartIndex);\n        if (stylingAttrsStartIndex >= 0) {\n            tNode.stylingTemplate = initializeStaticContext(attrs, stylingAttrsStartIndex);\n        }\n    }\n}\n/**\n * @param {?} tView\n * @param {?} tNode\n * @param {?} lView\n * @return {?}\n */\nfunction executeContentQueries(tView, tNode, lView) {\n    if (isContentQueryHost(tNode)) {\n        /** @type {?} */\n        const start = tNode.directiveStart;\n        /** @type {?} */\n        const end = tNode.directiveEnd;\n        for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {\n            /** @type {?} */\n            const def = (/** @type {?} */ (tView.data[directiveIndex]));\n            if (def.contentQueries) {\n                def.contentQueries(1 /* Create */, lView[directiveIndex], directiveIndex);\n            }\n        }\n    }\n}\n/**\n * Creates directive instances and populates local refs.\n *\n * @param {?} tView\n * @param {?} lView\n * @param {?} localRefs Local refs of the node in question\n * @param {?=} localRefExtractor mapping function that extracts local ref value from TNode\n * @return {?}\n */\nfunction createDirectivesAndLocals(tView, lView, localRefs, localRefExtractor = getNativeByTNode) {\n    if (!getBindingsEnabled())\n        return;\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    if (tView.firstTemplatePass) {\n        ngDevMode && ngDevMode.firstTemplatePass++;\n        resolveDirectives(tView, lView, findDirectiveMatches(tView, lView, previousOrParentTNode), previousOrParentTNode, localRefs || null);\n    }\n    instantiateAllDirectives(tView, lView, previousOrParentTNode);\n    invokeDirectivesHostBindings(tView, lView, previousOrParentTNode);\n    saveResolvedLocalsInData(lView, previousOrParentTNode, localRefExtractor);\n}\n/**\n * Takes a list of local names and indices and pushes the resolved local variable values\n * to LView in the same order as they are loaded in the template with load().\n * @param {?} viewData\n * @param {?} tNode\n * @param {?} localRefExtractor\n * @return {?}\n */\nfunction saveResolvedLocalsInData(viewData, tNode, localRefExtractor) {\n    /** @type {?} */\n    const localNames = tNode.localNames;\n    if (localNames) {\n        /** @type {?} */\n        let localIndex = tNode.index + 1;\n        for (let i = 0; i < localNames.length; i += 2) {\n            /** @type {?} */\n            const index = (/** @type {?} */ (localNames[i + 1]));\n            /** @type {?} */\n            const value = index === -1 ?\n                localRefExtractor((/** @type {?} */ (tNode)), viewData) :\n                viewData[index];\n            viewData[localIndex++] = value;\n        }\n    }\n}\n/**\n * Gets TView from a template function or creates a new TView\n * if it doesn't already exist.\n *\n * @param {?} templateFn The template from which to get static data\n * @param {?} consts The number of nodes, local refs, and pipes in this view\n * @param {?} vars The number of bindings and pure function bindings in this view\n * @param {?} directives Directive defs that should be saved on TView\n * @param {?} pipes Pipe defs that should be saved on TView\n * @param {?} viewQuery View query that should be saved on TView\n * @param {?} schemas Schemas that should be saved on TView\n * @return {?} TView\n */\nfunction getOrCreateTView(templateFn, consts, vars, directives, pipes, viewQuery, schemas) {\n    // TODO(misko): reading `ngPrivateData` here is problematic for two reasons\n    // 1. It is a megamorphic call on each invocation.\n    // 2. For nested embedded views (ngFor inside ngFor) the template instance is per\n    //    outer template invocation, which means that no such property will exist\n    // Correct solution is to only put `ngPrivateData` on the Component template\n    // and not on embedded templates.\n    return templateFn.ngPrivateData ||\n        (templateFn.ngPrivateData = (/** @type {?} */ (createTView(-1, templateFn, consts, vars, directives, pipes, viewQuery, schemas))));\n}\n/**\n * Creates a TView instance\n *\n * @param {?} viewIndex The viewBlockId for inline views, or -1 if it's a component/dynamic\n * @param {?} templateFn Template function\n * @param {?} consts The number of nodes, local refs, and pipes in this template\n * @param {?} vars\n * @param {?} directives Registry of directives for this view\n * @param {?} pipes Registry of pipes for this view\n * @param {?} viewQuery View queries for this view\n * @param {?} schemas Schemas for this view\n * @return {?}\n */\nfunction createTView(viewIndex, templateFn, consts, vars, directives, pipes, viewQuery, schemas) {\n    ngDevMode && ngDevMode.tView++;\n    /** @type {?} */\n    const bindingStartIndex = HEADER_OFFSET + consts;\n    // This length does not yet contain host bindings from child directives because at this point,\n    // we don't know which directives are active on this template. As soon as a directive is matched\n    // that has a host binding, we will update the blueprint with that def's hostVars count.\n    /** @type {?} */\n    const initialViewLength = bindingStartIndex + vars;\n    /** @type {?} */\n    const blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);\n    return blueprint[(/** @type {?} */ (TVIEW))] = {\n        id: viewIndex,\n        blueprint: blueprint,\n        template: templateFn,\n        viewQuery: viewQuery,\n        node: (/** @type {?} */ (null)),\n        data: blueprint.slice().fill(null, bindingStartIndex),\n        bindingStartIndex: bindingStartIndex,\n        viewQueryStartIndex: initialViewLength,\n        expandoStartIndex: initialViewLength,\n        expandoInstructions: null,\n        firstTemplatePass: true,\n        staticViewQueries: false,\n        staticContentQueries: false,\n        preOrderHooks: null,\n        preOrderCheckHooks: null,\n        contentHooks: null,\n        contentCheckHooks: null,\n        viewHooks: null,\n        viewCheckHooks: null,\n        destroyHooks: null,\n        cleanup: null,\n        contentQueries: null,\n        components: null,\n        directiveRegistry: typeof directives === 'function' ? directives() : directives,\n        pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\n        firstChild: null,\n        schemas: schemas,\n    };\n}\n/**\n * @param {?} bindingStartIndex\n * @param {?} initialViewLength\n * @return {?}\n */\nfunction createViewBlueprint(bindingStartIndex, initialViewLength) {\n    /** @type {?} */\n    const blueprint = (/** @type {?} */ (new Array(initialViewLength)\n        .fill(null, 0, bindingStartIndex)\n        .fill(NO_CHANGE, bindingStartIndex)));\n    blueprint[BINDING_INDEX] = bindingStartIndex;\n    return blueprint;\n}\n/**\n * @param {?} text\n * @param {?} token\n * @return {?}\n */\nfunction createError(text, token) {\n    return new Error(`Renderer: ${text} [${stringifyForError(token)}]`);\n}\n/**\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n *\n * @param {?} factory\n * @param {?} elementOrSelector Render element or CSS selector to locate the element.\n * @return {?}\n */\nfunction locateHostElement(factory, elementOrSelector) {\n    /** @type {?} */\n    const defaultRenderer = factory.createRenderer(null, null);\n    /** @type {?} */\n    const rNode = typeof elementOrSelector === 'string' ?\n        (isProceduralRenderer(defaultRenderer) ?\n            defaultRenderer.selectRootElement(elementOrSelector) :\n            defaultRenderer.querySelector(elementOrSelector)) :\n        elementOrSelector;\n    if (ngDevMode && !rNode) {\n        if (typeof elementOrSelector === 'string') {\n            throw createError('Host node with selector not found:', elementOrSelector);\n        }\n        else {\n            throw createError('Host node is required:', elementOrSelector);\n        }\n    }\n    return rNode;\n}\n/**\n * Saves context for this cleanup function in LView.cleanupInstances.\n *\n * On the first template pass, saves in TView:\n * - Cleanup function\n * - Index of context we just saved in LView.cleanupInstances\n * @param {?} lView\n * @param {?} context\n * @param {?} cleanupFn\n * @return {?}\n */\nfunction storeCleanupWithContext(lView, context, cleanupFn) {\n    /** @type {?} */\n    const lCleanup = getCleanup(lView);\n    lCleanup.push(context);\n    if (lView[TVIEW].firstTemplatePass) {\n        getTViewCleanup(lView).push(cleanupFn, lCleanup.length - 1);\n    }\n}\n/**\n * Saves the cleanup function itself in LView.cleanupInstances.\n *\n * This is necessary for functions that are wrapped with their contexts, like in renderer2\n * listeners.\n *\n * On the first template pass, the index of the cleanup function is saved in TView.\n * @param {?} view\n * @param {?} cleanupFn\n * @return {?}\n */\nfunction storeCleanupFn(view, cleanupFn) {\n    getCleanup(view).push(cleanupFn);\n    if (view[TVIEW].firstTemplatePass) {\n        getTViewCleanup(view).push((/** @type {?} */ (view[CLEANUP])).length - 1, null);\n    }\n}\n/**\n * Constructs a TNode object from the arguments.\n *\n * @param {?} tParent\n * @param {?} type The type of the node\n * @param {?} adjustedIndex The index of the TNode in TView.data, adjusted for HEADER_OFFSET\n * @param {?} tagName The tag name of the node\n * @param {?} attrs The attributes defined on this node\n * @return {?} the TNode object\n */\nfunction createTNode(tParent, type, adjustedIndex, tagName, attrs) {\n    ngDevMode && ngDevMode.tNode++;\n    return {\n        type: type,\n        index: adjustedIndex,\n        injectorIndex: tParent ? tParent.injectorIndex : -1,\n        directiveStart: -1,\n        directiveEnd: -1,\n        propertyMetadataStartIndex: -1,\n        propertyMetadataEndIndex: -1,\n        flags: 0,\n        providerIndexes: 0,\n        tagName: tagName,\n        attrs: attrs,\n        localNames: null,\n        initialInputs: undefined,\n        inputs: undefined,\n        outputs: undefined,\n        tViews: null,\n        next: null,\n        projectionNext: null,\n        child: null,\n        parent: tParent,\n        stylingTemplate: null,\n        projection: null,\n        onElementCreationFns: null,\n    };\n}\n/**\n * Consolidates all inputs or outputs of all directives on this logical node.\n *\n * @param {?} tNode\n * @param {?} direction whether to consider inputs or outputs\n * @return {?} PropertyAliases|null aggregate of all properties if any, `null` otherwise\n */\nfunction generatePropertyAliases(tNode, direction) {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    /** @type {?} */\n    let propStore = null;\n    /** @type {?} */\n    const start = tNode.directiveStart;\n    /** @type {?} */\n    const end = tNode.directiveEnd;\n    if (end > start) {\n        /** @type {?} */\n        const isInput = direction === 0 /* Input */;\n        /** @type {?} */\n        const defs = tView.data;\n        for (let i = start; i < end; i++) {\n            /** @type {?} */\n            const directiveDef = (/** @type {?} */ (defs[i]));\n            /** @type {?} */\n            const propertyAliasMap = isInput ? directiveDef.inputs : directiveDef.outputs;\n            for (let publicName in propertyAliasMap) {\n                if (propertyAliasMap.hasOwnProperty(publicName)) {\n                    propStore = propStore || {};\n                    /** @type {?} */\n                    const internalName = propertyAliasMap[publicName];\n                    /** @type {?} */\n                    const hasProperty = propStore.hasOwnProperty(publicName);\n                    hasProperty ? propStore[publicName].push(i, publicName, internalName) :\n                        (propStore[publicName] = [i, publicName, internalName]);\n                }\n            }\n        }\n    }\n    return propStore;\n}\n/**\n * Mapping between attributes names that don't correspond to their element property names.\n * @type {?}\n */\nconst ATTR_TO_PROP = {\n    'class': 'className',\n    'for': 'htmlFor',\n    'formaction': 'formAction',\n    'innerHtml': 'innerHTML',\n    'readonly': 'readOnly',\n    'tabindex': 'tabIndex',\n};\n/**\n * @template T\n * @param {?} index\n * @param {?} propName\n * @param {?} value\n * @param {?=} sanitizer\n * @param {?=} nativeOnly\n * @param {?=} loadRendererFn\n * @return {?}\n */\nfunction elementPropertyInternal(index, propName, value, sanitizer, nativeOnly, loadRendererFn) {\n    if (value === NO_CHANGE)\n        return;\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const element = (/** @type {?} */ (getNativeByIndex(index, lView)));\n    /** @type {?} */\n    const tNode = getTNode(index, lView);\n    /** @type {?} */\n    let inputData;\n    /** @type {?} */\n    let dataValue;\n    if (!nativeOnly && (inputData = initializeTNodeInputs(tNode)) &&\n        (dataValue = inputData[propName])) {\n        setInputsForProperty(lView, dataValue, value);\n        if (isComponent(tNode))\n            markDirtyIfOnPush(lView, index + HEADER_OFFSET);\n        if (ngDevMode) {\n            if (tNode.type === 3 /* Element */ || tNode.type === 0 /* Container */) {\n                /**\n                 * dataValue is an array containing runtime input or output names for the directives:\n                 * i+0: directive instance index\n                 * i+1: publicName\n                 * i+2: privateName\n                 *\n                 * e.g. [0, 'change', 'change-minified']\n                 * we want to set the reflected property with the privateName: dataValue[i+2]\n                 */\n                for (let i = 0; i < dataValue.length; i += 3) {\n                    setNgReflectProperty(lView, element, tNode.type, (/** @type {?} */ (dataValue[i + 2])), value);\n                }\n            }\n        }\n    }\n    else if (tNode.type === 3 /* Element */) {\n        propName = ATTR_TO_PROP[propName] || propName;\n        if (ngDevMode) {\n            validateAgainstEventProperties(propName);\n            validateAgainstUnknownProperties(lView, element, propName, tNode);\n            ngDevMode.rendererSetProperty++;\n        }\n        savePropertyDebugData(tNode, lView, propName, lView[TVIEW].data, nativeOnly);\n        /** @type {?} */\n        const renderer = loadRendererFn ? loadRendererFn(tNode, lView) : lView[RENDERER];\n        // It is assumed that the sanitizer is only added when the compiler determines that the property\n        // is risky, so sanitization can be done without further checks.\n        value = sanitizer != null ? ((/** @type {?} */ (sanitizer(value, tNode.tagName || '', propName)))) : value;\n        if (isProceduralRenderer(renderer)) {\n            renderer.setProperty((/** @type {?} */ (element)), propName, value);\n        }\n        else if (!isAnimationProp(propName)) {\n            ((/** @type {?} */ (element))).setProperty ? ((/** @type {?} */ (element))).setProperty(propName, value) :\n                ((/** @type {?} */ (element)))[propName] = value;\n        }\n    }\n    else if (tNode.type === 0 /* Container */) {\n        // If the node is a container and the property didn't\n        // match any of the inputs or schemas we should throw.\n        if (ngDevMode && !matchingSchemas(lView, tNode.tagName)) {\n            throw createUnknownPropertyError(propName, tNode);\n        }\n    }\n}\n/**\n * If node is an OnPush component, marks its LView dirty.\n * @param {?} lView\n * @param {?} viewIndex\n * @return {?}\n */\nfunction markDirtyIfOnPush(lView, viewIndex) {\n    ngDevMode && assertLView(lView);\n    /** @type {?} */\n    const childComponentLView = getComponentViewByIndex(viewIndex, lView);\n    if (!(childComponentLView[FLAGS] & 16 /* CheckAlways */)) {\n        childComponentLView[FLAGS] |= 64 /* Dirty */;\n    }\n}\n/**\n * @param {?} lView\n * @param {?} element\n * @param {?} type\n * @param {?} attrName\n * @param {?} value\n * @return {?}\n */\nfunction setNgReflectProperty(lView, element, type, attrName, value) {\n    /** @type {?} */\n    const renderer = lView[RENDERER];\n    attrName = normalizeDebugBindingName(attrName);\n    /** @type {?} */\n    const debugValue = normalizeDebugBindingValue(value);\n    if (type === 3 /* Element */) {\n        if (value == null) {\n            isProceduralRenderer(renderer) ? renderer.removeAttribute(((/** @type {?} */ (element))), attrName) :\n                ((/** @type {?} */ (element))).removeAttribute(attrName);\n        }\n        else {\n            isProceduralRenderer(renderer) ?\n                renderer.setAttribute(((/** @type {?} */ (element))), attrName, debugValue) :\n                ((/** @type {?} */ (element))).setAttribute(attrName, debugValue);\n        }\n    }\n    else {\n        /** @type {?} */\n        const textContent = `bindings=${JSON.stringify({ [attrName]: debugValue }, null, 2)}`;\n        if (isProceduralRenderer(renderer)) {\n            renderer.setValue(((/** @type {?} */ (element))), textContent);\n        }\n        else {\n            ((/** @type {?} */ (element))).textContent = textContent;\n        }\n    }\n}\n/**\n * @param {?} hostView\n * @param {?} element\n * @param {?} propName\n * @param {?} tNode\n * @return {?}\n */\nfunction validateAgainstUnknownProperties(hostView, element, propName, tNode) {\n    // If the tag matches any of the schemas we shouldn't throw.\n    if (matchingSchemas(hostView, tNode.tagName)) {\n        return;\n    }\n    // If prop is not a known property of the HTML element...\n    if (!(propName in element) &&\n        // and we are in a browser context... (web worker nodes should be skipped)\n        typeof Node === 'function' && element instanceof Node &&\n        // and isn't a synthetic animation property...\n        propName[0] !== ANIMATION_PROP_PREFIX) {\n        // ... it is probably a user error and we should throw.\n        throw createUnknownPropertyError(propName, tNode);\n    }\n}\n/**\n * @param {?} hostView\n * @param {?} tagName\n * @return {?}\n */\nfunction matchingSchemas(hostView, tagName) {\n    /** @type {?} */\n    const schemas = hostView[TVIEW].schemas;\n    if (schemas !== null) {\n        for (let i = 0; i < schemas.length; i++) {\n            /** @type {?} */\n            const schema = schemas[i];\n            if (schema === NO_ERRORS_SCHEMA ||\n                schema === CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf('-') > -1) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n/**\n * Stores debugging data for this property binding on first template pass.\n * This enables features like DebugElement.properties.\n * @param {?} tNode\n * @param {?} lView\n * @param {?} propName\n * @param {?} tData\n * @param {?} nativeOnly\n * @return {?}\n */\nfunction savePropertyDebugData(tNode, lView, propName, tData, nativeOnly) {\n    /** @type {?} */\n    const lastBindingIndex = lView[BINDING_INDEX] - 1;\n    // Bind/interpolation functions save binding metadata in the last binding index,\n    // but leave the property name blank. If the interpolation delimiter is at the 0\n    // index, we know that this is our first pass and the property name still needs to\n    // be set.\n    /** @type {?} */\n    const bindingMetadata = (/** @type {?} */ (tData[lastBindingIndex]));\n    if (bindingMetadata[0] == INTERPOLATION_DELIMITER) {\n        tData[lastBindingIndex] = propName + bindingMetadata;\n        // We don't want to store indices for host bindings because they are stored in a\n        // different part of LView (the expando section).\n        if (!nativeOnly) {\n            if (tNode.propertyMetadataStartIndex == -1) {\n                tNode.propertyMetadataStartIndex = lastBindingIndex;\n            }\n            tNode.propertyMetadataEndIndex = lastBindingIndex + 1;\n        }\n    }\n}\n/**\n * Creates an error that should be thrown when encountering an unknown property on an element.\n * @param {?} propName Name of the invalid property.\n * @param {?} tNode Node on which we encountered the error.\n * @return {?}\n */\nfunction createUnknownPropertyError(propName, tNode) {\n    return new Error(`Template error: Can't bind to '${propName}' since it isn't a known property of '${tNode.tagName}'.`);\n}\n/**\n * Instantiate a root component.\n * @template T\n * @param {?} tView\n * @param {?} viewData\n * @param {?} def\n * @return {?}\n */\nfunction instantiateRootComponent(tView, viewData, def) {\n    /** @type {?} */\n    const rootTNode = getPreviousOrParentTNode();\n    if (tView.firstTemplatePass) {\n        if (def.providersResolver)\n            def.providersResolver(def);\n        generateExpandoInstructionBlock(tView, rootTNode, 1);\n        baseResolveDirective(tView, viewData, def, def.factory);\n    }\n    /** @type {?} */\n    const directive = getNodeInjectable(tView.data, viewData, viewData.length - 1, (/** @type {?} */ (rootTNode)));\n    postProcessBaseDirective(viewData, rootTNode, directive);\n    return directive;\n}\n/**\n * Resolve the matched directives on a node.\n * @param {?} tView\n * @param {?} viewData\n * @param {?} directives\n * @param {?} tNode\n * @param {?} localRefs\n * @return {?}\n */\nfunction resolveDirectives(tView, viewData, directives, tNode, localRefs) {\n    // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in tsickle.\n    ngDevMode && assertEqual(tView.firstTemplatePass, true, 'should run on first template pass only');\n    /** @type {?} */\n    const exportsMap = localRefs ? { '': -1 } : null;\n    if (directives) {\n        initNodeFlags(tNode, tView.data.length, directives.length);\n        // When the same token is provided by several directives on the same node, some rules apply in\n        // the viewEngine:\n        // - viewProviders have priority over providers\n        // - the last directive in NgModule.declarations has priority over the previous one\n        // So to match these rules, the order in which providers are added in the arrays is very\n        // important.\n        for (let i = 0; i < directives.length; i++) {\n            /** @type {?} */\n            const def = (/** @type {?} */ (directives[i]));\n            if (def.providersResolver)\n                def.providersResolver(def);\n        }\n        generateExpandoInstructionBlock(tView, tNode, directives.length);\n        /** @type {?} */\n        const initialPreOrderHooksLength = (tView.preOrderHooks && tView.preOrderHooks.length) || 0;\n        /** @type {?} */\n        const initialPreOrderCheckHooksLength = (tView.preOrderCheckHooks && tView.preOrderCheckHooks.length) || 0;\n        /** @type {?} */\n        const nodeIndex = tNode.index - HEADER_OFFSET;\n        for (let i = 0; i < directives.length; i++) {\n            /** @type {?} */\n            const def = (/** @type {?} */ (directives[i]));\n            /** @type {?} */\n            const directiveDefIdx = tView.data.length;\n            baseResolveDirective(tView, viewData, def, def.factory);\n            saveNameToExportMap((/** @type {?} */ (tView.data)).length - 1, def, exportsMap);\n            // Init hooks are queued now so ngOnInit is called in host components before\n            // any projected components.\n            registerPreOrderHooks(directiveDefIdx, def, tView, nodeIndex, initialPreOrderHooksLength, initialPreOrderCheckHooksLength);\n        }\n    }\n    if (exportsMap)\n        cacheMatchingLocalNames(tNode, localRefs, exportsMap);\n}\n/**\n * Instantiate all the directives that were previously resolved on the current node.\n * @param {?} tView\n * @param {?} lView\n * @param {?} tNode\n * @return {?}\n */\nfunction instantiateAllDirectives(tView, lView, tNode) {\n    /** @type {?} */\n    const start = tNode.directiveStart;\n    /** @type {?} */\n    const end = tNode.directiveEnd;\n    if (!tView.firstTemplatePass && start < end) {\n        getOrCreateNodeInjectorForNode((/** @type {?} */ (tNode)), lView);\n    }\n    for (let i = start; i < end; i++) {\n        /** @type {?} */\n        const def = (/** @type {?} */ (tView.data[i]));\n        if (isComponentDef(def)) {\n            addComponentLogic(lView, tNode, (/** @type {?} */ (def)));\n        }\n        /** @type {?} */\n        const directive = getNodeInjectable(tView.data, (/** @type {?} */ (lView)), i, (/** @type {?} */ (tNode)));\n        postProcessDirective(lView, directive, def, i);\n    }\n}\n/**\n * @param {?} tView\n * @param {?} viewData\n * @param {?} tNode\n * @return {?}\n */\nfunction invokeDirectivesHostBindings(tView, viewData, tNode) {\n    /** @type {?} */\n    const start = tNode.directiveStart;\n    /** @type {?} */\n    const end = tNode.directiveEnd;\n    /** @type {?} */\n    const expando = (/** @type {?} */ (tView.expandoInstructions));\n    /** @type {?} */\n    const firstTemplatePass = tView.firstTemplatePass;\n    /** @type {?} */\n    const elementIndex = tNode.index - HEADER_OFFSET;\n    /** @type {?} */\n    const selectedIndex = getSelectedIndex();\n    try {\n        setActiveHostElement(elementIndex);\n        for (let i = start; i < end; i++) {\n            /** @type {?} */\n            const def = (/** @type {?} */ (tView.data[i]));\n            /** @type {?} */\n            const directive = viewData[i];\n            if (def.hostBindings) {\n                invokeHostBindingsInCreationMode(def, expando, directive, tNode, firstTemplatePass);\n                // Each directive gets a uniqueId value that is the same for both\n                // create and update calls when the hostBindings function is called. The\n                // directive uniqueId is not set anywhere--it is just incremented between\n                // each hostBindings call and is useful for helping instruction code\n                // uniquely determine which directive is currently active when executed.\n                incrementActiveDirectiveId();\n            }\n            else if (firstTemplatePass) {\n                expando.push(null);\n            }\n        }\n    }\n    finally {\n        setActiveHostElement(selectedIndex);\n    }\n}\n/**\n * @param {?} def\n * @param {?} expando\n * @param {?} directive\n * @param {?} tNode\n * @param {?} firstTemplatePass\n * @return {?}\n */\nfunction invokeHostBindingsInCreationMode(def, expando, directive, tNode, firstTemplatePass) {\n    /** @type {?} */\n    const previousExpandoLength = expando.length;\n    setCurrentDirectiveDef(def);\n    /** @type {?} */\n    const elementIndex = tNode.index - HEADER_OFFSET;\n    (/** @type {?} */ (def.hostBindings))(1 /* Create */, directive, elementIndex);\n    setCurrentDirectiveDef(null);\n    // `hostBindings` function may or may not contain `allocHostVars` call\n    // (e.g. it may not if it only contains host listeners), so we need to check whether\n    // `expandoInstructions` has changed and if not - we still push `hostBindings` to\n    // expando block, to make sure we execute it for DI cycle\n    if (previousExpandoLength === expando.length && firstTemplatePass) {\n        expando.push(def.hostBindings);\n    }\n}\n/**\n * Generates a new block in TView.expandoInstructions for this node.\n *\n * Each expando block starts with the element index (turned negative so we can distinguish\n * it from the hostVar count) and the directive count. See more in VIEW_DATA.md.\n * @param {?} tView\n * @param {?} tNode\n * @param {?} directiveCount\n * @return {?}\n */\nfunction generateExpandoInstructionBlock(tView, tNode, directiveCount) {\n    ngDevMode && assertEqual(tView.firstTemplatePass, true, 'Expando block should only be generated on first template pass.');\n    /** @type {?} */\n    const elementIndex = -(tNode.index - HEADER_OFFSET);\n    /** @type {?} */\n    const providerStartIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n    /** @type {?} */\n    const providerCount = tView.data.length - providerStartIndex;\n    (tView.expandoInstructions || (tView.expandoInstructions = [])).push(elementIndex, providerCount, directiveCount);\n}\n/**\n * Process a directive on the current node after its creation.\n * @template T\n * @param {?} viewData\n * @param {?} directive\n * @param {?} def\n * @param {?} directiveDefIdx\n * @return {?}\n */\nfunction postProcessDirective(viewData, directive, def, directiveDefIdx) {\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    postProcessBaseDirective(viewData, previousOrParentTNode, directive);\n    ngDevMode && assertDefined(previousOrParentTNode, 'previousOrParentTNode');\n    if (previousOrParentTNode && previousOrParentTNode.attrs) {\n        setInputsFromAttrs(directiveDefIdx, directive, def, previousOrParentTNode);\n    }\n    if (viewData[TVIEW].firstTemplatePass && def.contentQueries) {\n        previousOrParentTNode.flags |= 4 /* hasContentQuery */;\n    }\n    if (isComponentDef(def)) {\n        /** @type {?} */\n        const componentView = getComponentViewByIndex(previousOrParentTNode.index, viewData);\n        componentView[CONTEXT] = directive;\n    }\n}\n/**\n * A lighter version of postProcessDirective() that is used for the root component.\n * @template T\n * @param {?} lView\n * @param {?} previousOrParentTNode\n * @param {?} directive\n * @return {?}\n */\nfunction postProcessBaseDirective(lView, previousOrParentTNode, directive) {\n    /** @type {?} */\n    const native = getNativeByTNode(previousOrParentTNode, lView);\n    ngDevMode && assertEqual(lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex, 'directives should be created before any bindings');\n    ngDevMode && assertPreviousIsParent(getIsParent());\n    attachPatchData(directive, lView);\n    if (native) {\n        attachPatchData(native, lView);\n    }\n}\n/**\n * Matches the current node against all available selectors.\n * If a component is matched (at most one), it is returned in first position in the array.\n * @param {?} tView\n * @param {?} viewData\n * @param {?} tNode\n * @return {?}\n */\nfunction findDirectiveMatches(tView, viewData, tNode) {\n    ngDevMode && assertEqual(tView.firstTemplatePass, true, 'should run on first template pass only');\n    /** @type {?} */\n    const registry = tView.directiveRegistry;\n    /** @type {?} */\n    let matches = null;\n    if (registry) {\n        for (let i = 0; i < registry.length; i++) {\n            /** @type {?} */\n            const def = (/** @type {?} */ (registry[i]));\n            if (isNodeMatchingSelectorList(tNode, (/** @type {?} */ (def.selectors)), /* isProjectionMode */ false)) {\n                matches || (matches = []);\n                diPublicInInjector(getOrCreateNodeInjectorForNode((/** @type {?} */ (getPreviousOrParentTNode())), viewData), viewData, def.type);\n                if (isComponentDef(def)) {\n                    if (tNode.flags & 1 /* isComponent */)\n                        throwMultipleComponentError(tNode);\n                    tNode.flags = 1 /* isComponent */;\n                    // The component is always stored first with directives after.\n                    matches.unshift(def);\n                }\n                else {\n                    matches.push(def);\n                }\n            }\n        }\n    }\n    return matches;\n}\n/**\n * Stores index of component's host element so it will be queued for view refresh during CD.\n * @param {?} previousOrParentTNode\n * @return {?}\n */\nfunction queueComponentIndexForCheck(previousOrParentTNode) {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    ngDevMode &&\n        assertEqual(tView.firstTemplatePass, true, 'Should only be called in first template pass.');\n    (tView.components || (tView.components = [])).push(previousOrParentTNode.index);\n}\n/**\n * Caches local names and their matching directive indices for query and template lookups.\n * @param {?} tNode\n * @param {?} localRefs\n * @param {?} exportsMap\n * @return {?}\n */\nfunction cacheMatchingLocalNames(tNode, localRefs, exportsMap) {\n    if (localRefs) {\n        /** @type {?} */\n        const localNames = tNode.localNames = [];\n        // Local names must be stored in tNode in the same order that localRefs are defined\n        // in the template to ensure the data is loaded in the same slots as their refs\n        // in the template (for template queries).\n        for (let i = 0; i < localRefs.length; i += 2) {\n            /** @type {?} */\n            const index = exportsMap[localRefs[i + 1]];\n            if (index == null)\n                throw new Error(`Export of name '${localRefs[i + 1]}' not found!`);\n            localNames.push(localRefs[i], index);\n        }\n    }\n}\n/**\n * Builds up an export map as directives are created, so local refs can be quickly mapped\n * to their directive instances.\n * @param {?} index\n * @param {?} def\n * @param {?} exportsMap\n * @return {?}\n */\nfunction saveNameToExportMap(index, def, exportsMap) {\n    if (exportsMap) {\n        if (def.exportAs) {\n            for (let i = 0; i < def.exportAs.length; i++) {\n                exportsMap[def.exportAs[i]] = index;\n            }\n        }\n        if (((/** @type {?} */ (def))).template)\n            exportsMap[''] = index;\n    }\n}\n/**\n * Initializes the flags on the current node, setting all indices to the initial index,\n * the directive count to 0, and adding the isComponent flag.\n * @param {?} tNode\n * @param {?} index the initial index\n * @param {?} numberOfDirectives\n * @return {?}\n */\nfunction initNodeFlags(tNode, index, numberOfDirectives) {\n    /** @type {?} */\n    const flags = tNode.flags;\n    ngDevMode && assertEqual(flags === 0 || flags === 1 /* isComponent */, true, 'expected node flags to not be initialized');\n    ngDevMode && assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, 'Reached the max number of directives');\n    // When the first directive is created on a node, save the index\n    tNode.flags = flags & 1 /* isComponent */;\n    tNode.directiveStart = index;\n    tNode.directiveEnd = index + numberOfDirectives;\n    tNode.providerIndexes = index;\n}\n/**\n * @template T\n * @param {?} tView\n * @param {?} viewData\n * @param {?} def\n * @param {?} directiveFactory\n * @return {?}\n */\nfunction baseResolveDirective(tView, viewData, def, directiveFactory) {\n    tView.data.push(def);\n    /** @type {?} */\n    const nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), null);\n    tView.blueprint.push(nodeInjectorFactory);\n    viewData.push(nodeInjectorFactory);\n}\n/**\n * @template T\n * @param {?} lView\n * @param {?} previousOrParentTNode\n * @param {?} def\n * @return {?}\n */\nfunction addComponentLogic(lView, previousOrParentTNode, def) {\n    /** @type {?} */\n    const native = getNativeByTNode(previousOrParentTNode, lView);\n    /** @type {?} */\n    const tView = getOrCreateTView(def.template, def.consts, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas);\n    // Only component views should be added to the view tree directly. Embedded views are\n    // accessed through their containers because they may be removed / re-added later.\n    /** @type {?} */\n    const rendererFactory = lView[RENDERER_FACTORY];\n    /** @type {?} */\n    const componentView = addToViewTree(lView, createLView(lView, tView, null, def.onPush ? 64 /* Dirty */ : 16 /* CheckAlways */, lView[previousOrParentTNode.index], (/** @type {?} */ (previousOrParentTNode)), rendererFactory, lView[RENDERER_FACTORY].createRenderer((/** @type {?} */ (native)), def)));\n    componentView[T_HOST] = (/** @type {?} */ (previousOrParentTNode));\n    // Component view will always be created before any injected LContainers,\n    // so this is a regular element, wrap it with the component view\n    lView[previousOrParentTNode.index] = componentView;\n    if (lView[TVIEW].firstTemplatePass) {\n        queueComponentIndexForCheck(previousOrParentTNode);\n    }\n}\n/**\n * Sets initial input properties on directive instances from attribute data\n *\n * @template T\n * @param {?} directiveIndex Index of the directive in directives array\n * @param {?} instance Instance of the directive on which to set the initial inputs\n * @param {?} def The directive def that contains the list of inputs\n * @param {?} tNode The static data for this node\n * @return {?}\n */\nfunction setInputsFromAttrs(directiveIndex, instance, def, tNode) {\n    /** @type {?} */\n    let initialInputData = (/** @type {?} */ (tNode.initialInputs));\n    if (initialInputData === undefined || directiveIndex >= initialInputData.length) {\n        initialInputData = generateInitialInputs(directiveIndex, def.inputs, tNode);\n    }\n    /** @type {?} */\n    const initialInputs = initialInputData[directiveIndex];\n    if (initialInputs) {\n        /** @type {?} */\n        const setInput = def.setInput;\n        for (let i = 0; i < initialInputs.length;) {\n            /** @type {?} */\n            const publicName = initialInputs[i++];\n            /** @type {?} */\n            const privateName = initialInputs[i++];\n            /** @type {?} */\n            const value = initialInputs[i++];\n            if (setInput) {\n                (/** @type {?} */ (def.setInput))(instance, value, publicName, privateName);\n            }\n            else {\n                ((/** @type {?} */ (instance)))[privateName] = value;\n            }\n            if (ngDevMode) {\n                /** @type {?} */\n                const lView = getLView();\n                /** @type {?} */\n                const nativeElement = (/** @type {?} */ (getNativeByTNode(tNode, lView)));\n                setNgReflectProperty(lView, nativeElement, tNode.type, privateName, value);\n            }\n        }\n    }\n}\n/**\n * Generates initialInputData for a node and stores it in the template's static storage\n * so subsequent template invocations don't have to recalculate it.\n *\n * initialInputData is an array containing values that need to be set as input properties\n * for directives on this node, but only once on creation. We need this array to support\n * the case where you set an \\@Input property of a directive using attribute-like syntax.\n * e.g. if you have a `name` \\@Input, you can set it once like this:\n *\n * <my-component name=\"Bess\"></my-component>\n *\n * @param {?} directiveIndex Index to store the initial input data\n * @param {?} inputs The list of inputs from the directive def\n * @param {?} tNode The static data on this node\n * @return {?}\n */\nfunction generateInitialInputs(directiveIndex, inputs, tNode) {\n    /** @type {?} */\n    const initialInputData = tNode.initialInputs || (tNode.initialInputs = []);\n    initialInputData[directiveIndex] = null;\n    /** @type {?} */\n    const attrs = (/** @type {?} */ (tNode.attrs));\n    /** @type {?} */\n    let i = 0;\n    while (i < attrs.length) {\n        /** @type {?} */\n        const attrName = attrs[i];\n        if (attrName === 0 /* NamespaceURI */) {\n            // We do not allow inputs on namespaced attributes.\n            i += 4;\n            continue;\n        }\n        else if (attrName === 5 /* ProjectAs */) {\n            // Skip over the `ngProjectAs` value.\n            i += 2;\n            continue;\n        }\n        // If we hit any other attribute markers, we're done anyway. None of those are valid inputs.\n        if (typeof attrName === 'number')\n            break;\n        /** @type {?} */\n        const minifiedInputName = inputs[(/** @type {?} */ (attrName))];\n        /** @type {?} */\n        const attrValue = attrs[i + 1];\n        if (minifiedInputName !== undefined) {\n            /** @type {?} */\n            const inputsToStore = initialInputData[directiveIndex] || (initialInputData[directiveIndex] = []);\n            inputsToStore.push((/** @type {?} */ (attrName)), minifiedInputName, (/** @type {?} */ (attrValue)));\n        }\n        i += 2;\n    }\n    return initialInputData;\n}\n//////////////////////////\n//// ViewContainer & View\n//////////////////////////\n/**\n * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\n *\n * @param {?} hostNative The host element for the LContainer\n * @param {?} currentView The parent view of the LContainer\n * @param {?} native The native comment element\n * @param {?} tNode\n * @param {?=} isForViewContainerRef Optional a flag indicating the ViewContainerRef case\n * @return {?} LContainer\n */\nfunction createLContainer(hostNative, currentView, native, tNode, isForViewContainerRef) {\n    ngDevMode && assertDomNode(native);\n    ngDevMode && assertLView(currentView);\n    /** @type {?} */\n    const lContainer = [\n        hostNative,\n        true,\n        isForViewContainerRef ? -1 : 0,\n        currentView,\n        null,\n        null,\n        tNode,\n        native,\n        [],\n    ];\n    ngDevMode && attachLContainerDebug(lContainer);\n    return lContainer;\n}\n/**\n * Goes over dynamic embedded views (ones created through ViewContainerRef APIs) and refreshes them\n * by executing an associated template function.\n * @param {?} lView\n * @return {?}\n */\nfunction refreshDynamicEmbeddedViews(lView) {\n    for (let current = lView[CHILD_HEAD]; current !== null; current = current[NEXT]) {\n        // Note: current can be an LView or an LContainer instance, but here we are only interested\n        // in LContainer. We can tell it's an LContainer because its length is less than the LView\n        // header.\n        if (current.length < HEADER_OFFSET && current[ACTIVE_INDEX] === -1) {\n            /** @type {?} */\n            const container = (/** @type {?} */ (current));\n            for (let i = 0; i < container[VIEWS].length; i++) {\n                /** @type {?} */\n                const dynamicViewData = container[VIEWS][i];\n                // The directives and pipes are not needed here as an existing view is only being refreshed.\n                ngDevMode && assertDefined(dynamicViewData[TVIEW], 'TView must be allocated');\n                renderEmbeddedTemplate(dynamicViewData, dynamicViewData[TVIEW], (/** @type {?} */ (dynamicViewData[CONTEXT])));\n            }\n        }\n    }\n}\n/////////////\n/**\n * Refreshes components by entering the component view and processing its bindings, queries, etc.\n *\n * @param {?} adjustedElementIndex  Element index in LView[] (adjusted for HEADER_OFFSET)\n * @return {?}\n */\nfunction componentRefresh(adjustedElementIndex) {\n    /** @type {?} */\n    const lView = getLView();\n    ngDevMode && assertDataInRange(lView, adjustedElementIndex);\n    /** @type {?} */\n    const hostView = getComponentViewByIndex(adjustedElementIndex, lView);\n    ngDevMode && assertNodeType((/** @type {?} */ (lView[TVIEW].data[adjustedElementIndex])), 3 /* Element */);\n    // Only components in creation mode, attached CheckAlways\n    // components or attached, dirty OnPush components should be checked\n    if ((viewAttachedToChangeDetector(hostView) || isCreationMode(lView)) &&\n        hostView[FLAGS] & (16 /* CheckAlways */ | 64 /* Dirty */)) {\n        syncViewWithBlueprint(hostView);\n        checkView(hostView, hostView[CONTEXT]);\n    }\n}\n/**\n * Syncs an LView instance with its blueprint if they have gotten out of sync.\n *\n * Typically, blueprints and their view instances should always be in sync, so the loop here\n * will be skipped. However, consider this case of two components side-by-side:\n *\n * App template:\n * ```\n * <comp></comp>\n * <comp></comp>\n * ```\n *\n * The following will happen:\n * 1. App template begins processing.\n * 2. First <comp> is matched as a component and its LView is created.\n * 3. Second <comp> is matched as a component and its LView is created.\n * 4. App template completes processing, so it's time to check child templates.\n * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.\n * 6. Second <comp> template is checked. Its blueprint has been updated by the first\n * <comp> template, but its LView was created before this update, so it is out of sync.\n *\n * Note that embedded views inside ngFor loops will never be out of sync because these views\n * are processed as soon as they are created.\n *\n * @param {?} componentView The view to sync\n * @return {?}\n */\nfunction syncViewWithBlueprint(componentView) {\n    /** @type {?} */\n    const componentTView = componentView[TVIEW];\n    for (let i = componentView.length; i < componentTView.blueprint.length; i++) {\n        componentView[i] = componentTView.blueprint[i];\n    }\n}\n/**\n * Adds LView or LContainer to the end of the current view tree.\n *\n * This structure will be used to traverse through nested views to remove listeners\n * and call onDestroy callbacks.\n *\n * @template T\n * @param {?} lView The view where LView or LContainer should be added\n * @param {?} lViewOrLContainer The LView or LContainer to add to the view tree\n * @return {?} The state passed in\n */\nfunction addToViewTree(lView, lViewOrLContainer) {\n    // TODO(benlesh/misko): This implementation is incorrect, because it always adds the LContainer to\n    // the end of the queue, which means if the developer retrieves the LContainers from RNodes out of\n    // order, the change detection will run out of order, as the act of retrieving the the LContainer\n    // from the RNode is what adds it to the queue.\n    if (lView[CHILD_HEAD]) {\n        (/** @type {?} */ (lView[CHILD_TAIL]))[NEXT] = lViewOrLContainer;\n    }\n    else {\n        lView[CHILD_HEAD] = lViewOrLContainer;\n    }\n    lView[CHILD_TAIL] = lViewOrLContainer;\n    return lViewOrLContainer;\n}\n///////////////////////////////\n//// Change detection\n///////////////////////////////\n/**\n * Marks current view and all ancestors dirty.\n *\n * Returns the root view because it is found as a byproduct of marking the view tree\n * dirty, and can be used by methods that consume markViewDirty() to easily schedule\n * change detection. Otherwise, such methods would need to traverse up the view tree\n * an additional time to get the root view and schedule a tick on it.\n *\n * @param {?} lView The starting LView to mark dirty\n * @return {?} the root LView\n */\nfunction markViewDirty(lView) {\n    while (lView) {\n        lView[FLAGS] |= 64 /* Dirty */;\n        /** @type {?} */\n        const parent = getLViewParent(lView);\n        // Stop traversing up as soon as you find a root view that wasn't attached to any container\n        if (isRootView(lView) && !parent) {\n            return lView;\n        }\n        // continue otherwise\n        lView = (/** @type {?} */ (parent));\n    }\n    return null;\n}\n/**\n * Used to schedule change detection on the whole application.\n *\n * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.\n * It is usually called indirectly by calling `markDirty` when the view needs to be\n * re-rendered.\n *\n * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple\n * `scheduleTick` requests. The scheduling function can be overridden in\n * `renderComponent`'s `scheduler` option.\n * @param {?} rootContext\n * @param {?} flags\n * @return {?}\n */\nfunction scheduleTick(rootContext, flags) {\n    /** @type {?} */\n    const nothingScheduled = rootContext.flags === 0 /* Empty */;\n    rootContext.flags |= flags;\n    if (nothingScheduled && rootContext.clean == _CLEAN_PROMISE) {\n        /** @type {?} */\n        let res;\n        rootContext.clean = new Promise((/**\n         * @param {?} r\n         * @return {?}\n         */\n        (r) => res = r));\n        rootContext.scheduler((/**\n         * @return {?}\n         */\n        () => {\n            if (rootContext.flags & 1 /* DetectChanges */) {\n                rootContext.flags &= ~1 /* DetectChanges */;\n                tickRootContext(rootContext);\n            }\n            if (rootContext.flags & 2 /* FlushPlayers */) {\n                rootContext.flags &= ~2 /* FlushPlayers */;\n                /** @type {?} */\n                const playerHandler = rootContext.playerHandler;\n                if (playerHandler) {\n                    playerHandler.flushPlayers();\n                }\n            }\n            rootContext.clean = _CLEAN_PROMISE;\n            (/** @type {?} */ (res))(null);\n        }));\n    }\n}\n/**\n * @param {?} rootContext\n * @return {?}\n */\nfunction tickRootContext(rootContext) {\n    for (let i = 0; i < rootContext.components.length; i++) {\n        /** @type {?} */\n        const rootComponent = rootContext.components[i];\n        renderComponentOrTemplate((/** @type {?} */ (readPatchedLView(rootComponent))), rootComponent);\n    }\n}\n/**\n * @template T\n * @param {?} view\n * @param {?} context\n * @return {?}\n */\nfunction detectChangesInternal(view, context) {\n    /** @type {?} */\n    const rendererFactory = view[RENDERER_FACTORY];\n    if (rendererFactory.begin)\n        rendererFactory.begin();\n    try {\n        if (isCreationMode(view)) {\n            checkView(view, context); // creation mode pass\n        }\n        checkView(view, context); // update mode pass\n    }\n    catch (error) {\n        handleError(view, error);\n        throw error;\n    }\n    finally {\n        if (rendererFactory.end)\n            rendererFactory.end();\n    }\n}\n/**\n * Synchronously perform change detection on a root view and its components.\n *\n * @param {?} lView The view which the change detection should be performed on.\n * @return {?}\n */\nfunction detectChangesInRootView(lView) {\n    tickRootContext((/** @type {?} */ (lView[CONTEXT])));\n}\n/**\n * @template T\n * @param {?} view\n * @param {?} context\n * @return {?}\n */\nfunction checkNoChangesInternal(view, context) {\n    setCheckNoChangesMode(true);\n    try {\n        detectChangesInternal(view, context);\n    }\n    finally {\n        setCheckNoChangesMode(false);\n    }\n}\n/**\n * Checks the change detector on a root view and its components, and throws if any changes are\n * detected.\n *\n * This is used in development mode to verify that running change detection doesn't\n * introduce other changes.\n *\n * @param {?} lView The view which the change detection should be checked on.\n * @return {?}\n */\nfunction checkNoChangesInRootView(lView) {\n    setCheckNoChangesMode(true);\n    try {\n        detectChangesInRootView(lView);\n    }\n    finally {\n        setCheckNoChangesMode(false);\n    }\n}\n/**\n * Checks the view of the component provided. Does not gate on dirty checks or execute doCheck.\n * @template T\n * @param {?} hostView\n * @param {?} component\n * @return {?}\n */\nfunction checkView(hostView, component) {\n    /** @type {?} */\n    const hostTView = hostView[TVIEW];\n    /** @type {?} */\n    const oldView = enterView(hostView, hostView[T_HOST]);\n    /** @type {?} */\n    const templateFn = (/** @type {?} */ (hostTView.template));\n    /** @type {?} */\n    const creationMode = isCreationMode(hostView);\n    try {\n        resetPreOrderHookFlags(hostView);\n        creationMode && executeViewQueryFn(1 /* Create */, hostTView, component);\n        executeTemplate(templateFn, getRenderFlags(hostView), component);\n        refreshDescendantViews(hostView);\n        // Only check view queries again in creation mode if there are static view queries\n        if (!creationMode || hostTView.staticViewQueries) {\n            executeViewQueryFn(2 /* Update */, hostTView, component);\n        }\n    }\n    finally {\n        leaveView(oldView);\n    }\n}\n/**\n * @template T\n * @param {?} flags\n * @param {?} tView\n * @param {?} component\n * @return {?}\n */\nfunction executeViewQueryFn(flags, tView, component) {\n    /** @type {?} */\n    const viewQuery = tView.viewQuery;\n    if (viewQuery) {\n        setCurrentQueryIndex(tView.viewQueryStartIndex);\n        viewQuery(flags, component);\n    }\n}\n///////////////////////////////\n//// Bindings & interpolations\n///////////////////////////////\n/**\n * Creates binding metadata for a particular binding and stores it in\n * TView.data. These are generated in order to support DebugElement.properties.\n *\n * Each binding / interpolation will have one (including attribute bindings)\n * because at the time of binding, we don't know to which instruction the binding\n * belongs. It is always stored in TView.data at the index of the last binding\n * value in LView (e.g. for interpolation8, it would be stored at the index of\n * the 8th value).\n *\n * @param {?} lView The LView that contains the current binding index.\n * @param {?=} prefix The static prefix string\n * @param {?=} suffix The static suffix string\n *\n * @return {?} Newly created binding metadata string for this binding or null\n */\nfunction storeBindingMetadata(lView, prefix = '', suffix = '') {\n    /** @type {?} */\n    const tData = lView[TVIEW].data;\n    /** @type {?} */\n    const lastBindingIndex = lView[BINDING_INDEX] - 1;\n    /** @type {?} */\n    const value = INTERPOLATION_DELIMITER + prefix + INTERPOLATION_DELIMITER + suffix;\n    return tData[lastBindingIndex] == null ? (tData[lastBindingIndex] = value) : null;\n}\n/** @type {?} */\nconst CLEAN_PROMISE = _CLEAN_PROMISE;\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction initializeTNodeInputs(tNode) {\n    // If tNode.inputs is undefined, a listener has created outputs, but inputs haven't\n    // yet been checked.\n    if (tNode) {\n        if (tNode.inputs === undefined) {\n            // mark inputs as checked\n            tNode.inputs = generatePropertyAliases(tNode, 0 /* Input */);\n        }\n        return tNode.inputs;\n    }\n    return null;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction getCleanup(view) {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return view[CLEANUP] || (view[CLEANUP] = []);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction getTViewCleanup(view) {\n    return view[TVIEW].cleanup || (view[TVIEW].cleanup = []);\n}\n/**\n * There are cases where the sub component's renderer needs to be included\n * instead of the current renderer (see the componentSyntheticHost* instructions).\n * @param {?} tNode\n * @param {?} lView\n * @return {?}\n */\nfunction loadComponentRenderer(tNode, lView) {\n    /** @type {?} */\n    const componentLView = (/** @type {?} */ (lView[tNode.index]));\n    return componentLView[RENDERER];\n}\n/**\n * Handles an error thrown in an LView.\n * @param {?} lView\n * @param {?} error\n * @return {?}\n */\nfunction handleError(lView, error) {\n    /** @type {?} */\n    const injector = lView[INJECTOR$1];\n    /** @type {?} */\n    const errorHandler = injector ? injector.get(ErrorHandler, null) : null;\n    errorHandler && errorHandler.handleError(error);\n}\n/**\n * Set the inputs of directives at the current node to corresponding value.\n *\n * @param {?} lView the `LView` which contains the directives.\n * @param {?} inputs mapping between the public \"input\" name and privately-known,\n * possibly minified, property names to write to.\n * @param {?} value Value to set.\n * @return {?}\n */\nfunction setInputsForProperty(lView, inputs, value) {\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    for (let i = 0; i < inputs.length;) {\n        /** @type {?} */\n        const index = (/** @type {?} */ (inputs[i++]));\n        /** @type {?} */\n        const publicName = (/** @type {?} */ (inputs[i++]));\n        /** @type {?} */\n        const privateName = (/** @type {?} */ (inputs[i++]));\n        /** @type {?} */\n        const instance = lView[index];\n        ngDevMode && assertDataInRange(lView, index);\n        /** @type {?} */\n        const def = (/** @type {?} */ (tView.data[index]));\n        /** @type {?} */\n        const setInput = def.setInput;\n        if (setInput) {\n            (/** @type {?} */ (def.setInput))(instance, value, publicName, privateName);\n        }\n        else {\n            instance[privateName] = value;\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction applyOnCreateInstructions(tNode) {\n    // there may be some instructions that need to run in a specific\n    // order because the CREATE block in a directive runs before the\n    // CREATE block in a template. To work around this instructions\n    // can get access to the function array below and defer any code\n    // to run after the element is created.\n    /** @type {?} */\n    let fns;\n    if (fns = tNode.onElementCreationFns) {\n        for (let i = 0; i < fns.length; i++) {\n            fns[i]();\n        }\n        tNode.onElementCreationFns = null;\n    }\n}\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the TNode of the parent injector is found.\n *\n * @param {?} location The location of the parent injector, which contains the view offset\n * @param {?} startView The LView instance from which to start walking up the view tree\n * @param {?} startTNode The TNode instance of the starting element\n * @return {?} The TNode of the parent injector\n */\nfunction getParentInjectorTNode(location, startView, startTNode) {\n    if (startTNode.parent && startTNode.parent.injectorIndex !== -1) {\n        // view offset is 0\n        /** @type {?} */\n        const injectorIndex = startTNode.parent.injectorIndex;\n        /** @type {?} */\n        let parentTNode = startTNode.parent;\n        while (parentTNode.parent != null && injectorIndex == parentTNode.injectorIndex) {\n            parentTNode = parentTNode.parent;\n        }\n        return parentTNode;\n    }\n    /** @type {?} */\n    let viewOffset = getParentInjectorViewOffset(location);\n    // view offset is 1\n    /** @type {?} */\n    let parentView = startView;\n    /** @type {?} */\n    let parentTNode = (/** @type {?} */ (startView[T_HOST]));\n    // view offset is superior to 1\n    while (viewOffset > 1) {\n        parentView = (/** @type {?} */ (parentView[DECLARATION_VIEW]));\n        parentTNode = (/** @type {?} */ (parentView[T_HOST]));\n        viewOffset--;\n    }\n    return parentTNode;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Allocates the necessary amount of slots for host vars.\n *\n * \\@codeGenApi\n * @param {?} count Amount of vars to be allocated\n *\n * @return {?}\n */\nfunction ɵɵallocHostVars(count) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    if (!tView.firstTemplatePass)\n        return;\n    queueHostBindingForCheck(tView, (/** @type {?} */ (getCurrentDirectiveDef())), count);\n    prefillHostVars(tView, lView, count);\n}\n/**\n * Stores host binding fn and number of host vars so it will be queued for binding refresh during\n * CD.\n * @param {?} tView\n * @param {?} def\n * @param {?} hostVars\n * @return {?}\n */\nfunction queueHostBindingForCheck(tView, def, hostVars) {\n    ngDevMode &&\n        assertEqual(tView.firstTemplatePass, true, 'Should only be called in first template pass.');\n    /** @type {?} */\n    const expando = (/** @type {?} */ (tView.expandoInstructions));\n    /** @type {?} */\n    const length = expando.length;\n    // Check whether a given `hostBindings` function already exists in expandoInstructions,\n    // which can happen in case directive definition was extended from base definition (as a part of\n    // the `InheritDefinitionFeature` logic). If we found the same `hostBindings` function in the\n    // list, we just increase the number of host vars associated with that function, but do not add it\n    // into the list again.\n    if (length >= 2 && expando[length - 2] === def.hostBindings) {\n        expando[length - 1] = ((/** @type {?} */ (expando[length - 1]))) + hostVars;\n    }\n    else {\n        expando.push((/** @type {?} */ (def.hostBindings)), hostVars);\n    }\n}\n/**\n * On the first template pass, we need to reserve space for host binding values\n * after directives are matched (so all directives are saved, then bindings).\n * Because we are updating the blueprint, we only need to do this once.\n * @param {?} tView\n * @param {?} lView\n * @param {?} totalHostVars\n * @return {?}\n */\nfunction prefillHostVars(tView, lView, totalHostVars) {\n    ngDevMode &&\n        assertEqual(tView.firstTemplatePass, true, 'Should only be called in first template pass.');\n    for (let i = 0; i < totalHostVars; i++) {\n        lView.push(NO_CHANGE);\n        tView.blueprint.push(NO_CHANGE);\n        tView.data.push(null);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Synchronously perform change detection on a component (and possibly its sub-components).\n *\n * This function triggers change detection in a synchronous way on a component. There should\n * be very little reason to call this function directly since a preferred way to do change\n * detection is to {\\@link markDirty} the component and wait for the scheduler to call this method\n * at some future point in time. This is because a single user action often results in many\n * components being invalidated and calling change detection on each component synchronously\n * would be inefficient. It is better to wait until all components are marked as dirty and\n * then perform single change detection across all of the components\n *\n * @template T\n * @param {?} component The component which the change detection should be performed on.\n * @return {?}\n */\nfunction detectChanges(component) {\n    /** @type {?} */\n    const view = getComponentViewByInstance(component);\n    detectChangesInternal(view, component);\n}\n/**\n * Mark the component as dirty (needing change detection).\n *\n * Marking a component dirty will schedule a change detection on this\n * component at some point in the future. Marking an already dirty\n * component as dirty is a noop. Only one outstanding change detection\n * can be scheduled per component tree. (Two components bootstrapped with\n * separate `renderComponent` will have separate schedulers)\n *\n * When the root component is bootstrapped with `renderComponent`, a scheduler\n * can be provided.\n *\n * \\@publicApi\n * @template T\n * @param {?} component Component to mark as dirty.\n *\n * @return {?}\n */\nfunction markDirty(component) {\n    ngDevMode && assertDefined(component, 'component');\n    /** @type {?} */\n    const rootView = (/** @type {?} */ (markViewDirty(getComponentViewByInstance(component))));\n    ngDevMode && assertDefined(rootView[CONTEXT], 'rootContext should be defined');\n    scheduleTick((/** @type {?} */ (rootView[CONTEXT])), 1 /* DetectChanges */);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} tNode\n * @param {?} embeddedView\n * @return {?}\n */\nfunction getLContainer(tNode, embeddedView) {\n    ngDevMode && assertLView(embeddedView);\n    /** @type {?} */\n    const container = (/** @type {?} */ (embeddedView[PARENT]));\n    if (tNode.index === -1) {\n        // This is a dynamically created view inside a dynamic container.\n        // The parent isn't an LContainer if the embedded view hasn't been attached yet.\n        return isLContainer(container) ? container : null;\n    }\n    else {\n        ngDevMode && assertLContainer(container);\n        // This is a inline view node (e.g. embeddedViewStart)\n        return container;\n    }\n}\n/**\n * Retrieves render parent for a given view.\n * Might be null if a view is not yet attached to any container.\n * @param {?} tViewNode\n * @param {?} view\n * @return {?}\n */\nfunction getContainerRenderParent(tViewNode, view) {\n    /** @type {?} */\n    const container = getLContainer(tViewNode, view);\n    return container ? nativeParentNode(view[RENDERER], container[NATIVE]) : null;\n}\n/**\n * Stack used to keep track of projection nodes in walkTNodeTree.\n *\n * This is deliberately created outside of walkTNodeTree to avoid allocating\n * a new array each time the function is called. Instead the array will be\n * re-used by each invocation. This works because the function is not reentrant.\n * @type {?}\n */\nconst projectionNodeStack = [];\n/**\n * Walks a tree of TNodes, applying a transformation on the element nodes, either only on the first\n * one found, or on all of them.\n *\n * @param {?} viewToWalk the view to walk\n * @param {?} action identifies the action to be performed on the elements\n * @param {?} renderer the current renderer.\n * @param {?} renderParent Optional the render parent node to be set in all LContainers found,\n * required for action modes Insert and Destroy.\n * @param {?=} beforeNode Optional the node before which elements should be added, required for action\n * Insert.\n * @return {?}\n */\nfunction walkTNodeTree(viewToWalk, action, renderer, renderParent, beforeNode) {\n    /** @type {?} */\n    const rootTNode = (/** @type {?} */ (viewToWalk[TVIEW].node));\n    /** @type {?} */\n    let projectionNodeIndex = -1;\n    /** @type {?} */\n    let currentView = viewToWalk;\n    /** @type {?} */\n    let tNode = (/** @type {?} */ (rootTNode.child));\n    while (tNode) {\n        /** @type {?} */\n        let nextTNode = null;\n        if (tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */) {\n            executeNodeAction(action, renderer, renderParent, getNativeByTNode(tNode, currentView), tNode, beforeNode);\n            /** @type {?} */\n            const nodeOrContainer = currentView[tNode.index];\n            if (isLContainer(nodeOrContainer)) {\n                // This element has an LContainer, and its comment needs to be handled\n                executeNodeAction(action, renderer, renderParent, nodeOrContainer[NATIVE], tNode, beforeNode);\n                if (nodeOrContainer[VIEWS].length) {\n                    currentView = nodeOrContainer[VIEWS][0];\n                    nextTNode = currentView[TVIEW].node;\n                    // When the walker enters a container, then the beforeNode has to become the local native\n                    // comment node.\n                    beforeNode = nodeOrContainer[NATIVE];\n                }\n            }\n        }\n        else if (tNode.type === 0 /* Container */) {\n            /** @type {?} */\n            const lContainer = (/** @type {?} */ ((/** @type {?} */ (currentView))[tNode.index]));\n            executeNodeAction(action, renderer, renderParent, lContainer[NATIVE], tNode, beforeNode);\n            if (lContainer[VIEWS].length) {\n                currentView = lContainer[VIEWS][0];\n                nextTNode = currentView[TVIEW].node;\n                // When the walker enters a container, then the beforeNode has to become the local native\n                // comment node.\n                beforeNode = lContainer[NATIVE];\n            }\n        }\n        else if (tNode.type === 1 /* Projection */) {\n            /** @type {?} */\n            const componentView = findComponentView((/** @type {?} */ (currentView)));\n            /** @type {?} */\n            const componentHost = (/** @type {?} */ (componentView[T_HOST]));\n            /** @type {?} */\n            const head = ((/** @type {?} */ (componentHost.projection)))[(/** @type {?} */ (tNode.projection))];\n            if (Array.isArray(head)) {\n                for (let nativeNode of head) {\n                    executeNodeAction(action, renderer, renderParent, nativeNode, tNode, beforeNode);\n                }\n            }\n            else {\n                // Must store both the TNode and the view because this projection node could be nested\n                // deeply inside embedded views, and we need to get back down to this particular nested\n                // view.\n                projectionNodeStack[++projectionNodeIndex] = tNode;\n                projectionNodeStack[++projectionNodeIndex] = (/** @type {?} */ (currentView));\n                if (head) {\n                    currentView = (/** @type {?} */ ((/** @type {?} */ (componentView[PARENT]))));\n                    nextTNode = (/** @type {?} */ (currentView[TVIEW].data[head.index]));\n                }\n            }\n        }\n        else {\n            // Otherwise, this is a View\n            nextTNode = tNode.child;\n        }\n        if (nextTNode === null) {\n            // this last node was projected, we need to get back down to its projection node\n            if (tNode.projectionNext === null && (tNode.flags & 2 /* isProjected */)) {\n                currentView = (/** @type {?} */ (projectionNodeStack[projectionNodeIndex--]));\n                tNode = (/** @type {?} */ (projectionNodeStack[projectionNodeIndex--]));\n            }\n            if (tNode.flags & 2 /* isProjected */) {\n                nextTNode = tNode.projectionNext;\n            }\n            else if (tNode.type === 4 /* ElementContainer */) {\n                nextTNode = tNode.child || tNode.next;\n            }\n            else {\n                nextTNode = tNode.next;\n            }\n            /**\n             * Find the next node in the TNode tree, taking into account the place where a node is\n             * projected (in the shadow DOM) rather than where it comes from (in the light DOM).\n             *\n             * If there is no sibling node, then it goes to the next sibling of the parent node...\n             * until it reaches rootNode (at which point null is returned).\n             */\n            while (!nextTNode) {\n                // If parent is null, we're crossing the view boundary, so we should get the host TNode.\n                tNode = tNode.parent || currentView[T_HOST];\n                if (tNode === null || tNode === rootTNode)\n                    return;\n                // When exiting a container, the beforeNode must be restored to the previous value\n                if (tNode.type === 0 /* Container */) {\n                    currentView = (/** @type {?} */ (getLViewParent(currentView)));\n                    beforeNode = currentView[tNode.index][NATIVE];\n                }\n                if (tNode.type === 2 /* View */) {\n                    /**\n                     * If current lView doesn't have next pointer, we try to find it by going up parents\n                     * chain until:\n                     * - we find an lView with a next pointer\n                     * - or find a tNode with a parent that has a next pointer\n                     * - or find a lContainer\n                     * - or reach root TNode (in which case we exit, since we traversed all nodes)\n                     */\n                    while (!currentView[NEXT] && currentView[PARENT] &&\n                        !(tNode.parent && tNode.parent.next)) {\n                        if (tNode === rootTNode)\n                            return;\n                        currentView = (/** @type {?} */ (currentView[PARENT]));\n                        if (isLContainer(currentView)) {\n                            tNode = (/** @type {?} */ (currentView[T_HOST]));\n                            currentView = currentView[PARENT];\n                            beforeNode = currentView[tNode.index][NATIVE];\n                            break;\n                        }\n                        tNode = (/** @type {?} */ (currentView[T_HOST]));\n                    }\n                    if (currentView[NEXT]) {\n                        currentView = (/** @type {?} */ (currentView[NEXT]));\n                        nextTNode = currentView[T_HOST];\n                    }\n                    else {\n                        nextTNode = tNode.type === 4 /* ElementContainer */ && tNode.child || tNode.next;\n                    }\n                }\n                else {\n                    nextTNode = tNode.next;\n                }\n            }\n        }\n        tNode = nextTNode;\n    }\n}\n/**\n * NOTE: for performance reasons, the possible actions are inlined within the function instead of\n * being passed as an argument.\n * @param {?} action\n * @param {?} renderer\n * @param {?} parent\n * @param {?} node\n * @param {?} tNode\n * @param {?=} beforeNode\n * @return {?}\n */\nfunction executeNodeAction(action, renderer, parent, node, tNode, beforeNode) {\n    if (action === 0 /* Insert */) {\n        nativeInsertBefore(renderer, (/** @type {?} */ (parent)), node, beforeNode || null);\n    }\n    else if (action === 1 /* Detach */) {\n        nativeRemoveNode(renderer, node, isComponent(tNode));\n    }\n    else if (action === 2 /* Destroy */) {\n        ngDevMode && ngDevMode.rendererDestroyNode++;\n        (/** @type {?} */ (((/** @type {?} */ (renderer))).destroyNode))(node);\n    }\n}\n/**\n * @param {?} value\n * @param {?} renderer\n * @return {?}\n */\nfunction createTextNode(value, renderer) {\n    return isProceduralRenderer(renderer) ? renderer.createText(renderStringify(value)) :\n        renderer.createTextNode(renderStringify(value));\n}\n/**\n * @param {?} viewToWalk\n * @param {?} insertMode\n * @param {?=} beforeNode\n * @return {?}\n */\nfunction addRemoveViewFromContainer(viewToWalk, insertMode, beforeNode) {\n    /** @type {?} */\n    const renderParent = getContainerRenderParent((/** @type {?} */ (viewToWalk[TVIEW].node)), viewToWalk);\n    ngDevMode && assertNodeType((/** @type {?} */ (viewToWalk[TVIEW].node)), 2 /* View */);\n    if (renderParent) {\n        /** @type {?} */\n        const renderer = viewToWalk[RENDERER];\n        walkTNodeTree(viewToWalk, insertMode ? 0 /* Insert */ : 1 /* Detach */, renderer, renderParent, beforeNode);\n    }\n}\n/**\n * Detach a `LView` from the DOM by detaching its nodes.\n *\n * @param {?} lView the `LView` to be detached.\n * @return {?}\n */\nfunction renderDetachView(lView) {\n    walkTNodeTree(lView, 1 /* Detach */, lView[RENDERER], null);\n}\n/**\n * Traverses down and up the tree of views and containers to remove listeners and\n * call onDestroy callbacks.\n *\n * Notes:\n *  - Because it's used for onDestroy calls, it needs to be bottom-up.\n *  - Must process containers instead of their views to avoid splicing\n *  when views are destroyed and re-added.\n *  - Using a while loop because it's faster than recursion\n *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\n *\n * @param {?} rootView The view to destroy\n * @return {?}\n */\nfunction destroyViewTree(rootView) {\n    // If the view has no children, we can clean it up and return early.\n    /** @type {?} */\n    let lViewOrLContainer = rootView[CHILD_HEAD];\n    if (!lViewOrLContainer) {\n        return cleanUpView(rootView);\n    }\n    while (lViewOrLContainer) {\n        /** @type {?} */\n        let next = null;\n        if (isLView(lViewOrLContainer)) {\n            // If LView, traverse down to child.\n            next = lViewOrLContainer[CHILD_HEAD];\n        }\n        else {\n            ngDevMode && assertLContainer(lViewOrLContainer);\n            // If container, traverse down to its first LView.\n            /** @type {?} */\n            const views = (/** @type {?} */ (lViewOrLContainer[VIEWS]));\n            if (views.length > 0)\n                next = views[0];\n        }\n        if (!next) {\n            // Only clean up view when moving to the side or up, as destroy hooks\n            // should be called in order from the bottom up.\n            while (lViewOrLContainer && !(/** @type {?} */ (lViewOrLContainer))[NEXT] && lViewOrLContainer !== rootView) {\n                cleanUpView(lViewOrLContainer);\n                lViewOrLContainer = getParentState(lViewOrLContainer, rootView);\n            }\n            cleanUpView(lViewOrLContainer || rootView);\n            next = lViewOrLContainer && (/** @type {?} */ (lViewOrLContainer))[NEXT];\n        }\n        lViewOrLContainer = next;\n    }\n}\n/**\n * Inserts a view into a container.\n *\n * This adds the view to the container's array of active views in the correct\n * position. It also adds the view's elements to the DOM if the container isn't a\n * root node of another view (in that case, the view's elements will be added when\n * the container's parent view is added later).\n *\n * @param {?} lView The view to insert\n * @param {?} lContainer The container into which the view should be inserted\n * @param {?} index Which index in the container to insert the child view into\n * @return {?}\n */\nfunction insertView(lView, lContainer, index) {\n    ngDevMode && assertLView(lView);\n    ngDevMode && assertLContainer(lContainer);\n    /** @type {?} */\n    const views = lContainer[VIEWS];\n    ngDevMode && assertDefined(views, 'Container must have views');\n    if (index > 0) {\n        // This is a new view, we need to add it to the children.\n        views[index - 1][NEXT] = lView;\n    }\n    if (index < views.length) {\n        lView[NEXT] = views[index];\n        views.splice(index, 0, lView);\n    }\n    else {\n        views.push(lView);\n        lView[NEXT] = null;\n    }\n    lView[PARENT] = lContainer;\n    // Notify query that a new view has been added\n    if (lView[QUERIES]) {\n        (/** @type {?} */ (lView[QUERIES])).insertView(index);\n    }\n    // Sets the attached flag\n    lView[FLAGS] |= 128 /* Attached */;\n}\n/**\n * Detaches a view from a container.\n *\n * This method splices the view from the container's array of active views. It also\n * removes the view's elements from the DOM.\n *\n * @param {?} lContainer The container from which to detach a view\n * @param {?} removeIndex The index of the view to detach\n * @return {?} Detached LView instance.\n */\nfunction detachView(lContainer, removeIndex) {\n    /** @type {?} */\n    const views = lContainer[VIEWS];\n    /** @type {?} */\n    const viewToDetach = views[removeIndex];\n    if (viewToDetach) {\n        if (removeIndex > 0) {\n            views[removeIndex - 1][NEXT] = (/** @type {?} */ (viewToDetach[NEXT]));\n        }\n        views.splice(removeIndex, 1);\n        addRemoveViewFromContainer(viewToDetach, false);\n        if ((viewToDetach[FLAGS] & 128 /* Attached */) &&\n            !(viewToDetach[FLAGS] & 256 /* Destroyed */) && viewToDetach[QUERIES]) {\n            (/** @type {?} */ (viewToDetach[QUERIES])).removeView();\n        }\n        viewToDetach[PARENT] = null;\n        viewToDetach[NEXT] = null;\n        // Unsets the attached flag\n        viewToDetach[FLAGS] &= ~128 /* Attached */;\n    }\n    return viewToDetach;\n}\n/**\n * Removes a view from a container, i.e. detaches it and then destroys the underlying LView.\n *\n * @param {?} lContainer The container from which to remove a view\n * @param {?} removeIndex The index of the view to remove\n * @return {?}\n */\nfunction removeView(lContainer, removeIndex) {\n    /** @type {?} */\n    const view = lContainer[VIEWS][removeIndex];\n    if (view) {\n        detachView(lContainer, removeIndex);\n        destroyLView(view);\n    }\n}\n/**\n * A standalone function which destroys an LView,\n * conducting cleanup (e.g. removing listeners, calling onDestroys).\n *\n * @param {?} view The view to be destroyed.\n * @return {?}\n */\nfunction destroyLView(view) {\n    if (!(view[FLAGS] & 256 /* Destroyed */)) {\n        /** @type {?} */\n        const renderer = view[RENDERER];\n        if (isProceduralRenderer(renderer) && renderer.destroyNode) {\n            walkTNodeTree(view, 2 /* Destroy */, renderer, null);\n        }\n        destroyViewTree(view);\n    }\n}\n/**\n * Determines which LViewOrLContainer to jump to when traversing back up the\n * tree in destroyViewTree.\n *\n * Normally, the view's parent LView should be checked, but in the case of\n * embedded views, the container (which is the view node's parent, but not the\n * LView's parent) needs to be checked for a possible next property.\n *\n * @param {?} lViewOrLContainer The LViewOrLContainer for which we need a parent state\n * @param {?} rootView The rootView, so we don't propagate too far up the view tree\n * @return {?} The correct parent LViewOrLContainer\n */\nfunction getParentState(lViewOrLContainer, rootView) {\n    /** @type {?} */\n    let tNode;\n    if (isLView(lViewOrLContainer) && (tNode = lViewOrLContainer[T_HOST]) &&\n        tNode.type === 2 /* View */) {\n        // if it's an embedded view, the state needs to go up to the container, in case the\n        // container has a next\n        return getLContainer((/** @type {?} */ (tNode)), lViewOrLContainer);\n    }\n    else {\n        // otherwise, use parent view for containers or component views\n        return lViewOrLContainer[PARENT] === rootView ? null : lViewOrLContainer[PARENT];\n    }\n}\n/**\n * Calls onDestroys hooks for all directives and pipes in a given view and then removes all\n * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks\n * can be propagated to \\@Output listeners.\n *\n * @param {?} view The LView to clean up\n * @return {?}\n */\nfunction cleanUpView(view) {\n    if (isLView(view) && !(view[FLAGS] & 256 /* Destroyed */)) {\n        // Usually the Attached flag is removed when the view is detached from its parent, however\n        // if it's a root view, the flag won't be unset hence why we're also removing on destroy.\n        view[FLAGS] &= ~128 /* Attached */;\n        // Mark the LView as destroyed *before* executing the onDestroy hooks. An onDestroy hook\n        // runs arbitrary user code, which could include its own `viewRef.destroy()` (or similar). If\n        // We don't flag the view as destroyed before the hooks, this could lead to an infinite loop.\n        // This also aligns with the ViewEngine behavior. It also means that the onDestroy hook is\n        // really more of an \"afterDestroy\" hook if you think about it.\n        view[FLAGS] |= 256 /* Destroyed */;\n        executeOnDestroys(view);\n        removeListeners(view);\n        /** @type {?} */\n        const hostTNode = view[T_HOST];\n        // For component views only, the local renderer is destroyed as clean up time.\n        if (hostTNode && hostTNode.type === 3 /* Element */ && isProceduralRenderer(view[RENDERER])) {\n            ngDevMode && ngDevMode.rendererDestroy++;\n            ((/** @type {?} */ (view[RENDERER]))).destroy();\n        }\n        // For embedded views still attached to a container: remove query result from this view.\n        if (viewAttachedToContainer(view) && view[QUERIES]) {\n            (/** @type {?} */ (view[QUERIES])).removeView();\n        }\n    }\n}\n/**\n * Removes listeners and unsubscribes from output subscriptions\n * @param {?} lView\n * @return {?}\n */\nfunction removeListeners(lView) {\n    /** @type {?} */\n    const tCleanup = (/** @type {?} */ (lView[TVIEW].cleanup));\n    if (tCleanup != null) {\n        /** @type {?} */\n        const lCleanup = (/** @type {?} */ (lView[CLEANUP]));\n        for (let i = 0; i < tCleanup.length - 1; i += 2) {\n            if (typeof tCleanup[i] === 'string') {\n                // This is a native DOM listener\n                /** @type {?} */\n                const idxOrTargetGetter = tCleanup[i + 1];\n                /** @type {?} */\n                const target = typeof idxOrTargetGetter === 'function' ?\n                    idxOrTargetGetter(lView) :\n                    unwrapRNode(lView[idxOrTargetGetter]);\n                /** @type {?} */\n                const listener = lCleanup[tCleanup[i + 2]];\n                /** @type {?} */\n                const useCaptureOrSubIdx = tCleanup[i + 3];\n                if (typeof useCaptureOrSubIdx === 'boolean') {\n                    // native DOM listener registered with Renderer3\n                    target.removeEventListener(tCleanup[i], listener, useCaptureOrSubIdx);\n                }\n                else {\n                    if (useCaptureOrSubIdx >= 0) {\n                        // unregister\n                        lCleanup[useCaptureOrSubIdx]();\n                    }\n                    else {\n                        // Subscription\n                        lCleanup[-useCaptureOrSubIdx].unsubscribe();\n                    }\n                }\n                i += 2;\n            }\n            else {\n                // This is a cleanup function that is grouped with the index of its context\n                /** @type {?} */\n                const context = lCleanup[tCleanup[i + 1]];\n                tCleanup[i].call(context);\n            }\n        }\n        lView[CLEANUP] = null;\n    }\n}\n/**\n * Calls onDestroy hooks for this view\n * @param {?} view\n * @return {?}\n */\nfunction executeOnDestroys(view) {\n    /** @type {?} */\n    const tView = view[TVIEW];\n    /** @type {?} */\n    let destroyHooks;\n    if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\n        for (let i = 0; i < destroyHooks.length; i += 2) {\n            /** @type {?} */\n            const context = view[(/** @type {?} */ (destroyHooks[i]))];\n            // Only call the destroy hook if the context has been requested.\n            if (!(context instanceof NodeInjectorFactory)) {\n                ((/** @type {?} */ (destroyHooks[i + 1]))).call(context);\n            }\n        }\n    }\n}\n/**\n * Returns a native element if a node can be inserted into the given parent.\n *\n * There are two reasons why we may not be able to insert a element immediately.\n * - Projection: When creating a child content element of a component, we have to skip the\n *   insertion because the content of a component will be projected.\n *   `<component><content>delayed due to projection</content></component>`\n * - Parent container is disconnected: This can happen when we are inserting a view into\n *   parent container, which itself is disconnected. For example the parent container is part\n *   of a View which has not be inserted or is made for projection but has not been inserted\n *   into destination.\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nfunction getRenderParent(tNode, currentView) {\n    // Nodes of the top-most view can be inserted eagerly.\n    if (isRootView(currentView)) {\n        return nativeParentNode(currentView[RENDERER], getNativeByTNode(tNode, currentView));\n    }\n    // Skip over element and ICU containers as those are represented by a comment node and\n    // can't be used as a render parent.\n    /** @type {?} */\n    const parent = getHighestElementOrICUContainer(tNode).parent;\n    // If the parent is null, then we are inserting across views: either into an embedded view or a\n    // component view.\n    if (parent == null) {\n        /** @type {?} */\n        const hostTNode = (/** @type {?} */ (currentView[T_HOST]));\n        if (hostTNode.type === 2 /* View */) {\n            // We are inserting a root element of an embedded view We might delay insertion of children\n            // for a given view if it is disconnected. This might happen for 2 main reasons:\n            // - view is not inserted into any container(view was created but not inserted yet)\n            // - view is inserted into a container but the container itself is not inserted into the DOM\n            // (container might be part of projection or child of a view that is not inserted yet).\n            // In other words we can insert children of a given view if this view was inserted into a\n            // container and the container itself has its render parent determined.\n            return getContainerRenderParent((/** @type {?} */ (hostTNode)), currentView);\n        }\n        else {\n            // We are inserting a root element of the component view into the component host element and\n            // it should always be eager.\n            return getHostNative(currentView);\n        }\n    }\n    else {\n        ngDevMode && assertNodeType(parent, 3 /* Element */);\n        if (parent.flags & 1 /* isComponent */) {\n            /** @type {?} */\n            const tData = currentView[TVIEW].data;\n            /** @type {?} */\n            const tNode = (/** @type {?} */ (tData[parent.index]));\n            /** @type {?} */\n            const encapsulation = ((/** @type {?} */ (tData[tNode.directiveStart]))).encapsulation;\n            // We've got a parent which is an element in the current view. We just need to verify if the\n            // parent element is not a component. Component's content nodes are not inserted immediately\n            // because they will be projected, and so doing insert at this point would be wasteful.\n            // Since the projection would then move it to its final destination. Note that we can't\n            // make this assumption when using the Shadow DOM, because the native projection placeholders\n            // (<content> or <slot>) have to be in place as elements are being inserted.\n            if (encapsulation !== ViewEncapsulation.ShadowDom &&\n                encapsulation !== ViewEncapsulation.Native) {\n                return null;\n            }\n        }\n        return (/** @type {?} */ (getNativeByTNode(parent, currentView)));\n    }\n}\n/**\n * Gets the native host element for a given view. Will return null if the current view does not have\n * a host element.\n * @param {?} currentView\n * @return {?}\n */\nfunction getHostNative(currentView) {\n    ngDevMode && assertLView(currentView);\n    /** @type {?} */\n    const hostTNode = currentView[T_HOST];\n    return hostTNode && hostTNode.type === 3 /* Element */ ?\n        ((/** @type {?} */ (getNativeByTNode(hostTNode, (/** @type {?} */ (getLViewParent(currentView))))))) :\n        null;\n}\n/**\n * Inserts a native node before another native node for a given parent using {\\@link Renderer3}.\n * This is a utility function that can be used when native nodes were determined - it abstracts an\n * actual renderer being used.\n * @param {?} renderer\n * @param {?} parent\n * @param {?} child\n * @param {?} beforeNode\n * @return {?}\n */\nfunction nativeInsertBefore(renderer, parent, child, beforeNode) {\n    if (isProceduralRenderer(renderer)) {\n        renderer.insertBefore(parent, child, beforeNode);\n    }\n    else {\n        parent.insertBefore(child, beforeNode, true);\n    }\n}\n/**\n * @param {?} renderer\n * @param {?} parent\n * @param {?} child\n * @return {?}\n */\nfunction nativeAppendChild(renderer, parent, child) {\n    if (isProceduralRenderer(renderer)) {\n        renderer.appendChild(parent, child);\n    }\n    else {\n        parent.appendChild(child);\n    }\n}\n/**\n * @param {?} renderer\n * @param {?} parent\n * @param {?} child\n * @param {?} beforeNode\n * @return {?}\n */\nfunction nativeAppendOrInsertBefore(renderer, parent, child, beforeNode) {\n    if (beforeNode) {\n        nativeInsertBefore(renderer, parent, child, beforeNode);\n    }\n    else {\n        nativeAppendChild(renderer, parent, child);\n    }\n}\n/**\n * Removes a node from the DOM given its native parent.\n * @param {?} renderer\n * @param {?} parent\n * @param {?} child\n * @param {?=} isHostElement\n * @return {?}\n */\nfunction nativeRemoveChild(renderer, parent, child, isHostElement) {\n    if (isProceduralRenderer(renderer)) {\n        renderer.removeChild(parent, child, isHostElement);\n    }\n    else {\n        parent.removeChild(child);\n    }\n}\n/**\n * Returns a native parent of a given native node.\n * @param {?} renderer\n * @param {?} node\n * @return {?}\n */\nfunction nativeParentNode(renderer, node) {\n    return (/** @type {?} */ ((isProceduralRenderer(renderer) ? renderer.parentNode(node) : node.parentNode)));\n}\n/**\n * Returns a native sibling of a given native node.\n * @param {?} renderer\n * @param {?} node\n * @return {?}\n */\nfunction nativeNextSibling(renderer, node) {\n    return isProceduralRenderer(renderer) ? renderer.nextSibling(node) : node.nextSibling;\n}\n/**\n * Finds a native \"anchor\" node for cases where we can't append a native child directly\n * (`appendChild`) and need to use a reference (anchor) node for the `insertBefore` operation.\n * @param {?} parentTNode\n * @param {?} lView\n * @return {?}\n */\nfunction getNativeAnchorNode(parentTNode, lView) {\n    if (parentTNode.type === 2 /* View */) {\n        /** @type {?} */\n        const lContainer = (/** @type {?} */ (getLContainer((/** @type {?} */ (parentTNode)), lView)));\n        /** @type {?} */\n        const views = lContainer[VIEWS];\n        /** @type {?} */\n        const index = views.indexOf(lView);\n        return getBeforeNodeForView(index, views, lContainer[NATIVE]);\n    }\n    else if (parentTNode.type === 4 /* ElementContainer */ ||\n        parentTNode.type === 5 /* IcuContainer */) {\n        return getNativeByTNode(parentTNode, lView);\n    }\n    return null;\n}\n/**\n * Appends the `child` native node (or a collection of nodes) to the `parent`.\n *\n * The element insertion might be delayed {\\@link canInsertNativeNode}.\n *\n * @param {?} childEl The native child (or children) that should be appended\n * @param {?} childTNode The TNode of the child element\n * @param {?} currentView The current LView\n * @return {?} Whether or not the child was appended\n */\nfunction appendChild(childEl, childTNode, currentView) {\n    /** @type {?} */\n    const renderParent = getRenderParent(childTNode, currentView);\n    if (renderParent != null) {\n        /** @type {?} */\n        const renderer = currentView[RENDERER];\n        /** @type {?} */\n        const parentTNode = childTNode.parent || (/** @type {?} */ (currentView[T_HOST]));\n        /** @type {?} */\n        const anchorNode = getNativeAnchorNode(parentTNode, currentView);\n        if (Array.isArray(childEl)) {\n            for (let nativeNode of childEl) {\n                nativeAppendOrInsertBefore(renderer, renderParent, nativeNode, anchorNode);\n            }\n        }\n        else {\n            nativeAppendOrInsertBefore(renderer, renderParent, childEl, anchorNode);\n        }\n    }\n}\n/**\n * Gets the top-level element or an ICU container if those containers are nested.\n *\n * @param {?} tNode The starting TNode for which we should skip element and ICU containers\n * @return {?} The TNode of the highest level ICU container or element container\n */\nfunction getHighestElementOrICUContainer(tNode) {\n    while (tNode.parent != null && (tNode.parent.type === 4 /* ElementContainer */ ||\n        tNode.parent.type === 5 /* IcuContainer */)) {\n        tNode = tNode.parent;\n    }\n    return tNode;\n}\n/**\n * @param {?} index\n * @param {?} views\n * @param {?} containerNative\n * @return {?}\n */\nfunction getBeforeNodeForView(index, views, containerNative) {\n    if (index + 1 < views.length) {\n        /** @type {?} */\n        const view = (/** @type {?} */ (views[index + 1]));\n        /** @type {?} */\n        const viewTNode = (/** @type {?} */ (view[T_HOST]));\n        return viewTNode.child ? getNativeByTNode(viewTNode.child, view) : containerNative;\n    }\n    else {\n        return containerNative;\n    }\n}\n/**\n * Removes a native node itself using a given renderer. To remove the node we are looking up its\n * parent from the native tree as not all platforms / browsers support the equivalent of\n * node.remove().\n *\n * @param {?} renderer A renderer to be used\n * @param {?} rNode The native node that should be removed\n * @param {?=} isHostElement A flag indicating if a node to be removed is a host of a component.\n * @return {?}\n */\nfunction nativeRemoveNode(renderer, rNode, isHostElement) {\n    /** @type {?} */\n    const nativeParent = nativeParentNode(renderer, rNode);\n    if (nativeParent) {\n        nativeRemoveChild(renderer, nativeParent, rNode, isHostElement);\n    }\n}\n/**\n * Appends nodes to a target projection place. Nodes to insert were previously re-distribution and\n * stored on a component host level.\n * @param {?} lView A LView where nodes are inserted (target VLview)\n * @param {?} tProjectionNode A projection node where previously re-distribution should be appended\n * (target insertion place)\n * @param {?} selectorIndex A bucket from where nodes to project should be taken\n * @param {?} componentView A where projectable nodes were initially created (source view)\n * @return {?}\n */\nfunction appendProjectedNodes(lView, tProjectionNode, selectorIndex, componentView) {\n    /** @type {?} */\n    const projectedView = (/** @type {?} */ ((/** @type {?} */ (componentView[PARENT]))));\n    /** @type {?} */\n    const componentNode = (/** @type {?} */ (componentView[T_HOST]));\n    /** @type {?} */\n    let nodeToProject = ((/** @type {?} */ (componentNode.projection)))[selectorIndex];\n    if (Array.isArray(nodeToProject)) {\n        appendChild(nodeToProject, tProjectionNode, lView);\n    }\n    else {\n        while (nodeToProject) {\n            if (nodeToProject.type === 1 /* Projection */) {\n                appendProjectedNodes(lView, tProjectionNode, ((/** @type {?} */ (nodeToProject))).projection, findComponentView(projectedView));\n            }\n            else {\n                // This flag must be set now or we won't know that this node is projected\n                // if the nodes are inserted into a container later.\n                nodeToProject.flags |= 2 /* isProjected */;\n                appendProjectedNode(nodeToProject, tProjectionNode, lView, projectedView);\n            }\n            nodeToProject = nodeToProject.projectionNext;\n        }\n    }\n}\n/**\n * Appends a projected node to the DOM, or in the case of a projected container,\n * appends the nodes from all of the container's active views to the DOM.\n *\n * @param {?} projectedTNode The TNode to be projected\n * @param {?} tProjectionNode The projection (ng-content) TNode\n * @param {?} currentView Current LView\n * @param {?} projectionView Projection view (view above current)\n * @return {?}\n */\nfunction appendProjectedNode(projectedTNode, tProjectionNode, currentView, projectionView) {\n    /** @type {?} */\n    const native = getNativeByTNode(projectedTNode, projectionView);\n    appendChild(native, tProjectionNode, currentView);\n    // the projected contents are processed while in the shadow view (which is the currentView)\n    // therefore we need to extract the view where the host element lives since it's the\n    // logical container of the content projected views\n    attachPatchData(native, projectionView);\n    /** @type {?} */\n    const nodeOrContainer = projectionView[projectedTNode.index];\n    if (projectedTNode.type === 0 /* Container */) {\n        // The node we are adding is a container and we are adding it to an element which\n        // is not a component (no more re-projection).\n        // Alternatively a container is projected at the root of a component's template\n        // and can't be re-projected (as not content of any component).\n        // Assign the final projection location in those cases.\n        /** @type {?} */\n        const views = nodeOrContainer[VIEWS];\n        for (let i = 0; i < views.length; i++) {\n            addRemoveViewFromContainer(views[i], true, nodeOrContainer[NATIVE]);\n        }\n    }\n    else {\n        if (projectedTNode.type === 4 /* ElementContainer */) {\n            /** @type {?} */\n            let ngContainerChildTNode = (/** @type {?} */ (projectedTNode.child));\n            while (ngContainerChildTNode) {\n                appendProjectedNode(ngContainerChildTNode, tProjectionNode, currentView, projectionView);\n                ngContainerChildTNode = ngContainerChildTNode.next;\n            }\n        }\n        if (isLContainer(nodeOrContainer)) {\n            appendChild(nodeOrContainer[NATIVE], tProjectionNode, currentView);\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Creates an LContainer for inline views, e.g.\n *\n * % if (showing) {\n *   <div></div>\n * % }\n *\n * \\@codeGenApi\n * @param {?} index The index of the container in the data array\n *\n * @return {?}\n */\nfunction ɵɵcontainer(index) {\n    /** @type {?} */\n    const tNode = containerInternal(index, null, null);\n    /** @type {?} */\n    const lView = getLView();\n    if (lView[TVIEW].firstTemplatePass) {\n        tNode.tViews = [];\n    }\n    addTContainerToQueries(lView, tNode);\n    setIsParent(false);\n}\n/**\n * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\n *\n * <ng-template #foo>\n *    <div></div>\n * </ng-template>\n *\n * \\@codeGenApi\n * @param {?} index The index of the container in the data array\n * @param {?} templateFn Inline template\n * @param {?} consts The number of nodes, local refs, and pipes for this template\n * @param {?} vars The number of bindings for this template\n * @param {?=} tagName The name of the container element, if applicable\n * @param {?=} attrs The attrs attached to the container, if applicable\n * @param {?=} localRefs A set of local reference bindings on the element.\n * @param {?=} localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n *\n * @return {?}\n */\nfunction ɵɵtemplate(index, templateFn, consts, vars, tagName, attrs, localRefs, localRefExtractor) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    // TODO: consider a separate node type for templates\n    /** @type {?} */\n    const tContainerNode = containerInternal(index, tagName || null, attrs || null);\n    if (tView.firstTemplatePass) {\n        tContainerNode.tViews = createTView(-1, templateFn, consts, vars, tView.directiveRegistry, tView.pipeRegistry, null, null);\n    }\n    createDirectivesAndLocals(tView, lView, localRefs, localRefExtractor);\n    addTContainerToQueries(lView, tContainerNode);\n    attachPatchData(getNativeByTNode(tContainerNode, lView), lView);\n    registerPostOrderHooks(tView, tContainerNode);\n    setIsParent(false);\n}\n/**\n * Sets a container up to receive views.\n *\n * \\@codeGenApi\n * @param {?} index The index of the container in the data array\n *\n * @return {?}\n */\nfunction ɵɵcontainerRefreshStart(index) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    let previousOrParentTNode = (/** @type {?} */ (loadInternal(tView.data, index)));\n    setPreviousOrParentTNode(previousOrParentTNode);\n    ngDevMode && assertNodeType(previousOrParentTNode, 0 /* Container */);\n    setIsParent(true);\n    lView[index + HEADER_OFFSET][ACTIVE_INDEX] = 0;\n    // We need to execute init hooks here so ngOnInit hooks are called in top level views\n    // before they are called in embedded views (for backwards compatibility).\n    executePreOrderHooks(lView, tView, getCheckNoChangesMode(), undefined);\n}\n/**\n * Marks the end of the LContainer.\n *\n * Marking the end of LContainer is the time when to child views get inserted or removed.\n *\n * \\@codeGenApi\n * @return {?}\n */\nfunction ɵɵcontainerRefreshEnd() {\n    /** @type {?} */\n    let previousOrParentTNode = getPreviousOrParentTNode();\n    if (getIsParent()) {\n        setIsParent(false);\n    }\n    else {\n        ngDevMode && assertNodeType(previousOrParentTNode, 2 /* View */);\n        ngDevMode && assertHasParent(previousOrParentTNode);\n        previousOrParentTNode = (/** @type {?} */ (previousOrParentTNode.parent));\n        setPreviousOrParentTNode(previousOrParentTNode);\n    }\n    ngDevMode && assertNodeType(previousOrParentTNode, 0 /* Container */);\n    /** @type {?} */\n    const lContainer = getLView()[previousOrParentTNode.index];\n    /** @type {?} */\n    const nextIndex = lContainer[ACTIVE_INDEX];\n    // remove extra views at the end of the container\n    while (nextIndex < lContainer[VIEWS].length) {\n        removeView(lContainer, nextIndex);\n    }\n}\n/**\n * Reporting a TContainer node queries is a 2-step process as we need to:\n * - check if the container node itself is matching (query might match a <ng-template> node);\n * - prepare room for nodes from views that might be created based on the TemplateRef linked to this\n * container.\n *\n * Those 2 operations need to happen in the specific order (match the container node itself, then\n * prepare space for nodes from views).\n * @param {?} lView\n * @param {?} tContainerNode\n * @return {?}\n */\nfunction addTContainerToQueries(lView, tContainerNode) {\n    /** @type {?} */\n    const queries = lView[QUERIES];\n    if (queries) {\n        /** @type {?} */\n        const lContainer = lView[tContainerNode.index];\n        if (lContainer[QUERIES]) {\n            // Query container should only exist if it was created through a dynamic view\n            // in a directive constructor. In this case, we must splice the template\n            // matches in before the view matches to ensure query results in embedded views\n            // don't clobber query results on the template node itself.\n            queries.insertNodeBeforeViews(tContainerNode);\n        }\n        else {\n            queries.addNode(tContainerNode);\n            lContainer[QUERIES] = queries.container();\n        }\n    }\n}\n/**\n * @param {?} index\n * @param {?} tagName\n * @param {?} attrs\n * @return {?}\n */\nfunction containerInternal(index, tagName, attrs) {\n    /** @type {?} */\n    const lView = getLView();\n    ngDevMode && assertEqual(lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex, 'container nodes should be created before any bindings');\n    /** @type {?} */\n    const adjustedIndex = index + HEADER_OFFSET;\n    /** @type {?} */\n    const comment = lView[RENDERER].createComment(ngDevMode ? 'container' : '');\n    ngDevMode && ngDevMode.rendererCreateComment++;\n    /** @type {?} */\n    const tNode = createNodeAtIndex(index, 0 /* Container */, comment, tagName, attrs);\n    /** @type {?} */\n    const lContainer = lView[adjustedIndex] =\n        createLContainer(lView[adjustedIndex], lView, comment, tNode);\n    appendChild(comment, tNode, lView);\n    // Containers are added to the current view tree instead of their embedded views\n    // because views can be removed and re-inserted.\n    addToViewTree(lView, lContainer);\n    ngDevMode && assertNodeType(getPreviousOrParentTNode(), 0 /* Container */);\n    return tNode;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Store a value in the `data` at a given `index`.\n * @template T\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nfunction store(index, value) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    // We don't store any static data for local variables, so the first time\n    // we see the template, we should store as null to avoid a sparse array\n    /** @type {?} */\n    const adjustedIndex = index + HEADER_OFFSET;\n    if (adjustedIndex >= tView.data.length) {\n        tView.data[adjustedIndex] = null;\n        tView.blueprint[adjustedIndex] = null;\n    }\n    lView[adjustedIndex] = value;\n}\n/**\n * Retrieves a local reference from the current contextViewData.\n *\n * If the reference to retrieve is in a parent view, this instruction is used in conjunction\n * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\n *\n * \\@codeGenApi\n * @template T\n * @param {?} index The index of the local ref in contextViewData.\n *\n * @return {?}\n */\nfunction ɵɵreference(index) {\n    /** @type {?} */\n    const contextLView = getContextLView();\n    return loadInternal(contextLView, index);\n}\n/**\n * Retrieves a value from current `viewData`.\n *\n * \\@codeGenApi\n * @template T\n * @param {?} index\n * @return {?}\n */\nfunction ɵɵload(index) {\n    return loadInternal(getLView(), index);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?} token\n * @param {?=} flags\n * @return {?}\n */\nfunction ɵɵdirectiveInject(token, flags = InjectFlags.Default) {\n    token = resolveForwardRef(token);\n    /** @type {?} */\n    const lView = getLView();\n    // Fall back to inject() if view hasn't been created. This situation can happen in tests\n    // if inject utilities are used before bootstrapping.\n    if (lView == null)\n        return ɵɵinject(token, flags);\n    return getOrCreateInjectable((/** @type {?} */ (getPreviousOrParentTNode())), lView, token, flags);\n}\n/**\n * Facade for the attribute injection from DI.\n *\n * \\@codeGenApi\n * @param {?} attrNameToInject\n * @return {?}\n */\nfunction ɵɵinjectAttribute(attrNameToInject) {\n    return injectAttributeImpl(getPreviousOrParentTNode(), attrNameToInject);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/*\n * The contents of this file include the instructions for all styling-related\n * operations in Angular.\n *\n * The instructions present in this file are:\n *\n * Template level styling instructions:\n * - elementStyling\n * - elementStylingMap\n * - elementStyleProp\n * - elementClassProp\n * - elementStylingApply\n *\n * Host bindings level styling instructions:\n * - elementHostStyling\n * - elementHostStylingMap\n * - elementHostStyleProp\n * - elementHostClassProp\n * - elementHostStylingApply\n */\n/**\n * Allocates style and class binding properties on the element during creation mode.\n *\n * This instruction is meant to be called during creation mode to register all\n * dynamic style and class bindings on the element. Note that this is only used\n * for binding values (see `elementStart` to learn how to assign static styling\n * values to an element).\n *\n * \\@codeGenApi\n * @param {?=} classBindingNames An array containing bindable class names.\n *        The `elementClassProp` instruction refers to the class name by index in\n *        this array (i.e. `['foo', 'bar']` means `foo=0` and `bar=1`).\n * @param {?=} styleBindingNames An array containing bindable style properties.\n *        The `elementStyleProp` instruction refers to the class name by index in\n *        this array (i.e. `['width', 'height']` means `width=0` and `height=1`).\n * @param {?=} styleSanitizer An optional sanitizer function that will be used to sanitize any CSS\n *        style values that are applied to the element (during rendering).\n *\n * @return {?}\n */\nfunction ɵɵelementStyling(classBindingNames, styleBindingNames, styleSanitizer) {\n    /** @type {?} */\n    const tNode = getPreviousOrParentTNode();\n    if (!tNode.stylingTemplate) {\n        tNode.stylingTemplate = createEmptyStylingContext();\n    }\n    // calling the function below ensures that the template's binding values\n    // are applied as the first set of bindings into the context. If any other\n    // styling bindings are set on the same element (by directives and/or\n    // components) then they will be applied at the end of the `elementEnd`\n    // instruction (because directives are created first before styling is\n    // executed for a new element).\n    initElementStyling(tNode, classBindingNames, styleBindingNames, styleSanitizer, DEFAULT_TEMPLATE_DIRECTIVE_INDEX);\n}\n/**\n * Allocates style and class binding properties on the host element during creation mode\n * within the host bindings function of a directive or component.\n *\n * This instruction is meant to be called during creation mode to register all\n * dynamic style and class host bindings on the host element of a directive or\n * component. Note that this is only used for binding values (see `elementHostAttrs`\n * to learn how to assign static styling values to the host element).\n *\n * \\@codeGenApi\n * @param {?=} classBindingNames An array containing bindable class names.\n *        The `elementHostClassProp` instruction refers to the class name by index in\n *        this array (i.e. `['foo', 'bar']` means `foo=0` and `bar=1`).\n * @param {?=} styleBindingNames An array containing bindable style properties.\n *        The `elementHostStyleProp` instruction refers to the class name by index in\n *        this array (i.e. `['width', 'height']` means `width=0` and `height=1`).\n * @param {?=} styleSanitizer An optional sanitizer function that will be used to sanitize any CSS\n *        style values that are applied to the element (during rendering).\n *        Note that the sanitizer instance itself is tied to the provided `directive` and\n *        will not be used if the same property is assigned in another directive or\n *        on the element directly.\n *\n * @return {?}\n */\nfunction ɵɵelementHostStyling(classBindingNames, styleBindingNames, styleSanitizer) {\n    /** @type {?} */\n    const tNode = getPreviousOrParentTNode();\n    if (!tNode.stylingTemplate) {\n        tNode.stylingTemplate = createEmptyStylingContext();\n    }\n    /** @type {?} */\n    const directiveStylingIndex = getActiveDirectiveStylingIndex();\n    // despite the binding being applied in a queue (below), the allocation\n    // of the directive into the context happens right away. The reason for\n    // this is to retain the ordering of the directives (which is important\n    // for the prioritization of bindings).\n    allocateOrUpdateDirectiveIntoContext(tNode.stylingTemplate, directiveStylingIndex);\n    /** @type {?} */\n    const fns = tNode.onElementCreationFns = tNode.onElementCreationFns || [];\n    fns.push((/**\n     * @return {?}\n     */\n    () => {\n        initElementStyling(tNode, classBindingNames, styleBindingNames, styleSanitizer, directiveStylingIndex);\n        registerHostDirective((/** @type {?} */ (tNode.stylingTemplate)), directiveStylingIndex);\n    }));\n}\n/**\n * @param {?} tNode\n * @param {?} classBindingNames\n * @param {?} styleBindingNames\n * @param {?} styleSanitizer\n * @param {?} directiveStylingIndex\n * @return {?}\n */\nfunction initElementStyling(tNode, classBindingNames, styleBindingNames, styleSanitizer, directiveStylingIndex) {\n    updateContextWithBindings((/** @type {?} */ (tNode.stylingTemplate)), directiveStylingIndex, classBindingNames, styleBindingNames, styleSanitizer);\n}\n/**\n * Update a style binding on an element with the provided value.\n *\n * If the style value is falsy then it will be removed from the element\n * (or assigned a different value depending if there are any styles placed\n * on the element with `elementStylingMap` or any static styles that are\n * present from when the element was created with `elementStyling`).\n *\n * Note that the styling element is updated as part of `elementStylingApply`.\n *\n * \\@codeGenApi\n * @param {?} index Index of the element's with which styling is associated.\n * @param {?} styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `elementStyling`.\n * @param {?} value New value to write (falsy to remove). Note that if a directive also\n *        attempts to write to the same binding value (via `elementHostStyleProp`)\n *        then it will only be able to do so if the binding value assigned via\n *        `elementStyleProp` is falsy (or doesn't exist at all).\n * @param {?=} suffix Optional suffix. Used with scalar values to add unit such as `px`.\n *        Note that when a suffix is provided then the underlying sanitizer will\n *        be ignored.\n * @param {?=} forceOverride Whether or not to update the styling value immediately\n *        (despite the other bindings possibly having priority)\n *\n * @return {?}\n */\nfunction ɵɵelementStyleProp(index, styleIndex, value, suffix, forceOverride) {\n    /** @type {?} */\n    const valueToAdd = resolveStylePropValue(value, suffix);\n    /** @type {?} */\n    const stylingContext = getStylingContext(index, getLView());\n    updateStyleProp(stylingContext, styleIndex, valueToAdd, DEFAULT_TEMPLATE_DIRECTIVE_INDEX, forceOverride);\n}\n/**\n * Update a host style binding value on the host element within a component/directive.\n *\n * If the style value is falsy then it will be removed from the host element\n * (or assigned a different value depending if there are any styles placed\n * on the same element with `elementHostStylingMap` or any static styles that\n * are present from when the element was patched with `elementHostStyling`).\n *\n * Note that the styling applied to the host element once\n * `elementHostStylingApply` is called.\n *\n * \\@codeGenApi\n * @param {?} styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `elementHostStyling`.\n * @param {?} value New value to write (falsy to remove). The value may or may not\n *        be applied to the element depending on the template/component/directive\n *        prioritization (see `interfaces/styling.ts`)\n * @param {?=} suffix Optional suffix. Used with scalar values to add unit such as `px`.\n *        Note that when a suffix is provided then the underlying sanitizer will\n *        be ignored.\n * @param {?=} forceOverride Whether or not to update the styling value immediately\n *        (despite the other bindings possibly having priority)\n *\n * @return {?}\n */\nfunction ɵɵelementHostStyleProp(styleIndex, value, suffix, forceOverride) {\n    /** @type {?} */\n    const directiveStylingIndex = getActiveDirectiveStylingIndex();\n    /** @type {?} */\n    const hostElementIndex = getSelectedIndex();\n    /** @type {?} */\n    const stylingContext = getStylingContext(hostElementIndex, getLView());\n    /** @type {?} */\n    const valueToAdd = resolveStylePropValue(value, suffix);\n    /** @type {?} */\n    const args = [stylingContext, styleIndex, valueToAdd, directiveStylingIndex, forceOverride];\n    enqueueHostInstruction(stylingContext, directiveStylingIndex, updateStyleProp, args);\n}\n/**\n * @param {?} value\n * @param {?} suffix\n * @return {?}\n */\nfunction resolveStylePropValue(value, suffix) {\n    /** @type {?} */\n    let valueToAdd = null;\n    if (value !== null) {\n        if (suffix) {\n            // when a suffix is applied then it will bypass\n            // sanitization entirely (b/c a new string is created)\n            valueToAdd = renderStringify(value) + suffix;\n        }\n        else {\n            // sanitization happens by dealing with a String value\n            // this means that the string value will be passed through\n            // into the style rendering later (which is where the value\n            // will be sanitized before it is applied)\n            valueToAdd = (/** @type {?} */ ((/** @type {?} */ (value))));\n        }\n    }\n    return valueToAdd;\n}\n/**\n * Update a class binding on an element with the provided value.\n *\n * This instruction is meant to handle the `[class.foo]=\"exp\"` case and,\n * therefore, the class binding itself must already be allocated using\n * `elementStyling` within the creation block.\n *\n * \\@codeGenApi\n * @param {?} index Index of the element's with which styling is associated.\n * @param {?} classIndex Index of class to toggle. This index value refers to the\n *        index of the class in the class bindings array that was passed into\n *        `elementStyling` (which is meant to be called before this\n *        function is).\n * @param {?} value A true/false value which will turn the class on or off.\n * @param {?=} forceOverride Whether or not this value will be applied regardless\n *        of where it is being set within the styling priority structure.\n *\n * @return {?}\n */\nfunction ɵɵelementClassProp(index, classIndex, value, forceOverride) {\n    /** @type {?} */\n    const input = (value instanceof BoundPlayerFactory) ?\n        ((/** @type {?} */ (value))) :\n        booleanOrNull(value);\n    /** @type {?} */\n    const stylingContext = getStylingContext(index, getLView());\n    updateClassProp(stylingContext, classIndex, input, DEFAULT_TEMPLATE_DIRECTIVE_INDEX, forceOverride);\n}\n/**\n * Update a class host binding for a directive's/component's host element within\n * the host bindings function.\n *\n * This instruction is meant to handle the `\\@HostBinding('class.foo')` case and,\n * therefore, the class binding itself must already be allocated using\n * `elementHostStyling` within the creation block.\n *\n * \\@codeGenApi\n * @param {?} classIndex Index of class to toggle. This index value refers to the\n *        index of the class in the class bindings array that was passed into\n *        `elementHostStlying` (which is meant to be called before this\n *        function is).\n * @param {?} value A true/false value which will turn the class on or off.\n * @param {?=} forceOverride Whether or not this value will be applied regardless\n *        of where it is being set within the stylings priority structure.\n *\n * @return {?}\n */\nfunction ɵɵelementHostClassProp(classIndex, value, forceOverride) {\n    /** @type {?} */\n    const directiveStylingIndex = getActiveDirectiveStylingIndex();\n    /** @type {?} */\n    const hostElementIndex = getSelectedIndex();\n    /** @type {?} */\n    const stylingContext = getStylingContext(hostElementIndex, getLView());\n    /** @type {?} */\n    const input = (value instanceof BoundPlayerFactory) ?\n        ((/** @type {?} */ (value))) :\n        booleanOrNull(value);\n    /** @type {?} */\n    const args = [stylingContext, classIndex, input, directiveStylingIndex, forceOverride];\n    enqueueHostInstruction(stylingContext, directiveStylingIndex, updateClassProp, args);\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction booleanOrNull(value) {\n    if (typeof value === 'boolean')\n        return value;\n    return value ? true : null;\n}\n/**\n * Update style and/or class bindings using object literals on an element.\n *\n * This instruction is meant to apply styling via the `[style]=\"exp\"` and `[class]=\"exp\"` template\n * bindings. When styles/classes are applied to the element they will then be updated with\n * respect to any styles/classes set with `elementStyleProp` or `elementClassProp`. If any\n * styles or classes are set to falsy then they will be removed from the element.\n *\n * Note that the styling instruction will not be applied until `elementStylingApply` is called.\n *\n * \\@codeGenApi\n * @param {?} index Index of the element's with which styling is associated.\n * @param {?} classes A key/value map or string of CSS classes that will be added to the\n *        given element. Any missing classes (that have already been applied to the element\n *        beforehand) will be removed (unset) from the element's list of CSS classes.\n * @param {?=} styles A key/value style map of the styles that will be applied to the given element.\n *        Any missing styles (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's styling.\n *\n * @return {?}\n */\nfunction ɵɵelementStylingMap(index, classes, styles) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const stylingContext = getStylingContext(index, lView);\n    /** @type {?} */\n    const tNode = getTNode(index, lView);\n    // inputs are only evaluated from a template binding into a directive, therefore,\n    // there should not be a situation where a directive host bindings function\n    // evaluates the inputs (this should only happen in the template function)\n    if (hasClassInput(tNode) && classes !== NO_CHANGE) {\n        /** @type {?} */\n        const initialClasses = getInitialClassNameValue(stylingContext);\n        /** @type {?} */\n        const classInputVal = (initialClasses.length ? (initialClasses + ' ') : '') + forceClassesAsString(classes);\n        setInputsForProperty(lView, (/** @type {?} */ ((/** @type {?} */ (tNode.inputs))['class'])), classInputVal);\n        classes = NO_CHANGE;\n    }\n    if (hasStyleInput(tNode) && styles !== NO_CHANGE) {\n        /** @type {?} */\n        const initialStyles = getInitialClassNameValue(stylingContext);\n        /** @type {?} */\n        const styleInputVal = (initialStyles.length ? (initialStyles + ' ') : '') + forceStylesAsString(styles);\n        setInputsForProperty(lView, (/** @type {?} */ ((/** @type {?} */ (tNode.inputs))['style'])), styleInputVal);\n        styles = NO_CHANGE;\n    }\n    updateStylingMap(stylingContext, classes, styles);\n}\n/**\n * Update style and/or class host bindings using object literals on an element within the host\n * bindings function for a directive/component.\n *\n * This instruction is meant to apply styling via the `\\@HostBinding('style')` and\n * `\\@HostBinding('class')` bindings for a component's or directive's host element.\n * When styles/classes are applied to the host element they will then be updated\n * with respect to any styles/classes set with `elementHostStyleProp` or\n * `elementHostClassProp`. If any styles or classes are set to falsy then they\n * will be removed from the element.\n *\n * Note that the styling instruction will not be applied until\n * `elementHostStylingApply` is called.\n *\n * \\@codeGenApi\n * @param {?} classes A key/value map or string of CSS classes that will be added to the\n *        given element. Any missing classes (that have already been applied to the element\n *        beforehand) will be removed (unset) from the element's list of CSS classes.\n * @param {?=} styles A key/value style map of the styles that will be applied to the given element.\n *        Any missing styles (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's styling.\n *\n * @return {?}\n */\nfunction ɵɵelementHostStylingMap(classes, styles) {\n    /** @type {?} */\n    const directiveStylingIndex = getActiveDirectiveStylingIndex();\n    /** @type {?} */\n    const hostElementIndex = getSelectedIndex();\n    /** @type {?} */\n    const stylingContext = getStylingContext(hostElementIndex, getLView());\n    /** @type {?} */\n    const args = [stylingContext, classes, styles, directiveStylingIndex];\n    enqueueHostInstruction(stylingContext, directiveStylingIndex, updateStylingMap, args);\n}\n/**\n * Apply all style and class binding values to the element.\n *\n * This instruction is meant to be run after `elementStylingMap`, `elementStyleProp`\n * or `elementClassProp` instructions have been run and will only apply styling to\n * the element if any styling bindings have been updated.\n *\n * \\@codeGenApi\n * @param {?} index Index of the element's with which styling is associated.\n *\n * @return {?}\n */\nfunction ɵɵelementStylingApply(index) {\n    elementStylingApplyInternal(DEFAULT_TEMPLATE_DIRECTIVE_INDEX, index);\n}\n/**\n * Apply all style and class host binding values to the element.\n *\n * This instruction is meant to be run after `elementHostStylingMap`,\n * `elementHostStyleProp` or `elementHostClassProp` instructions have\n * been run and will only apply styling to the host element if any\n * styling bindings have been updated.\n *\n * \\@codeGenApi\n * @return {?}\n */\nfunction ɵɵelementHostStylingApply() {\n    elementStylingApplyInternal(getActiveDirectiveStylingIndex(), getSelectedIndex());\n}\n/**\n * @param {?} directiveStylingIndex\n * @param {?} index\n * @return {?}\n */\nfunction elementStylingApplyInternal(directiveStylingIndex, index) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tNode = getTNode(index, lView);\n    // if a non-element value is being processed then we can't render values\n    // on the element at all therefore by setting the renderer to null then\n    // the styling apply code knows not to actually apply the values...\n    /** @type {?} */\n    const renderer = tNode.type === 3 /* Element */ ? lView[RENDERER] : null;\n    /** @type {?} */\n    const isFirstRender = (lView[FLAGS] & 8 /* FirstLViewPass */) !== 0;\n    /** @type {?} */\n    const stylingContext = getStylingContext(index, lView);\n    /** @type {?} */\n    const totalPlayersQueued = renderStyling(stylingContext, renderer, lView, isFirstRender, null, null, directiveStylingIndex);\n    if (totalPlayersQueued > 0) {\n        /** @type {?} */\n        const rootContext = getRootContext(lView);\n        scheduleTick(rootContext, 2 /* FlushPlayers */);\n    }\n    // because select(n) may not run between every instruction, the cached styling\n    // context may not get cleared between elements. The reason for this is because\n    // styling bindings (like `[style]` and `[class]`) are not recognized as property\n    // bindings by default so a select(n) instruction is not generated. To ensure the\n    // context is loaded correctly for the next element the cache below is pre-emptively\n    // cleared because there is no code in Angular that applies more styling code after a\n    // styling flush has occurred. Note that this will be fixed once FW-1254 lands.\n    setCachedStylingContext(null);\n}\n/**\n * @return {?}\n */\nfunction getActiveDirectiveStylingIndex() {\n    // whenever a directive's hostBindings function is called a uniqueId value\n    // is assigned. Normally this is enough to help distinguish one directive\n    // from another for the styling context, but there are situations where a\n    // sub-class directive could inherit and assign styling in concert with a\n    // parent directive. To help the styling code distinguish between a parent\n    // sub-classed directive the inheritance depth is taken into account as well.\n    return getActiveDirectiveId() + getActiveDirectiveSuperClassDepth();\n}\n/**\n * @param {?} index\n * @param {?} lView\n * @return {?}\n */\nfunction getStylingContext(index, lView) {\n    /** @type {?} */\n    let context = getCachedStylingContext();\n    if (!context) {\n        context = getStylingContextFromLView(index + HEADER_OFFSET, lView);\n        setCachedStylingContext(context);\n    }\n    else if (ngDevMode) {\n        /** @type {?} */\n        const actualContext = getStylingContextFromLView(index + HEADER_OFFSET, lView);\n        assertEqual(context, actualContext, 'The cached styling context is invalid');\n    }\n    return context;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Create DOM element. The instruction must later be followed by `elementEnd()` call.\n *\n * \\@codeGenApi\n * @param {?} index Index of the element in the LView array\n * @param {?} name Name of the DOM Node\n * @param {?=} attrs Statically bound set of attributes, classes, and styles to be written into the DOM\n *              element on creation. Use [AttributeMarker] to denote the meaning of this array.\n * @param {?=} localRefs A set of local reference bindings on the element.\n *\n * Attributes and localRefs are passed as an array of strings where elements with an even index\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n * ['id', 'warning5', 'class', 'alert']\n *\n * @return {?}\n */\nfunction ɵɵelementStart(index, name, attrs, localRefs) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    ngDevMode && assertEqual(lView[BINDING_INDEX], tView.bindingStartIndex, 'elements should be created before any bindings ');\n    ngDevMode && ngDevMode.rendererCreateElement++;\n    /** @type {?} */\n    const native = elementCreate(name);\n    /** @type {?} */\n    const renderer = lView[RENDERER];\n    ngDevMode && assertDataInRange(lView, index - 1);\n    /** @type {?} */\n    const tNode = createNodeAtIndex(index, 3 /* Element */, (/** @type {?} */ (native)), name, attrs || null);\n    /** @type {?} */\n    let initialStylesIndex = 0;\n    /** @type {?} */\n    let initialClassesIndex = 0;\n    if (attrs) {\n        /** @type {?} */\n        const lastAttrIndex = setUpAttributes(native, attrs);\n        // it's important to only prepare styling-related datastructures once for a given\n        // tNode and not each time an element is created. Also, the styling code is designed\n        // to be patched and constructed at various points, but only up until the styling\n        // template is first allocated (which happens when the very first style/class binding\n        // value is evaluated). When the template is allocated (when it turns into a context)\n        // then the styling template is locked and cannot be further extended (it can only be\n        // instantiated into a context per element)\n        setNodeStylingTemplate(tView, tNode, attrs, lastAttrIndex);\n        if (tNode.stylingTemplate) {\n            // the initial style/class values are rendered immediately after having been\n            // initialized into the context so the element styling is ready when directives\n            // are initialized (since they may read style/class values in their constructor)\n            initialStylesIndex = renderInitialStyles(native, tNode.stylingTemplate, renderer);\n            initialClassesIndex = renderInitialClasses(native, tNode.stylingTemplate, renderer);\n        }\n    }\n    appendChild(native, tNode, lView);\n    createDirectivesAndLocals(tView, lView, localRefs);\n    // any immediate children of a component or template container must be pre-emptively\n    // monkey-patched with the component view data so that the element can be inspected\n    // later on using any element discovery utility methods (see `element_discovery.ts`)\n    if (getElementDepthCount() === 0) {\n        attachPatchData(native, lView);\n    }\n    increaseElementDepthCount();\n    // if a directive contains a host binding for \"class\" then all class-based data will\n    // flow through that (except for `[class.prop]` bindings). This also includes initial\n    // static class values as well. (Note that this will be fixed once map-based `[style]`\n    // and `[class]` bindings work for multiple directives.)\n    if (tView.firstTemplatePass) {\n        /** @type {?} */\n        const inputData = initializeTNodeInputs(tNode);\n        if (inputData && inputData.hasOwnProperty('class')) {\n            tNode.flags |= 8 /* hasClassInput */;\n        }\n        if (inputData && inputData.hasOwnProperty('style')) {\n            tNode.flags |= 16 /* hasStyleInput */;\n        }\n    }\n    // we render the styling again below in case any directives have set any `style` and/or\n    // `class` host attribute values...\n    if (tNode.stylingTemplate) {\n        renderInitialClasses(native, tNode.stylingTemplate, renderer, initialClassesIndex);\n        renderInitialStyles(native, tNode.stylingTemplate, renderer, initialStylesIndex);\n    }\n    /** @type {?} */\n    const currentQueries = lView[QUERIES];\n    if (currentQueries) {\n        currentQueries.addNode(tNode);\n        lView[QUERIES] = currentQueries.clone();\n    }\n    executeContentQueries(tView, tNode, lView);\n}\n/**\n * Mark the end of the element.\n *\n * \\@codeGenApi\n * @return {?}\n */\nfunction ɵɵelementEnd() {\n    /** @type {?} */\n    let previousOrParentTNode = getPreviousOrParentTNode();\n    if (getIsParent()) {\n        setIsParent(false);\n    }\n    else {\n        ngDevMode && assertHasParent(getPreviousOrParentTNode());\n        previousOrParentTNode = (/** @type {?} */ (previousOrParentTNode.parent));\n        setPreviousOrParentTNode(previousOrParentTNode);\n    }\n    // this is required for all host-level styling-related instructions to run\n    // in the correct order\n    previousOrParentTNode.onElementCreationFns && applyOnCreateInstructions(previousOrParentTNode);\n    ngDevMode && assertNodeType(previousOrParentTNode, 3 /* Element */);\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const currentQueries = lView[QUERIES];\n    if (currentQueries) {\n        lView[QUERIES] = currentQueries.parent;\n    }\n    registerPostOrderHooks(getLView()[TVIEW], previousOrParentTNode);\n    decreaseElementDepthCount();\n    // this is fired at the end of elementEnd because ALL of the stylingBindings code\n    // (for directives and the template) have now executed which means the styling\n    // context can be instantiated properly.\n    /** @type {?} */\n    let stylingContext = null;\n    if (hasClassInput(previousOrParentTNode)) {\n        stylingContext = getStylingContextFromLView(previousOrParentTNode.index, lView);\n        setInputsForProperty(lView, (/** @type {?} */ ((/** @type {?} */ (previousOrParentTNode.inputs))['class'])), getInitialClassNameValue(stylingContext));\n    }\n    if (hasStyleInput(previousOrParentTNode)) {\n        stylingContext =\n            stylingContext || getStylingContextFromLView(previousOrParentTNode.index, lView);\n        setInputsForProperty(lView, (/** @type {?} */ ((/** @type {?} */ (previousOrParentTNode.inputs))['style'])), getInitialStyleStringValue(stylingContext));\n    }\n}\n/**\n * Creates an empty element using {\\@link elementStart} and {\\@link elementEnd}\n *\n * \\@codeGenApi\n * @param {?} index Index of the element in the data array\n * @param {?} name Name of the DOM Node\n * @param {?=} attrs Statically bound set of attributes, classes, and styles to be written into the DOM\n *              element on creation. Use [AttributeMarker] to denote the meaning of this array.\n * @param {?=} localRefs A set of local reference bindings on the element.\n *\n * @return {?}\n */\nfunction ɵɵelement(index, name, attrs, localRefs) {\n    ɵɵelementStart(index, name, attrs, localRefs);\n    ɵɵelementEnd();\n}\n/**\n * Updates the value of removes an attribute on an Element.\n *\n * \\@codeGenApi\n * @param {?} index\n * @param {?} name name The name of the attribute.\n * @param {?} value value The attribute is removed when value is `null` or `undefined`.\n *                  Otherwise the attribute value is set to the stringified value.\n * @param {?=} sanitizer An optional function used to sanitize the value.\n * @param {?=} namespace Optional namespace to use when setting the attribute.\n *\n * @return {?}\n */\nfunction ɵɵelementAttribute(index, name, value, sanitizer, namespace) {\n    if (value !== NO_CHANGE) {\n        ngDevMode && validateAgainstEventAttributes(name);\n        /** @type {?} */\n        const lView = getLView();\n        /** @type {?} */\n        const renderer = lView[RENDERER];\n        /** @type {?} */\n        const element = (/** @type {?} */ (getNativeByIndex(index, lView)));\n        if (value == null) {\n            ngDevMode && ngDevMode.rendererRemoveAttribute++;\n            isProceduralRenderer(renderer) ? renderer.removeAttribute(element, name, namespace) :\n                element.removeAttribute(name);\n        }\n        else {\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            /** @type {?} */\n            const tNode = getTNode(index, lView);\n            /** @type {?} */\n            const strValue = sanitizer == null ? renderStringify(value) : sanitizer(value, tNode.tagName || '', name);\n            if (isProceduralRenderer(renderer)) {\n                renderer.setAttribute(element, name, strValue, namespace);\n            }\n            else {\n                namespace ? element.setAttributeNS(namespace, name, strValue) :\n                    element.setAttribute(name, strValue);\n            }\n        }\n    }\n}\n/**\n * Assign static attribute values to a host element.\n *\n * This instruction will assign static attribute values as well as class and style\n * values to an element within the host bindings function. Since attribute values\n * can consist of different types of values, the `attrs` array must include the values in\n * the following format:\n *\n * attrs = [\n *   // static attributes (like `title`, `name`, `id`...)\n *   attr1, value1, attr2, value,\n *\n *   // a single namespace value (like `x:id`)\n *   NAMESPACE_MARKER, namespaceUri1, name1, value1,\n *\n *   // another single namespace value (like `x:name`)\n *   NAMESPACE_MARKER, namespaceUri2, name2, value2,\n *\n *   // a series of CSS classes that will be applied to the element (no spaces)\n *   CLASSES_MARKER, class1, class2, class3,\n *\n *   // a series of CSS styles (property + value) that will be applied to the element\n *   STYLES_MARKER, prop1, value1, prop2, value2\n * ]\n *\n * All non-class and non-style attributes must be defined at the start of the list\n * first before all class and style values are set. When there is a change in value\n * type (like when classes and styles are introduced) a marker must be used to separate\n * the entries. The marker values themselves are set via entries found in the\n * [AttributeMarker] enum.\n *\n * NOTE: This instruction is meant to used from `hostBindings` function only.\n *\n * \\@codeGenApi\n * @param {?} attrs An array of static values (attributes, classes and styles) with the correct marker\n * values.\n *\n * @return {?}\n */\nfunction ɵɵelementHostAttrs(attrs) {\n    /** @type {?} */\n    const hostElementIndex = getSelectedIndex();\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tNode = getTNode(hostElementIndex, lView);\n    // non-element nodes (e.g. `<ng-container>`) are not rendered as actual\n    // element nodes and adding styles/classes on to them will cause runtime\n    // errors...\n    if (tNode.type === 3 /* Element */) {\n        /** @type {?} */\n        const native = (/** @type {?} */ (getNativeByTNode(tNode, lView)));\n        /** @type {?} */\n        const lastAttrIndex = setUpAttributes(native, attrs);\n        /** @type {?} */\n        const stylingAttrsStartIndex = attrsStylingIndexOf(attrs, lastAttrIndex);\n        if (stylingAttrsStartIndex >= 0) {\n            /** @type {?} */\n            const directiveStylingIndex = getActiveDirectiveStylingIndex();\n            if (tNode.stylingTemplate) {\n                patchContextWithStaticAttrs(tNode.stylingTemplate, attrs, stylingAttrsStartIndex, directiveStylingIndex);\n            }\n            else {\n                tNode.stylingTemplate =\n                    initializeStaticContext(attrs, stylingAttrsStartIndex, directiveStylingIndex);\n            }\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\n * The instruction must later be followed by `elementContainerEnd()` call.\n *\n * \\@codeGenApi\n * @param {?} index Index of the element in the LView array\n * @param {?=} attrs Set of attributes to be used when matching directives.\n * @param {?=} localRefs A set of local reference bindings on the element.\n *\n * Even if this instruction accepts a set of attributes no actual attribute values are propagated to\n * the DOM (as a comment node can't have attributes). Attributes are here only for directive\n * matching purposes and setting initial inputs of directives.\n *\n * @return {?}\n */\nfunction ɵɵelementContainerStart(index, attrs, localRefs) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const renderer = lView[RENDERER];\n    /** @type {?} */\n    const tagName = 'ng-container';\n    ngDevMode && assertEqual(lView[BINDING_INDEX], tView.bindingStartIndex, 'element containers should be created before any bindings');\n    ngDevMode && ngDevMode.rendererCreateComment++;\n    /** @type {?} */\n    const native = renderer.createComment(ngDevMode ? tagName : '');\n    ngDevMode && assertDataInRange(lView, index - 1);\n    /** @type {?} */\n    const tNode = createNodeAtIndex(index, 4 /* ElementContainer */, native, tagName, attrs || null);\n    if (attrs) {\n        // While ng-container doesn't necessarily support styling, we use the style context to identify\n        // and execute directives on the ng-container.\n        setNodeStylingTemplate(tView, tNode, attrs, 0);\n    }\n    appendChild(native, tNode, lView);\n    createDirectivesAndLocals(tView, lView, localRefs);\n    attachPatchData(native, lView);\n    /** @type {?} */\n    const currentQueries = lView[QUERIES];\n    if (currentQueries) {\n        currentQueries.addNode(tNode);\n        lView[QUERIES] = currentQueries.clone();\n    }\n    executeContentQueries(tView, tNode, lView);\n}\n/**\n * Mark the end of the <ng-container>.\n *\n * \\@codeGenApi\n * @return {?}\n */\nfunction ɵɵelementContainerEnd() {\n    /** @type {?} */\n    let previousOrParentTNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    if (getIsParent()) {\n        setIsParent(false);\n    }\n    else {\n        ngDevMode && assertHasParent(previousOrParentTNode);\n        previousOrParentTNode = (/** @type {?} */ (previousOrParentTNode.parent));\n        setPreviousOrParentTNode(previousOrParentTNode);\n    }\n    ngDevMode && assertNodeType(previousOrParentTNode, 4 /* ElementContainer */);\n    /** @type {?} */\n    const currentQueries = lView[QUERIES];\n    if (currentQueries) {\n        lView[QUERIES] = currentQueries.parent;\n    }\n    // this is required for all host-level styling-related instructions to run\n    // in the correct order\n    previousOrParentTNode.onElementCreationFns && applyOnCreateInstructions(previousOrParentTNode);\n    registerPostOrderHooks(tView, previousOrParentTNode);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Marks the start of an embedded view.\n *\n * \\@codeGenApi\n * @param {?} viewBlockId The ID of this view\n * @param {?} consts\n * @param {?} vars\n * @return {?} boolean Whether or not this view is in creation mode\n *\n */\nfunction ɵɵembeddedViewStart(viewBlockId, consts, vars) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    // The previous node can be a view node if we are processing an inline for loop\n    /** @type {?} */\n    const containerTNode = previousOrParentTNode.type === 2 /* View */ ?\n        (/** @type {?} */ (previousOrParentTNode.parent)) :\n        previousOrParentTNode;\n    /** @type {?} */\n    const lContainer = (/** @type {?} */ (lView[containerTNode.index]));\n    ngDevMode && assertNodeType(containerTNode, 0 /* Container */);\n    /** @type {?} */\n    let viewToRender = scanForView(lContainer, (/** @type {?} */ (lContainer[ACTIVE_INDEX])), viewBlockId);\n    if (viewToRender) {\n        setIsParent(true);\n        enterView(viewToRender, viewToRender[TVIEW].node);\n    }\n    else {\n        // When we create a new LView, we always reset the state of the instructions.\n        viewToRender = createLView(lView, getOrCreateEmbeddedTView(viewBlockId, consts, vars, (/** @type {?} */ (containerTNode))), null, 16 /* CheckAlways */, null, null);\n        if (lContainer[QUERIES]) {\n            viewToRender[QUERIES] = (/** @type {?} */ (lContainer[QUERIES])).createView();\n        }\n        /** @type {?} */\n        const tParentNode = getIsParent() ? previousOrParentTNode :\n            previousOrParentTNode && previousOrParentTNode.parent;\n        assignTViewNodeToLView(viewToRender[TVIEW], tParentNode, viewBlockId, viewToRender);\n        enterView(viewToRender, viewToRender[TVIEW].node);\n    }\n    if (lContainer) {\n        if (isCreationMode(viewToRender)) {\n            // it is a new view, insert it into collection of views for a given container\n            insertView(viewToRender, lContainer, (/** @type {?} */ (lContainer[ACTIVE_INDEX])));\n        }\n        (/** @type {?} */ (lContainer[ACTIVE_INDEX]))++;\n    }\n    return isCreationMode(viewToRender) ? 1 /* Create */ | 2 /* Update */ :\n        2 /* Update */;\n}\n/**\n * Initialize the TView (e.g. static data) for the active embedded view.\n *\n * Each embedded view block must create or retrieve its own TView. Otherwise, the embedded view's\n * static data for a particular node would overwrite the static data for a node in the view above\n * it with the same index (since it's in the same template).\n *\n * @param {?} viewIndex The index of the TView in TNode.tViews\n * @param {?} consts The number of nodes, local refs, and pipes in this template\n * @param {?} vars The number of bindings and pure function bindings in this template\n * @param {?} parent\n * @return {?} TView\n */\nfunction getOrCreateEmbeddedTView(viewIndex, consts, vars, parent) {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    ngDevMode && assertNodeType(parent, 0 /* Container */);\n    /** @type {?} */\n    const containerTViews = (/** @type {?} */ (parent.tViews));\n    ngDevMode && assertDefined(containerTViews, 'TView expected');\n    ngDevMode && assertEqual(Array.isArray(containerTViews), true, 'TViews should be in an array');\n    if (viewIndex >= containerTViews.length || containerTViews[viewIndex] == null) {\n        containerTViews[viewIndex] = createTView(viewIndex, null, consts, vars, tView.directiveRegistry, tView.pipeRegistry, null, null);\n    }\n    return containerTViews[viewIndex];\n}\n/**\n * Looks for a view with a given view block id inside a provided LContainer.\n * Removes views that need to be deleted in the process.\n *\n * @param {?} lContainer to search for views\n * @param {?} startIdx starting index in the views array to search from\n * @param {?} viewBlockId exact view block id to look for\n * @return {?} index of a found view or -1 if not found\n */\nfunction scanForView(lContainer, startIdx, viewBlockId) {\n    /** @type {?} */\n    const views = lContainer[VIEWS];\n    for (let i = startIdx; i < views.length; i++) {\n        /** @type {?} */\n        const viewAtPositionId = views[i][TVIEW].id;\n        if (viewAtPositionId === viewBlockId) {\n            return views[i];\n        }\n        else if (viewAtPositionId < viewBlockId) {\n            // found a view that should not be at this position - remove\n            removeView(lContainer, i);\n        }\n        else {\n            // found a view with id greater than the one we are searching for\n            // which means that required view doesn't exist and can't be found at\n            // later positions in the views array - stop the searchdef.cont here\n            break;\n        }\n    }\n    return null;\n}\n/**\n * Marks the end of an embedded view.\n *\n * \\@codeGenApi\n * @return {?}\n */\nfunction ɵɵembeddedViewEnd() {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const viewHost = lView[T_HOST];\n    if (isCreationMode(lView)) {\n        refreshDescendantViews(lView); // creation mode pass\n        lView[FLAGS] &= ~4 /* CreationMode */;\n    }\n    resetPreOrderHookFlags(lView);\n    refreshDescendantViews(lView); // update mode pass\n    // update mode pass\n    /** @type {?} */\n    const lContainer = (/** @type {?} */ (lView[PARENT]));\n    ngDevMode && assertLContainerOrUndefined(lContainer);\n    leaveView((/** @type {?} */ (lContainer[PARENT])));\n    setPreviousOrParentTNode((/** @type {?} */ (viewHost)));\n    setIsParent(false);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns the current OpaqueViewState instance.\n *\n * Used in conjunction with the restoreView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * \\@codeGenApi\n * @return {?}\n */\nfunction ɵɵgetCurrentView() {\n    return (/** @type {?} */ ((/** @type {?} */ (getLView()))));\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine if the argument is shaped like a Promise\n */\nfunction isPromise(obj) {\n    // allow any Promise/A+ compliant thenable.\n    // It's up to the caller to ensure that obj.then conforms to the spec\n    return !!obj && typeof obj.then === 'function';\n}\n/**\n * Determine if the argument is an Observable\n */\nfunction isObservable(obj) {\n    // TODO: use isObservable once we update pass rxjs 6.1\n    // https://github.com/ReactiveX/rxjs/blob/master/CHANGELOG.md#610-2018-05-03\n    return !!obj && typeof obj.subscribe === 'function';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Adds an event listener to the current node.\n *\n * If an output exists on one of the node's directives, it also subscribes to the output\n * and saves the subscription for later cleanup.\n *\n * \\@codeGenApi\n * @param {?} eventName Name of the event\n * @param {?} listenerFn The function to be called when event emits\n * @param {?=} useCapture Whether or not to use capture in event listener\n * @param {?=} eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @return {?}\n */\nfunction ɵɵlistener(eventName, listenerFn, useCapture = false, eventTargetResolver) {\n    listenerInternal(eventName, listenerFn, useCapture, eventTargetResolver);\n}\n/**\n * Registers a synthetic host listener (e.g. `(\\@foo.start)`) on a component.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host listener (e.g. `\\@HostListener('\\@foo.start')`) properly gets rendered\n * in the component's renderer. Normally all host listeners are evaluated with the\n * parent component's renderer, but, in the case of animation \\@triggers, they need\n * to be evaluated with the sub component's renderer (because that's where the\n * animation triggers are defined).\n *\n * Do not use this instruction as a replacement for `listener`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * \\@codeGenApi\n * @template T\n * @param {?} eventName Name of the event\n * @param {?} listenerFn The function to be called when event emits\n * @param {?=} useCapture Whether or not to use capture in event listener\n * @param {?=} eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @return {?}\n */\nfunction ɵɵcomponentHostSyntheticListener(eventName, listenerFn, useCapture = false, eventTargetResolver) {\n    listenerInternal(eventName, listenerFn, useCapture, eventTargetResolver, loadComponentRenderer);\n}\n/**\n * A utility function that checks if a given element has already an event handler registered for an\n * event with a specified name. The TView.cleanup data structure is used to find out which events\n * are registered for a given element.\n * @param {?} lView\n * @param {?} eventName\n * @param {?} tNodeIdx\n * @return {?}\n */\nfunction findExistingListener(lView, eventName, tNodeIdx) {\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const tCleanup = tView.cleanup;\n    if (tCleanup != null) {\n        for (let i = 0; i < tCleanup.length - 1; i += 2) {\n            /** @type {?} */\n            const cleanupEventName = tCleanup[i];\n            if (cleanupEventName === eventName && tCleanup[i + 1] === tNodeIdx) {\n                // We have found a matching event name on the same node but it might not have been\n                // registered yet, so we must explicitly verify entries in the LView cleanup data\n                // structures.\n                /** @type {?} */\n                const lCleanup = (/** @type {?} */ (lView[CLEANUP]));\n                /** @type {?} */\n                const listenerIdxInLCleanup = tCleanup[i + 2];\n                return lCleanup.length > listenerIdxInLCleanup ? lCleanup[listenerIdxInLCleanup] : null;\n            }\n            // TView.cleanup can have a mix of 4-elements entries (for event handler cleanups) or\n            // 2-element entries (for directive and queries destroy hooks). As such we can encounter\n            // blocks of 4 or 2 items in the tView.cleanup and this is why we iterate over 2 elements\n            // first and jump another 2 elements if we detect listeners cleanup (4 elements). Also check\n            // documentation of TView.cleanup for more details of this data structure layout.\n            if (typeof cleanupEventName === 'string') {\n                i += 2;\n            }\n        }\n    }\n    return null;\n}\n/**\n * @param {?} eventName\n * @param {?} listenerFn\n * @param {?=} useCapture\n * @param {?=} eventTargetResolver\n * @param {?=} loadRendererFn\n * @return {?}\n */\nfunction listenerInternal(eventName, listenerFn, useCapture = false, eventTargetResolver, loadRendererFn) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const firstTemplatePass = tView.firstTemplatePass;\n    /** @type {?} */\n    const tCleanup = firstTemplatePass && (tView.cleanup || (tView.cleanup = []));\n    ngDevMode && assertNodeOfPossibleTypes(tNode, 3 /* Element */, 0 /* Container */, 4 /* ElementContainer */);\n    /** @type {?} */\n    let processOutputs = true;\n    // add native event listener - applicable to elements only\n    if (tNode.type === 3 /* Element */) {\n        /** @type {?} */\n        const native = (/** @type {?} */ (getNativeByTNode(tNode, lView)));\n        /** @type {?} */\n        const resolved = eventTargetResolver ? eventTargetResolver(native) : (/** @type {?} */ ({}));\n        /** @type {?} */\n        const target = resolved.target || native;\n        /** @type {?} */\n        const renderer = loadRendererFn ? loadRendererFn(tNode, lView) : lView[RENDERER];\n        /** @type {?} */\n        const lCleanup = getCleanup(lView);\n        /** @type {?} */\n        const lCleanupIndex = lCleanup.length;\n        /** @type {?} */\n        const idxOrTargetGetter = eventTargetResolver ?\n            (/**\n             * @param {?} _lView\n             * @return {?}\n             */\n            (_lView) => eventTargetResolver(unwrapRNode(_lView[tNode.index])).target) :\n            tNode.index;\n        // In order to match current behavior, native DOM event listeners must be added for all\n        // events (including outputs).\n        if (isProceduralRenderer(renderer)) {\n            // There might be cases where multiple directives on the same element try to register an event\n            // handler function for the same event. In this situation we want to avoid registration of\n            // several native listeners as each registration would be intercepted by NgZone and\n            // trigger change detection. This would mean that a single user action would result in several\n            // change detections being invoked. To avoid this situation we want to have only one call to\n            // native handler registration (for the same element and same type of event).\n            //\n            // In order to have just one native event handler in presence of multiple handler functions,\n            // we just register a first handler function as a native event listener and then chain\n            // (coalesce) other handler functions on top of the first native handler function.\n            /** @type {?} */\n            let existingListener = null;\n            // Please note that the coalescing described here doesn't happen for events specifying an\n            // alternative target (ex. (document:click)) - this is to keep backward compatibility with the\n            // view engine.\n            // Also, we don't have to search for existing listeners is there are no directives\n            // matching on a given node as we can't register multiple event handlers for the same event in\n            // a template (this would mean having duplicate attributes).\n            if (!eventTargetResolver && hasDirectives(tNode)) {\n                existingListener = findExistingListener(lView, eventName, tNode.index);\n            }\n            if (existingListener !== null) {\n                // Attach a new listener at the head of the coalesced listeners list.\n                ((/** @type {?} */ (listenerFn))).__ngNextListenerFn__ = ((/** @type {?} */ (existingListener))).__ngNextListenerFn__;\n                ((/** @type {?} */ (existingListener))).__ngNextListenerFn__ = listenerFn;\n                processOutputs = false;\n            }\n            else {\n                // The first argument of `listen` function in Procedural Renderer is:\n                // - either a target name (as a string) in case of global target (window, document, body)\n                // - or element reference (in all other cases)\n                listenerFn = wrapListener(tNode, lView, listenerFn, false /** preventDefault */);\n                /** @type {?} */\n                const cleanupFn = renderer.listen(resolved.name || target, eventName, listenerFn);\n                ngDevMode && ngDevMode.rendererAddEventListener++;\n                lCleanup.push(listenerFn, cleanupFn);\n                tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, lCleanupIndex + 1);\n            }\n        }\n        else {\n            listenerFn = wrapListener(tNode, lView, listenerFn, true /** preventDefault */);\n            target.addEventListener(eventName, listenerFn, useCapture);\n            ngDevMode && ngDevMode.rendererAddEventListener++;\n            lCleanup.push(listenerFn);\n            tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, useCapture);\n        }\n    }\n    // subscribe to directive outputs\n    if (tNode.outputs === undefined) {\n        // if we create TNode here, inputs must be undefined so we know they still need to be\n        // checked\n        tNode.outputs = generatePropertyAliases(tNode, 1 /* Output */);\n    }\n    /** @type {?} */\n    const outputs = tNode.outputs;\n    /** @type {?} */\n    let props;\n    if (processOutputs && outputs && (props = outputs[eventName])) {\n        /** @type {?} */\n        const propsLength = props.length;\n        if (propsLength) {\n            /** @type {?} */\n            const lCleanup = getCleanup(lView);\n            for (let i = 0; i < propsLength; i += 3) {\n                /** @type {?} */\n                const index = (/** @type {?} */ (props[i]));\n                ngDevMode && assertDataInRange(lView, index);\n                /** @type {?} */\n                const minifiedName = props[i + 2];\n                /** @type {?} */\n                const directiveInstance = lView[index];\n                /** @type {?} */\n                const output = directiveInstance[minifiedName];\n                if (ngDevMode && !isObservable(output)) {\n                    throw new Error(`@Output ${minifiedName} not initialized in '${directiveInstance.constructor.name}'.`);\n                }\n                /** @type {?} */\n                const subscription = output.subscribe(listenerFn);\n                /** @type {?} */\n                const idx = lCleanup.length;\n                lCleanup.push(listenerFn, subscription);\n                tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));\n            }\n        }\n    }\n}\n/**\n * @param {?} lView\n * @param {?} listenerFn\n * @param {?} e\n * @return {?}\n */\nfunction executeListenerWithErrorHandling(lView, listenerFn, e) {\n    try {\n        // Only explicitly returning false from a listener should preventDefault\n        return listenerFn(e) !== false;\n    }\n    catch (error) {\n        handleError(lView, error);\n        return false;\n    }\n}\n/**\n * Wraps an event listener with a function that marks ancestors dirty and prevents default behavior,\n * if applicable.\n *\n * @param {?} tNode The TNode associated with this listener\n * @param {?} lView The LView that contains this listener\n * @param {?} listenerFn The listener function to call\n * @param {?} wrapWithPreventDefault Whether or not to prevent default behavior\n * (the procedural renderer does this already, so in those cases, we should skip)\n * @return {?}\n */\nfunction wrapListener(tNode, lView, listenerFn, wrapWithPreventDefault) {\n    // Note: we are performing most of the work in the listener function itself\n    // to optimize listener registration.\n    return (/**\n     * @param {?} e\n     * @return {?}\n     */\n    function wrapListenerIn_markDirtyAndPreventDefault(e) {\n        // In order to be backwards compatible with View Engine, events on component host nodes\n        // must also mark the component view itself dirty (i.e. the view that it owns).\n        /** @type {?} */\n        const startView = tNode.flags & 1 /* isComponent */ ? getComponentViewByIndex(tNode.index, lView) : lView;\n        // See interfaces/view.ts for more on LViewFlags.ManualOnPush\n        if ((lView[FLAGS] & 32 /* ManualOnPush */) === 0) {\n            markViewDirty(startView);\n        }\n        /** @type {?} */\n        let result = executeListenerWithErrorHandling(lView, listenerFn, e);\n        // A just-invoked listener function might have coalesced listeners so we need to check for\n        // their presence and invoke as needed.\n        /** @type {?} */\n        let nextListenerFn = ((/** @type {?} */ (wrapListenerIn_markDirtyAndPreventDefault))).__ngNextListenerFn__;\n        while (nextListenerFn) {\n            // We should prevent default if any of the listeners explicitly return false\n            result = executeListenerWithErrorHandling(lView, nextListenerFn, e) && result;\n            nextListenerFn = ((/** @type {?} */ (nextListenerFn))).__ngNextListenerFn__;\n        }\n        if (wrapWithPreventDefault && result === false) {\n            e.preventDefault();\n            // Necessary for legacy browsers that don't support preventDefault (e.g. IE)\n            e.returnValue = false;\n        }\n        return result;\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Retrieves a context at the level specified and saves it as the global, contextViewData.\n * Will get the next level up if level is not specified.\n *\n * This is used to save contexts of parent views so they can be bound in embedded views, or\n * in conjunction with reference() to bind a ref from a parent view.\n *\n * \\@codeGenApi\n * @template T\n * @param {?=} level The relative level of the view from which to grab context compared to contextVewData\n * @return {?} context\n *\n */\nfunction ɵɵnextContext(level = 1) {\n    return nextContextImpl(level);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n * It takes all the selectors from the entire component's template and decides where\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n * backed by a selector).\n *\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n * un-parsed form.\n *\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n *\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n * drawbacks:\n * - having only a textual form would require runtime parsing of CSS selectors;\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n * template author).\n *\n * \\@codeGenApi\n * @param {?=} selectors A collection of parsed CSS selectors\n * @return {?}\n */\nfunction ɵɵprojectionDef(selectors) {\n    /** @type {?} */\n    const componentNode = (/** @type {?} */ (findComponentView(getLView())[T_HOST]));\n    if (!componentNode.projection) {\n        /** @type {?} */\n        const noOfNodeBuckets = selectors ? selectors.length + 1 : 1;\n        /** @type {?} */\n        const projectionHeads = componentNode.projection =\n            new Array(noOfNodeBuckets).fill(null);\n        /** @type {?} */\n        const tails = projectionHeads.slice();\n        /** @type {?} */\n        let componentChild = componentNode.child;\n        while (componentChild !== null) {\n            /** @type {?} */\n            const bucketIndex = selectors ? matchingProjectionSelectorIndex(componentChild, selectors) : 0;\n            if (tails[bucketIndex]) {\n                (/** @type {?} */ (tails[bucketIndex])).projectionNext = componentChild;\n            }\n            else {\n                projectionHeads[bucketIndex] = componentChild;\n            }\n            tails[bucketIndex] = componentChild;\n            componentChild = componentChild.next;\n        }\n    }\n}\n/**\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n * to the projectionDef instruction.\n *\n * \\@codeGenApi\n * @param {?} nodeIndex\n * @param {?=} selectorIndex\n * @param {?=} attrs\n * @return {?}\n */\nfunction ɵɵprojection(nodeIndex, selectorIndex = 0, attrs) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tProjectionNode = createNodeAtIndex(nodeIndex, 1 /* Projection */, null, null, attrs || null);\n    // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.\n    if (tProjectionNode.projection === null)\n        tProjectionNode.projection = selectorIndex;\n    // `<ng-content>` has no content\n    setIsParent(false);\n    // re-distribution of projectable nodes is stored on a component's view level\n    appendProjectedNodes(lView, tProjectionNode, selectorIndex, findComponentView(lView));\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet _symbolIterator = null;\nfunction getSymbolIterator() {\n    if (!_symbolIterator) {\n        const Symbol = _global['Symbol'];\n        if (Symbol && Symbol.iterator) {\n            _symbolIterator = Symbol.iterator;\n        }\n        else {\n            // es6-shim specific logic\n            const keys = Object.getOwnPropertyNames(Map.prototype);\n            for (let i = 0; i < keys.length; ++i) {\n                const key = keys[i];\n                if (key !== 'entries' && key !== 'size' &&\n                    Map.prototype[key] === Map.prototype['entries']) {\n                    _symbolIterator = key;\n                }\n            }\n        }\n    }\n    return _symbolIterator;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// JS has NaN !== NaN\nfunction looseIdentical(a, b) {\n    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction devModeEqual(a, b) {\n    /** @type {?} */\n    const isListLikeIterableA = isListLikeIterable(a);\n    /** @type {?} */\n    const isListLikeIterableB = isListLikeIterable(b);\n    if (isListLikeIterableA && isListLikeIterableB) {\n        return areIterablesEqual(a, b, devModeEqual);\n    }\n    else {\n        /** @type {?} */\n        const isAObject = a && (typeof a === 'object' || typeof a === 'function');\n        /** @type {?} */\n        const isBObject = b && (typeof b === 'object' || typeof b === 'function');\n        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n            return true;\n        }\n        else {\n            return looseIdentical(a, b);\n        }\n    }\n}\n/**\n * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\n * reference has not changed.\n *\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n * is stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n *\n * \\@publicApi\n */\nclass WrappedValue {\n    /**\n     * @param {?} value\n     */\n    constructor(value) { this.wrapped = value; }\n    /**\n     * Creates a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    static wrap(value) { return new WrappedValue(value); }\n    /**\n     * Returns the underlying value of a wrapped value.\n     * Returns the given `value` when it is not wrapped.\n     *\n     * @param {?} value\n     * @return {?}\n     */\n    static unwrap(value) { return WrappedValue.isWrapped(value) ? value.wrapped : value; }\n    /**\n     * Returns true if `value` is a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    static isWrapped(value) { return value instanceof WrappedValue; }\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction isListLikeIterable(obj) {\n    if (!isJsObject(obj))\n        return false;\n    return Array.isArray(obj) ||\n        (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]\n            getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop\n}\n/**\n * @param {?} a\n * @param {?} b\n * @param {?} comparator\n * @return {?}\n */\nfunction areIterablesEqual(a, b, comparator) {\n    /** @type {?} */\n    const iterator1 = a[getSymbolIterator()]();\n    /** @type {?} */\n    const iterator2 = b[getSymbolIterator()]();\n    while (true) {\n        /** @type {?} */\n        const item1 = iterator1.next();\n        /** @type {?} */\n        const item2 = iterator2.next();\n        if (item1.done && item2.done)\n            return true;\n        if (item1.done || item2.done)\n            return false;\n        if (!comparator(item1.value, item2.value))\n            return false;\n    }\n}\n/**\n * @param {?} obj\n * @param {?} fn\n * @return {?}\n */\nfunction iterateListLike(obj, fn) {\n    if (Array.isArray(obj)) {\n        for (let i = 0; i < obj.length; i++) {\n            fn(obj[i]);\n        }\n    }\n    else {\n        /** @type {?} */\n        const iterator = obj[getSymbolIterator()]();\n        /** @type {?} */\n        let item;\n        while (!((item = iterator.next()).done)) {\n            fn(item.value);\n        }\n    }\n}\n/**\n * @param {?} o\n * @return {?}\n */\nfunction isJsObject(o) {\n    return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(misko): consider inlining\n/**\n * Updates binding and returns the value.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} value\n * @return {?}\n */\nfunction updateBinding(lView, bindingIndex, value) {\n    return lView[bindingIndex] = value;\n}\n/**\n * Gets the current binding value.\n * @param {?} lView\n * @param {?} bindingIndex\n * @return {?}\n */\nfunction getBinding(lView, bindingIndex) {\n    ngDevMode && assertDataInRange(lView, bindingIndex);\n    ngDevMode &&\n        assertNotSame(lView[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');\n    return lView[bindingIndex];\n}\n/**\n * Updates binding if changed, then returns whether it was updated.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} value\n * @return {?}\n */\nfunction bindingUpdated(lView, bindingIndex, value) {\n    ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n    ngDevMode &&\n        assertLessThan(bindingIndex, lView.length, `Slot should have been initialized to NO_CHANGE`);\n    /** @type {?} */\n    const oldValue = lView[bindingIndex];\n    if (isDifferent(oldValue, value)) {\n        if (ngDevMode && getCheckNoChangesMode()) {\n            // View engine didn't report undefined values as changed on the first checkNoChanges pass\n            // (before the change detection was run).\n            /** @type {?} */\n            const oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : undefined;\n            if (!devModeEqual(oldValueToCompare, value)) {\n                throwErrorIfNoChangesMode(oldValue === NO_CHANGE, oldValueToCompare, value);\n            }\n        }\n        lView[bindingIndex] = value;\n        return true;\n    }\n    return false;\n}\n/**\n * Updates 2 bindings if changed, then returns whether either was updated.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} exp1\n * @param {?} exp2\n * @return {?}\n */\nfunction bindingUpdated2(lView, bindingIndex, exp1, exp2) {\n    /** @type {?} */\n    const different = bindingUpdated(lView, bindingIndex, exp1);\n    return bindingUpdated(lView, bindingIndex + 1, exp2) || different;\n}\n/**\n * Updates 3 bindings if changed, then returns whether any was updated.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @return {?}\n */\nfunction bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {\n    /** @type {?} */\n    const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n    return bindingUpdated(lView, bindingIndex + 2, exp3) || different;\n}\n/**\n * Updates 4 bindings if changed, then returns whether any was updated.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @return {?}\n */\nfunction bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {\n    /** @type {?} */\n    const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n    return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Update a property on a selected element.\n *\n * Operates on the element selected by index via the {\\@link select} instruction.\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `\\@Inputs` don't have to be re-compiled\n *\n * \\@codeGenApi\n * @template T\n * @param {?} propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param {?} value New value to write.\n * @param {?=} sanitizer An optional function used to sanitize the value.\n * @param {?=} nativeOnly Whether or not we should only set native properties and skip input check\n * (this is necessary for host property bindings)\n * @return {?} This function returns itself so that it may be chained\n * (e.g. `property('name', ctx.name)('title', ctx.title)`)\n *\n */\nfunction ɵɵproperty(propName, value, sanitizer, nativeOnly) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    ngDevMode && assertNotEqual(index, -1, 'selected index cannot be -1');\n    /** @type {?} */\n    const bindReconciledValue = ɵɵbind(value);\n    elementPropertyInternal(index, propName, bindReconciledValue, sanitizer, nativeOnly);\n    return ɵɵproperty;\n}\n/**\n * Creates a single value binding.\n *\n * \\@codeGenApi\n * @template T\n * @param {?} value Value to diff\n *\n * @return {?}\n */\nfunction ɵɵbind(value) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX]++;\n    storeBindingMetadata(lView);\n    return bindingUpdated(lView, bindingIndex, value) ? value : NO_CHANGE;\n}\n/**\n * **TODO: Remove this function after `property` is in use**\n * Update a property on an element.\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new \\@Inputs don't have to be re-compiled.\n *\n * \\@codeGenApi\n * @template T\n * @param {?} index The index of the element to update in the data array\n * @param {?} propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param {?} value New value to write.\n * @param {?=} sanitizer An optional function used to sanitize the value.\n * @param {?=} nativeOnly Whether or not we should only set native properties and skip input check\n * (this is necessary for host property bindings)\n *\n * @return {?}\n */\nfunction ɵɵelementProperty(index, propName, value, sanitizer, nativeOnly) {\n    elementPropertyInternal(index, propName, value, sanitizer, nativeOnly);\n}\n/**\n * Updates a synthetic host binding (e.g. `[\\@foo]`) on a component.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host binding (e.g. `\\@HostBinding('\\@foo')`) properly gets rendered in\n * the component's renderer. Normally all host bindings are evaluated with the parent\n * component's renderer, but, in the case of animation \\@triggers, they need to be\n * evaluated with the sub component's renderer (because that's where the animation\n * triggers are defined).\n *\n * Do not use this instruction as a replacement for `elementProperty`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * \\@codeGenApi\n * @template T\n * @param {?} index The index of the element to update in the data array\n * @param {?} propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param {?} value New value to write.\n * @param {?=} sanitizer An optional function used to sanitize the value.\n * @param {?=} nativeOnly Whether or not we should only set native properties and skip input check\n * (this is necessary for host property bindings)\n *\n * @return {?}\n */\nfunction ɵɵcomponentHostSyntheticProperty(index, propName, value, sanitizer, nativeOnly) {\n    elementPropertyInternal(index, propName, value, sanitizer, nativeOnly, loadComponentRenderer);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Create interpolation bindings with a variable number of expressions.\n *\n * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\n * Those are faster because there is no need to create an array of expressions and iterate over it.\n *\n * `values`:\n * - has static text at even indexes,\n * - has evaluated expressions at odd indexes.\n *\n * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n *\n * \\@codeGenApi\n * @param {?} values\n * @return {?}\n */\nfunction ɵɵinterpolationV(values) {\n    ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\n    ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');\n    /** @type {?} */\n    let different = false;\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tData = lView[TVIEW].data;\n    /** @type {?} */\n    let bindingIndex = lView[BINDING_INDEX];\n    if (tData[bindingIndex] == null) {\n        // 2 is the index of the first static interstitial value (ie. not prefix)\n        for (let i = 2; i < values.length; i += 2) {\n            tData[bindingIndex++] = values[i];\n        }\n        bindingIndex = lView[BINDING_INDEX];\n    }\n    for (let i = 1; i < values.length; i += 2) {\n        // Check if bindings (odd indexes) have changed\n        bindingUpdated(lView, bindingIndex++, values[i]) && (different = true);\n    }\n    lView[BINDING_INDEX] = bindingIndex;\n    storeBindingMetadata(lView, values[0], values[values.length - 1]);\n    if (!different) {\n        return NO_CHANGE;\n    }\n    // Build the updated content\n    /** @type {?} */\n    let content = values[0];\n    for (let i = 1; i < values.length; i += 2) {\n        content += renderStringify(values[i]) + values[i + 1];\n    }\n    return content;\n}\n/**\n * Creates an interpolation binding with 1 expression.\n *\n * \\@codeGenApi\n * @param {?} prefix static value used for concatenation only.\n * @param {?} v0 value checked for change.\n * @param {?} suffix static value used for concatenation only.\n *\n * @return {?}\n */\nfunction ɵɵinterpolation1(prefix, v0, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const different = bindingUpdated(lView, lView[BINDING_INDEX]++, v0);\n    storeBindingMetadata(lView, prefix, suffix);\n    return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 2 expressions.\n *\n * \\@codeGenApi\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} suffix\n * @return {?}\n */\nfunction ɵɵinterpolation2(prefix, v0, i0, v1, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    const different = bindingUpdated2(lView, bindingIndex, v0, v1);\n    lView[BINDING_INDEX] += 2;\n    // Only set static strings the first time (data will be null subsequent runs).\n    /** @type {?} */\n    const data = storeBindingMetadata(lView, prefix, suffix);\n    if (data) {\n        lView[TVIEW].data[bindingIndex] = i0;\n    }\n    return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 3 expressions.\n *\n * \\@codeGenApi\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} suffix\n * @return {?}\n */\nfunction ɵɵinterpolation3(prefix, v0, i0, v1, i1, v2, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    const different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);\n    lView[BINDING_INDEX] += 3;\n    // Only set static strings the first time (data will be null subsequent runs).\n    /** @type {?} */\n    const data = storeBindingMetadata(lView, prefix, suffix);\n    if (data) {\n        /** @type {?} */\n        const tData = lView[TVIEW].data;\n        tData[bindingIndex] = i0;\n        tData[bindingIndex + 1] = i1;\n    }\n    return different ?\n        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix :\n        NO_CHANGE;\n}\n/**\n * Create an interpolation binding with 4 expressions.\n *\n * \\@codeGenApi\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} suffix\n * @return {?}\n */\nfunction ɵɵinterpolation4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    const different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    lView[BINDING_INDEX] += 4;\n    // Only set static strings the first time (data will be null subsequent runs).\n    /** @type {?} */\n    const data = storeBindingMetadata(lView, prefix, suffix);\n    if (data) {\n        /** @type {?} */\n        const tData = lView[TVIEW].data;\n        tData[bindingIndex] = i0;\n        tData[bindingIndex + 1] = i1;\n        tData[bindingIndex + 2] = i2;\n    }\n    return different ?\n        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n            renderStringify(v3) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 5 expressions.\n *\n * \\@codeGenApi\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} suffix\n * @return {?}\n */\nfunction ɵɵinterpolation5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated(lView, bindingIndex + 4, v4) || different;\n    lView[BINDING_INDEX] += 5;\n    // Only set static strings the first time (data will be null subsequent runs).\n    /** @type {?} */\n    const data = storeBindingMetadata(lView, prefix, suffix);\n    if (data) {\n        /** @type {?} */\n        const tData = lView[TVIEW].data;\n        tData[bindingIndex] = i0;\n        tData[bindingIndex + 1] = i1;\n        tData[bindingIndex + 2] = i2;\n        tData[bindingIndex + 3] = i3;\n    }\n    return different ?\n        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n            renderStringify(v3) + i3 + renderStringify(v4) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 6 expressions.\n *\n * \\@codeGenApi\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} suffix\n * @return {?}\n */\nfunction ɵɵinterpolation6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;\n    lView[BINDING_INDEX] += 6;\n    // Only set static strings the first time (data will be null subsequent runs).\n    /** @type {?} */\n    const data = storeBindingMetadata(lView, prefix, suffix);\n    if (data) {\n        /** @type {?} */\n        const tData = lView[TVIEW].data;\n        tData[bindingIndex] = i0;\n        tData[bindingIndex + 1] = i1;\n        tData[bindingIndex + 2] = i2;\n        tData[bindingIndex + 3] = i3;\n        tData[bindingIndex + 4] = i4;\n    }\n    return different ?\n        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n            renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 7 expressions.\n *\n * \\@codeGenApi\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} i5\n * @param {?} v6\n * @param {?} suffix\n * @return {?}\n */\nfunction ɵɵinterpolation7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;\n    lView[BINDING_INDEX] += 7;\n    // Only set static strings the first time (data will be null subsequent runs).\n    /** @type {?} */\n    const data = storeBindingMetadata(lView, prefix, suffix);\n    if (data) {\n        /** @type {?} */\n        const tData = lView[TVIEW].data;\n        tData[bindingIndex] = i0;\n        tData[bindingIndex + 1] = i1;\n        tData[bindingIndex + 2] = i2;\n        tData[bindingIndex + 3] = i3;\n        tData[bindingIndex + 4] = i4;\n        tData[bindingIndex + 5] = i5;\n    }\n    return different ?\n        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n            renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 +\n            renderStringify(v6) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 8 expressions.\n *\n * \\@codeGenApi\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} i5\n * @param {?} v6\n * @param {?} i6\n * @param {?} v7\n * @param {?} suffix\n * @return {?}\n */\nfunction ɵɵinterpolation8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;\n    lView[BINDING_INDEX] += 8;\n    // Only set static strings the first time (data will be null subsequent runs).\n    /** @type {?} */\n    const data = storeBindingMetadata(lView, prefix, suffix);\n    if (data) {\n        /** @type {?} */\n        const tData = lView[TVIEW].data;\n        tData[bindingIndex] = i0;\n        tData[bindingIndex + 1] = i1;\n        tData[bindingIndex + 2] = i2;\n        tData[bindingIndex + 3] = i3;\n        tData[bindingIndex + 4] = i4;\n        tData[bindingIndex + 5] = i5;\n        tData[bindingIndex + 6] = i6;\n    }\n    return different ?\n        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n            renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 +\n            renderStringify(v6) + i6 + renderStringify(v7) + suffix :\n        NO_CHANGE;\n}\n/////////////////////////////////////////////////////////////////////\n/// NEW INSTRUCTIONS\n/////////////////////////////////////////////////////////////////////\n/**\n *\n * Update an interpolated property on an element with a lone bound value\n *\n * Used when the value passed to a property has 1 interpolated value in it, an no additional text\n * surrounds that interpolated value:\n *\n * ```html\n * <div title=\"{{v0}}\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate('title', v0);\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `\\@Inputs` don't have to be re-compiled.\n *\n * \\@codeGenApi\n * @param {?} propName The name of the property to update\n * @param {?} v0 Value checked for change.\n * @param {?=} sanitizer An optional sanitizer function\n * @return {?} itself, so that it may be chained.\n */\nfunction ɵɵpropertyInterpolate(propName, v0, sanitizer) {\n    ɵɵpropertyInterpolate1(propName, '', v0, '', sanitizer);\n    return ɵɵpropertyInterpolate;\n}\n/**\n *\n * Update an interpolated property on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate1('title', 'prefix', v0, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `\\@Inputs` don't have to be re-compiled.\n *\n * \\@codeGenApi\n * @param {?} propName The name of the property to update\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @param {?=} sanitizer An optional sanitizer function\n * @return {?} itself, so that it may be chained.\n */\nfunction ɵɵpropertyInterpolate1(propName, prefix, v0, suffix, sanitizer) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    elementPropertyInternal(index, propName, ɵɵinterpolation1(prefix, v0, suffix), sanitizer);\n    return ɵɵpropertyInterpolate1;\n}\n/**\n *\n * Update an interpolated property on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `\\@Inputs` don't have to be re-compiled.\n *\n * \\@codeGenApi\n * @param {?} propName The name of the property to update\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @param {?=} sanitizer An optional sanitizer function\n * @return {?} itself, so that it may be chained.\n */\nfunction ɵɵpropertyInterpolate2(propName, prefix, v0, i0, v1, suffix, sanitizer) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    elementPropertyInternal(index, propName, ɵɵinterpolation2(prefix, v0, i0, v1, suffix), sanitizer);\n    return ɵɵpropertyInterpolate2;\n}\n/**\n *\n * Update an interpolated property on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate3(\n * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `\\@Inputs` don't have to be re-compiled.\n *\n * \\@codeGenApi\n * @param {?} propName The name of the property to update\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} i1 Static value used for concatenation only.\n * @param {?} v2 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @param {?=} sanitizer An optional sanitizer function\n * @return {?} itself, so that it may be chained.\n */\nfunction ɵɵpropertyInterpolate3(propName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    elementPropertyInternal(index, propName, ɵɵinterpolation3(prefix, v0, i0, v1, i1, v2, suffix), sanitizer);\n    return ɵɵpropertyInterpolate3;\n}\n/**\n *\n * Update an interpolated property on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate4(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `\\@Inputs` don't have to be re-compiled.\n *\n * \\@codeGenApi\n * @param {?} propName The name of the property to update\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} i1 Static value used for concatenation only.\n * @param {?} v2 Value checked for change.\n * @param {?} i2 Static value used for concatenation only.\n * @param {?} v3 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @param {?=} sanitizer An optional sanitizer function\n * @return {?} itself, so that it may be chained.\n */\nfunction ɵɵpropertyInterpolate4(propName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    elementPropertyInternal(index, propName, ɵɵinterpolation4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix), sanitizer);\n    return ɵɵpropertyInterpolate4;\n}\n/**\n *\n * Update an interpolated property on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate5(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `\\@Inputs` don't have to be re-compiled.\n *\n * \\@codeGenApi\n * @param {?} propName The name of the property to update\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} i1 Static value used for concatenation only.\n * @param {?} v2 Value checked for change.\n * @param {?} i2 Static value used for concatenation only.\n * @param {?} v3 Value checked for change.\n * @param {?} i3 Static value used for concatenation only.\n * @param {?} v4 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @param {?=} sanitizer An optional sanitizer function\n * @return {?} itself, so that it may be chained.\n */\nfunction ɵɵpropertyInterpolate5(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    elementPropertyInternal(index, propName, ɵɵinterpolation5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix), sanitizer);\n    return ɵɵpropertyInterpolate5;\n}\n/**\n *\n * Update an interpolated property on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate6(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `\\@Inputs` don't have to be re-compiled.\n *\n * \\@codeGenApi\n * @param {?} propName The name of the property to update\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} i1 Static value used for concatenation only.\n * @param {?} v2 Value checked for change.\n * @param {?} i2 Static value used for concatenation only.\n * @param {?} v3 Value checked for change.\n * @param {?} i3 Static value used for concatenation only.\n * @param {?} v4 Value checked for change.\n * @param {?} i4 Static value used for concatenation only.\n * @param {?} v5 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @param {?=} sanitizer An optional sanitizer function\n * @return {?} itself, so that it may be chained.\n */\nfunction ɵɵpropertyInterpolate6(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    elementPropertyInternal(index, propName, ɵɵinterpolation6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix), sanitizer);\n    return ɵɵpropertyInterpolate6;\n}\n/**\n *\n * Update an interpolated property on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate7(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `\\@Inputs` don't have to be re-compiled.\n *\n * \\@codeGenApi\n * @param {?} propName The name of the property to update\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} i1 Static value used for concatenation only.\n * @param {?} v2 Value checked for change.\n * @param {?} i2 Static value used for concatenation only.\n * @param {?} v3 Value checked for change.\n * @param {?} i3 Static value used for concatenation only.\n * @param {?} v4 Value checked for change.\n * @param {?} i4 Static value used for concatenation only.\n * @param {?} v5 Value checked for change.\n * @param {?} i5 Static value used for concatenation only.\n * @param {?} v6 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @param {?=} sanitizer An optional sanitizer function\n * @return {?} itself, so that it may be chained.\n */\nfunction ɵɵpropertyInterpolate7(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    elementPropertyInternal(index, propName, ɵɵinterpolation7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix), sanitizer);\n    return ɵɵpropertyInterpolate7;\n}\n/**\n *\n * Update an interpolated property on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate8(\n *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `\\@Inputs` don't have to be re-compiled.\n *\n * \\@codeGenApi\n * @param {?} propName The name of the property to update\n * @param {?} prefix Static value used for concatenation only.\n * @param {?} v0 Value checked for change.\n * @param {?} i0 Static value used for concatenation only.\n * @param {?} v1 Value checked for change.\n * @param {?} i1 Static value used for concatenation only.\n * @param {?} v2 Value checked for change.\n * @param {?} i2 Static value used for concatenation only.\n * @param {?} v3 Value checked for change.\n * @param {?} i3 Static value used for concatenation only.\n * @param {?} v4 Value checked for change.\n * @param {?} i4 Static value used for concatenation only.\n * @param {?} v5 Value checked for change.\n * @param {?} i5 Static value used for concatenation only.\n * @param {?} v6 Value checked for change.\n * @param {?} i6 Static value used for concatenation only.\n * @param {?} v7 Value checked for change.\n * @param {?} suffix Static value used for concatenation only.\n * @param {?=} sanitizer An optional sanitizer function\n * @return {?} itself, so that it may be chained.\n */\nfunction ɵɵpropertyInterpolate8(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    elementPropertyInternal(index, propName, ɵɵinterpolation8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix), sanitizer);\n    return ɵɵpropertyInterpolate8;\n}\n/**\n * Update an interpolated property on an element with 8 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 7.\n *\n * ```html\n * <div\n *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolateV(\n *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `\\@Inputs` don't have to be re-compiled.\n *\n * \\@codeGenApi\n * @param {?} propName The name of the property to update.\n * @param {?} values The a collection of values and the strings inbetween those values, beginning with a\n * string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param {?=} sanitizer An optional sanitizer function\n * @return {?} itself, so that it may be chained.\n */\nfunction ɵɵpropertyInterpolateV(propName, values, sanitizer) {\n    /** @type {?} */\n    const index = getSelectedIndex();\n    elementPropertyInternal(index, propName, ɵɵinterpolationV(values), sanitizer);\n    return ɵɵpropertyInterpolateV;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Selects an element for later binding instructions.\n *\n * Used in conjunction with instructions like {\\@link property} to act on elements with specified\n * indices, for example those created with {\\@link element} or {\\@link elementStart}.\n *\n * ```ts\n * (rf: RenderFlags, ctx: any) => {\n *   if (rf & 1) {\n *     element(0, 'div');\n *   }\n *   if (rf & 2) {\n *     select(0); // Select the <div/> created above.\n *     property('title', 'test');\n *   }\n *  }\n * ```\n * \\@codeGenApi\n * @param {?} index the index of the item to act on with the following instructions\n *\n * @return {?}\n */\nfunction ɵɵselect(index) {\n    ngDevMode && assertGreaterThan(index, -1, 'Invalid index');\n    ngDevMode &&\n        assertLessThan(index, getLView().length - HEADER_OFFSET, 'Should be within range for the view data');\n    /** @type {?} */\n    const lView = getLView();\n    // Flush the initial hooks for elements in the view that have been added up to this point.\n    executePreOrderHooks(lView, lView[TVIEW], getCheckNoChangesMode(), index);\n    // We must set the selected index *after* running the hooks, because hooks may have side-effects\n    // that cause other template functions to run, thus updating the selected index, which is global\n    // state. If we run `setSelectedIndex` *before* we run the hooks, in some cases the selected index\n    // will be altered by the time we leave the `ɵɵselect` instruction.\n    setSelectedIndex(index);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Create static text node\n *\n * \\@codeGenApi\n * @param {?} index Index of the node in the data array\n * @param {?=} value Value to write. This value will be stringified.\n *\n * @return {?}\n */\nfunction ɵɵtext(index, value) {\n    /** @type {?} */\n    const lView = getLView();\n    ngDevMode && assertEqual(lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex, 'text nodes should be created before any bindings');\n    ngDevMode && ngDevMode.rendererCreateTextNode++;\n    /** @type {?} */\n    const textNative = createTextNode(value, lView[RENDERER]);\n    /** @type {?} */\n    const tNode = createNodeAtIndex(index, 3 /* Element */, textNative, null, null);\n    // Text nodes are self closing.\n    setIsParent(false);\n    appendChild(textNative, tNode, lView);\n}\n/**\n * Create text node with binding\n * Bindings should be handled externally with the proper interpolation(1-8) method\n *\n * \\@codeGenApi\n * @template T\n * @param {?} index Index of the node in the data array.\n * @param {?} value Stringified value to write.\n *\n * @return {?}\n */\nfunction ɵɵtextBinding(index, value) {\n    if (value !== NO_CHANGE) {\n        /** @type {?} */\n        const lView = getLView();\n        ngDevMode && assertDataInRange(lView, index + HEADER_OFFSET);\n        /** @type {?} */\n        const element = (/** @type {?} */ ((/** @type {?} */ (getNativeByIndex(index, lView)))));\n        ngDevMode && assertDefined(element, 'native element should exist');\n        ngDevMode && ngDevMode.rendererSetText++;\n        /** @type {?} */\n        const renderer = lView[RENDERER];\n        isProceduralRenderer(renderer) ? renderer.setValue(element, renderStringify(value)) :\n            element.textContent = renderStringify(value);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Adds a player to an element, directive or component instance that will later be\n * animated once change detection has passed.\n *\n * When a player is added to a reference it will stay active until `player.destroy()`\n * is called. Once called then the player will be removed from the active players\n * present on the associated ref instance.\n *\n * To get a list of all the active players on an element see [getPlayers].\n *\n * @param {?} ref The element, directive or component that the player will be placed on.\n * @param {?} player The player that will be triggered to play once change detection has run.\n * @return {?}\n */\nfunction addPlayer(ref, player) {\n    /** @type {?} */\n    const context = getLContext(ref);\n    if (!context) {\n        ngDevMode && throwInvalidRefError();\n        return;\n    }\n    /** @type {?} */\n    const element = (/** @type {?} */ (context.native));\n    /** @type {?} */\n    const lView = context.lView;\n    /** @type {?} */\n    const playerContext = (/** @type {?} */ (getOrCreatePlayerContext(element, context)));\n    /** @type {?} */\n    const rootContext = getRootContext(lView);\n    addPlayerInternal(playerContext, rootContext, element, player, 0, ref);\n    scheduleTick(rootContext, 2 /* FlushPlayers */);\n}\n/**\n * Returns a list of all the active players present on the provided ref instance (which can\n * be an instance of a directive, component or element).\n *\n * This function will only return players that have been added to the ref instance using\n * `addPlayer` or any players that are active through any template styling bindings\n * (`[style]`, `[style.prop]`, `[class]` and `[class.name]`).\n *\n * \\@publicApi\n * @param {?} ref\n * @return {?}\n */\nfunction getPlayers(ref) {\n    /** @type {?} */\n    const context = getLContext(ref);\n    if (!context) {\n        ngDevMode && throwInvalidRefError();\n        return [];\n    }\n    /** @type {?} */\n    const stylingContext = getStylingContextFromLView(context.nodeIndex, context.lView);\n    /** @type {?} */\n    const playerContext = stylingContext ? getPlayerContext(stylingContext) : null;\n    return playerContext ? getPlayersInternal(playerContext) : [];\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns the component instance associated with a given DOM host element.\n * Elements which don't represent components return `null`.\n *\n * \\@publicApi\n * @template T\n * @param {?} element Host DOM element from which the component should be retrieved.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div>\n *       <child-comp></child-comp>\n *     </div>\n * </mp-app>\n *\n * expect(getComponent(<child-comp>) instanceof ChildComponent).toBeTruthy();\n * expect(getComponent(<my-app>) instanceof MyApp).toBeTruthy();\n * ```\n *\n * @return {?}\n */\nfunction getComponent(element) {\n    /** @type {?} */\n    const context = loadLContextFromNode(element);\n    if (context.component === undefined) {\n        context.component = getComponentAtNodeIndex(context.nodeIndex, context.lView);\n    }\n    return (/** @type {?} */ (context.component));\n}\n/**\n * Returns the component instance associated with a given DOM host element.\n * Elements which don't represent components return `null`.\n *\n * \\@publicApi\n * @template T\n * @param {?} element Host DOM element from which the component should be retrieved.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div>\n *       <child-comp></child-comp>\n *     </div>\n * </mp-app>\n *\n * expect(getComponent(<child-comp>) instanceof ChildComponent).toBeTruthy();\n * expect(getComponent(<my-app>) instanceof MyApp).toBeTruthy();\n * ```\n *\n * @return {?}\n */\nfunction getContext(element) {\n    /** @type {?} */\n    const context = (/** @type {?} */ (loadLContextFromNode(element)));\n    return (/** @type {?} */ (context.lView[CONTEXT]));\n}\n/**\n * Returns the component instance associated with view which owns the DOM element (`null`\n * otherwise).\n *\n * \\@publicApi\n * @template T\n * @param {?} element DOM element which is owned by an existing component's view.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div>\n *       <child-comp></child-comp>\n *     </div>\n * </mp-app>\n *\n * expect(getViewComponent(<child-comp>) instanceof MyApp).toBeTruthy();\n * expect(getViewComponent(<my-app>)).toEqual(null);\n * ```\n *\n * @return {?}\n */\nfunction getViewComponent(element) {\n    /** @type {?} */\n    const context = (/** @type {?} */ (loadLContext(element)));\n    /** @type {?} */\n    let lView = context.lView;\n    /** @type {?} */\n    let parent;\n    ngDevMode && assertLView(lView);\n    while (lView[HOST] === null && (parent = (/** @type {?} */ (getLViewParent(lView))))) {\n        // As long as lView[HOST] is null we know we are part of sub-template such as `*ngIf`\n        lView = parent;\n    }\n    return lView[FLAGS] & 512 /* IsRoot */ ? null : (/** @type {?} */ (lView[CONTEXT]));\n}\n/**\n * Retrieve all root components.\n *\n * Root components are those which have been bootstrapped by Angular.\n *\n * \\@publicApi\n * @param {?} target A DOM element, component or directive instance.\n *\n * @return {?}\n */\nfunction getRootComponents(target) {\n    return [...getRootContext(target).components];\n}\n/**\n * Retrieves an `Injector` associated with the element, component or directive.\n *\n * \\@publicApi\n * @param {?} target A DOM element, component or directive instance.\n *\n * @return {?}\n */\nfunction getInjector(target) {\n    /** @type {?} */\n    const context = loadLContext(target);\n    /** @type {?} */\n    const tNode = (/** @type {?} */ (context.lView[TVIEW].data[context.nodeIndex]));\n    return new NodeInjector(tNode, context.lView);\n}\n/**\n * Retrieve a set of injection tokens at a given DOM node.\n *\n * \\@publicApi\n * @param {?} element Element for which the injection tokens should be retrieved.\n * @return {?}\n */\nfunction getInjectionTokens(element) {\n    /** @type {?} */\n    const context = loadLContext(element, false);\n    if (!context)\n        return [];\n    /** @type {?} */\n    const lView = context.lView;\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const tNode = (/** @type {?} */ (tView.data[context.nodeIndex]));\n    /** @type {?} */\n    const providerTokens = [];\n    /** @type {?} */\n    const startIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n    /** @type {?} */\n    const endIndex = tNode.directiveEnd;\n    for (let i = startIndex; i < endIndex; i++) {\n        /** @type {?} */\n        let value = tView.data[i];\n        if (isDirectiveDefHack(value)) {\n            // The fact that we sometimes store Type and sometimes DirectiveDef in this location is a\n            // design flaw.  We should always store same type so that we can be monomorphic. The issue\n            // is that for Components/Directives we store the def instead the type. The correct behavior\n            // is that we should always be storing injectable type in this location.\n            value = value.type;\n        }\n        providerTokens.push(value);\n    }\n    return providerTokens;\n}\n/**\n * Retrieves directives associated with a given DOM host element.\n *\n * \\@publicApi\n * @param {?} target A DOM element, component or directive instance.\n *\n * @return {?}\n */\nfunction getDirectives(target) {\n    /** @type {?} */\n    const context = (/** @type {?} */ (loadLContext(target)));\n    if (context.directives === undefined) {\n        context.directives = getDirectivesAtNodeIndex(context.nodeIndex, context.lView, false);\n    }\n    return context.directives || [];\n}\n/**\n * @param {?} target\n * @param {?=} throwOnNotFound\n * @return {?}\n */\nfunction loadLContext(target, throwOnNotFound = true) {\n    /** @type {?} */\n    const context = getLContext(target);\n    if (!context && throwOnNotFound) {\n        throw new Error(ngDevMode ? `Unable to find context associated with ${stringifyForError(target)}` :\n            'Invalid ng target');\n    }\n    return context;\n}\n/**\n * Retrieve map of local references.\n *\n * The references are retrieved as a map of local reference name to element or directive instance.\n *\n * \\@publicApi\n * @param {?} target A DOM element, component or directive instance.\n *\n * @return {?}\n */\nfunction getLocalRefs(target) {\n    /** @type {?} */\n    const context = (/** @type {?} */ (loadLContext(target)));\n    if (context.localRefs === undefined) {\n        context.localRefs = discoverLocalRefs(context.lView, context.nodeIndex);\n    }\n    return context.localRefs || {};\n}\n/**\n * Retrieve the host element of the component.\n *\n * Use this function to retrieve the host element of the component. The host\n * element is the element which the component is associated with.\n *\n * \\@publicApi\n * @template T\n * @param {?} directive Component or Directive for which the host element should be retrieved.\n *\n * @return {?}\n */\nfunction getHostElement(directive) {\n    return (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (getLContext(directive))).native))));\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction loadLContextFromNode(node) {\n    if (!(node instanceof Node))\n        throw new Error('Expecting instance of DOM Node');\n    return (/** @type {?} */ (loadLContext(node)));\n}\n/**\n * @param {?} listener\n * @return {?}\n */\nfunction isBrowserEvents(listener) {\n    // Browser events are those which don't have `useCapture` as boolean.\n    return typeof listener.useCapture === 'boolean';\n}\n/**\n * Retrieves a list of DOM listeners.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div (click)=\"doSomething()\">\n *     </div>\n * </mp-app>\n *\n * expect(getListeners(<div>)).toEqual({\n *   name: 'click',\n *   element: <div>,\n *   callback: () => doSomething(),\n *   useCapture: false\n * });\n * ```\n *\n * \\@publicApi\n * @param {?} element Element for which the DOM listeners should be retrieved.\n * @return {?}\n */\nfunction getListeners(element) {\n    /** @type {?} */\n    const lContext = loadLContextFromNode(element);\n    /** @type {?} */\n    const lView = lContext.lView;\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const lCleanup = lView[CLEANUP];\n    /** @type {?} */\n    const tCleanup = tView.cleanup;\n    /** @type {?} */\n    const listeners = [];\n    if (tCleanup && lCleanup) {\n        for (let i = 0; i < tCleanup.length;) {\n            /** @type {?} */\n            const firstParam = tCleanup[i++];\n            /** @type {?} */\n            const secondParam = tCleanup[i++];\n            if (typeof firstParam === 'string') {\n                /** @type {?} */\n                const name = firstParam;\n                /** @type {?} */\n                const listenerElement = (/** @type {?} */ ((/** @type {?} */ (unwrapRNode(lView[secondParam])))));\n                /** @type {?} */\n                const callback = lCleanup[tCleanup[i++]];\n                /** @type {?} */\n                const useCaptureOrIndx = tCleanup[i++];\n                // if useCaptureOrIndx is boolean then report it as is.\n                // if useCaptureOrIndx is positive number then it in unsubscribe method\n                // if useCaptureOrIndx is negative number then it is a Subscription\n                /** @type {?} */\n                const useCapture = typeof useCaptureOrIndx === 'boolean' ?\n                    useCaptureOrIndx :\n                    (useCaptureOrIndx >= 0 ? false : null);\n                if (element == listenerElement) {\n                    listeners.push({ element, name, callback, useCapture });\n                }\n            }\n        }\n    }\n    listeners.sort(sortListeners);\n    return listeners;\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction sortListeners(a, b) {\n    if (a.name == b.name)\n        return 0;\n    return a.name < b.name ? -1 : 1;\n}\n/**\n * This function should not exist because it is megamorphic and only mostly correct.\n *\n * See call site for more info.\n * @param {?} obj\n * @return {?}\n */\nfunction isDirectiveDefHack(obj) {\n    return obj.type !== undefined && obj.template !== undefined && obj.declaredInputs !== undefined;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This value reflects the property on the window where the dev\n * tools are patched (window.ng).\n *\n * @type {?}\n */\nconst GLOBAL_PUBLISH_EXPANDO_KEY = 'ng';\n/** @type {?} */\nlet _published = false;\n/**\n * Publishes a collection of default debug tools onto`window.ng`.\n *\n * These functions are available globally when Angular is in development\n * mode and are automatically stripped away from prod mode is on.\n * @return {?}\n */\nfunction publishDefaultGlobalUtils() {\n    if (!_published) {\n        _published = true;\n        publishGlobalUtil('getComponent', getComponent);\n        publishGlobalUtil('getContext', getContext);\n        publishGlobalUtil('getListeners', getListeners);\n        publishGlobalUtil('getViewComponent', getViewComponent);\n        publishGlobalUtil('getHostElement', getHostElement);\n        publishGlobalUtil('getInjector', getInjector);\n        publishGlobalUtil('getRootComponents', getRootComponents);\n        publishGlobalUtil('getDirectives', getDirectives);\n        publishGlobalUtil('getPlayers', getPlayers);\n        publishGlobalUtil('markDirty', markDirty);\n    }\n}\n/**\n * Publishes the given function to `window.ng` so that it can be\n * used from the browser console when an application is not in production.\n * @param {?} name\n * @param {?} fn\n * @return {?}\n */\nfunction publishGlobalUtil(name, fn) {\n    /** @type {?} */\n    const w = (/** @type {?} */ ((/** @type {?} */ (_global))));\n    ngDevMode && assertDefined(fn, 'function not defined');\n    if (w) {\n        /** @type {?} */\n        let container = w[GLOBAL_PUBLISH_EXPANDO_KEY];\n        if (!container) {\n            container = w[GLOBAL_PUBLISH_EXPANDO_KEY] = {};\n        }\n        container[name] = fn;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Bootstraps a Component into an existing host element and returns an instance\n * of the component.\n *\n * Use this function to bootstrap a component into the DOM tree. Each invocation\n * of this function will create a separate tree of components, injectors and\n * change detection cycles and lifetimes. To dynamically insert a new component\n * into an existing tree such that it shares the same injection, change detection\n * and object lifetime, use {\\@link ViewContainer#createComponent}.\n *\n * @template T\n * @param {?} componentType Component to bootstrap\n * @param {?=} opts\n * @return {?}\n */\nfunction renderComponent(componentType /* Type as workaround for: Microsoft/TypeScript/issues/4881 */, opts = {}) {\n    ngDevMode && publishDefaultGlobalUtils();\n    ngDevMode && assertComponentType(componentType);\n    /** @type {?} */\n    const rendererFactory = opts.rendererFactory || domRendererFactory3;\n    /** @type {?} */\n    const sanitizer = opts.sanitizer || null;\n    /** @type {?} */\n    const componentDef = (/** @type {?} */ (getComponentDef(componentType)));\n    if (componentDef.type != componentType)\n        componentDef.type = componentType;\n    // The first index of the first selector is the tag name.\n    /** @type {?} */\n    const componentTag = (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (componentDef.selectors))[0]))[0]));\n    /** @type {?} */\n    const hostRNode = locateHostElement(rendererFactory, opts.host || componentTag);\n    /** @type {?} */\n    const rootFlags = componentDef.onPush ? 64 /* Dirty */ | 512 /* IsRoot */ :\n        16 /* CheckAlways */ | 512 /* IsRoot */;\n    /** @type {?} */\n    const rootContext = createRootContext(opts.scheduler, opts.playerHandler);\n    /** @type {?} */\n    const renderer = rendererFactory.createRenderer(hostRNode, componentDef);\n    /** @type {?} */\n    const rootView = createLView(null, createTView(-1, null, 1, 0, null, null, null, null), rootContext, rootFlags, null, null, rendererFactory, renderer, undefined, opts.injector || null);\n    /** @type {?} */\n    const oldView = enterView(rootView, null);\n    /** @type {?} */\n    let component;\n    try {\n        if (rendererFactory.begin)\n            rendererFactory.begin();\n        /** @type {?} */\n        const componentView = createRootComponentView(hostRNode, componentDef, rootView, rendererFactory, renderer, sanitizer);\n        component = createRootComponent(componentView, componentDef, rootView, rootContext, opts.hostFeatures || null);\n        addToViewTree(rootView, componentView);\n        refreshDescendantViews(rootView); // creation mode pass\n        rootView[FLAGS] &= ~4 /* CreationMode */;\n        resetPreOrderHookFlags(rootView);\n        refreshDescendantViews(rootView); // update mode pass\n    }\n    finally {\n        leaveView(oldView);\n        if (rendererFactory.end)\n            rendererFactory.end();\n    }\n    return component;\n}\n/**\n * Creates the root component view and the root component node.\n *\n * @param {?} rNode Render host element.\n * @param {?} def ComponentDef\n * @param {?} rootView The parent view where the host node is stored\n * @param {?} rendererFactory\n * @param {?} renderer The current renderer\n * @param {?=} sanitizer The sanitizer, if provided\n *\n * @return {?} Component view created\n */\nfunction createRootComponentView(rNode, def, rootView, rendererFactory, renderer, sanitizer) {\n    resetComponentState();\n    /** @type {?} */\n    const tView = rootView[TVIEW];\n    /** @type {?} */\n    const tNode = createNodeAtIndex(0, 3 /* Element */, rNode, null, null);\n    /** @type {?} */\n    const componentView = createLView(rootView, getOrCreateTView(def.template, def.consts, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas), null, def.onPush ? 64 /* Dirty */ : 16 /* CheckAlways */, rootView[HEADER_OFFSET], tNode, rendererFactory, renderer, sanitizer);\n    if (tView.firstTemplatePass) {\n        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, rootView), rootView, def.type);\n        tNode.flags = 1 /* isComponent */;\n        initNodeFlags(tNode, rootView.length, 1);\n        queueComponentIndexForCheck(tNode);\n    }\n    // Store component view at node index, with node as the HOST\n    return rootView[HEADER_OFFSET] = componentView;\n}\n/**\n * Creates a root component and sets it up with features and host bindings. Shared by\n * renderComponent() and ViewContainerRef.createComponent().\n * @template T\n * @param {?} componentView\n * @param {?} componentDef\n * @param {?} rootView\n * @param {?} rootContext\n * @param {?} hostFeatures\n * @return {?}\n */\nfunction createRootComponent(componentView, componentDef, rootView, rootContext, hostFeatures) {\n    /** @type {?} */\n    const tView = rootView[TVIEW];\n    // Create directive instance with factory() and store at next index in viewData\n    /** @type {?} */\n    const component = instantiateRootComponent(tView, rootView, componentDef);\n    rootContext.components.push(component);\n    componentView[CONTEXT] = component;\n    hostFeatures && hostFeatures.forEach((/**\n     * @param {?} feature\n     * @return {?}\n     */\n    (feature) => feature(component, componentDef)));\n    // We want to generate an empty QueryList for root content queries for backwards\n    // compatibility with ViewEngine.\n    if (componentDef.contentQueries) {\n        componentDef.contentQueries(1 /* Create */, component, rootView.length - 1);\n    }\n    /** @type {?} */\n    const rootTNode = getPreviousOrParentTNode();\n    if (tView.firstTemplatePass && componentDef.hostBindings) {\n        /** @type {?} */\n        const elementIndex = rootTNode.index - HEADER_OFFSET;\n        setActiveHostElement(elementIndex);\n        /** @type {?} */\n        const expando = (/** @type {?} */ (tView.expandoInstructions));\n        invokeHostBindingsInCreationMode(componentDef, expando, component, rootTNode, tView.firstTemplatePass);\n        rootTNode.onElementCreationFns && applyOnCreateInstructions(rootTNode);\n        setActiveHostElement(null);\n    }\n    if (rootTNode.stylingTemplate) {\n        /** @type {?} */\n        const native = (/** @type {?} */ ((/** @type {?} */ (componentView[HOST]))));\n        renderInitialClasses(native, rootTNode.stylingTemplate, componentView[RENDERER]);\n        renderInitialStyles(native, rootTNode.stylingTemplate, componentView[RENDERER]);\n    }\n    return component;\n}\n/**\n * @param {?=} scheduler\n * @param {?=} playerHandler\n * @return {?}\n */\nfunction createRootContext(scheduler, playerHandler) {\n    return {\n        components: [],\n        scheduler: scheduler || defaultScheduler,\n        clean: CLEAN_PROMISE,\n        playerHandler: playerHandler || null,\n        flags: 0 /* Empty */\n    };\n}\n/**\n * Used to enable lifecycle hooks on the root component.\n *\n * Include this feature when calling `renderComponent` if the root component\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n * be called properly.\n *\n * Example:\n *\n * ```\n * renderComponent(AppComponent, {features: [RootLifecycleHooks]});\n * ```\n * @param {?} component\n * @param {?} def\n * @return {?}\n */\nfunction LifecycleHooksFeature(component, def) {\n    /** @type {?} */\n    const rootTView = (/** @type {?} */ (readPatchedLView(component)))[TVIEW];\n    /** @type {?} */\n    const dirIndex = rootTView.data.length - 1;\n    registerPreOrderHooks(dirIndex, def, rootTView, -1, -1, -1);\n    // TODO(misko): replace `as TNode` with createTNode call. (needs refactoring to lose dep on\n    // LNode).\n    registerPostOrderHooks(rootTView, (/** @type {?} */ ({ directiveStart: dirIndex, directiveEnd: dirIndex + 1 })));\n}\n/**\n * Wait on component until it is rendered.\n *\n * This function returns a `Promise` which is resolved when the component's\n * change detection is executed. This is determined by finding the scheduler\n * associated with the `component`'s render tree and waiting until the scheduler\n * flushes. If nothing is scheduled, the function returns a resolved promise.\n *\n * Example:\n * ```\n * await whenRendered(myComponent);\n * ```\n *\n * @param {?} component Component to wait upon\n * @return {?} Promise which resolves when the component is rendered.\n */\nfunction whenRendered(component) {\n    return getRootContext(component).clean;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents a basic change from a previous to a new value for a single\n * property on a directive instance. Passed as a value in a\n * {@link SimpleChanges} object to the `ngOnChanges` hook.\n *\n * @see `OnChanges`\n *\n * @publicApi\n */\nclass SimpleChange {\n    constructor(previousValue, currentValue, firstChange) {\n        this.previousValue = previousValue;\n        this.currentValue = currentValue;\n        this.firstChange = firstChange;\n    }\n    /**\n     * Check whether the new value is the first value assigned.\n     */\n    isFirstChange() { return this.firstChange; }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The NgOnChangesFeature decorates a component with support for the ngOnChanges\n * lifecycle hook, so it should be included in any component that implements\n * that hook.\n *\n * If the component or directive uses inheritance, the NgOnChangesFeature MUST\n * be included as a feature AFTER {\\@link InheritDefinitionFeature}, otherwise\n * inherited properties will not be propagated to the ngOnChanges lifecycle\n * hook.\n *\n * Example usage:\n *\n * ```\n * static ngComponentDef = defineComponent({\n *   ...\n *   inputs: {name: 'publicName'},\n *   features: [NgOnChangesFeature()]\n * });\n * ```\n *\n * \\@codeGenApi\n * @template T\n * @return {?}\n */\nfunction ɵɵNgOnChangesFeature() {\n    // This option ensures that the ngOnChanges lifecycle hook will be inherited\n    // from superclasses (in InheritDefinitionFeature).\n    ((/** @type {?} */ (NgOnChangesFeatureImpl))).ngInherit = true;\n    return NgOnChangesFeatureImpl;\n}\n/**\n * @template T\n * @param {?} definition\n * @return {?}\n */\nfunction NgOnChangesFeatureImpl(definition) {\n    if (definition.type.prototype.ngOnChanges) {\n        definition.setInput = ngOnChangesSetInput;\n        definition.onChanges = wrapOnChanges();\n    }\n}\n/**\n * @return {?}\n */\nfunction wrapOnChanges() {\n    return (/**\n     * @this {?}\n     * @return {?}\n     */\n    function wrapOnChangesHook_inPreviousChangesStorage() {\n        /** @type {?} */\n        const simpleChangesStore = getSimpleChangesStore(this);\n        /** @type {?} */\n        const current = simpleChangesStore && simpleChangesStore.current;\n        if (current) {\n            /** @type {?} */\n            const previous = (/** @type {?} */ (simpleChangesStore)).previous;\n            if (previous === EMPTY_OBJ) {\n                (/** @type {?} */ (simpleChangesStore)).previous = current;\n            }\n            else {\n                // New changes are copied to the previous store, so that we don't lose history for inputs\n                // which were not changed this time\n                for (let key in current) {\n                    previous[key] = current[key];\n                }\n            }\n            (/** @type {?} */ (simpleChangesStore)).current = null;\n            this.ngOnChanges(current);\n        }\n    });\n}\n/**\n * @template T\n * @this {?}\n * @param {?} instance\n * @param {?} value\n * @param {?} publicName\n * @param {?} privateName\n * @return {?}\n */\nfunction ngOnChangesSetInput(instance, value, publicName, privateName) {\n    /** @type {?} */\n    const simpleChangesStore = getSimpleChangesStore(instance) ||\n        setSimpleChangesStore(instance, { previous: EMPTY_OBJ, current: null });\n    /** @type {?} */\n    const current = simpleChangesStore.current || (simpleChangesStore.current = {});\n    /** @type {?} */\n    const previous = simpleChangesStore.previous;\n    /** @type {?} */\n    const declaredName = ((/** @type {?} */ (this.declaredInputs)))[publicName];\n    /** @type {?} */\n    const previousChange = previous[declaredName];\n    current[declaredName] = new SimpleChange(previousChange && previousChange.currentValue, value, previous === EMPTY_OBJ);\n    ((/** @type {?} */ (instance)))[privateName] = value;\n}\n/** @type {?} */\nconst SIMPLE_CHANGES_STORE = '__ngSimpleChanges__';\n/**\n * @param {?} instance\n * @return {?}\n */\nfunction getSimpleChangesStore(instance) {\n    return instance[SIMPLE_CHANGES_STORE] || null;\n}\n/**\n * @param {?} instance\n * @param {?} store\n * @return {?}\n */\nfunction setSimpleChangesStore(instance, store) {\n    return instance[SIMPLE_CHANGES_STORE] = store;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} type\n * @return {?}\n */\nfunction getSuperType(type) {\n    return Object.getPrototypeOf(type.prototype).constructor;\n}\n/**\n * Merges the definition from a super class to a sub class.\n * \\@codeGenApi\n * @param {?} definition The definition that is a SubClass of another directive of component\n *\n * @return {?}\n */\nfunction ɵɵInheritDefinitionFeature(definition) {\n    /** @type {?} */\n    let superType = getSuperType(definition.type);\n    while (superType) {\n        /** @type {?} */\n        let superDef = undefined;\n        if (isComponentDef(definition)) {\n            // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n            superDef = superType.ngComponentDef || superType.ngDirectiveDef;\n        }\n        else {\n            if (superType.ngComponentDef) {\n                throw new Error('Directives cannot inherit Components');\n            }\n            // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n            superDef = superType.ngDirectiveDef;\n        }\n        /** @nocollapse @type {?} */\n        const baseDef = ((/** @type {?} */ (superType))).ngBaseDef;\n        // Some fields in the definition may be empty, if there were no values to put in them that\n        // would've justified object creation. Unwrap them if necessary.\n        if (baseDef || superDef) {\n            /** @type {?} */\n            const writeableDef = (/** @type {?} */ (definition));\n            writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);\n            writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);\n            writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);\n        }\n        if (baseDef) {\n            /** @type {?} */\n            const baseViewQuery = baseDef.viewQuery;\n            /** @type {?} */\n            const baseContentQueries = baseDef.contentQueries;\n            baseViewQuery && inheritViewQuery(definition, baseViewQuery);\n            baseContentQueries && inheritContentQueries(definition, baseContentQueries);\n            fillProperties(definition.inputs, baseDef.inputs);\n            fillProperties(definition.declaredInputs, baseDef.declaredInputs);\n            fillProperties(definition.outputs, baseDef.outputs);\n        }\n        if (superDef) {\n            // Merge hostBindings\n            /** @type {?} */\n            const prevHostBindings = definition.hostBindings;\n            /** @type {?} */\n            const superHostBindings = superDef.hostBindings;\n            if (superHostBindings) {\n                if (prevHostBindings) {\n                    // because inheritance is unknown during compile time, the runtime code\n                    // needs to be informed of the super-class depth so that instruction code\n                    // can distinguish one host bindings function from another. The reason why\n                    // relying on the directive uniqueId exclusively is not enough is because the\n                    // uniqueId value and the directive instance stay the same between hostBindings\n                    // calls throughout the directive inheritance chain. This means that without\n                    // a super-class depth value, there is no way to know whether a parent or\n                    // sub-class host bindings function is currently being executed.\n                    definition.hostBindings = (/**\n                     * @param {?} rf\n                     * @param {?} ctx\n                     * @param {?} elementIndex\n                     * @return {?}\n                     */\n                    (rf, ctx, elementIndex) => {\n                        // The reason why we increment first and then decrement is so that parent\n                        // hostBindings calls have a higher id value compared to sub-class hostBindings\n                        // calls (this way the leaf directive is always at a super-class depth of 0).\n                        adjustActiveDirectiveSuperClassDepthPosition(1);\n                        try {\n                            superHostBindings(rf, ctx, elementIndex);\n                        }\n                        finally {\n                            adjustActiveDirectiveSuperClassDepthPosition(-1);\n                        }\n                        prevHostBindings(rf, ctx, elementIndex);\n                    });\n                }\n                else {\n                    definition.hostBindings = superHostBindings;\n                }\n            }\n            // Merge queries\n            /** @type {?} */\n            const superViewQuery = superDef.viewQuery;\n            /** @type {?} */\n            const superContentQueries = superDef.contentQueries;\n            superViewQuery && inheritViewQuery(definition, superViewQuery);\n            superContentQueries && inheritContentQueries(definition, superContentQueries);\n            // Merge inputs and outputs\n            fillProperties(definition.inputs, superDef.inputs);\n            fillProperties(definition.declaredInputs, superDef.declaredInputs);\n            fillProperties(definition.outputs, superDef.outputs);\n            // Inherit hooks\n            // Assume super class inheritance feature has already run.\n            definition.afterContentChecked =\n                definition.afterContentChecked || superDef.afterContentChecked;\n            definition.afterContentInit = definition.afterContentInit || superDef.afterContentInit;\n            definition.afterViewChecked = definition.afterViewChecked || superDef.afterViewChecked;\n            definition.afterViewInit = definition.afterViewInit || superDef.afterViewInit;\n            definition.doCheck = definition.doCheck || superDef.doCheck;\n            definition.onDestroy = definition.onDestroy || superDef.onDestroy;\n            definition.onInit = definition.onInit || superDef.onInit;\n            // Run parent features\n            /** @type {?} */\n            const features = superDef.features;\n            if (features) {\n                for (const feature of features) {\n                    if (feature && feature.ngInherit) {\n                        ((/** @type {?} */ (feature)))(definition);\n                    }\n                }\n            }\n        }\n        else {\n            // Even if we don't have a definition, check the type for the hooks and use those if need be\n            /** @type {?} */\n            const superPrototype = superType.prototype;\n            if (superPrototype) {\n                definition.afterContentChecked =\n                    definition.afterContentChecked || superPrototype.ngAfterContentChecked;\n                definition.afterContentInit =\n                    definition.afterContentInit || superPrototype.ngAfterContentInit;\n                definition.afterViewChecked =\n                    definition.afterViewChecked || superPrototype.ngAfterViewChecked;\n                definition.afterViewInit = definition.afterViewInit || superPrototype.ngAfterViewInit;\n                definition.doCheck = definition.doCheck || superPrototype.ngDoCheck;\n                definition.onDestroy = definition.onDestroy || superPrototype.ngOnDestroy;\n                definition.onInit = definition.onInit || superPrototype.ngOnInit;\n                if (superPrototype.ngOnChanges) {\n                    ɵɵNgOnChangesFeature()(definition);\n                }\n            }\n        }\n        superType = Object.getPrototypeOf(superType);\n    }\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction maybeUnwrapEmpty(value) {\n    if (value === EMPTY_OBJ) {\n        return {};\n    }\n    else if (value === EMPTY_ARRAY$1) {\n        return [];\n    }\n    else {\n        return value;\n    }\n}\n/**\n * @param {?} definition\n * @param {?} superViewQuery\n * @return {?}\n */\nfunction inheritViewQuery(definition, superViewQuery) {\n    /** @type {?} */\n    const prevViewQuery = definition.viewQuery;\n    if (prevViewQuery) {\n        definition.viewQuery = (/**\n         * @param {?} rf\n         * @param {?} ctx\n         * @return {?}\n         */\n        (rf, ctx) => {\n            superViewQuery(rf, ctx);\n            prevViewQuery(rf, ctx);\n        });\n    }\n    else {\n        definition.viewQuery = superViewQuery;\n    }\n}\n/**\n * @param {?} definition\n * @param {?} superContentQueries\n * @return {?}\n */\nfunction inheritContentQueries(definition, superContentQueries) {\n    /** @type {?} */\n    const prevContentQueries = definition.contentQueries;\n    if (prevContentQueries) {\n        definition.contentQueries = (/**\n         * @param {?} rf\n         * @param {?} ctx\n         * @param {?} directiveIndex\n         * @return {?}\n         */\n        (rf, ctx, directiveIndex) => {\n            superContentQueries(rf, ctx, directiveIndex);\n            prevContentQueries(rf, ctx, directiveIndex);\n        });\n    }\n    else {\n        definition.contentQueries = superContentQueries;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An internal token whose presence in an injector indicates that the injector should treat itself\n * as a root scoped injector when processing requests for unknown tokens which may indicate\n * they are provided in the root scope.\n * @type {?}\n */\nconst APP_ROOT = new InjectionToken('The presence of this token marks an injector as being the root injector.');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Marker which indicates that a value has not yet been created from the factory function.\n * @type {?}\n */\nconst NOT_YET = {};\n/**\n * Marker which indicates that the factory function for a token is in the process of being called.\n *\n * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates\n * injection of a dependency has recursively attempted to inject the original token, and there is\n * a circular dependency among the providers.\n * @type {?}\n */\nconst CIRCULAR$1 = {};\n/** @type {?} */\nconst EMPTY_ARRAY$2 = (/** @type {?} */ ([]));\n/**\n * A lazily initialized NullInjector.\n * @type {?}\n */\nlet NULL_INJECTOR = undefined;\n/**\n * @return {?}\n */\nfunction getNullInjector() {\n    if (NULL_INJECTOR === undefined) {\n        NULL_INJECTOR = new NullInjector();\n    }\n    return NULL_INJECTOR;\n}\n/**\n * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\n *\n * \\@publicApi\n * @param {?} defType\n * @param {?=} parent\n * @param {?=} additionalProviders\n * @param {?=} name\n * @return {?}\n */\nfunction createInjector(defType, parent = null, additionalProviders = null, name) {\n    parent = parent || getNullInjector();\n    return new R3Injector(defType, additionalProviders, parent, name);\n}\nclass R3Injector {\n    /**\n     * @param {?} def\n     * @param {?} additionalProviders\n     * @param {?} parent\n     * @param {?=} source\n     */\n    constructor(def, additionalProviders, parent, source = null) {\n        this.parent = parent;\n        /**\n         * Map of tokens to records which contain the instances of those tokens.\n         */\n        this.records = new Map();\n        /**\n         * The transitive set of `InjectorType`s which define this injector.\n         */\n        this.injectorDefTypes = new Set();\n        /**\n         * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n         */\n        this.onDestroy = new Set();\n        this._destroyed = false;\n        // Start off by creating Records for every provider declared in every InjectorType\n        // included transitively in `def`.\n        /** @type {?} */\n        const dedupStack = [];\n        deepForEach([def], (/**\n         * @param {?} injectorDef\n         * @return {?}\n         */\n        injectorDef => this.processInjectorType(injectorDef, [], dedupStack)));\n        additionalProviders && deepForEach(additionalProviders, (/**\n         * @param {?} provider\n         * @return {?}\n         */\n        provider => this.processProvider(provider, def, additionalProviders)));\n        // Make sure the INJECTOR token provides this injector.\n        this.records.set(INJECTOR, makeRecord(undefined, this));\n        // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide\n        // any injectable scoped to APP_ROOT_SCOPE.\n        this.isRootInjector = this.records.has(APP_ROOT);\n        // Eagerly instantiate the InjectorType classes themselves.\n        this.injectorDefTypes.forEach((/**\n         * @param {?} defType\n         * @return {?}\n         */\n        defType => this.get(defType)));\n        // Source name, used for debugging\n        this.source = source || (def instanceof Array ? null : stringify(def));\n    }\n    /**\n     * Flag indicating that this injector was previously destroyed.\n     * @return {?}\n     */\n    get destroyed() { return this._destroyed; }\n    /**\n     * Destroy the injector and release references to every instance or provider associated with it.\n     *\n     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n     * hook was found.\n     * @return {?}\n     */\n    destroy() {\n        this.assertNotDestroyed();\n        // Set destroyed = true first, in case lifecycle hooks re-enter destroy().\n        this._destroyed = true;\n        try {\n            // Call all the lifecycle hooks.\n            this.onDestroy.forEach((/**\n             * @param {?} service\n             * @return {?}\n             */\n            service => service.ngOnDestroy()));\n        }\n        finally {\n            // Release all references.\n            this.records.clear();\n            this.onDestroy.clear();\n            this.injectorDefTypes.clear();\n        }\n    }\n    /**\n     * @template T\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?}\n     */\n    get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND, flags = InjectFlags.Default) {\n        this.assertNotDestroyed();\n        // Set the injection context.\n        /** @type {?} */\n        const previousInjector = setCurrentInjector(this);\n        try {\n            // Check for the SkipSelf flag.\n            if (!(flags & InjectFlags.SkipSelf)) {\n                // SkipSelf isn't set, check if the record belongs to this injector.\n                /** @type {?} */\n                let record = this.records.get(token);\n                if (record === undefined) {\n                    // No record, but maybe the token is scoped to this injector. Look for an ngInjectableDef\n                    // with a scope matching this injector.\n                    /** @type {?} */\n                    const def = couldBeInjectableType(token) && getInjectableDef(token);\n                    if (def && this.injectableDefInScope(def)) {\n                        // Found an ngInjectableDef and it's scoped to this injector. Pretend as if it was here\n                        // all along.\n                        record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);\n                        this.records.set(token, record);\n                    }\n                }\n                // If a record was found, get the instance for it and return it.\n                if (record !== undefined) {\n                    return this.hydrate(token, record);\n                }\n            }\n            // Select the next injector based on the Self flag - if self is set, the next injector is\n            // the NullInjector, otherwise it's the parent.\n            /** @type {?} */\n            const nextInjector = !(flags & InjectFlags.Self) ? this.parent : getNullInjector();\n            return nextInjector.get(token, flags & InjectFlags.Optional ? null : notFoundValue);\n        }\n        catch (e) {\n            if (e.name === 'NullInjectorError') {\n                /** @type {?} */\n                const path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n                path.unshift(stringify(token));\n                if (previousInjector) {\n                    // We still have a parent injector, keep throwing\n                    throw e;\n                }\n                else {\n                    // Format & throw the final error message when we don't have any previous injector\n                    return catchInjectorError(e, token, 'R3InjectorError', this.source);\n                }\n            }\n            else {\n                throw e;\n            }\n        }\n        finally {\n            // Lastly, clean up the state by restoring the previous injector.\n            setCurrentInjector(previousInjector);\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    assertNotDestroyed() {\n        if (this._destroyed) {\n            throw new Error('Injector has already been destroyed.');\n        }\n    }\n    /**\n     * Add an `InjectorType` or `InjectorDefTypeWithProviders` and all of its transitive providers\n     * to this injector.\n     * @private\n     * @param {?} defOrWrappedDef\n     * @param {?} parents\n     * @param {?} dedupStack\n     * @return {?}\n     */\n    processInjectorType(defOrWrappedDef, parents, dedupStack) {\n        defOrWrappedDef = resolveForwardRef(defOrWrappedDef);\n        if (!defOrWrappedDef)\n            return;\n        // Either the defOrWrappedDef is an InjectorType (with ngInjectorDef) or an\n        // InjectorDefTypeWithProviders (aka ModuleWithProviders). Detecting either is a megamorphic\n        // read, so care is taken to only do the read once.\n        // First attempt to read the ngInjectorDef.\n        /** @type {?} */\n        let def = getInjectorDef(defOrWrappedDef);\n        // If that's not present, then attempt to read ngModule from the InjectorDefTypeWithProviders.\n        /** @type {?} */\n        const ngModule = (def == null) && ((/** @type {?} */ (defOrWrappedDef))).ngModule || undefined;\n        // Determine the InjectorType. In the case where `defOrWrappedDef` is an `InjectorType`,\n        // then this is easy. In the case of an InjectorDefTypeWithProviders, then the definition type\n        // is the `ngModule`.\n        /** @type {?} */\n        const defType = (ngModule === undefined) ? ((/** @type {?} */ (defOrWrappedDef))) : ngModule;\n        // Check for circular dependencies.\n        if (ngDevMode && parents.indexOf(defType) !== -1) {\n            /** @type {?} */\n            const defName = stringify(defType);\n            throw new Error(`Circular dependency in DI detected for type ${defName}. Dependency path: ${parents.map((/**\n             * @param {?} defType\n             * @return {?}\n             */\n            defType => stringify(defType))).join(' > ')} > ${defName}.`);\n        }\n        // Check for multiple imports of the same module\n        /** @type {?} */\n        const isDuplicate = dedupStack.indexOf(defType) !== -1;\n        // If defOrWrappedType was an InjectorDefTypeWithProviders, then .providers may hold some\n        // extra providers.\n        /** @type {?} */\n        const providers = (ngModule !== undefined) && ((/** @type {?} */ (defOrWrappedDef))).providers ||\n            EMPTY_ARRAY$2;\n        // Finally, if defOrWrappedType was an `InjectorDefTypeWithProviders`, then the actual\n        // `InjectorDef` is on its `ngModule`.\n        if (ngModule !== undefined) {\n            def = getInjectorDef(ngModule);\n        }\n        // If no definition was found, it might be from exports. Remove it.\n        if (def == null) {\n            return;\n        }\n        // Track the InjectorType and add a provider for it.\n        this.injectorDefTypes.add(defType);\n        this.records.set(defType, makeRecord(def.factory, NOT_YET));\n        // Add providers in the same way that @NgModule resolution did:\n        // First, include providers from any imports.\n        if (def.imports != null && !isDuplicate) {\n            // Before processing defType's imports, add it to the set of parents. This way, if it ends\n            // up deeply importing itself, this can be detected.\n            ngDevMode && parents.push(defType);\n            // Add it to the set of dedups. This way we can detect multiple imports of the same module\n            dedupStack.push(defType);\n            try {\n                deepForEach(def.imports, (/**\n                 * @param {?} imported\n                 * @return {?}\n                 */\n                imported => this.processInjectorType(imported, parents, dedupStack)));\n            }\n            finally {\n                // Remove it from the parents set when finished.\n                ngDevMode && parents.pop();\n            }\n        }\n        // Next, include providers listed on the definition itself.\n        /** @type {?} */\n        const defProviders = def.providers;\n        if (defProviders != null && !isDuplicate) {\n            /** @type {?} */\n            const injectorType = (/** @type {?} */ (defOrWrappedDef));\n            deepForEach(defProviders, (/**\n             * @param {?} provider\n             * @return {?}\n             */\n            provider => this.processProvider(provider, injectorType, defProviders)));\n        }\n        // Finally, include providers from an InjectorDefTypeWithProviders if there was one.\n        /** @type {?} */\n        const ngModuleType = ((/** @type {?} */ (defOrWrappedDef))).ngModule;\n        deepForEach(providers, (/**\n         * @param {?} provider\n         * @return {?}\n         */\n        provider => this.processProvider(provider, ngModuleType, providers)));\n    }\n    /**\n     * Process a `SingleProvider` and add it.\n     * @private\n     * @param {?} provider\n     * @param {?} ngModuleType\n     * @param {?} providers\n     * @return {?}\n     */\n    processProvider(provider, ngModuleType, providers) {\n        // Determine the token from the provider. Either it's its own token, or has a {provide: ...}\n        // property.\n        provider = resolveForwardRef(provider);\n        /** @type {?} */\n        let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide);\n        // Construct a `Record` for the provider.\n        /** @type {?} */\n        const record = providerToRecord(provider, ngModuleType, providers);\n        if (!isTypeProvider(provider) && provider.multi === true) {\n            // If the provider indicates that it's a multi-provider, process it specially.\n            // First check whether it's been defined already.\n            /** @type {?} */\n            let multiRecord = this.records.get(token);\n            if (multiRecord) {\n                // It has. Throw a nice error if\n                if (multiRecord.multi === undefined) {\n                    throw new Error(`Mixed multi-provider for ${token}.`);\n                }\n            }\n            else {\n                multiRecord = makeRecord(undefined, NOT_YET, true);\n                multiRecord.factory = (/**\n                 * @return {?}\n                 */\n                () => injectArgs((/** @type {?} */ ((/** @type {?} */ (multiRecord)).multi))));\n                this.records.set(token, multiRecord);\n            }\n            token = provider;\n            (/** @type {?} */ (multiRecord.multi)).push(provider);\n        }\n        else {\n            /** @type {?} */\n            const existing = this.records.get(token);\n            if (existing && existing.multi !== undefined) {\n                throw new Error(`Mixed multi-provider for ${stringify(token)}`);\n            }\n        }\n        this.records.set(token, record);\n    }\n    /**\n     * @private\n     * @template T\n     * @param {?} token\n     * @param {?} record\n     * @return {?}\n     */\n    hydrate(token, record) {\n        if (record.value === CIRCULAR$1) {\n            throw new Error(`Cannot instantiate cyclic dependency! ${stringify(token)}`);\n        }\n        else if (record.value === NOT_YET) {\n            record.value = CIRCULAR$1;\n            record.value = (/** @type {?} */ (record.factory))();\n        }\n        if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {\n            this.onDestroy.add(record.value);\n        }\n        return (/** @type {?} */ (record.value));\n    }\n    /**\n     * @private\n     * @param {?} def\n     * @return {?}\n     */\n    injectableDefInScope(def) {\n        if (!def.providedIn) {\n            return false;\n        }\n        else if (typeof def.providedIn === 'string') {\n            return def.providedIn === 'any' || (def.providedIn === 'root' && this.isRootInjector);\n        }\n        else {\n            return this.injectorDefTypes.has(def.providedIn);\n        }\n    }\n}\n/**\n * @param {?} token\n * @return {?}\n */\nfunction injectableDefOrInjectorDefFactory(token) {\n    /** @type {?} */\n    const injectableDef = getInjectableDef((/** @type {?} */ (token)));\n    if (injectableDef === null) {\n        /** @type {?} */\n        const injectorDef = getInjectorDef((/** @type {?} */ (token)));\n        if (injectorDef !== null) {\n            return injectorDef.factory;\n        }\n        else if (token instanceof InjectionToken) {\n            throw new Error(`Token ${stringify(token)} is missing an ngInjectableDef definition.`);\n        }\n        else if (token instanceof Function) {\n            /** @type {?} */\n            const paramLength = token.length;\n            if (paramLength > 0) {\n                /** @type {?} */\n                const args = new Array(paramLength).fill('?');\n                throw new Error(`Can't resolve all parameters for ${stringify(token)}: (${args.join(', ')}).`);\n            }\n            return (/**\n             * @return {?}\n             */\n            () => new ((/** @type {?} */ (token)))());\n        }\n        throw new Error('unreachable');\n    }\n    return injectableDef.factory;\n}\n/**\n * @param {?} provider\n * @param {?} ngModuleType\n * @param {?} providers\n * @return {?}\n */\nfunction providerToRecord(provider, ngModuleType, providers) {\n    /** @type {?} */\n    let factory = providerToFactory(provider, ngModuleType, providers);\n    if (isValueProvider(provider)) {\n        return makeRecord(undefined, provider.useValue);\n    }\n    else {\n        return makeRecord(factory, NOT_YET);\n    }\n}\n/**\n * Converts a `SingleProvider` into a factory function.\n *\n * @param {?} provider provider to convert to factory\n * @param {?=} ngModuleType\n * @param {?=} providers\n * @return {?}\n */\nfunction providerToFactory(provider, ngModuleType, providers) {\n    /** @type {?} */\n    let factory = undefined;\n    if (isTypeProvider(provider)) {\n        return injectableDefOrInjectorDefFactory(resolveForwardRef(provider));\n    }\n    else {\n        if (isValueProvider(provider)) {\n            factory = (/**\n             * @return {?}\n             */\n            () => resolveForwardRef(provider.useValue));\n        }\n        else if (isExistingProvider(provider)) {\n            factory = (/**\n             * @return {?}\n             */\n            () => ɵɵinject(resolveForwardRef(provider.useExisting)));\n        }\n        else if (isFactoryProvider(provider)) {\n            factory = (/**\n             * @return {?}\n             */\n            () => provider.useFactory(...injectArgs(provider.deps || [])));\n        }\n        else {\n            /** @type {?} */\n            const classRef = resolveForwardRef(provider &&\n                (((/** @type {?} */ (provider))).useClass || provider.provide));\n            if (!classRef) {\n                /** @type {?} */\n                let ngModuleDetail = '';\n                if (ngModuleType && providers) {\n                    /** @type {?} */\n                    const providerDetail = providers.map((/**\n                     * @param {?} v\n                     * @return {?}\n                     */\n                    v => v == provider ? '?' + provider + '?' : '...'));\n                    ngModuleDetail =\n                        ` - only instances of Provider and Type are allowed, got: [${providerDetail.join(', ')}]`;\n                }\n                throw new Error(`Invalid provider for the NgModule '${stringify(ngModuleType)}'` + ngModuleDetail);\n            }\n            if (hasDeps(provider)) {\n                factory = (/**\n                 * @return {?}\n                 */\n                () => new (classRef)(...injectArgs(provider.deps)));\n            }\n            else {\n                return injectableDefOrInjectorDefFactory(classRef);\n            }\n        }\n    }\n    return factory;\n}\n/**\n * @template T\n * @param {?} factory\n * @param {?} value\n * @param {?=} multi\n * @return {?}\n */\nfunction makeRecord(factory, value, multi = false) {\n    return {\n        factory: factory,\n        value: value,\n        multi: multi ? [] : undefined,\n    };\n}\n/**\n * @template T\n * @param {?} input\n * @param {?} fn\n * @return {?}\n */\nfunction deepForEach(input, fn) {\n    input.forEach((/**\n     * @param {?} value\n     * @return {?}\n     */\n    value => Array.isArray(value) ? deepForEach(value, fn) : fn(value)));\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isValueProvider(value) {\n    return value !== null && typeof value == 'object' && USE_VALUE$2 in value;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isExistingProvider(value) {\n    return !!(value && ((/** @type {?} */ (value))).useExisting);\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isFactoryProvider(value) {\n    return !!(value && ((/** @type {?} */ (value))).useFactory);\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isTypeProvider(value) {\n    return typeof value === 'function';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isClassProvider(value) {\n    return !!((/** @type {?} */ (value))).useClass;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction hasDeps(value) {\n    return !!((/** @type {?} */ (value))).deps;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction hasOnDestroy(value) {\n    return value !== null && typeof value === 'object' &&\n        typeof ((/** @type {?} */ (value))).ngOnDestroy === 'function';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction couldBeInjectableType(value) {\n    return (typeof value === 'function') ||\n        (typeof value === 'object' && value instanceof InjectionToken);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Resolves the providers which are defined in the DirectiveDef.\n *\n * When inserting the tokens and the factories in their respective arrays, we can assume that\n * this method is called first for the component (if any), and then for other directives on the same\n * node.\n * As a consequence,the providers are always processed in that order:\n * 1) The view providers of the component\n * 2) The providers of the component\n * 3) The providers of the other directives\n * This matches the structure of the injectables arrays of a view (for each node).\n * So the tokens and the factories can be pushed at the end of the arrays, except\n * in one case for multi providers.\n *\n * @template T\n * @param {?} def the directive definition\n * @param {?} providers\n * @param {?} viewProviders\n * @return {?}\n */\nfunction providersResolver(def, providers, viewProviders) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    if (tView.firstTemplatePass) {\n        /** @type {?} */\n        const isComponent = isComponentDef(def);\n        // The list of view providers is processed first, and the flags are updated\n        resolveProvider$1(viewProviders, tView.data, tView.blueprint, isComponent, true);\n        // Then, the list of providers is processed, and the flags are updated\n        resolveProvider$1(providers, tView.data, tView.blueprint, isComponent, false);\n    }\n}\n/**\n * Resolves a provider and publishes it to the DI system.\n * @param {?} provider\n * @param {?} tInjectables\n * @param {?} lInjectablesBlueprint\n * @param {?} isComponent\n * @param {?} isViewProvider\n * @return {?}\n */\nfunction resolveProvider$1(provider, tInjectables, lInjectablesBlueprint, isComponent, isViewProvider) {\n    provider = resolveForwardRef(provider);\n    if (Array.isArray(provider)) {\n        // Recursively call `resolveProvider`\n        // Recursion is OK in this case because this code will not be in hot-path once we implement\n        // cloning of the initial state.\n        for (let i = 0; i < provider.length; i++) {\n            resolveProvider$1(provider[i], tInjectables, lInjectablesBlueprint, isComponent, isViewProvider);\n        }\n    }\n    else {\n        /** @type {?} */\n        const lView = getLView();\n        /** @type {?} */\n        let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);\n        /** @type {?} */\n        let providerFactory = providerToFactory(provider);\n        /** @type {?} */\n        const tNode = getPreviousOrParentTNode();\n        /** @type {?} */\n        const beginIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n        /** @type {?} */\n        const endIndex = tNode.directiveStart;\n        /** @type {?} */\n        const cptViewProvidersCount = tNode.providerIndexes >> 16 /* CptViewProvidersCountShift */;\n        if (isClassProvider(provider) || isTypeProvider(provider)) {\n            /** @type {?} */\n            const prototype = (((/** @type {?} */ (provider))).useClass || provider).prototype;\n            /** @type {?} */\n            const ngOnDestroy = prototype.ngOnDestroy;\n            if (ngOnDestroy) {\n                /** @type {?} */\n                const tView = lView[TVIEW];\n                (tView.destroyHooks || (tView.destroyHooks = [])).push(tInjectables.length, ngOnDestroy);\n            }\n        }\n        if (isTypeProvider(provider) || !provider.multi) {\n            // Single provider case: the factory is created and pushed immediately\n            /** @type {?} */\n            const factory = new NodeInjectorFactory(providerFactory, isViewProvider, ɵɵdirectiveInject);\n            /** @type {?} */\n            const existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);\n            if (existingFactoryIndex == -1) {\n                diPublicInInjector(getOrCreateNodeInjectorForNode((/** @type {?} */ (tNode)), lView), lView, token);\n                tInjectables.push(token);\n                tNode.directiveStart++;\n                tNode.directiveEnd++;\n                if (isViewProvider) {\n                    tNode.providerIndexes += 65536 /* CptViewProvidersCountShifter */;\n                }\n                lInjectablesBlueprint.push(factory);\n                lView.push(factory);\n            }\n            else {\n                lInjectablesBlueprint[existingFactoryIndex] = factory;\n                lView[existingFactoryIndex] = factory;\n            }\n        }\n        else {\n            // Multi provider case:\n            // We create a multi factory which is going to aggregate all the values.\n            // Since the output of such a factory depends on content or view injection,\n            // we create two of them, which are linked together.\n            //\n            // The first one (for view providers) is always in the first block of the injectables array,\n            // and the second one (for providers) is always in the second block.\n            // This is important because view providers have higher priority. When a multi token\n            // is being looked up, the view providers should be found first.\n            // Note that it is not possible to have a multi factory in the third block (directive block).\n            //\n            // The algorithm to process multi providers is as follows:\n            // 1) If the multi provider comes from the `viewProviders` of the component:\n            //   a) If the special view providers factory doesn't exist, it is created and pushed.\n            //   b) Else, the multi provider is added to the existing multi factory.\n            // 2) If the multi provider comes from the `providers` of the component or of another\n            // directive:\n            //   a) If the multi factory doesn't exist, it is created and provider pushed into it.\n            //      It is also linked to the multi factory for view providers, if it exists.\n            //   b) Else, the multi provider is added to the existing multi factory.\n            /** @type {?} */\n            const existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);\n            /** @type {?} */\n            const existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);\n            /** @type {?} */\n            const doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 &&\n                lInjectablesBlueprint[existingProvidersFactoryIndex];\n            /** @type {?} */\n            const doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 &&\n                lInjectablesBlueprint[existingViewProvidersFactoryIndex];\n            if (isViewProvider && !doesViewProvidersFactoryExist ||\n                !isViewProvider && !doesProvidersFactoryExist) {\n                // Cases 1.a and 2.a\n                diPublicInInjector(getOrCreateNodeInjectorForNode((/** @type {?} */ (tNode)), lView), lView, token);\n                /** @type {?} */\n                const factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent, providerFactory);\n                if (!isViewProvider && doesViewProvidersFactoryExist) {\n                    lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;\n                }\n                tInjectables.push(token);\n                tNode.directiveStart++;\n                tNode.directiveEnd++;\n                if (isViewProvider) {\n                    tNode.providerIndexes += 65536 /* CptViewProvidersCountShifter */;\n                }\n                lInjectablesBlueprint.push(factory);\n                lView.push(factory);\n            }\n            else {\n                // Cases 1.b and 2.b\n                multiFactoryAdd((/** @type {?} */ (lInjectablesBlueprint))[isViewProvider ? existingViewProvidersFactoryIndex : existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent);\n            }\n            if (!isViewProvider && isComponent && doesViewProvidersFactoryExist) {\n                (/** @type {?} */ (lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders))++;\n            }\n        }\n    }\n}\n/**\n * Add a factory in a multi factory.\n * @param {?} multiFactory\n * @param {?} factory\n * @param {?} isComponentProvider\n * @return {?}\n */\nfunction multiFactoryAdd(multiFactory, factory, isComponentProvider) {\n    (/** @type {?} */ (multiFactory.multi)).push(factory);\n    if (isComponentProvider) {\n        (/** @type {?} */ (multiFactory.componentProviders))++;\n    }\n}\n/**\n * Returns the index of item in the array, but only in the begin to end range.\n * @param {?} item\n * @param {?} arr\n * @param {?} begin\n * @param {?} end\n * @return {?}\n */\nfunction indexOf(item, arr, begin, end) {\n    for (let i = begin; i < end; i++) {\n        if (arr[i] === item)\n            return i;\n    }\n    return -1;\n}\n/**\n * Use this with `multi` `providers`.\n * @this {?}\n * @param {?} _\n * @param {?} tData\n * @param {?} lData\n * @param {?} tNode\n * @return {?}\n */\nfunction multiProvidersFactoryResolver(_, tData, lData, tNode) {\n    return multiResolve((/** @type {?} */ (this.multi)), []);\n}\n/**\n * Use this with `multi` `viewProviders`.\n *\n * This factory knows how to concatenate itself with the existing `multi` `providers`.\n * @this {?}\n * @param {?} _\n * @param {?} tData\n * @param {?} lData\n * @param {?} tNode\n * @return {?}\n */\nfunction multiViewProvidersFactoryResolver(_, tData, lData, tNode) {\n    /** @type {?} */\n    const factories = (/** @type {?} */ (this.multi));\n    /** @type {?} */\n    let result;\n    if (this.providerFactory) {\n        /** @type {?} */\n        const componentCount = (/** @type {?} */ (this.providerFactory.componentProviders));\n        /** @type {?} */\n        const multiProviders = getNodeInjectable(tData, lData, (/** @type {?} */ ((/** @type {?} */ (this.providerFactory)).index)), tNode);\n        // Copy the section of the array which contains `multi` `providers` from the component\n        result = multiProviders.slice(0, componentCount);\n        // Insert the `viewProvider` instances.\n        multiResolve(factories, result);\n        // Copy the section of the array which contains `multi` `providers` from other directives\n        for (let i = componentCount; i < multiProviders.length; i++) {\n            result.push(multiProviders[i]);\n        }\n    }\n    else {\n        result = [];\n        // Insert the `viewProvider` instances.\n        multiResolve(factories, result);\n    }\n    return result;\n}\n/**\n * Maps an array of factories into an array of values.\n * @param {?} factories\n * @param {?} result\n * @return {?}\n */\nfunction multiResolve(factories, result) {\n    for (let i = 0; i < factories.length; i++) {\n        /** @type {?} */\n        const factory = (/** @type {?} */ ((/** @type {?} */ (factories[i]))));\n        result.push(factory());\n    }\n    return result;\n}\n/**\n * Creates a multi factory.\n * @param {?} factoryFn\n * @param {?} index\n * @param {?} isViewProvider\n * @param {?} isComponent\n * @param {?} f\n * @return {?}\n */\nfunction multiFactory(factoryFn, index, isViewProvider, isComponent, f) {\n    /** @type {?} */\n    const factory = new NodeInjectorFactory(factoryFn, isViewProvider, ɵɵdirectiveInject);\n    factory.multi = [];\n    factory.index = index;\n    factory.componentProviders = 0;\n    multiFactoryAdd(factory, f, isComponent && !isViewProvider);\n    return factory;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This feature resolves the providers of a directive (or component),\n * and publish them into the DI system, making it visible to others for injection.\n *\n * For example:\n * class ComponentWithProviders {\n *   constructor(private greeter: GreeterDE) {}\n *\n *   static ngComponentDef = defineComponent({\n *     type: ComponentWithProviders,\n *     selectors: [['component-with-providers']],\n *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),\n *    consts: 1,\n *    vars: 1,\n *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {\n *      if (fs & RenderFlags.Create) {\n *        text(0);\n *      }\n *      if (fs & RenderFlags.Update) {\n *        textBinding(0, bind(ctx.greeter.greet()));\n *      }\n *    },\n *    features: [ProvidersFeature([GreeterDE])]\n *  });\n * }\n *\n * \\@codeGenApi\n * @template T\n * @param {?} providers\n * @param {?=} viewProviders\n * @return {?}\n */\nfunction ɵɵProvidersFeature(providers, viewProviders = []) {\n    return (/**\n     * @param {?} definition\n     * @return {?}\n     */\n    (definition) => {\n        definition.providersResolver =\n            (/**\n             * @param {?} def\n             * @param {?=} processProvidersFn\n             * @return {?}\n             */\n            (def, processProvidersFn) => {\n                return providersResolver(def, //\n                processProvidersFn ? processProvidersFn(providers) : providers, //\n                viewProviders);\n            });\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents a component created by a `ComponentFactory`.\n * Provides access to the component instance and related objects,\n * and provides the means of destroying the instance.\n *\n * \\@publicApi\n * @abstract\n * @template C\n */\nclass ComponentRef {\n}\n/**\n * \\@publicApi\n * @abstract\n * @template C\n */\nclass ComponentFactory {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} component\n * @return {?}\n */\nfunction noComponentFactoryError(component) {\n    /** @type {?} */\n    const error = Error(`No component factory found for ${stringify(component)}. Did you add it to @NgModule.entryComponents?`);\n    ((/** @type {?} */ (error)))[ERROR_COMPONENT] = component;\n    return error;\n}\n/** @type {?} */\nconst ERROR_COMPONENT = 'ngComponent';\nclass _NullComponentFactoryResolver {\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    resolveComponentFactory(component) {\n        throw noComponentFactoryError(component);\n    }\n}\n/**\n * \\@publicApi\n * @abstract\n */\nclass ComponentFactoryResolver {\n}\nComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();\nclass CodegenComponentFactoryResolver {\n    /**\n     * @param {?} factories\n     * @param {?} _parent\n     * @param {?} _ngModule\n     */\n    constructor(factories, _parent, _ngModule) {\n        this._parent = _parent;\n        this._ngModule = _ngModule;\n        this._factories = new Map();\n        for (let i = 0; i < factories.length; i++) {\n            /** @type {?} */\n            const factory = factories[i];\n            this._factories.set(factory.componentType, factory);\n        }\n    }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    resolveComponentFactory(component) {\n        /** @type {?} */\n        let factory = this._factories.get(component);\n        if (!factory && this._parent) {\n            factory = this._parent.resolveComponentFactory(component);\n        }\n        if (!factory) {\n            throw noComponentFactoryError(component);\n        }\n        return new ComponentFactoryBoundToModule(factory, this._ngModule);\n    }\n}\n/**\n * @template C\n */\nclass ComponentFactoryBoundToModule extends ComponentFactory {\n    /**\n     * @param {?} factory\n     * @param {?} ngModule\n     */\n    constructor(factory, ngModule) {\n        super();\n        this.factory = factory;\n        this.ngModule = ngModule;\n        this.selector = factory.selector;\n        this.componentType = factory.componentType;\n        this.ngContentSelectors = factory.ngContentSelectors;\n        this.inputs = factory.inputs;\n        this.outputs = factory.outputs;\n    }\n    /**\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    create(injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents an instance of an NgModule created via a {\\@link NgModuleFactory}.\n *\n * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this\n * NgModule Instance.\n *\n * \\@publicApi\n * @abstract\n * @template T\n */\nclass NgModuleRef {\n}\n/**\n * \\@publicApi\n * @abstract\n * @template T\n */\nclass NgModuleFactory {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n */\nclass ViewRef {\n    /**\n     * @param {?} _lView\n     * @param {?} _context\n     * @param {?} _componentIndex\n     */\n    constructor(_lView, _context, _componentIndex) {\n        this._context = _context;\n        this._componentIndex = _componentIndex;\n        this._appRef = null;\n        this._viewContainerRef = null;\n        /**\n         * \\@internal\n         */\n        this._tViewNode = null;\n        this._lView = _lView;\n    }\n    /**\n     * @return {?}\n     */\n    get rootNodes() {\n        if (this._lView[HOST] == null) {\n            /** @type {?} */\n            const tView = (/** @type {?} */ (this._lView[T_HOST]));\n            return collectNativeNodes(this._lView, tView, []);\n        }\n        return [];\n    }\n    /**\n     * @return {?}\n     */\n    get context() { return this._context ? this._context : this._lookUpContext(); }\n    /**\n     * @return {?}\n     */\n    get destroyed() {\n        return (this._lView[FLAGS] & 256 /* Destroyed */) === 256 /* Destroyed */;\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        if (this._appRef) {\n            this._appRef.detachView(this);\n        }\n        else if (this._viewContainerRef) {\n            /** @type {?} */\n            const index = this._viewContainerRef.indexOf(this);\n            if (index > -1) {\n                this._viewContainerRef.detach(index);\n            }\n            this._viewContainerRef = null;\n        }\n        destroyLView(this._lView);\n    }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    onDestroy(callback) { storeCleanupFn(this._lView, callback); }\n    /**\n     * Marks a view and all of its ancestors dirty.\n     *\n     * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n     * multiple `markForCheck` calls to into one change detection run.\n     *\n     * This can be used to ensure an {\\@link ChangeDetectionStrategy#OnPush OnPush} component is\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Component({\n     *   selector: 'my-app',\n     *   template: `Number of ticks: {{numberOfTicks}}`\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\n     * })\n     * class AppComponent {\n     *   numberOfTicks = 0;\n     *\n     *   constructor(private ref: ChangeDetectorRef) {\n     *     setInterval(() => {\n     *       this.numberOfTicks++;\n     *       // the following is required, otherwise the view will not be updated\n     *       this.ref.markForCheck();\n     *     }, 1000);\n     *   }\n     * }\n     * ```\n     * @return {?}\n     */\n    markForCheck() { markViewDirty(this._lView); }\n    /**\n     * Detaches the view from the change detection tree.\n     *\n     * Detached views will not be checked during change detection runs until they are\n     * re-attached, even if they are dirty. `detach` can be used in combination with\n     * {\\@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n     * detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds. We can do that by detaching\n     * the component's change detector and doing a local check every five seconds.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   // in a real application the returned data will be different every time\n     *   get data() {\n     *     return [1,2,3,4,5];\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'giant-list',\n     *   template: `\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n     *   `,\n     * })\n     * class GiantList {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n     *     ref.detach();\n     *     setInterval(() => {\n     *       this.ref.detectChanges();\n     *     }, 5000);\n     *   }\n     * }\n     *  /\n     *   selector: 'app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     <giant-list><giant-list>\n     *   `,\n     * })\n     * class App {\n     * }\n     * ```\n     * @return {?}\n     */\n    detach() { this._lView[FLAGS] &= ~128 /* Attached */; }\n    /**\n     * Re-attaches a view to the change detection tree.\n     *\n     * This can be used to re-attach views that were previously detached from the tree\n     * using {\\@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example creates a component displaying `live` data. The component will detach\n     * its change detector from the main change detector tree when the component's live property\n     * is set to false.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   data = 1;\n     *\n     *   constructor() {\n     *     setInterval(() => {\n     *       this.data = this.data * 2;\n     *     }, 500);\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'live-data',\n     *   inputs: ['live'],\n     *   template: 'Data: {{dataProvider.data}}'\n     * })\n     * class LiveData {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n     *\n     *   set live(value) {\n     *     if (value) {\n     *       this.ref.reattach();\n     *     } else {\n     *       this.ref.detach();\n     *     }\n     *   }\n     * }\n     *  /\n     *   selector: 'my-app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n     *     <live-data [live]=\"live\"><live-data>\n     *   `,\n     * })\n     * class AppComponent {\n     *   live = true;\n     * }\n     * ```\n     * @return {?}\n     */\n    reattach() { this._lView[FLAGS] |= 128 /* Attached */; }\n    /**\n     * Checks the view and its children.\n     *\n     * This can also be used in combination with {\\@link ChangeDetectorRef#detach detach} to implement\n     * local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds.\n     *\n     * We can do that by detaching the component's change detector and doing a local change detection\n     * check every five seconds.\n     *\n     * See {\\@link ChangeDetectorRef#detach detach} for more information.\n     * @return {?}\n     */\n    detectChanges() { detectChangesInternal(this._lView, this.context); }\n    /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     * @return {?}\n     */\n    checkNoChanges() { checkNoChangesInternal(this._lView, this.context); }\n    /**\n     * @param {?} vcRef\n     * @return {?}\n     */\n    attachToViewContainerRef(vcRef) {\n        if (this._appRef) {\n            throw new Error('This view is already attached directly to the ApplicationRef!');\n        }\n        this._viewContainerRef = vcRef;\n    }\n    /**\n     * @return {?}\n     */\n    detachFromAppRef() {\n        this._appRef = null;\n        renderDetachView(this._lView);\n    }\n    /**\n     * @param {?} appRef\n     * @return {?}\n     */\n    attachToAppRef(appRef) {\n        if (this._viewContainerRef) {\n            throw new Error('This view is already attached to a ViewContainer!');\n        }\n        this._appRef = appRef;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _lookUpContext() {\n        return this._context = (/** @type {?} */ ((/** @type {?} */ (getLViewParent(this._lView)))[this._componentIndex]));\n    }\n}\n/**\n * \\@internal\n * @template T\n */\nclass RootViewRef extends ViewRef {\n    /**\n     * @param {?} _view\n     */\n    constructor(_view) {\n        super(_view, null, -1);\n        this._view = _view;\n    }\n    /**\n     * @return {?}\n     */\n    detectChanges() { detectChangesInRootView(this._view); }\n    /**\n     * @return {?}\n     */\n    checkNoChanges() { checkNoChangesInRootView(this._view); }\n    /**\n     * @return {?}\n     */\n    get context() { return (/** @type {?} */ (null)); }\n}\n/**\n * @param {?} lView\n * @param {?} parentTNode\n * @param {?} result\n * @return {?}\n */\nfunction collectNativeNodes(lView, parentTNode, result) {\n    /** @type {?} */\n    let tNodeChild = parentTNode.child;\n    while (tNodeChild) {\n        /** @type {?} */\n        const nativeNode = getNativeByTNode(tNodeChild, lView);\n        nativeNode && result.push(nativeNode);\n        if (tNodeChild.type === 4 /* ElementContainer */) {\n            collectNativeNodes(lView, tNodeChild, result);\n        }\n        else if (tNodeChild.type === 1 /* Projection */) {\n            /** @type {?} */\n            const componentView = findComponentView(lView);\n            /** @type {?} */\n            const componentHost = (/** @type {?} */ (componentView[T_HOST]));\n            /** @type {?} */\n            const parentView = getLViewParent(componentView);\n            /** @type {?} */\n            let currentProjectedNode = ((/** @type {?} */ (componentHost.projection)))[(/** @type {?} */ (tNodeChild.projection))];\n            while (currentProjectedNode && parentView) {\n                result.push(getNativeByTNode(currentProjectedNode, parentView));\n                currentProjectedNode = currentProjectedNode.next;\n            }\n        }\n        tNodeChild = tNodeChild.next;\n    }\n    return result;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Creates an ElementRef from the most recent node.\n *\n * @param {?} ElementRefToken\n * @return {?} The ElementRef instance to use\n */\nfunction injectElementRef(ElementRefToken) {\n    return createElementRef(ElementRefToken, getPreviousOrParentTNode(), getLView());\n}\n/** @type {?} */\nlet R3ElementRef;\n/**\n * Creates an ElementRef given a node.\n *\n * @param {?} ElementRefToken The ElementRef type\n * @param {?} tNode The node for which you'd like an ElementRef\n * @param {?} view The view to which the node belongs\n * @return {?} The ElementRef instance to use\n */\nfunction createElementRef(ElementRefToken, tNode, view) {\n    if (!R3ElementRef) {\n        // TODO: Fix class name, should be ElementRef, but there appears to be a rollup bug\n        R3ElementRef = class ElementRef_ extends ElementRefToken {\n        };\n    }\n    return new R3ElementRef((/** @type {?} */ (getNativeByTNode(tNode, view))));\n}\n/** @type {?} */\nlet R3TemplateRef;\n/**\n * Creates a TemplateRef given a node.\n *\n * @template T\n * @param {?} TemplateRefToken\n * @param {?} ElementRefToken\n * @return {?} The TemplateRef instance to use\n */\nfunction injectTemplateRef(TemplateRefToken, ElementRefToken) {\n    return createTemplateRef(TemplateRefToken, ElementRefToken, getPreviousOrParentTNode(), getLView());\n}\n/**\n * Creates a TemplateRef and stores it on the injector.\n *\n * @template T\n * @param {?} TemplateRefToken The TemplateRef type\n * @param {?} ElementRefToken The ElementRef type\n * @param {?} hostTNode The node that is requesting a TemplateRef\n * @param {?} hostView The view to which the node belongs\n * @return {?} The TemplateRef instance to use\n */\nfunction createTemplateRef(TemplateRefToken, ElementRefToken, hostTNode, hostView) {\n    if (!R3TemplateRef) {\n        // TODO: Fix class name, should be TemplateRef, but there appears to be a rollup bug\n        R3TemplateRef = class TemplateRef_ extends TemplateRefToken {\n            /**\n             * @param {?} _declarationParentView\n             * @param {?} elementRef\n             * @param {?} _tView\n             * @param {?} _hostLContainer\n             * @param {?} _injectorIndex\n             */\n            constructor(_declarationParentView, elementRef, _tView, _hostLContainer, _injectorIndex) {\n                super();\n                this._declarationParentView = _declarationParentView;\n                this.elementRef = elementRef;\n                this._tView = _tView;\n                this._hostLContainer = _hostLContainer;\n                this._injectorIndex = _injectorIndex;\n            }\n            /**\n             * @param {?} context\n             * @param {?=} container\n             * @param {?=} index\n             * @return {?}\n             */\n            createEmbeddedView(context, container, index) {\n                /** @type {?} */\n                const currentQueries = this._declarationParentView[QUERIES];\n                // Query container may be missing if this view was created in a directive\n                // constructor. Create it now to avoid losing results in embedded views.\n                if (currentQueries && this._hostLContainer[QUERIES] == null) {\n                    this._hostLContainer[QUERIES] = (/** @type {?} */ (currentQueries)).container();\n                }\n                /** @type {?} */\n                const lView = createEmbeddedViewAndNode(this._tView, context, this._declarationParentView, this._hostLContainer[QUERIES], this._injectorIndex);\n                if (container) {\n                    insertView(lView, container, (/** @type {?} */ (index)));\n                }\n                renderEmbeddedTemplate(lView, this._tView, context);\n                /** @type {?} */\n                const viewRef = new ViewRef(lView, context, -1);\n                viewRef._tViewNode = (/** @type {?} */ (lView[T_HOST]));\n                return viewRef;\n            }\n        };\n    }\n    if (hostTNode.type === 0 /* Container */) {\n        /** @type {?} */\n        const hostContainer = hostView[hostTNode.index];\n        ngDevMode && assertDefined(hostTNode.tViews, 'TView must be allocated');\n        return new R3TemplateRef(hostView, createElementRef(ElementRefToken, hostTNode, hostView), (/** @type {?} */ (hostTNode.tViews)), hostContainer, hostTNode.injectorIndex);\n    }\n    else {\n        return null;\n    }\n}\n/** @type {?} */\nlet R3ViewContainerRef;\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @param {?} ViewContainerRefToken\n * @param {?} ElementRefToken\n * @return {?} The ViewContainerRef instance to use\n */\nfunction injectViewContainerRef(ViewContainerRefToken, ElementRefToken) {\n    /** @type {?} */\n    const previousTNode = (/** @type {?} */ (getPreviousOrParentTNode()));\n    return createContainerRef(ViewContainerRefToken, ElementRefToken, previousTNode, getLView());\n}\n/**\n * Creates a ViewContainerRef and stores it on the injector.\n *\n * @param {?} ViewContainerRefToken The ViewContainerRef type\n * @param {?} ElementRefToken The ElementRef type\n * @param {?} hostTNode The node that is requesting a ViewContainerRef\n * @param {?} hostView The view to which the node belongs\n * @return {?} The ViewContainerRef instance to use\n */\nfunction createContainerRef(ViewContainerRefToken, ElementRefToken, hostTNode, hostView) {\n    if (!R3ViewContainerRef) {\n        // TODO: Fix class name, should be ViewContainerRef, but there appears to be a rollup bug\n        R3ViewContainerRef = class ViewContainerRef_ extends ViewContainerRefToken {\n            /**\n             * @param {?} _lContainer\n             * @param {?} _hostTNode\n             * @param {?} _hostView\n             */\n            constructor(_lContainer, _hostTNode, _hostView) {\n                super();\n                this._lContainer = _lContainer;\n                this._hostTNode = _hostTNode;\n                this._hostView = _hostView;\n                this._viewRefs = [];\n            }\n            /**\n             * @return {?}\n             */\n            get element() {\n                return createElementRef(ElementRefToken, this._hostTNode, this._hostView);\n            }\n            /**\n             * @return {?}\n             */\n            get injector() { return new NodeInjector(this._hostTNode, this._hostView); }\n            /**\n             * @deprecated No replacement\n             * @return {?}\n             */\n            get parentInjector() {\n                /** @type {?} */\n                const parentLocation = getParentInjectorLocation(this._hostTNode, this._hostView);\n                /** @type {?} */\n                const parentView = getParentInjectorView(parentLocation, this._hostView);\n                /** @type {?} */\n                const parentTNode = getParentInjectorTNode(parentLocation, this._hostView, this._hostTNode);\n                return !hasParentInjector(parentLocation) || parentTNode == null ?\n                    new NodeInjector(null, this._hostView) :\n                    new NodeInjector(parentTNode, parentView);\n            }\n            /**\n             * @return {?}\n             */\n            clear() {\n                while (this._lContainer[VIEWS].length) {\n                    this.remove(0);\n                }\n            }\n            /**\n             * @param {?} index\n             * @return {?}\n             */\n            get(index) { return this._viewRefs[index] || null; }\n            /**\n             * @return {?}\n             */\n            get length() { return this._lContainer[VIEWS].length; }\n            /**\n             * @template C\n             * @param {?} templateRef\n             * @param {?=} context\n             * @param {?=} index\n             * @return {?}\n             */\n            createEmbeddedView(templateRef, context, index) {\n                /** @type {?} */\n                const adjustedIdx = this._adjustIndex(index);\n                /** @type {?} */\n                const viewRef = ((/** @type {?} */ (templateRef)))\n                    .createEmbeddedView(context || (/** @type {?} */ ({})), this._lContainer, adjustedIdx);\n                ((/** @type {?} */ (viewRef))).attachToViewContainerRef(this);\n                this._viewRefs.splice(adjustedIdx, 0, viewRef);\n                return viewRef;\n            }\n            /**\n             * @template C\n             * @param {?} componentFactory\n             * @param {?=} index\n             * @param {?=} injector\n             * @param {?=} projectableNodes\n             * @param {?=} ngModuleRef\n             * @return {?}\n             */\n            createComponent(componentFactory, index, injector, projectableNodes, ngModuleRef) {\n                /** @type {?} */\n                const contextInjector = injector || this.parentInjector;\n                if (!ngModuleRef && ((/** @type {?} */ (componentFactory))).ngModule == null && contextInjector) {\n                    ngModuleRef = contextInjector.get(NgModuleRef, null);\n                }\n                /** @type {?} */\n                const componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n                this.insert(componentRef.hostView, index);\n                return componentRef;\n            }\n            /**\n             * @param {?} viewRef\n             * @param {?=} index\n             * @return {?}\n             */\n            insert(viewRef, index) {\n                if (viewRef.destroyed) {\n                    throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n                }\n                /** @type {?} */\n                const lView = (/** @type {?} */ (((/** @type {?} */ (viewRef)))._lView));\n                /** @type {?} */\n                const adjustedIdx = this._adjustIndex(index);\n                if (viewAttachedToContainer(lView)) {\n                    // If view is already attached, fall back to move() so we clean up\n                    // references appropriately.\n                    return this.move(viewRef, adjustedIdx);\n                }\n                insertView(lView, this._lContainer, adjustedIdx);\n                /** @type {?} */\n                const beforeNode = getBeforeNodeForView(adjustedIdx, this._lContainer[VIEWS], this._lContainer[NATIVE]);\n                addRemoveViewFromContainer(lView, true, beforeNode);\n                ((/** @type {?} */ (viewRef))).attachToViewContainerRef(this);\n                this._viewRefs.splice(adjustedIdx, 0, viewRef);\n                return viewRef;\n            }\n            /**\n             * @param {?} viewRef\n             * @param {?} newIndex\n             * @return {?}\n             */\n            move(viewRef, newIndex) {\n                if (viewRef.destroyed) {\n                    throw new Error('Cannot move a destroyed View in a ViewContainer!');\n                }\n                /** @type {?} */\n                const index = this.indexOf(viewRef);\n                if (index !== -1)\n                    this.detach(index);\n                this.insert(viewRef, newIndex);\n                return viewRef;\n            }\n            /**\n             * @param {?} viewRef\n             * @return {?}\n             */\n            indexOf(viewRef) { return this._viewRefs.indexOf(viewRef); }\n            /**\n             * @param {?=} index\n             * @return {?}\n             */\n            remove(index) {\n                /** @type {?} */\n                const adjustedIdx = this._adjustIndex(index, -1);\n                removeView(this._lContainer, adjustedIdx);\n                this._viewRefs.splice(adjustedIdx, 1);\n            }\n            /**\n             * @param {?=} index\n             * @return {?}\n             */\n            detach(index) {\n                /** @type {?} */\n                const adjustedIdx = this._adjustIndex(index, -1);\n                /** @type {?} */\n                const view = detachView(this._lContainer, adjustedIdx);\n                /** @type {?} */\n                const wasDetached = view && this._viewRefs.splice(adjustedIdx, 1)[0] != null;\n                return wasDetached ? new ViewRef((/** @type {?} */ (view)), (/** @type {?} */ (view))[CONTEXT], -1) : null;\n            }\n            /**\n             * @private\n             * @param {?=} index\n             * @param {?=} shift\n             * @return {?}\n             */\n            _adjustIndex(index, shift = 0) {\n                if (index == null) {\n                    return this._lContainer[VIEWS].length + shift;\n                }\n                if (ngDevMode) {\n                    assertGreaterThan(index, -1, 'index must be positive');\n                    // +1 because it's legal to insert at the end.\n                    assertLessThan(index, this._lContainer[VIEWS].length + 1 + shift, 'index');\n                }\n                return index;\n            }\n        };\n    }\n    ngDevMode && assertNodeOfPossibleTypes(hostTNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);\n    /** @type {?} */\n    let lContainer;\n    /** @type {?} */\n    const slotValue = hostView[hostTNode.index];\n    if (isLContainer(slotValue)) {\n        // If the host is a container, we don't need to create a new LContainer\n        lContainer = slotValue;\n        lContainer[ACTIVE_INDEX] = -1;\n    }\n    else {\n        /** @type {?} */\n        const commentNode = hostView[RENDERER].createComment(ngDevMode ? 'container' : '');\n        ngDevMode && ngDevMode.rendererCreateComment++;\n        // A container can be created on the root (topmost / bootstrapped) component and in this case we\n        // can't use LTree to insert container's marker node (both parent of a comment node and the\n        // commend node itself is located outside of elements hold by LTree). In this specific case we\n        // use low-level DOM manipulation to insert container's marker (comment) node.\n        if (isRootView(hostView)) {\n            /** @type {?} */\n            const renderer = hostView[RENDERER];\n            /** @type {?} */\n            const hostNative = (/** @type {?} */ (getNativeByTNode(hostTNode, hostView)));\n            /** @type {?} */\n            const parentOfHostNative = nativeParentNode(renderer, hostNative);\n            nativeInsertBefore(renderer, (/** @type {?} */ (parentOfHostNative)), commentNode, nativeNextSibling(renderer, hostNative));\n        }\n        else {\n            appendChild(commentNode, hostTNode, hostView);\n        }\n        hostView[hostTNode.index] = lContainer =\n            createLContainer(slotValue, hostView, commentNode, hostTNode, true);\n        addToViewTree(hostView, lContainer);\n    }\n    return new R3ViewContainerRef(lContainer, hostTNode, hostView);\n}\n/**\n * Returns a ChangeDetectorRef (a.k.a. a ViewRef)\n * @return {?}\n */\nfunction injectChangeDetectorRef() {\n    return createViewRef(getPreviousOrParentTNode(), getLView(), null);\n}\n/**\n * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).\n *\n * @param {?} hostTNode The node that is requesting a ChangeDetectorRef\n * @param {?} hostView The view to which the node belongs\n * @param {?} context The context for this change detector ref\n * @return {?} The ChangeDetectorRef to use\n */\nfunction createViewRef(hostTNode, hostView, context) {\n    if (isComponent(hostTNode)) {\n        /** @type {?} */\n        const componentIndex = hostTNode.directiveStart;\n        /** @type {?} */\n        const componentView = getComponentViewByIndex(hostTNode.index, hostView);\n        return new ViewRef(componentView, context, componentIndex);\n    }\n    else if (hostTNode.type === 3 /* Element */ || hostTNode.type === 0 /* Container */ ||\n        hostTNode.type === 4 /* ElementContainer */) {\n        /** @type {?} */\n        const hostComponentView = findComponentView(hostView);\n        return new ViewRef(hostComponentView, hostComponentView[CONTEXT], -1);\n    }\n    return (/** @type {?} */ (null));\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction getOrCreateRenderer2(view) {\n    /** @type {?} */\n    const renderer = view[RENDERER];\n    if (isProceduralRenderer(renderer)) {\n        return (/** @type {?} */ (renderer));\n    }\n    else {\n        throw new Error('Cannot inject Renderer2 when the application uses Renderer3!');\n    }\n}\n/**\n * Returns a Renderer2 (or throws when application was bootstrapped with Renderer3)\n * @return {?}\n */\nfunction injectRenderer2() {\n    return getOrCreateRenderer2(getLView());\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction noop(...args) {\n    // Do nothing.\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * \\@security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](http://g.co/ng/security).\n *\n * \\@publicApi\n * @template T\n */\n// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,\n// i.e. users have to ask for what they need. With that, we can build better analysis tools\n// and could do better codegen in the future.\nclass ElementRef {\n    /**\n     * @param {?} nativeElement\n     */\n    constructor(nativeElement) { this.nativeElement = nativeElement; }\n}\n/**\n * \\@internal\n * @nocollapse\n */\nElementRef.__NG_ELEMENT_ID__ = (/**\n * @return {?}\n */\n() => SWITCH_ELEMENT_REF_FACTORY(ElementRef));\n/** @type {?} */\nconst SWITCH_ELEMENT_REF_FACTORY__POST_R3__ = injectElementRef;\n/** @type {?} */\nconst SWITCH_ELEMENT_REF_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_ELEMENT_REF_FACTORY = SWITCH_ELEMENT_REF_FACTORY__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n * \\@publicApi\n */\nclass RenderComponentType {\n    /**\n     * @param {?} id\n     * @param {?} templateUrl\n     * @param {?} slotCount\n     * @param {?} encapsulation\n     * @param {?} styles\n     * @param {?} animations\n     */\n    constructor(id, templateUrl, slotCount, encapsulation, styles, animations) {\n        this.id = id;\n        this.templateUrl = templateUrl;\n        this.slotCount = slotCount;\n        this.encapsulation = encapsulation;\n        this.styles = styles;\n        this.animations = animations;\n    }\n}\n/**\n * @deprecated Debug info is handled internally in the view engine now.\n * @abstract\n */\nclass RenderDebugInfo {\n}\n/**\n * @deprecated Use the `Renderer2` instead.\n * \\@publicApi\n * @abstract\n */\nclass Renderer {\n}\n/** @type {?} */\nconst Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');\n/**\n * Injectable service that provides a low-level interface for modifying the UI.\n *\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {\\@link Renderer#setElementProperty setElementProperty} or\n * {\\@link Renderer#setElementAttribute setElementAttribute} respectively.\n *\n * If you are implementing a custom renderer, you must implement this interface.\n *\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n *\n * @deprecated Use `RendererFactory2` instead.\n * \\@publicApi\n * @abstract\n */\nclass RootRenderer {\n}\n/**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * \\@publicApi\n * @abstract\n */\nclass RendererFactory2 {\n}\n/** @enum {number} */\nconst RendererStyleFlags2 = {\n    /**\n     * Marks a style as important.\n     */\n    Important: 1,\n    /**\n     * Marks a style as using dash case naming (this-is-dash-case).\n     */\n    DashCase: 2,\n};\nRendererStyleFlags2[RendererStyleFlags2.Important] = 'Important';\nRendererStyleFlags2[RendererStyleFlags2.DashCase] = 'DashCase';\n/**\n * Extend this base class to implement custom rendering. By default, Angular\n * renders a template into DOM. You can use custom rendering to intercept\n * rendering calls, or to render to something other than DOM.\n *\n * Create your custom renderer using `RendererFactory2`.\n *\n * Use a custom renderer to bypass Angular's templating and\n * make custom UI changes that can't be expressed declaratively.\n * For example if you need to set a property or an attribute whose name is\n * not statically known, use the `setProperty()` or\n * `setAttribute()` method.\n *\n * \\@publicApi\n * @abstract\n */\nclass Renderer2 {\n}\n/**\n * \\@internal\n * @nocollapse\n */\nRenderer2.__NG_ELEMENT_ID__ = (/**\n * @return {?}\n */\n() => SWITCH_RENDERER2_FACTORY());\n/** @type {?} */\nconst SWITCH_RENDERER2_FACTORY__POST_R3__ = injectRenderer2;\n/** @type {?} */\nconst SWITCH_RENDERER2_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_RENDERER2_FACTORY = SWITCH_RENDERER2_FACTORY__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@description Represents the version of Angular\n *\n * \\@publicApi\n */\nclass Version {\n    /**\n     * @param {?} full\n     */\n    constructor(full) {\n        this.full = full;\n        this.major = full.split('.')[0];\n        this.minor = full.split('.')[1];\n        this.patch = full.split('.').slice(2).join('.');\n    }\n}\n/**\n * \\@publicApi\n * @type {?}\n */\nconst VERSION = new Version('8.0.0');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DefaultIterableDifferFactory {\n    constructor() { }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    supports(obj) { return isListLikeIterable(obj); }\n    /**\n     * @template V\n     * @param {?=} trackByFn\n     * @return {?}\n     */\n    create(trackByFn) {\n        return new DefaultIterableDiffer(trackByFn);\n    }\n}\n/** @type {?} */\nconst trackByIdentity = (/**\n * @param {?} index\n * @param {?} item\n * @return {?}\n */\n(index, item) => item);\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n * \\@publicApi\n * @template V\n */\nclass DefaultIterableDiffer {\n    /**\n     * @param {?=} trackByFn\n     */\n    constructor(trackByFn) {\n        this.length = 0;\n        // Keeps track of the used records at any point in time (during & across `_check()` calls)\n        this._linkedRecords = null;\n        // Keeps track of the removed records at any point in time during `_check()` calls.\n        this._unlinkedRecords = null;\n        this._previousItHead = null;\n        this._itHead = null;\n        this._itTail = null;\n        this._additionsHead = null;\n        this._additionsTail = null;\n        this._movesHead = null;\n        this._movesTail = null;\n        this._removalsHead = null;\n        this._removalsTail = null;\n        // Keeps track of records where custom track by is the same, but item identity has changed\n        this._identityChangesHead = null;\n        this._identityChangesTail = null;\n        this._trackByFn = trackByFn || trackByIdentity;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._itHead; record !== null; record = record._next) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachOperation(fn) {\n        /** @type {?} */\n        let nextIt = this._itHead;\n        /** @type {?} */\n        let nextRemove = this._removalsHead;\n        /** @type {?} */\n        let addRemoveOffset = 0;\n        /** @type {?} */\n        let moveOffsets = null;\n        while (nextIt || nextRemove) {\n            // Figure out which is the next record to process\n            // Order: remove, add, move\n            /** @type {?} */\n            const record = !nextRemove ||\n                nextIt &&\n                    (/** @type {?} */ (nextIt.currentIndex)) <\n                        getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?\n                (/** @type {?} */ (nextIt)) :\n                nextRemove;\n            /** @type {?} */\n            const adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n            /** @type {?} */\n            const currentIndex = record.currentIndex;\n            // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n            if (record === nextRemove) {\n                addRemoveOffset--;\n                nextRemove = nextRemove._nextRemoved;\n            }\n            else {\n                nextIt = (/** @type {?} */ (nextIt))._next;\n                if (record.previousIndex == null) {\n                    addRemoveOffset++;\n                }\n                else {\n                    // INVARIANT:  currentIndex < previousIndex\n                    if (!moveOffsets)\n                        moveOffsets = [];\n                    /** @type {?} */\n                    const localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n                    /** @type {?} */\n                    const localCurrentIndex = (/** @type {?} */ (currentIndex)) - addRemoveOffset;\n                    if (localMovePreviousIndex != localCurrentIndex) {\n                        for (let i = 0; i < localMovePreviousIndex; i++) {\n                            /** @type {?} */\n                            const offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n                            /** @type {?} */\n                            const index = offset + i;\n                            if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                                moveOffsets[i] = offset + 1;\n                            }\n                        }\n                        /** @type {?} */\n                        const previousIndex = record.previousIndex;\n                        moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n                    }\n                }\n            }\n            if (adjPreviousIndex !== currentIndex) {\n                fn(record, adjPreviousIndex, currentIndex);\n            }\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachPreviousItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachAddedItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachMovedItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._movesHead; record !== null; record = record._nextMoved) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachRemovedItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachIdentityChange(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} collection\n     * @return {?}\n     */\n    diff(collection) {\n        if (collection == null)\n            collection = [];\n        if (!isListLikeIterable(collection)) {\n            throw new Error(`Error trying to diff '${stringify(collection)}'. Only arrays and iterables are allowed`);\n        }\n        if (this.check(collection)) {\n            return this;\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    onDestroy() { }\n    /**\n     * @param {?} collection\n     * @return {?}\n     */\n    check(collection) {\n        this._reset();\n        /** @type {?} */\n        let record = this._itHead;\n        /** @type {?} */\n        let mayBeDirty = false;\n        /** @type {?} */\n        let index;\n        /** @type {?} */\n        let item;\n        /** @type {?} */\n        let itemTrackBy;\n        if (Array.isArray(collection)) {\n            ((/** @type {?} */ (this))).length = collection.length;\n            for (let index = 0; index < this.length; index++) {\n                item = collection[index];\n                itemTrackBy = this._trackByFn(index, item);\n                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                    record = this._mismatch(record, item, itemTrackBy, index);\n                    mayBeDirty = true;\n                }\n                else {\n                    if (mayBeDirty) {\n                        // TODO(misko): can we limit this to duplicates only?\n                        record = this._verifyReinsertion(record, item, itemTrackBy, index);\n                    }\n                    if (!looseIdentical(record.item, item))\n                        this._addIdentityChange(record, item);\n                }\n                record = record._next;\n            }\n        }\n        else {\n            index = 0;\n            iterateListLike(collection, (/**\n             * @param {?} item\n             * @return {?}\n             */\n            (item) => {\n                itemTrackBy = this._trackByFn(index, item);\n                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                    record = this._mismatch(record, item, itemTrackBy, index);\n                    mayBeDirty = true;\n                }\n                else {\n                    if (mayBeDirty) {\n                        // TODO(misko): can we limit this to duplicates only?\n                        record = this._verifyReinsertion(record, item, itemTrackBy, index);\n                    }\n                    if (!looseIdentical(record.item, item))\n                        this._addIdentityChange(record, item);\n                }\n                record = record._next;\n                index++;\n            }));\n            ((/** @type {?} */ (this))).length = index;\n        }\n        this._truncate(record);\n        ((/** @type {?} */ (this))).collection = collection;\n        return this.isDirty;\n    }\n    /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\n       * changes.\n       */\n    /**\n     * @return {?}\n     */\n    get isDirty() {\n        return this._additionsHead !== null || this._movesHead !== null ||\n            this._removalsHead !== null || this._identityChangesHead !== null;\n    }\n    /**\n     * Reset the state of the change objects to show no changes. This means set previousKey to\n     * currentKey, and clear all of the queues (additions, moves, removals).\n     * Set the previousIndexes of moved and added items to their currentIndexes\n     * Reset the list of additions, moves and removals\n     *\n     * \\@internal\n     * @return {?}\n     */\n    _reset() {\n        if (this.isDirty) {\n            /** @type {?} */\n            let record;\n            /** @type {?} */\n            let nextRecord;\n            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n                record._nextPrevious = record._next;\n            }\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                record.previousIndex = record.currentIndex;\n            }\n            this._additionsHead = this._additionsTail = null;\n            for (record = this._movesHead; record !== null; record = nextRecord) {\n                record.previousIndex = record.currentIndex;\n                nextRecord = record._nextMoved;\n            }\n            this._movesHead = this._movesTail = null;\n            this._removalsHead = this._removalsTail = null;\n            this._identityChangesHead = this._identityChangesTail = null;\n            // TODO(vicb): when assert gets supported\n            // assert(!this.isDirty);\n        }\n    }\n    /**\n     * This is the core function which handles differences between collections.\n     *\n     * - `record` is the record which we saw at this position last time. If null then it is a new\n     *   item.\n     * - `item` is the current item in the collection\n     * - `index` is the position of the item in the collection\n     *\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @param {?} itemTrackBy\n     * @param {?} index\n     * @return {?}\n     */\n    _mismatch(record, item, itemTrackBy, index) {\n        // The previous record after which we will append the current one.\n        /** @type {?} */\n        let previousRecord;\n        if (record === null) {\n            previousRecord = this._itTail;\n        }\n        else {\n            previousRecord = record._prev;\n            // Remove the record from the collection since we know it does not match the item.\n            this._remove(record);\n        }\n        // Attempt to see if we have seen the item before.\n        record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n        if (record !== null) {\n            // We have seen this before, we need to move it forward in the collection.\n            // But first we need to check if identity changed, so we can update in view if necessary\n            if (!looseIdentical(record.item, item))\n                this._addIdentityChange(record, item);\n            this._moveAfter(record, previousRecord, index);\n        }\n        else {\n            // Never seen it, check evicted list.\n            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n            if (record !== null) {\n                // It is an item which we have evicted earlier: reinsert it back into the list.\n                // But first we need to check if identity changed, so we can update in view if necessary\n                if (!looseIdentical(record.item, item))\n                    this._addIdentityChange(record, item);\n                this._reinsertAfter(record, previousRecord, index);\n            }\n            else {\n                // It is a new item: add it.\n                record =\n                    this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);\n            }\n        }\n        return record;\n    }\n    /**\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n     *\n     * Use case: `[a, a]` => `[b, a, a]`\n     *\n     * If we did not have this check then the insertion of `b` would:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\n     *   3) reinsert `a` at index 2. <-- this is wrong!\n     *\n     * The correct behavior is:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) reinsert `a` at index 1.\n     *   3) move `a` at from `1` to `2`.\n     *\n     *\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\n     * have already been removed:\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n     * at the end.\n     *\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @param {?} itemTrackBy\n     * @param {?} index\n     * @return {?}\n     */\n    _verifyReinsertion(record, item, itemTrackBy, index) {\n        /** @type {?} */\n        let reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n        if (reinsertRecord !== null) {\n            record = this._reinsertAfter(reinsertRecord, (/** @type {?} */ (record._prev)), index);\n        }\n        else if (record.currentIndex != index) {\n            record.currentIndex = index;\n            this._addToMoves(record, index);\n        }\n        return record;\n    }\n    /**\n     * Get rid of any excess {\\@link IterableChangeRecord_}s from the previous collection\n     *\n     * - `record` The first excess {\\@link IterableChangeRecord_}.\n     *\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    _truncate(record) {\n        // Anything after that needs to be removed;\n        while (record !== null) {\n            /** @type {?} */\n            const nextRecord = record._next;\n            this._addToRemovals(this._unlink(record));\n            record = nextRecord;\n        }\n        if (this._unlinkedRecords !== null) {\n            this._unlinkedRecords.clear();\n        }\n        if (this._additionsTail !== null) {\n            this._additionsTail._nextAdded = null;\n        }\n        if (this._movesTail !== null) {\n            this._movesTail._nextMoved = null;\n        }\n        if (this._itTail !== null) {\n            this._itTail._next = null;\n        }\n        if (this._removalsTail !== null) {\n            this._removalsTail._nextRemoved = null;\n        }\n        if (this._identityChangesTail !== null) {\n            this._identityChangesTail._nextIdentityChange = null;\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    _reinsertAfter(record, prevRecord, index) {\n        if (this._unlinkedRecords !== null) {\n            this._unlinkedRecords.remove(record);\n        }\n        /** @type {?} */\n        const prev = record._prevRemoved;\n        /** @type {?} */\n        const next = record._nextRemoved;\n        if (prev === null) {\n            this._removalsHead = next;\n        }\n        else {\n            prev._nextRemoved = next;\n        }\n        if (next === null) {\n            this._removalsTail = prev;\n        }\n        else {\n            next._prevRemoved = prev;\n        }\n        this._insertAfter(record, prevRecord, index);\n        this._addToMoves(record, index);\n        return record;\n    }\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    _moveAfter(record, prevRecord, index) {\n        this._unlink(record);\n        this._insertAfter(record, prevRecord, index);\n        this._addToMoves(record, index);\n        return record;\n    }\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    _addAfter(record, prevRecord, index) {\n        this._insertAfter(record, prevRecord, index);\n        if (this._additionsTail === null) {\n            // TODO(vicb):\n            // assert(this._additionsHead === null);\n            this._additionsTail = this._additionsHead = record;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_additionsTail._nextAdded === null);\n            // assert(record._nextAdded === null);\n            this._additionsTail = this._additionsTail._nextAdded = record;\n        }\n        return record;\n    }\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    _insertAfter(record, prevRecord, index) {\n        // TODO(vicb):\n        // assert(record != prevRecord);\n        // assert(record._next === null);\n        // assert(record._prev === null);\n        // TODO(vicb):\n        // assert(record != prevRecord);\n        // assert(record._next === null);\n        // assert(record._prev === null);\n        /** @type {?} */\n        const next = prevRecord === null ? this._itHead : prevRecord._next;\n        // TODO(vicb):\n        // assert(next != record);\n        // assert(prevRecord != record);\n        record._next = next;\n        record._prev = prevRecord;\n        if (next === null) {\n            this._itTail = record;\n        }\n        else {\n            next._prev = record;\n        }\n        if (prevRecord === null) {\n            this._itHead = record;\n        }\n        else {\n            prevRecord._next = record;\n        }\n        if (this._linkedRecords === null) {\n            this._linkedRecords = new _DuplicateMap();\n        }\n        this._linkedRecords.put(record);\n        record.currentIndex = index;\n        return record;\n    }\n    /**\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    _remove(record) {\n        return this._addToRemovals(this._unlink(record));\n    }\n    /**\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    _unlink(record) {\n        if (this._linkedRecords !== null) {\n            this._linkedRecords.remove(record);\n        }\n        /** @type {?} */\n        const prev = record._prev;\n        /** @type {?} */\n        const next = record._next;\n        // TODO(vicb):\n        // assert((record._prev = null) === null);\n        // assert((record._next = null) === null);\n        if (prev === null) {\n            this._itHead = next;\n        }\n        else {\n            prev._next = next;\n        }\n        if (next === null) {\n            this._itTail = prev;\n        }\n        else {\n            next._prev = prev;\n        }\n        return record;\n    }\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} toIndex\n     * @return {?}\n     */\n    _addToMoves(record, toIndex) {\n        // TODO(vicb):\n        // assert(record._nextMoved === null);\n        if (record.previousIndex === toIndex) {\n            return record;\n        }\n        if (this._movesTail === null) {\n            // TODO(vicb):\n            // assert(_movesHead === null);\n            this._movesTail = this._movesHead = record;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_movesTail._nextMoved === null);\n            this._movesTail = this._movesTail._nextMoved = record;\n        }\n        return record;\n    }\n    /**\n     * @private\n     * @param {?} record\n     * @return {?}\n     */\n    _addToRemovals(record) {\n        if (this._unlinkedRecords === null) {\n            this._unlinkedRecords = new _DuplicateMap();\n        }\n        this._unlinkedRecords.put(record);\n        record.currentIndex = null;\n        record._nextRemoved = null;\n        if (this._removalsTail === null) {\n            // TODO(vicb):\n            // assert(_removalsHead === null);\n            this._removalsTail = this._removalsHead = record;\n            record._prevRemoved = null;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_removalsTail._nextRemoved === null);\n            // assert(record._nextRemoved === null);\n            record._prevRemoved = this._removalsTail;\n            this._removalsTail = this._removalsTail._nextRemoved = record;\n        }\n        return record;\n    }\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @return {?}\n     */\n    _addIdentityChange(record, item) {\n        record.item = item;\n        if (this._identityChangesTail === null) {\n            this._identityChangesTail = this._identityChangesHead = record;\n        }\n        else {\n            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n        }\n        return record;\n    }\n}\n/**\n * @template V\n */\nclass IterableChangeRecord_ {\n    /**\n     * @param {?} item\n     * @param {?} trackById\n     */\n    constructor(item, trackById) {\n        this.item = item;\n        this.trackById = trackById;\n        this.currentIndex = null;\n        this.previousIndex = null;\n        /**\n         * \\@internal\n         */\n        this._nextPrevious = null;\n        /**\n         * \\@internal\n         */\n        this._prev = null;\n        /**\n         * \\@internal\n         */\n        this._next = null;\n        /**\n         * \\@internal\n         */\n        this._prevDup = null;\n        /**\n         * \\@internal\n         */\n        this._nextDup = null;\n        /**\n         * \\@internal\n         */\n        this._prevRemoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextRemoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextAdded = null;\n        /**\n         * \\@internal\n         */\n        this._nextMoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextIdentityChange = null;\n    }\n}\n// A linked list of CollectionChangeRecords with the same IterableChangeRecord_.item\n/**\n * @template V\n */\nclass _DuplicateItemRecordList {\n    constructor() {\n        /**\n         * \\@internal\n         */\n        this._head = null;\n        /**\n         * \\@internal\n         */\n        this._tail = null;\n    }\n    /**\n     * Append the record to the list of duplicates.\n     *\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\n     * @param {?} record\n     * @return {?}\n     */\n    add(record) {\n        if (this._head === null) {\n            this._head = this._tail = record;\n            record._nextDup = null;\n            record._prevDup = null;\n        }\n        else {\n            // TODO(vicb):\n            // assert(record.item ==  _head.item ||\n            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n            (/** @type {?} */ (this._tail))._nextDup = record;\n            record._prevDup = this._tail;\n            record._nextDup = null;\n            this._tail = record;\n        }\n    }\n    // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and\n    // IterableChangeRecord_.currentIndex >= atOrAfterIndex\n    /**\n     * @param {?} trackById\n     * @param {?} atOrAfterIndex\n     * @return {?}\n     */\n    get(trackById, atOrAfterIndex) {\n        /** @type {?} */\n        let record;\n        for (record = this._head; record !== null; record = record._nextDup) {\n            if ((atOrAfterIndex === null || atOrAfterIndex <= (/** @type {?} */ (record.currentIndex))) &&\n                looseIdentical(record.trackById, trackById)) {\n                return record;\n            }\n        }\n        return null;\n    }\n    /**\n     * Remove one {\\@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * Returns whether the list of duplicates is empty.\n     * @param {?} record\n     * @return {?}\n     */\n    remove(record) {\n        // TODO(vicb):\n        // assert(() {\n        //  // verify that the record being removed is in the list.\n        //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n        //    if (identical(cursor, record)) return true;\n        //  }\n        //  return false;\n        //});\n        // TODO(vicb):\n        // assert(() {\n        //  // verify that the record being removed is in the list.\n        //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n        //    if (identical(cursor, record)) return true;\n        //  }\n        //  return false;\n        //});\n        /** @type {?} */\n        const prev = record._prevDup;\n        /** @type {?} */\n        const next = record._nextDup;\n        if (prev === null) {\n            this._head = next;\n        }\n        else {\n            prev._nextDup = next;\n        }\n        if (next === null) {\n            this._tail = prev;\n        }\n        else {\n            next._prevDup = prev;\n        }\n        return this._head === null;\n    }\n}\n/**\n * @template V\n */\nclass _DuplicateMap {\n    constructor() {\n        this.map = new Map();\n    }\n    /**\n     * @param {?} record\n     * @return {?}\n     */\n    put(record) {\n        /** @type {?} */\n        const key = record.trackById;\n        /** @type {?} */\n        let duplicates = this.map.get(key);\n        if (!duplicates) {\n            duplicates = new _DuplicateItemRecordList();\n            this.map.set(key, duplicates);\n        }\n        duplicates.add(record);\n    }\n    /**\n     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n     *\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n     * have any more `a`s needs to return the second `a`.\n     * @param {?} trackById\n     * @param {?} atOrAfterIndex\n     * @return {?}\n     */\n    get(trackById, atOrAfterIndex) {\n        /** @type {?} */\n        const key = trackById;\n        /** @type {?} */\n        const recordList = this.map.get(key);\n        return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\n    }\n    /**\n     * Removes a {\\@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * The list of duplicates also is removed from the map if it gets empty.\n     * @param {?} record\n     * @return {?}\n     */\n    remove(record) {\n        /** @type {?} */\n        const key = record.trackById;\n        /** @type {?} */\n        const recordList = (/** @type {?} */ (this.map.get(key)));\n        // Remove the list of duplicates when it gets empty\n        if (recordList.remove(record)) {\n            this.map.delete(key);\n        }\n        return record;\n    }\n    /**\n     * @return {?}\n     */\n    get isEmpty() { return this.map.size === 0; }\n    /**\n     * @return {?}\n     */\n    clear() { this.map.clear(); }\n}\n/**\n * @param {?} item\n * @param {?} addRemoveOffset\n * @param {?} moveOffsets\n * @return {?}\n */\nfunction getPreviousIndex(item, addRemoveOffset, moveOffsets) {\n    /** @type {?} */\n    const previousIndex = item.previousIndex;\n    if (previousIndex === null)\n        return previousIndex;\n    /** @type {?} */\n    let moveOffset = 0;\n    if (moveOffsets && previousIndex < moveOffsets.length) {\n        moveOffset = moveOffsets[previousIndex];\n    }\n    return previousIndex + addRemoveOffset + moveOffset;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template K, V\n */\nclass DefaultKeyValueDifferFactory {\n    constructor() { }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    supports(obj) { return obj instanceof Map || isJsObject(obj); }\n    /**\n     * @template K, V\n     * @return {?}\n     */\n    create() { return new DefaultKeyValueDiffer(); }\n}\n/**\n * @template K, V\n */\nclass DefaultKeyValueDiffer {\n    constructor() {\n        this._records = new Map();\n        this._mapHead = null;\n        // _appendAfter is used in the check loop\n        this._appendAfter = null;\n        this._previousMapHead = null;\n        this._changesHead = null;\n        this._changesTail = null;\n        this._additionsHead = null;\n        this._additionsTail = null;\n        this._removalsHead = null;\n        this._removalsTail = null;\n    }\n    /**\n     * @return {?}\n     */\n    get isDirty() {\n        return this._additionsHead !== null || this._changesHead !== null ||\n            this._removalsHead !== null;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._mapHead; record !== null; record = record._next) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachPreviousItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachChangedItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._changesHead; record !== null; record = record._nextChanged) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachAddedItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachRemovedItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?=} map\n     * @return {?}\n     */\n    diff(map) {\n        if (!map) {\n            map = new Map();\n        }\n        else if (!(map instanceof Map || isJsObject(map))) {\n            throw new Error(`Error trying to diff '${stringify(map)}'. Only maps and objects are allowed`);\n        }\n        return this.check(map) ? this : null;\n    }\n    /**\n     * @return {?}\n     */\n    onDestroy() { }\n    /**\n     * Check the current state of the map vs the previous.\n     * The algorithm is optimised for when the keys do no change.\n     * @param {?} map\n     * @return {?}\n     */\n    check(map) {\n        this._reset();\n        /** @type {?} */\n        let insertBefore = this._mapHead;\n        this._appendAfter = null;\n        this._forEach(map, (/**\n         * @param {?} value\n         * @param {?} key\n         * @return {?}\n         */\n        (value, key) => {\n            if (insertBefore && insertBefore.key === key) {\n                this._maybeAddToChanges(insertBefore, value);\n                this._appendAfter = insertBefore;\n                insertBefore = insertBefore._next;\n            }\n            else {\n                /** @type {?} */\n                const record = this._getOrCreateRecordForKey(key, value);\n                insertBefore = this._insertBeforeOrAppend(insertBefore, record);\n            }\n        }));\n        // Items remaining at the end of the list have been deleted\n        if (insertBefore) {\n            if (insertBefore._prev) {\n                insertBefore._prev._next = null;\n            }\n            this._removalsHead = insertBefore;\n            for (let record = insertBefore; record !== null; record = record._nextRemoved) {\n                if (record === this._mapHead) {\n                    this._mapHead = null;\n                }\n                this._records.delete(record.key);\n                record._nextRemoved = record._next;\n                record.previousValue = record.currentValue;\n                record.currentValue = null;\n                record._prev = null;\n                record._next = null;\n            }\n        }\n        // Make sure tails have no next records from previous runs\n        if (this._changesTail)\n            this._changesTail._nextChanged = null;\n        if (this._additionsTail)\n            this._additionsTail._nextAdded = null;\n        return this.isDirty;\n    }\n    /**\n     * Inserts a record before `before` or append at the end of the list when `before` is null.\n     *\n     * Notes:\n     * - This method appends at `this._appendAfter`,\n     * - This method updates `this._appendAfter`,\n     * - The return value is the new value for the insertion pointer.\n     * @private\n     * @param {?} before\n     * @param {?} record\n     * @return {?}\n     */\n    _insertBeforeOrAppend(before, record) {\n        if (before) {\n            /** @type {?} */\n            const prev = before._prev;\n            record._next = before;\n            record._prev = prev;\n            before._prev = record;\n            if (prev) {\n                prev._next = record;\n            }\n            if (before === this._mapHead) {\n                this._mapHead = record;\n            }\n            this._appendAfter = before;\n            return before;\n        }\n        if (this._appendAfter) {\n            this._appendAfter._next = record;\n            record._prev = this._appendAfter;\n        }\n        else {\n            this._mapHead = record;\n        }\n        this._appendAfter = record;\n        return null;\n    }\n    /**\n     * @private\n     * @param {?} key\n     * @param {?} value\n     * @return {?}\n     */\n    _getOrCreateRecordForKey(key, value) {\n        if (this._records.has(key)) {\n            /** @type {?} */\n            const record = (/** @type {?} */ (this._records.get(key)));\n            this._maybeAddToChanges(record, value);\n            /** @type {?} */\n            const prev = record._prev;\n            /** @type {?} */\n            const next = record._next;\n            if (prev) {\n                prev._next = next;\n            }\n            if (next) {\n                next._prev = prev;\n            }\n            record._next = null;\n            record._prev = null;\n            return record;\n        }\n        /** @type {?} */\n        const record = new KeyValueChangeRecord_(key);\n        this._records.set(key, record);\n        record.currentValue = value;\n        this._addToAdditions(record);\n        return record;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _reset() {\n        if (this.isDirty) {\n            /** @type {?} */\n            let record;\n            // let `_previousMapHead` contain the state of the map before the changes\n            this._previousMapHead = this._mapHead;\n            for (record = this._previousMapHead; record !== null; record = record._next) {\n                record._nextPrevious = record._next;\n            }\n            // Update `record.previousValue` with the value of the item before the changes\n            // We need to update all changed items (that's those which have been added and changed)\n            for (record = this._changesHead; record !== null; record = record._nextChanged) {\n                record.previousValue = record.currentValue;\n            }\n            for (record = this._additionsHead; record != null; record = record._nextAdded) {\n                record.previousValue = record.currentValue;\n            }\n            this._changesHead = this._changesTail = null;\n            this._additionsHead = this._additionsTail = null;\n            this._removalsHead = null;\n        }\n    }\n    // Add the record or a given key to the list of changes only when the value has actually changed\n    /**\n     * @private\n     * @param {?} record\n     * @param {?} newValue\n     * @return {?}\n     */\n    _maybeAddToChanges(record, newValue) {\n        if (!looseIdentical(newValue, record.currentValue)) {\n            record.previousValue = record.currentValue;\n            record.currentValue = newValue;\n            this._addToChanges(record);\n        }\n    }\n    /**\n     * @private\n     * @param {?} record\n     * @return {?}\n     */\n    _addToAdditions(record) {\n        if (this._additionsHead === null) {\n            this._additionsHead = this._additionsTail = record;\n        }\n        else {\n            (/** @type {?} */ (this._additionsTail))._nextAdded = record;\n            this._additionsTail = record;\n        }\n    }\n    /**\n     * @private\n     * @param {?} record\n     * @return {?}\n     */\n    _addToChanges(record) {\n        if (this._changesHead === null) {\n            this._changesHead = this._changesTail = record;\n        }\n        else {\n            (/** @type {?} */ (this._changesTail))._nextChanged = record;\n            this._changesTail = record;\n        }\n    }\n    /**\n     * \\@internal\n     * @private\n     * @template K, V\n     * @param {?} obj\n     * @param {?} fn\n     * @return {?}\n     */\n    _forEach(obj, fn) {\n        if (obj instanceof Map) {\n            obj.forEach(fn);\n        }\n        else {\n            Object.keys(obj).forEach((/**\n             * @param {?} k\n             * @return {?}\n             */\n            k => fn(obj[k], k)));\n        }\n    }\n}\n/**\n * @template K, V\n */\nclass KeyValueChangeRecord_ {\n    /**\n     * @param {?} key\n     */\n    constructor(key) {\n        this.key = key;\n        this.previousValue = null;\n        this.currentValue = null;\n        /**\n         * \\@internal\n         */\n        this._nextPrevious = null;\n        /**\n         * \\@internal\n         */\n        this._next = null;\n        /**\n         * \\@internal\n         */\n        this._prev = null;\n        /**\n         * \\@internal\n         */\n        this._nextAdded = null;\n        /**\n         * \\@internal\n         */\n        this._nextRemoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextChanged = null;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n *\n * \\@publicApi\n */\nclass IterableDiffers {\n    /**\n     * @param {?} factories\n     */\n    constructor(factories) { this.factories = factories; }\n    /**\n     * @param {?} factories\n     * @param {?=} parent\n     * @return {?}\n     */\n    static create(factories, parent) {\n        if (parent != null) {\n            /** @type {?} */\n            const copied = parent.factories.slice();\n            factories = factories.concat(copied);\n        }\n        return new IterableDiffers(factories);\n    }\n    /**\n     * Takes an array of {\\@link IterableDifferFactory} and returns a provider used to extend the\n     * inherited {\\@link IterableDiffers} instance with the provided factories and return a new\n     * {\\@link IterableDiffers} instance.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {\\@link IterableDiffer} available.\n     *\n     * ```\n     * \\@Component({\n     *   viewProviders: [\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\n     *   ]\n     * })\n     * ```\n     * @param {?} factories\n     * @return {?}\n     */\n    static extend(factories) {\n        return {\n            provide: IterableDiffers,\n            useFactory: (/**\n             * @param {?} parent\n             * @return {?}\n             */\n            (parent) => {\n                if (!parent) {\n                    // Typically would occur when calling IterableDiffers.extend inside of dependencies passed\n                    // to\n                    // bootstrap(), which would override default pipes instead of extending them.\n                    throw new Error('Cannot extend IterableDiffers without a parent injector');\n                }\n                return IterableDiffers.create(factories, parent);\n            }),\n            // Dependency technically isn't optional, but we can provide a better error message this way.\n            deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n        };\n    }\n    /**\n     * @param {?} iterable\n     * @return {?}\n     */\n    find(iterable) {\n        /** @type {?} */\n        const factory = this.factories.find((/**\n         * @param {?} f\n         * @return {?}\n         */\n        f => f.supports(iterable)));\n        if (factory != null) {\n            return factory;\n        }\n        else {\n            throw new Error(`Cannot find a differ supporting object '${iterable}' of type '${getTypeNameForDebugging(iterable)}'`);\n        }\n    }\n}\n/** @nocollapse */\n/** @nocollapse */ IterableDiffers.ngInjectableDef = ɵɵdefineInjectable({\n    providedIn: 'root',\n    factory: (/**\n     * @nocollapse @return {?}\n     */\n    () => new IterableDiffers([new DefaultIterableDifferFactory()]))\n});\n/**\n * @param {?} type\n * @return {?}\n */\nfunction getTypeNameForDebugging(type) {\n    return type['name'] || typeof type;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n * \\@publicApi\n */\nclass KeyValueDiffers {\n    /**\n     * @param {?} factories\n     */\n    constructor(factories) { this.factories = factories; }\n    /**\n     * @template S\n     * @param {?} factories\n     * @param {?=} parent\n     * @return {?}\n     */\n    static create(factories, parent) {\n        if (parent) {\n            /** @type {?} */\n            const copied = parent.factories.slice();\n            factories = factories.concat(copied);\n        }\n        return new KeyValueDiffers(factories);\n    }\n    /**\n     * Takes an array of {\\@link KeyValueDifferFactory} and returns a provider used to extend the\n     * inherited {\\@link KeyValueDiffers} instance with the provided factories and return a new\n     * {\\@link KeyValueDiffers} instance.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {\\@link KeyValueDiffer} available.\n     *\n     * ```\n     * \\@Component({\n     *   viewProviders: [\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n     *   ]\n     * })\n     * ```\n     * @template S\n     * @param {?} factories\n     * @return {?}\n     */\n    static extend(factories) {\n        return {\n            provide: KeyValueDiffers,\n            useFactory: (/**\n             * @param {?} parent\n             * @return {?}\n             */\n            (parent) => {\n                if (!parent) {\n                    // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\n                    // to bootstrap(), which would override default pipes instead of extending them.\n                    throw new Error('Cannot extend KeyValueDiffers without a parent injector');\n                }\n                return KeyValueDiffers.create(factories, parent);\n            }),\n            // Dependency technically isn't optional, but we can provide a better error message this way.\n            deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n        };\n    }\n    /**\n     * @param {?} kv\n     * @return {?}\n     */\n    find(kv) {\n        /** @type {?} */\n        const factory = this.factories.find((/**\n         * @param {?} f\n         * @return {?}\n         */\n        f => f.supports(kv)));\n        if (factory) {\n            return factory;\n        }\n        throw new Error(`Cannot find a differ supporting object '${kv}'`);\n    }\n}\n/** @nocollapse */\n/** @nocollapse */ KeyValueDiffers.ngInjectableDef = ɵɵdefineInjectable({\n    providedIn: 'root',\n    factory: (/**\n     * @nocollapse @return {?}\n     */\n    () => new KeyValueDiffers([new DefaultKeyValueDifferFactory()]))\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Base class for Angular Views, provides change detection functionality.\n * A change-detection tree collects all views that are to be checked for changes.\n * Use the methods to add and remove views from the tree, initiate change-detection,\n * and explicitly mark views as _dirty_, meaning that they have changed and need to be rerendered.\n *\n * \\@usageNotes\n *\n * The following examples demonstrate how to modify default change-detection behavior\n * to perform explicit detection when needed.\n *\n * ### Use `markForCheck()` with `CheckOnce` strategy\n *\n * The following example sets the `OnPush` change-detection strategy for a component\n * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check\n * after an interval. See [live demo](http://plnkr.co/edit/GC512b?p=preview).\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\"\n * region=\"mark-for-check\"></code-example>\n *\n * ### Detach change detector to limit how often check occurs\n *\n * The following example defines a component with a large list of read-only data\n * that is expected to change constantly, many times per second.\n * To improve performance, we want to check and update the list\n * less often than the changes actually occur. To do that, we detach\n * the component's change detector and perform an explicit local check every five seconds.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"detach\"></code-example>\n *\n *\n * ### Reattaching a detached component\n *\n * The following example creates a component displaying live data.\n * The component detaches its change detector from the main change detector tree\n * when the `live` property is set to false, and reattaches it when the property\n * becomes true.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"reattach\"></code-example>\n *\n * \\@publicApi\n * @abstract\n */\nclass ChangeDetectorRef {\n}\n/**\n * \\@internal\n * @nocollapse\n */\nChangeDetectorRef.__NG_ELEMENT_ID__ = (/**\n * @return {?}\n */\n() => SWITCH_CHANGE_DETECTOR_REF_FACTORY());\n/** @type {?} */\nconst SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ = injectChangeDetectorRef;\n/** @type {?} */\nconst SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__ = (/**\n * @param {...?} args\n * @return {?}\n */\n(...args) => { });\n/** @type {?} */\nconst SWITCH_CHANGE_DETECTOR_REF_FACTORY = SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Structural diffing for `Object`s and `Map`s.\n * @type {?}\n */\nconst keyValDiff = [new DefaultKeyValueDifferFactory()];\n/**\n * Structural diffing for `Iterable` types such as `Array`s.\n * @type {?}\n */\nconst iterableDiff = [new DefaultIterableDifferFactory()];\n/** @type {?} */\nconst defaultIterableDiffers = new IterableDiffers(iterableDiff);\n/** @type {?} */\nconst defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents an embedded template that can be used to instantiate embedded views.\n * To instantiate embedded views based on a template, use the `ViewContainerRef`\n * method `createEmbeddedView()`.\n *\n * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\n * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\n * is injected into the constructor of the directive,\n * using the `TemplateRef` token.\n *\n * You can also use a `Query` to find a `TemplateRef` associated with\n * a component or a directive.\n *\n * @see `ViewContainerRef`\n * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)\n *\n * \\@publicApi\n * @abstract\n * @template C\n */\nclass TemplateRef {\n}\n/**\n * \\@internal\n * @nocollapse\n */\nTemplateRef.__NG_ELEMENT_ID__ = (/**\n * @return {?}\n */\n() => SWITCH_TEMPLATE_REF_FACTORY(TemplateRef, ElementRef));\n/** @type {?} */\nconst SWITCH_TEMPLATE_REF_FACTORY__POST_R3__ = injectTemplateRef;\n/** @type {?} */\nconst SWITCH_TEMPLATE_REF_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_TEMPLATE_REF_FACTORY = SWITCH_TEMPLATE_REF_FACTORY__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents a container where one or more views can be attached to a component.\n *\n * Can contain *host views* (created by instantiating a\n * component with the `createComponent()` method), and *embedded views*\n * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\n *\n * A view container instance can contain other view containers,\n * creating a [view hierarchy](guide/glossary#view-tree).\n *\n * @see `ComponentRef`\n * @see `EmbeddedViewRef`\n *\n * \\@publicApi\n * @abstract\n */\nclass ViewContainerRef {\n}\n/**\n * \\@internal\n * @nocollapse\n */\nViewContainerRef.__NG_ELEMENT_ID__ = (/**\n * @return {?}\n */\n() => SWITCH_VIEW_CONTAINER_REF_FACTORY(ViewContainerRef, ElementRef));\n/** @type {?} */\nconst SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__ = injectViewContainerRef;\n/** @type {?} */\nconst SWITCH_VIEW_CONTAINER_REF_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_VIEW_CONTAINER_REF_FACTORY = SWITCH_VIEW_CONTAINER_REF_FACTORY__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} context\n * @param {?} oldValue\n * @param {?} currValue\n * @param {?} isFirstCheck\n * @return {?}\n */\nfunction expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {\n    /** @type {?} */\n    let msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '${oldValue}'. Current value: '${currValue}'.`;\n    if (isFirstCheck) {\n        msg +=\n            ` It seems like the view has been created after its parent and its children have been dirty checked.` +\n                ` Has it been created in a change detection hook ?`;\n    }\n    return viewDebugError(msg, context);\n}\n/**\n * @param {?} err\n * @param {?} context\n * @return {?}\n */\nfunction viewWrappedDebugError(err, context) {\n    if (!(err instanceof Error)) {\n        // errors that are not Error instances don't have a stack,\n        // so it is ok to wrap them into a new Error object...\n        err = new Error(err.toString());\n    }\n    _addDebugContext(err, context);\n    return err;\n}\n/**\n * @param {?} msg\n * @param {?} context\n * @return {?}\n */\nfunction viewDebugError(msg, context) {\n    /** @type {?} */\n    const err = new Error(msg);\n    _addDebugContext(err, context);\n    return err;\n}\n/**\n * @param {?} err\n * @param {?} context\n * @return {?}\n */\nfunction _addDebugContext(err, context) {\n    ((/** @type {?} */ (err)))[ERROR_DEBUG_CONTEXT] = context;\n    ((/** @type {?} */ (err)))[ERROR_LOGGER] = context.logError.bind(context);\n}\n/**\n * @param {?} err\n * @return {?}\n */\nfunction isViewDebugError(err) {\n    return !!getDebugContext(err);\n}\n/**\n * @param {?} action\n * @return {?}\n */\nfunction viewDestroyedError(action) {\n    return new Error(`ViewDestroyedError: Attempt to use a destroyed view: ${action}`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Called before each cycle of a view's check to detect whether this is in the\n// initState for which we need to call ngOnInit, ngAfterContentInit or ngAfterViewInit\n// lifecycle methods. Returns true if this check cycle should call lifecycle\n// methods.\n/**\n * @param {?} view\n * @param {?} priorInitState\n * @param {?} newInitState\n * @return {?}\n */\nfunction shiftInitState(view, priorInitState, newInitState) {\n    // Only update the InitState if we are currently in the prior state.\n    // For example, only move into CallingInit if we are in BeforeInit. Only\n    // move into CallingContentInit if we are in CallingInit. Normally this will\n    // always be true because of how checkCycle is called in checkAndUpdateView.\n    // However, if checkAndUpdateView is called recursively or if an exception is\n    // thrown while checkAndUpdateView is running, checkAndUpdateView starts over\n    // from the beginning. This ensures the state is monotonically increasing,\n    // terminating in the AfterInit state, which ensures the Init methods are called\n    // at least once and only once.\n    /** @type {?} */\n    const state = view.state;\n    /** @type {?} */\n    const initState = state & 1792 /* InitState_Mask */;\n    if (initState === priorInitState) {\n        view.state = (state & ~1792 /* InitState_Mask */) | newInitState;\n        view.initIndex = -1;\n        return true;\n    }\n    return initState === newInitState;\n}\n// Returns true if the lifecycle init method should be called for the node with\n// the given init index.\n/**\n * @param {?} view\n * @param {?} initState\n * @param {?} index\n * @return {?}\n */\nfunction shouldCallLifecycleInitHook(view, initState, index) {\n    if ((view.state & 1792 /* InitState_Mask */) === initState && view.initIndex <= index) {\n        view.initIndex = index + 1;\n        return true;\n    }\n    return false;\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction asTextData(view, index) {\n    return (/** @type {?} */ (view.nodes[index]));\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction asElementData(view, index) {\n    return (/** @type {?} */ (view.nodes[index]));\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction asProviderData(view, index) {\n    return (/** @type {?} */ (view.nodes[index]));\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction asPureExpressionData(view, index) {\n    return (/** @type {?} */ (view.nodes[index]));\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction asQueryList(view, index) {\n    return (/** @type {?} */ (view.nodes[index]));\n}\n/**\n * @abstract\n */\nclass DebugContext {\n}\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * This object is used to prevent cycles in the source files and to have a place where\n * debug mode can hook it. It is lazily filled when `isDevMode` is known.\n * @type {?}\n */\nconst Services = {\n    setCurrentNode: (/** @type {?} */ (undefined)),\n    createRootView: (/** @type {?} */ (undefined)),\n    createEmbeddedView: (/** @type {?} */ (undefined)),\n    createComponentView: (/** @type {?} */ (undefined)),\n    createNgModuleRef: (/** @type {?} */ (undefined)),\n    overrideProvider: (/** @type {?} */ (undefined)),\n    overrideComponentView: (/** @type {?} */ (undefined)),\n    clearOverrides: (/** @type {?} */ (undefined)),\n    checkAndUpdateView: (/** @type {?} */ (undefined)),\n    checkNoChangesView: (/** @type {?} */ (undefined)),\n    destroyView: (/** @type {?} */ (undefined)),\n    resolveDep: (/** @type {?} */ (undefined)),\n    createDebugContext: (/** @type {?} */ (undefined)),\n    handleEvent: (/** @type {?} */ (undefined)),\n    updateDirectives: (/** @type {?} */ (undefined)),\n    updateRenderer: (/** @type {?} */ (undefined)),\n    dirtyParentQueries: (/** @type {?} */ (undefined)),\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst NOOP = (/**\n * @return {?}\n */\n() => { });\n/** @type {?} */\nconst _tokenKeyCache = new Map();\n/**\n * @param {?} token\n * @return {?}\n */\nfunction tokenKey(token) {\n    /** @type {?} */\n    let key = _tokenKeyCache.get(token);\n    if (!key) {\n        key = stringify(token) + '_' + _tokenKeyCache.size;\n        _tokenKeyCache.set(token, key);\n    }\n    return key;\n}\n/**\n * @param {?} view\n * @param {?} nodeIdx\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nfunction unwrapValue(view, nodeIdx, bindingIdx, value) {\n    if (WrappedValue.isWrapped(value)) {\n        value = WrappedValue.unwrap(value);\n        /** @type {?} */\n        const globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;\n        /** @type {?} */\n        const oldValue = WrappedValue.unwrap(view.oldValues[globalBindingIdx]);\n        view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);\n    }\n    return value;\n}\n/** @type {?} */\nconst UNDEFINED_RENDERER_TYPE_ID = '$$undefined';\n/** @type {?} */\nconst EMPTY_RENDERER_TYPE_ID = '$$empty';\n// Attention: this function is called as top level function.\n// Putting any logic in here will destroy closure tree shaking!\n/**\n * @param {?} values\n * @return {?}\n */\nfunction createRendererType2(values) {\n    return {\n        id: UNDEFINED_RENDERER_TYPE_ID,\n        styles: values.styles,\n        encapsulation: values.encapsulation,\n        data: values.data\n    };\n}\n/** @type {?} */\nlet _renderCompCount$1 = 0;\n/**\n * @param {?=} type\n * @return {?}\n */\nfunction resolveRendererType2(type) {\n    if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {\n        // first time we see this RendererType2. Initialize it...\n        /** @type {?} */\n        const isFilled = ((type.encapsulation != null && type.encapsulation !== ViewEncapsulation.None) ||\n            type.styles.length || Object.keys(type.data).length);\n        if (isFilled) {\n            type.id = `c${_renderCompCount$1++}`;\n        }\n        else {\n            type.id = EMPTY_RENDERER_TYPE_ID;\n        }\n    }\n    if (type && type.id === EMPTY_RENDERER_TYPE_ID) {\n        type = null;\n    }\n    return type || null;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nfunction checkBinding(view, def, bindingIdx, value) {\n    /** @type {?} */\n    const oldValues = view.oldValues;\n    if ((view.state & 2 /* FirstCheck */) ||\n        !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {\n        return true;\n    }\n    return false;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nfunction checkAndUpdateBinding(view, def, bindingIdx, value) {\n    if (checkBinding(view, def, bindingIdx, value)) {\n        view.oldValues[def.bindingIndex + bindingIdx] = value;\n        return true;\n    }\n    return false;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nfunction checkBindingNoChanges(view, def, bindingIdx, value) {\n    /** @type {?} */\n    const oldValue = view.oldValues[def.bindingIndex + bindingIdx];\n    if ((view.state & 1 /* BeforeFirstCheck */) || !devModeEqual(oldValue, value)) {\n        /** @type {?} */\n        const bindingName = def.bindings[bindingIdx].name;\n        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.nodeIndex), `${bindingName}: ${oldValue}`, `${bindingName}: ${value}`, (view.state & 1 /* BeforeFirstCheck */) !== 0);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction markParentViewsForCheck(view) {\n    /** @type {?} */\n    let currView = view;\n    while (currView) {\n        if (currView.def.flags & 2 /* OnPush */) {\n            currView.state |= 8 /* ChecksEnabled */;\n        }\n        currView = currView.viewContainerParent || currView.parent;\n    }\n}\n/**\n * @param {?} view\n * @param {?} endView\n * @return {?}\n */\nfunction markParentViewsForCheckProjectedViews(view, endView) {\n    /** @type {?} */\n    let currView = view;\n    while (currView && currView !== endView) {\n        currView.state |= 64 /* CheckProjectedViews */;\n        currView = currView.viewContainerParent || currView.parent;\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @param {?} eventName\n * @param {?} event\n * @return {?}\n */\nfunction dispatchEvent(view, nodeIndex, eventName, event) {\n    try {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[nodeIndex];\n        /** @type {?} */\n        const startView = nodeDef.flags & 33554432 /* ComponentView */ ?\n            asElementData(view, nodeIndex).componentView :\n            view;\n        markParentViewsForCheck(startView);\n        return Services.handleEvent(view, nodeIndex, eventName, event);\n    }\n    catch (e) {\n        // Attention: Don't rethrow, as it would cancel Observable subscriptions!\n        view.root.errorHandler.handleError(e);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction declaredViewContainer(view) {\n    if (view.parent) {\n        /** @type {?} */\n        const parentView = view.parent;\n        return asElementData(parentView, (/** @type {?} */ (view.parentNodeDef)).nodeIndex);\n    }\n    return null;\n}\n/**\n * for component views, this is the host element.\n * for embedded views, this is the index of the parent node\n * that contains the view container.\n * @param {?} view\n * @return {?}\n */\nfunction viewParentEl(view) {\n    /** @type {?} */\n    const parentView = view.parent;\n    if (parentView) {\n        return (/** @type {?} */ (view.parentNodeDef)).parent;\n    }\n    else {\n        return null;\n    }\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction renderNode(view, def) {\n    switch (def.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return asElementData(view, def.nodeIndex).renderElement;\n        case 2 /* TypeText */:\n            return asTextData(view, def.nodeIndex).renderText;\n    }\n}\n/**\n * @param {?} target\n * @param {?} name\n * @return {?}\n */\nfunction elementEventFullName(target, name) {\n    return target ? `${target}:${name}` : name;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction isComponentView(view) {\n    return !!view.parent && !!((/** @type {?} */ (view.parentNodeDef)).flags & 32768 /* Component */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction isEmbeddedView(view) {\n    return !!view.parent && !((/** @type {?} */ (view.parentNodeDef)).flags & 32768 /* Component */);\n}\n/**\n * @param {?} queryId\n * @return {?}\n */\nfunction filterQueryId(queryId) {\n    return 1 << (queryId % 32);\n}\n/**\n * @param {?} matchedQueriesDsl\n * @return {?}\n */\nfunction splitMatchedQueriesDsl(matchedQueriesDsl) {\n    /** @type {?} */\n    const matchedQueries = {};\n    /** @type {?} */\n    let matchedQueryIds = 0;\n    /** @type {?} */\n    const references = {};\n    if (matchedQueriesDsl) {\n        matchedQueriesDsl.forEach((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ([queryId, valueType]) => {\n            if (typeof queryId === 'number') {\n                matchedQueries[queryId] = valueType;\n                matchedQueryIds |= filterQueryId(queryId);\n            }\n            else {\n                references[queryId] = valueType;\n            }\n        }));\n    }\n    return { matchedQueries, references, matchedQueryIds };\n}\n/**\n * @param {?} deps\n * @param {?=} sourceName\n * @return {?}\n */\nfunction splitDepsDsl(deps, sourceName) {\n    return deps.map((/**\n     * @param {?} value\n     * @return {?}\n     */\n    value => {\n        /** @type {?} */\n        let token;\n        /** @type {?} */\n        let flags;\n        if (Array.isArray(value)) {\n            [flags, token] = value;\n        }\n        else {\n            flags = 0 /* None */;\n            token = value;\n        }\n        if (token && (typeof token === 'function' || typeof token === 'object') && sourceName) {\n            Object.defineProperty(token, SOURCE, { value: sourceName, configurable: true });\n        }\n        return { flags, token, tokenKey: tokenKey(token) };\n    }));\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nfunction getParentRenderElement(view, renderHost, def) {\n    /** @type {?} */\n    let renderParent = def.renderParent;\n    if (renderParent) {\n        if ((renderParent.flags & 1 /* TypeElement */) === 0 ||\n            (renderParent.flags & 33554432 /* ComponentView */) === 0 ||\n            ((/** @type {?} */ (renderParent.element)).componentRendererType &&\n                (/** @type {?} */ ((/** @type {?} */ (renderParent.element)).componentRendererType)).encapsulation ===\n                    ViewEncapsulation.Native)) {\n            // only children of non components, or children of components with native encapsulation should\n            // be attached.\n            return asElementData(view, (/** @type {?} */ (def.renderParent)).nodeIndex).renderElement;\n        }\n    }\n    else {\n        return renderHost;\n    }\n}\n/** @type {?} */\nconst DEFINITION_CACHE = new WeakMap();\n/**\n * @template D\n * @param {?} factory\n * @return {?}\n */\nfunction resolveDefinition(factory) {\n    /** @type {?} */\n    let value = (/** @type {?} */ ((/** @type {?} */ (DEFINITION_CACHE.get(factory)))));\n    if (!value) {\n        value = factory((/**\n         * @return {?}\n         */\n        () => NOOP));\n        value.factory = factory;\n        DEFINITION_CACHE.set(factory, value);\n    }\n    return value;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction rootRenderNodes(view) {\n    /** @type {?} */\n    const renderNodes = [];\n    visitRootRenderNodes(view, 0 /* Collect */, undefined, undefined, renderNodes);\n    return renderNodes;\n}\n/**\n * @param {?} view\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction visitRootRenderNodes(view, action, parentNode, nextSibling, target) {\n    // We need to re-compute the parent node in case the nodes have been moved around manually\n    if (action === 3 /* RemoveChild */) {\n        parentNode = view.renderer.parentNode(renderNode(view, (/** @type {?} */ (view.def.lastRenderRootNode))));\n    }\n    visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);\n}\n/**\n * @param {?} view\n * @param {?} action\n * @param {?} startIndex\n * @param {?} endIndex\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {\n    for (let i = startIndex; i <= endIndex; i++) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & (1 /* TypeElement */ | 2 /* TypeText */ | 8 /* TypeNgContent */)) {\n            visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);\n        }\n        // jump to next sibling\n        i += nodeDef.childCount;\n    }\n}\n/**\n * @param {?} view\n * @param {?} ngContentIndex\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {\n    /** @type {?} */\n    let compView = view;\n    while (compView && !isComponentView(compView)) {\n        compView = compView.parent;\n    }\n    /** @type {?} */\n    const hostView = (/** @type {?} */ (compView)).parent;\n    /** @type {?} */\n    const hostElDef = viewParentEl((/** @type {?} */ (compView)));\n    /** @type {?} */\n    const startIndex = (/** @type {?} */ (hostElDef)).nodeIndex + 1;\n    /** @type {?} */\n    const endIndex = (/** @type {?} */ (hostElDef)).nodeIndex + (/** @type {?} */ (hostElDef)).childCount;\n    for (let i = startIndex; i <= endIndex; i++) {\n        /** @type {?} */\n        const nodeDef = (/** @type {?} */ (hostView)).def.nodes[i];\n        if (nodeDef.ngContentIndex === ngContentIndex) {\n            visitRenderNode((/** @type {?} */ (hostView)), nodeDef, action, parentNode, nextSibling, target);\n        }\n        // jump to next sibling\n        i += nodeDef.childCount;\n    }\n    if (!(/** @type {?} */ (hostView)).parent) {\n        // a root view\n        /** @type {?} */\n        const projectedNodes = view.root.projectableNodes[ngContentIndex];\n        if (projectedNodes) {\n            for (let i = 0; i < projectedNodes.length; i++) {\n                execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);\n            }\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {\n    if (nodeDef.flags & 8 /* TypeNgContent */) {\n        visitProjectedRenderNodes(view, (/** @type {?} */ (nodeDef.ngContent)).index, action, parentNode, nextSibling, target);\n    }\n    else {\n        /** @type {?} */\n        const rn = renderNode(view, nodeDef);\n        if (action === 3 /* RemoveChild */ && (nodeDef.flags & 33554432 /* ComponentView */) &&\n            (nodeDef.bindingFlags & 48 /* CatSyntheticProperty */)) {\n            // Note: we might need to do both actions.\n            if (nodeDef.bindingFlags & (16 /* SyntheticProperty */)) {\n                execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n            }\n            if (nodeDef.bindingFlags & (32 /* SyntheticHostProperty */)) {\n                /** @type {?} */\n                const compView = asElementData(view, nodeDef.nodeIndex).componentView;\n                execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);\n            }\n        }\n        else {\n            execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n        }\n        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n            /** @type {?} */\n            const embeddedViews = (/** @type {?} */ (asElementData(view, nodeDef.nodeIndex).viewContainer))._embeddedViews;\n            for (let k = 0; k < embeddedViews.length; k++) {\n                visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);\n            }\n        }\n        if (nodeDef.flags & 1 /* TypeElement */ && !(/** @type {?} */ (nodeDef.element)).name) {\n            visitSiblingRenderNodes(view, action, nodeDef.nodeIndex + 1, nodeDef.nodeIndex + nodeDef.childCount, parentNode, nextSibling, target);\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} renderNode\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {\n    /** @type {?} */\n    const renderer = view.renderer;\n    switch (action) {\n        case 1 /* AppendChild */:\n            renderer.appendChild(parentNode, renderNode);\n            break;\n        case 2 /* InsertBefore */:\n            renderer.insertBefore(parentNode, renderNode, nextSibling);\n            break;\n        case 3 /* RemoveChild */:\n            renderer.removeChild(parentNode, renderNode);\n            break;\n        case 0 /* Collect */:\n            (/** @type {?} */ (target)).push(renderNode);\n            break;\n    }\n}\n/** @type {?} */\nconst NS_PREFIX_RE = /^:([^:]+):(.+)$/;\n/**\n * @param {?} name\n * @return {?}\n */\nfunction splitNamespace(name) {\n    if (name[0] === ':') {\n        /** @type {?} */\n        const match = (/** @type {?} */ (name.match(NS_PREFIX_RE)));\n        return [match[1], match[2]];\n    }\n    return ['', name];\n}\n/**\n * @param {?} bindings\n * @return {?}\n */\nfunction calcBindingFlags(bindings) {\n    /** @type {?} */\n    let flags = 0;\n    for (let i = 0; i < bindings.length; i++) {\n        flags |= bindings[i].flags;\n    }\n    return flags;\n}\n/**\n * @param {?} valueCount\n * @param {?} constAndInterp\n * @return {?}\n */\nfunction interpolate(valueCount, constAndInterp) {\n    /** @type {?} */\n    let result = '';\n    for (let i = 0; i < valueCount * 2; i = i + 2) {\n        result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);\n    }\n    return result + constAndInterp[valueCount * 2];\n}\n/**\n * @param {?} valueCount\n * @param {?} c0\n * @param {?} a1\n * @param {?} c1\n * @param {?=} a2\n * @param {?=} c2\n * @param {?=} a3\n * @param {?=} c3\n * @param {?=} a4\n * @param {?=} c4\n * @param {?=} a5\n * @param {?=} c5\n * @param {?=} a6\n * @param {?=} c6\n * @param {?=} a7\n * @param {?=} c7\n * @param {?=} a8\n * @param {?=} c8\n * @param {?=} a9\n * @param {?=} c9\n * @return {?}\n */\nfunction inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {\n    switch (valueCount) {\n        case 1:\n            return c0 + _toStringWithNull(a1) + c1;\n        case 2:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;\n        case 3:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3;\n        case 4:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4;\n        case 5:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;\n        case 6:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;\n        case 7:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7;\n        case 8:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;\n        case 9:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;\n        default:\n            throw new Error(`Does not support more than 9 expressions`);\n    }\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction _toStringWithNull(v) {\n    return v != null ? v.toString() : '';\n}\n/** @type {?} */\nconst EMPTY_ARRAY$3 = [];\n/** @type {?} */\nconst EMPTY_MAP = {};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst UNDEFINED_VALUE = new Object();\n/** @type {?} */\nconst InjectorRefTokenKey = tokenKey(Injector);\n/** @type {?} */\nconst INJECTORRefTokenKey = tokenKey(INJECTOR);\n/** @type {?} */\nconst NgModuleRefTokenKey = tokenKey(NgModuleRef);\n/**\n * @param {?} flags\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @return {?}\n */\nfunction moduleProvideDef(flags, token, value, deps) {\n    // Need to resolve forwardRefs as e.g. for `useValue` we\n    // lowered the expression and then stopped evaluating it,\n    // i.e. also didn't unwrap it.\n    value = resolveForwardRef(value);\n    /** @type {?} */\n    const depDefs = splitDepsDsl(deps, stringify(token));\n    return {\n        // will bet set by the module definition\n        index: -1,\n        deps: depDefs, flags, token, value\n    };\n}\n/**\n * @param {?} providers\n * @return {?}\n */\nfunction moduleDef(providers) {\n    /** @type {?} */\n    const providersByKey = {};\n    /** @type {?} */\n    const modules = [];\n    /** @type {?} */\n    let isRoot = false;\n    for (let i = 0; i < providers.length; i++) {\n        /** @type {?} */\n        const provider = providers[i];\n        if (provider.token === APP_ROOT && provider.value === true) {\n            isRoot = true;\n        }\n        if (provider.flags & 1073741824 /* TypeNgModule */) {\n            modules.push(provider.token);\n        }\n        provider.index = i;\n        providersByKey[tokenKey(provider.token)] = provider;\n    }\n    return {\n        // Will be filled later...\n        factory: null,\n        providersByKey,\n        providers,\n        modules,\n        isRoot,\n    };\n}\n/**\n * @param {?} data\n * @return {?}\n */\nfunction initNgModule(data) {\n    /** @type {?} */\n    const def = data._def;\n    /** @type {?} */\n    const providers = data._providers = new Array(def.providers.length);\n    for (let i = 0; i < def.providers.length; i++) {\n        /** @type {?} */\n        const provDef = def.providers[i];\n        if (!(provDef.flags & 4096 /* LazyProvider */)) {\n            // Make sure the provider has not been already initialized outside this loop.\n            if (providers[i] === undefined) {\n                providers[i] = _createProviderInstance(data, provDef);\n            }\n        }\n    }\n}\n/**\n * @param {?} data\n * @param {?} depDef\n * @param {?=} notFoundValue\n * @return {?}\n */\nfunction resolveNgModuleDep(data, depDef, notFoundValue = Injector.THROW_IF_NOT_FOUND) {\n    /** @type {?} */\n    const former = setCurrentInjector(data);\n    try {\n        if (depDef.flags & 8 /* Value */) {\n            return depDef.token;\n        }\n        if (depDef.flags & 2 /* Optional */) {\n            notFoundValue = null;\n        }\n        if (depDef.flags & 1 /* SkipSelf */) {\n            return data._parent.get(depDef.token, notFoundValue);\n        }\n        /** @type {?} */\n        const tokenKey = depDef.tokenKey;\n        switch (tokenKey) {\n            case InjectorRefTokenKey:\n            case INJECTORRefTokenKey:\n            case NgModuleRefTokenKey:\n                return data;\n        }\n        /** @type {?} */\n        const providerDef = data._def.providersByKey[tokenKey];\n        /** @type {?} */\n        let injectableDef;\n        if (providerDef) {\n            /** @type {?} */\n            let providerInstance = data._providers[providerDef.index];\n            if (providerInstance === undefined) {\n                providerInstance = data._providers[providerDef.index] =\n                    _createProviderInstance(data, providerDef);\n            }\n            return providerInstance === UNDEFINED_VALUE ? undefined : providerInstance;\n        }\n        else if ((injectableDef = getInjectableDef(depDef.token)) && targetsModule(data, injectableDef)) {\n            /** @type {?} */\n            const index = data._providers.length;\n            data._def.providers[index] = data._def.providersByKey[depDef.tokenKey] = {\n                flags: 1024 /* TypeFactoryProvider */ | 4096 /* LazyProvider */,\n                value: injectableDef.factory,\n                deps: [], index,\n                token: depDef.token,\n            };\n            data._providers[index] = UNDEFINED_VALUE;\n            return (data._providers[index] =\n                _createProviderInstance(data, data._def.providersByKey[depDef.tokenKey]));\n        }\n        else if (depDef.flags & 4 /* Self */) {\n            return notFoundValue;\n        }\n        return data._parent.get(depDef.token, notFoundValue);\n    }\n    finally {\n        setCurrentInjector(former);\n    }\n}\n/**\n * @param {?} ngModule\n * @param {?} scope\n * @return {?}\n */\nfunction moduleTransitivelyPresent(ngModule, scope) {\n    return ngModule._def.modules.indexOf(scope) > -1;\n}\n/**\n * @param {?} ngModule\n * @param {?} def\n * @return {?}\n */\nfunction targetsModule(ngModule, def) {\n    return def.providedIn != null && (moduleTransitivelyPresent(ngModule, def.providedIn) ||\n        def.providedIn === 'root' && ngModule._def.isRoot);\n}\n/**\n * @param {?} ngModule\n * @param {?} providerDef\n * @return {?}\n */\nfunction _createProviderInstance(ngModule, providerDef) {\n    /** @type {?} */\n    let injectable;\n    switch (providerDef.flags & 201347067 /* Types */) {\n        case 512 /* TypeClassProvider */:\n            injectable = _createClass(ngModule, providerDef.value, providerDef.deps);\n            break;\n        case 1024 /* TypeFactoryProvider */:\n            injectable = _callFactory(ngModule, providerDef.value, providerDef.deps);\n            break;\n        case 2048 /* TypeUseExistingProvider */:\n            injectable = resolveNgModuleDep(ngModule, providerDef.deps[0]);\n            break;\n        case 256 /* TypeValueProvider */:\n            injectable = providerDef.value;\n            break;\n    }\n    // The read of `ngOnDestroy` here is slightly expensive as it's megamorphic, so it should be\n    // avoided if possible. The sequence of checks here determines whether ngOnDestroy needs to be\n    // checked. It might not if the `injectable` isn't an object or if NodeFlags.OnDestroy is already\n    // set (ngOnDestroy was detected statically).\n    if (injectable !== UNDEFINED_VALUE && injectable !== null && typeof injectable === 'object' &&\n        !(providerDef.flags & 131072 /* OnDestroy */) && typeof injectable.ngOnDestroy === 'function') {\n        providerDef.flags |= 131072 /* OnDestroy */;\n    }\n    return injectable === undefined ? UNDEFINED_VALUE : injectable;\n}\n/**\n * @param {?} ngModule\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nfunction _createClass(ngModule, ctor, deps) {\n    /** @type {?} */\n    const len = deps.length;\n    switch (len) {\n        case 0:\n            return new ctor();\n        case 1:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]));\n        case 2:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n        case 3:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n        default:\n            /** @type {?} */\n            const depValues = new Array(len);\n            for (let i = 0; i < len; i++) {\n                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n            }\n            return new ctor(...depValues);\n    }\n}\n/**\n * @param {?} ngModule\n * @param {?} factory\n * @param {?} deps\n * @return {?}\n */\nfunction _callFactory(ngModule, factory, deps) {\n    /** @type {?} */\n    const len = deps.length;\n    switch (len) {\n        case 0:\n            return factory();\n        case 1:\n            return factory(resolveNgModuleDep(ngModule, deps[0]));\n        case 2:\n            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n        case 3:\n            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n        default:\n            /** @type {?} */\n            const depValues = Array(len);\n            for (let i = 0; i < len; i++) {\n                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n            }\n            return factory(...depValues);\n    }\n}\n/**\n * @param {?} ngModule\n * @param {?} lifecycles\n * @return {?}\n */\nfunction callNgModuleLifecycle(ngModule, lifecycles) {\n    /** @type {?} */\n    const def = ngModule._def;\n    /** @type {?} */\n    const destroyed = new Set();\n    for (let i = 0; i < def.providers.length; i++) {\n        /** @type {?} */\n        const provDef = def.providers[i];\n        if (provDef.flags & 131072 /* OnDestroy */) {\n            /** @type {?} */\n            const instance = ngModule._providers[i];\n            if (instance && instance !== UNDEFINED_VALUE) {\n                /** @type {?} */\n                const onDestroy = instance.ngOnDestroy;\n                if (typeof onDestroy === 'function' && !destroyed.has(instance)) {\n                    onDestroy.apply(instance);\n                    destroyed.add(instance);\n                }\n            }\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} parentView\n * @param {?} elementData\n * @param {?} viewIndex\n * @param {?} view\n * @return {?}\n */\nfunction attachEmbeddedView(parentView, elementData, viewIndex, view) {\n    /** @type {?} */\n    let embeddedViews = (/** @type {?} */ (elementData.viewContainer))._embeddedViews;\n    if (viewIndex === null || viewIndex === undefined) {\n        viewIndex = embeddedViews.length;\n    }\n    view.viewContainerParent = parentView;\n    addToArray(embeddedViews, (/** @type {?} */ (viewIndex)), view);\n    attachProjectedView(elementData, view);\n    Services.dirtyParentQueries(view);\n    /** @type {?} */\n    const prevView = (/** @type {?} */ (viewIndex)) > 0 ? embeddedViews[(/** @type {?} */ (viewIndex)) - 1] : null;\n    renderAttachEmbeddedView(elementData, prevView, view);\n}\n/**\n * @param {?} vcElementData\n * @param {?} view\n * @return {?}\n */\nfunction attachProjectedView(vcElementData, view) {\n    /** @type {?} */\n    const dvcElementData = declaredViewContainer(view);\n    if (!dvcElementData || dvcElementData === vcElementData ||\n        view.state & 16 /* IsProjectedView */) {\n        return;\n    }\n    // Note: For performance reasons, we\n    // - add a view to template._projectedViews only 1x throughout its lifetime,\n    //   and remove it not until the view is destroyed.\n    //   (hard, as when a parent view is attached/detached we would need to attach/detach all\n    //    nested projected views as well, even across component boundaries).\n    // - don't track the insertion order of views in the projected views array\n    //   (hard, as when the views of the same template are inserted different view containers)\n    view.state |= 16 /* IsProjectedView */;\n    /** @type {?} */\n    let projectedViews = dvcElementData.template._projectedViews;\n    if (!projectedViews) {\n        projectedViews = dvcElementData.template._projectedViews = [];\n    }\n    projectedViews.push(view);\n    // Note: we are changing the NodeDef here as we cannot calculate\n    // the fact whether a template is used for projection during compilation.\n    markNodeAsProjectedTemplate((/** @type {?} */ (view.parent)).def, (/** @type {?} */ (view.parentNodeDef)));\n}\n/**\n * @param {?} viewDef\n * @param {?} nodeDef\n * @return {?}\n */\nfunction markNodeAsProjectedTemplate(viewDef, nodeDef) {\n    if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n        return;\n    }\n    viewDef.nodeFlags |= 4 /* ProjectedTemplate */;\n    nodeDef.flags |= 4 /* ProjectedTemplate */;\n    /** @type {?} */\n    let parentNodeDef = nodeDef.parent;\n    while (parentNodeDef) {\n        parentNodeDef.childFlags |= 4 /* ProjectedTemplate */;\n        parentNodeDef = parentNodeDef.parent;\n    }\n}\n/**\n * @param {?} elementData\n * @param {?=} viewIndex\n * @return {?}\n */\nfunction detachEmbeddedView(elementData, viewIndex) {\n    /** @type {?} */\n    const embeddedViews = (/** @type {?} */ (elementData.viewContainer))._embeddedViews;\n    if (viewIndex == null || viewIndex >= embeddedViews.length) {\n        viewIndex = embeddedViews.length - 1;\n    }\n    if (viewIndex < 0) {\n        return null;\n    }\n    /** @type {?} */\n    const view = embeddedViews[viewIndex];\n    view.viewContainerParent = null;\n    removeFromArray(embeddedViews, viewIndex);\n    // See attachProjectedView for why we don't update projectedViews here.\n    Services.dirtyParentQueries(view);\n    renderDetachView$1(view);\n    return view;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction detachProjectedView(view) {\n    if (!(view.state & 16 /* IsProjectedView */)) {\n        return;\n    }\n    /** @type {?} */\n    const dvcElementData = declaredViewContainer(view);\n    if (dvcElementData) {\n        /** @type {?} */\n        const projectedViews = dvcElementData.template._projectedViews;\n        if (projectedViews) {\n            removeFromArray(projectedViews, projectedViews.indexOf(view));\n            Services.dirtyParentQueries(view);\n        }\n    }\n}\n/**\n * @param {?} elementData\n * @param {?} oldViewIndex\n * @param {?} newViewIndex\n * @return {?}\n */\nfunction moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {\n    /** @type {?} */\n    const embeddedViews = (/** @type {?} */ (elementData.viewContainer))._embeddedViews;\n    /** @type {?} */\n    const view = embeddedViews[oldViewIndex];\n    removeFromArray(embeddedViews, oldViewIndex);\n    if (newViewIndex == null) {\n        newViewIndex = embeddedViews.length;\n    }\n    addToArray(embeddedViews, newViewIndex, view);\n    // Note: Don't need to change projectedViews as the order in there\n    // as always invalid...\n    Services.dirtyParentQueries(view);\n    renderDetachView$1(view);\n    /** @type {?} */\n    const prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;\n    renderAttachEmbeddedView(elementData, prevView, view);\n    return view;\n}\n/**\n * @param {?} elementData\n * @param {?} prevView\n * @param {?} view\n * @return {?}\n */\nfunction renderAttachEmbeddedView(elementData, prevView, view) {\n    /** @type {?} */\n    const prevRenderNode = prevView ? renderNode(prevView, (/** @type {?} */ (prevView.def.lastRenderRootNode))) :\n        elementData.renderElement;\n    /** @type {?} */\n    const parentNode = view.renderer.parentNode(prevRenderNode);\n    /** @type {?} */\n    const nextSibling = view.renderer.nextSibling(prevRenderNode);\n    // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!\n    // However, browsers automatically do `appendChild` when there is no `nextSibling`.\n    visitRootRenderNodes(view, 2 /* InsertBefore */, parentNode, nextSibling, undefined);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction renderDetachView$1(view) {\n    visitRootRenderNodes(view, 3 /* RemoveChild */, null, null, undefined);\n}\n/**\n * @param {?} arr\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nfunction addToArray(arr, index, value) {\n    // perf: array.push is faster than array.splice!\n    if (index >= arr.length) {\n        arr.push(value);\n    }\n    else {\n        arr.splice(index, 0, value);\n    }\n}\n/**\n * @param {?} arr\n * @param {?} index\n * @return {?}\n */\nfunction removeFromArray(arr, index) {\n    // perf: array.pop is faster than array.splice!\n    if (index >= arr.length - 1) {\n        arr.pop();\n    }\n    else {\n        arr.splice(index, 1);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EMPTY_CONTEXT = new Object();\n// Attention: this function is called as top level function.\n// Putting any logic in here will destroy closure tree shaking!\n/**\n * @param {?} selector\n * @param {?} componentType\n * @param {?} viewDefFactory\n * @param {?} inputs\n * @param {?} outputs\n * @param {?} ngContentSelectors\n * @return {?}\n */\nfunction createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {\n    return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);\n}\n/**\n * @param {?} componentFactory\n * @return {?}\n */\nfunction getComponentViewDefinitionFactory(componentFactory) {\n    return ((/** @type {?} */ (componentFactory))).viewDefFactory;\n}\nclass ComponentFactory_ extends ComponentFactory {\n    /**\n     * @param {?} selector\n     * @param {?} componentType\n     * @param {?} viewDefFactory\n     * @param {?} _inputs\n     * @param {?} _outputs\n     * @param {?} ngContentSelectors\n     */\n    constructor(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {\n        // Attention: this ctor is called as top level function.\n        // Putting any logic in here will destroy closure tree shaking!\n        super();\n        this.selector = selector;\n        this.componentType = componentType;\n        this._inputs = _inputs;\n        this._outputs = _outputs;\n        this.ngContentSelectors = ngContentSelectors;\n        this.viewDefFactory = viewDefFactory;\n    }\n    /**\n     * @return {?}\n     */\n    get inputs() {\n        /** @type {?} */\n        const inputsArr = [];\n        /** @type {?} */\n        const inputs = (/** @type {?} */ (this._inputs));\n        for (let propName in inputs) {\n            /** @type {?} */\n            const templateName = inputs[propName];\n            inputsArr.push({ propName, templateName });\n        }\n        return inputsArr;\n    }\n    /**\n     * @return {?}\n     */\n    get outputs() {\n        /** @type {?} */\n        const outputsArr = [];\n        for (let propName in this._outputs) {\n            /** @type {?} */\n            const templateName = this._outputs[propName];\n            outputsArr.push({ propName, templateName });\n        }\n        return outputsArr;\n    }\n    /**\n     * Creates a new component.\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    create(injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        if (!ngModule) {\n            throw new Error('ngModule should be provided');\n        }\n        /** @type {?} */\n        const viewDef = resolveDefinition(this.viewDefFactory);\n        /** @type {?} */\n        const componentNodeIndex = (/** @type {?} */ ((/** @type {?} */ (viewDef.nodes[0].element)).componentProvider)).nodeIndex;\n        /** @type {?} */\n        const view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);\n        /** @type {?} */\n        const component = asProviderData(view, componentNodeIndex).instance;\n        if (rootSelectorOrNode) {\n            view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);\n        }\n        return new ComponentRef_(view, new ViewRef_(view), component);\n    }\n}\nclass ComponentRef_ extends ComponentRef {\n    /**\n     * @param {?} _view\n     * @param {?} _viewRef\n     * @param {?} _component\n     */\n    constructor(_view, _viewRef, _component) {\n        super();\n        this._view = _view;\n        this._viewRef = _viewRef;\n        this._component = _component;\n        this._elDef = this._view.def.nodes[0];\n        this.hostView = _viewRef;\n        this.changeDetectorRef = _viewRef;\n        this.instance = _component;\n    }\n    /**\n     * @return {?}\n     */\n    get location() {\n        return new ElementRef(asElementData(this._view, this._elDef.nodeIndex).renderElement);\n    }\n    /**\n     * @return {?}\n     */\n    get injector() { return new Injector_(this._view, this._elDef); }\n    /**\n     * @return {?}\n     */\n    get componentType() { return (/** @type {?} */ (this._component.constructor)); }\n    /**\n     * @return {?}\n     */\n    destroy() { this._viewRef.destroy(); }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    onDestroy(callback) { this._viewRef.onDestroy(callback); }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} elData\n * @return {?}\n */\nfunction createViewContainerData(view, elDef, elData) {\n    return new ViewContainerRef_(view, elDef, elData);\n}\nclass ViewContainerRef_ {\n    /**\n     * @param {?} _view\n     * @param {?} _elDef\n     * @param {?} _data\n     */\n    constructor(_view, _elDef, _data) {\n        this._view = _view;\n        this._elDef = _elDef;\n        this._data = _data;\n        /**\n         * \\@internal\n         */\n        this._embeddedViews = [];\n    }\n    /**\n     * @return {?}\n     */\n    get element() { return new ElementRef(this._data.renderElement); }\n    /**\n     * @return {?}\n     */\n    get injector() { return new Injector_(this._view, this._elDef); }\n    /**\n     * @deprecated No replacement\n     * @return {?}\n     */\n    get parentInjector() {\n        /** @type {?} */\n        let view = this._view;\n        /** @type {?} */\n        let elDef = this._elDef.parent;\n        while (!elDef && view) {\n            elDef = viewParentEl(view);\n            view = (/** @type {?} */ (view.parent));\n        }\n        return view ? new Injector_(view, elDef) : new Injector_(this._view, null);\n    }\n    /**\n     * @return {?}\n     */\n    clear() {\n        /** @type {?} */\n        const len = this._embeddedViews.length;\n        for (let i = len - 1; i >= 0; i--) {\n            /** @type {?} */\n            const view = (/** @type {?} */ (detachEmbeddedView(this._data, i)));\n            Services.destroyView(view);\n        }\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    get(index) {\n        /** @type {?} */\n        const view = this._embeddedViews[index];\n        if (view) {\n            /** @type {?} */\n            const ref = new ViewRef_(view);\n            ref.attachToViewContainerRef(this);\n            return ref;\n        }\n        return null;\n    }\n    /**\n     * @return {?}\n     */\n    get length() { return this._embeddedViews.length; }\n    /**\n     * @template C\n     * @param {?} templateRef\n     * @param {?=} context\n     * @param {?=} index\n     * @return {?}\n     */\n    createEmbeddedView(templateRef, context, index) {\n        /** @type {?} */\n        const viewRef = templateRef.createEmbeddedView(context || (/** @type {?} */ ({})));\n        this.insert(viewRef, index);\n        return viewRef;\n    }\n    /**\n     * @template C\n     * @param {?} componentFactory\n     * @param {?=} index\n     * @param {?=} injector\n     * @param {?=} projectableNodes\n     * @param {?=} ngModuleRef\n     * @return {?}\n     */\n    createComponent(componentFactory, index, injector, projectableNodes, ngModuleRef) {\n        /** @type {?} */\n        const contextInjector = injector || this.parentInjector;\n        if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {\n            ngModuleRef = contextInjector.get(NgModuleRef);\n        }\n        /** @type {?} */\n        const componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n        this.insert(componentRef.hostView, index);\n        return componentRef;\n    }\n    /**\n     * @param {?} viewRef\n     * @param {?=} index\n     * @return {?}\n     */\n    insert(viewRef, index) {\n        if (viewRef.destroyed) {\n            throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n        }\n        /** @type {?} */\n        const viewRef_ = (/** @type {?} */ (viewRef));\n        /** @type {?} */\n        const viewData = viewRef_._view;\n        attachEmbeddedView(this._view, this._data, index, viewData);\n        viewRef_.attachToViewContainerRef(this);\n        return viewRef;\n    }\n    /**\n     * @param {?} viewRef\n     * @param {?} currentIndex\n     * @return {?}\n     */\n    move(viewRef, currentIndex) {\n        if (viewRef.destroyed) {\n            throw new Error('Cannot move a destroyed View in a ViewContainer!');\n        }\n        /** @type {?} */\n        const previousIndex = this._embeddedViews.indexOf(viewRef._view);\n        moveEmbeddedView(this._data, previousIndex, currentIndex);\n        return viewRef;\n    }\n    /**\n     * @param {?} viewRef\n     * @return {?}\n     */\n    indexOf(viewRef) {\n        return this._embeddedViews.indexOf(((/** @type {?} */ (viewRef)))._view);\n    }\n    /**\n     * @param {?=} index\n     * @return {?}\n     */\n    remove(index) {\n        /** @type {?} */\n        const viewData = detachEmbeddedView(this._data, index);\n        if (viewData) {\n            Services.destroyView(viewData);\n        }\n    }\n    /**\n     * @param {?=} index\n     * @return {?}\n     */\n    detach(index) {\n        /** @type {?} */\n        const view = detachEmbeddedView(this._data, index);\n        return view ? new ViewRef_(view) : null;\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction createChangeDetectorRef(view) {\n    return new ViewRef_(view);\n}\nclass ViewRef_ {\n    /**\n     * @param {?} _view\n     */\n    constructor(_view) {\n        this._view = _view;\n        this._viewContainerRef = null;\n        this._appRef = null;\n    }\n    /**\n     * @return {?}\n     */\n    get rootNodes() { return rootRenderNodes(this._view); }\n    /**\n     * @return {?}\n     */\n    get context() { return this._view.context; }\n    /**\n     * @return {?}\n     */\n    get destroyed() { return (this._view.state & 128 /* Destroyed */) !== 0; }\n    /**\n     * @return {?}\n     */\n    markForCheck() { markParentViewsForCheck(this._view); }\n    /**\n     * @return {?}\n     */\n    detach() { this._view.state &= ~4 /* Attached */; }\n    /**\n     * @return {?}\n     */\n    detectChanges() {\n        /** @type {?} */\n        const fs = this._view.root.rendererFactory;\n        if (fs.begin) {\n            fs.begin();\n        }\n        try {\n            Services.checkAndUpdateView(this._view);\n        }\n        finally {\n            if (fs.end) {\n                fs.end();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    checkNoChanges() { Services.checkNoChangesView(this._view); }\n    /**\n     * @return {?}\n     */\n    reattach() { this._view.state |= 4 /* Attached */; }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    onDestroy(callback) {\n        if (!this._view.disposables) {\n            this._view.disposables = [];\n        }\n        this._view.disposables.push((/** @type {?} */ (callback)));\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        if (this._appRef) {\n            this._appRef.detachView(this);\n        }\n        else if (this._viewContainerRef) {\n            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));\n        }\n        Services.destroyView(this._view);\n    }\n    /**\n     * @return {?}\n     */\n    detachFromAppRef() {\n        this._appRef = null;\n        renderDetachView$1(this._view);\n        Services.dirtyParentQueries(this._view);\n    }\n    /**\n     * @param {?} appRef\n     * @return {?}\n     */\n    attachToAppRef(appRef) {\n        if (this._viewContainerRef) {\n            throw new Error('This view is already attached to a ViewContainer!');\n        }\n        this._appRef = appRef;\n    }\n    /**\n     * @param {?} vcRef\n     * @return {?}\n     */\n    attachToViewContainerRef(vcRef) {\n        if (this._appRef) {\n            throw new Error('This view is already attached directly to the ApplicationRef!');\n        }\n        this._viewContainerRef = vcRef;\n    }\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction createTemplateData(view, def) {\n    return new TemplateRef_(view, def);\n}\nclass TemplateRef_ extends TemplateRef {\n    /**\n     * @param {?} _parentView\n     * @param {?} _def\n     */\n    constructor(_parentView, _def) {\n        super();\n        this._parentView = _parentView;\n        this._def = _def;\n    }\n    /**\n     * @param {?} context\n     * @return {?}\n     */\n    createEmbeddedView(context) {\n        return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, (/** @type {?} */ ((/** @type {?} */ (this._def.element)).template)), context));\n    }\n    /**\n     * @return {?}\n     */\n    get elementRef() {\n        return new ElementRef(asElementData(this._parentView, this._def.nodeIndex).renderElement);\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @return {?}\n */\nfunction createInjector$1(view, elDef) {\n    return new Injector_(view, elDef);\n}\nclass Injector_ {\n    /**\n     * @param {?} view\n     * @param {?} elDef\n     */\n    constructor(view, elDef) {\n        this.view = view;\n        this.elDef = elDef;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND) {\n        /** @type {?} */\n        const allowPrivateServices = this.elDef ? (this.elDef.flags & 33554432 /* ComponentView */) !== 0 : false;\n        return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: 0 /* None */, token, tokenKey: tokenKey(token) }, notFoundValue);\n    }\n}\n/**\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction nodeValue(view, index) {\n    /** @type {?} */\n    const def = view.def.nodes[index];\n    if (def.flags & 1 /* TypeElement */) {\n        /** @type {?} */\n        const elData = asElementData(view, def.nodeIndex);\n        return (/** @type {?} */ (def.element)).template ? elData.template : elData.renderElement;\n    }\n    else if (def.flags & 2 /* TypeText */) {\n        return asTextData(view, def.nodeIndex).renderText;\n    }\n    else if (def.flags & (20224 /* CatProvider */ | 16 /* TypePipe */)) {\n        return asProviderData(view, def.nodeIndex).instance;\n    }\n    throw new Error(`Illegal state: read nodeValue for node index ${index}`);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction createRendererV1(view) {\n    return new RendererAdapter(view.renderer);\n}\nclass RendererAdapter {\n    /**\n     * @param {?} delegate\n     */\n    constructor(delegate) {\n        this.delegate = delegate;\n    }\n    /**\n     * @param {?} selectorOrNode\n     * @return {?}\n     */\n    selectRootElement(selectorOrNode) {\n        return this.delegate.selectRootElement(selectorOrNode);\n    }\n    /**\n     * @param {?} parent\n     * @param {?} namespaceAndName\n     * @return {?}\n     */\n    createElement(parent, namespaceAndName) {\n        const [ns, name] = splitNamespace(namespaceAndName);\n        /** @type {?} */\n        const el = this.delegate.createElement(name, ns);\n        if (parent) {\n            this.delegate.appendChild(parent, el);\n        }\n        return el;\n    }\n    /**\n     * @param {?} hostElement\n     * @return {?}\n     */\n    createViewRoot(hostElement) { return hostElement; }\n    /**\n     * @param {?} parentElement\n     * @return {?}\n     */\n    createTemplateAnchor(parentElement) {\n        /** @type {?} */\n        const comment = this.delegate.createComment('');\n        if (parentElement) {\n            this.delegate.appendChild(parentElement, comment);\n        }\n        return comment;\n    }\n    /**\n     * @param {?} parentElement\n     * @param {?} value\n     * @return {?}\n     */\n    createText(parentElement, value) {\n        /** @type {?} */\n        const node = this.delegate.createText(value);\n        if (parentElement) {\n            this.delegate.appendChild(parentElement, node);\n        }\n        return node;\n    }\n    /**\n     * @param {?} parentElement\n     * @param {?} nodes\n     * @return {?}\n     */\n    projectNodes(parentElement, nodes) {\n        for (let i = 0; i < nodes.length; i++) {\n            this.delegate.appendChild(parentElement, nodes[i]);\n        }\n    }\n    /**\n     * @param {?} node\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    attachViewAfter(node, viewRootNodes) {\n        /** @type {?} */\n        const parentElement = this.delegate.parentNode(node);\n        /** @type {?} */\n        const nextSibling = this.delegate.nextSibling(node);\n        for (let i = 0; i < viewRootNodes.length; i++) {\n            this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);\n        }\n    }\n    /**\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    detachView(viewRootNodes) {\n        for (let i = 0; i < viewRootNodes.length; i++) {\n            /** @type {?} */\n            const node = viewRootNodes[i];\n            /** @type {?} */\n            const parentElement = this.delegate.parentNode(node);\n            this.delegate.removeChild(parentElement, node);\n        }\n    }\n    /**\n     * @param {?} hostElement\n     * @param {?} viewAllNodes\n     * @return {?}\n     */\n    destroyView(hostElement, viewAllNodes) {\n        for (let i = 0; i < viewAllNodes.length; i++) {\n            (/** @type {?} */ (this.delegate.destroyNode))(viewAllNodes[i]);\n        }\n    }\n    /**\n     * @param {?} renderElement\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    listen(renderElement, name, callback) {\n        return this.delegate.listen(renderElement, name, (/** @type {?} */ (callback)));\n    }\n    /**\n     * @param {?} target\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    listenGlobal(target, name, callback) {\n        return this.delegate.listen(target, name, (/** @type {?} */ (callback)));\n    }\n    /**\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    setElementProperty(renderElement, propertyName, propertyValue) {\n        this.delegate.setProperty(renderElement, propertyName, propertyValue);\n    }\n    /**\n     * @param {?} renderElement\n     * @param {?} namespaceAndName\n     * @param {?=} attributeValue\n     * @return {?}\n     */\n    setElementAttribute(renderElement, namespaceAndName, attributeValue) {\n        const [ns, name] = splitNamespace(namespaceAndName);\n        if (attributeValue != null) {\n            this.delegate.setAttribute(renderElement, name, attributeValue, ns);\n        }\n        else {\n            this.delegate.removeAttribute(renderElement, name, ns);\n        }\n    }\n    /**\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    setBindingDebugInfo(renderElement, propertyName, propertyValue) { }\n    /**\n     * @param {?} renderElement\n     * @param {?} className\n     * @param {?} isAdd\n     * @return {?}\n     */\n    setElementClass(renderElement, className, isAdd) {\n        if (isAdd) {\n            this.delegate.addClass(renderElement, className);\n        }\n        else {\n            this.delegate.removeClass(renderElement, className);\n        }\n    }\n    /**\n     * @param {?} renderElement\n     * @param {?} styleName\n     * @param {?=} styleValue\n     * @return {?}\n     */\n    setElementStyle(renderElement, styleName, styleValue) {\n        if (styleValue != null) {\n            this.delegate.setStyle(renderElement, styleName, styleValue);\n        }\n        else {\n            this.delegate.removeStyle(renderElement, styleName);\n        }\n    }\n    /**\n     * @param {?} renderElement\n     * @param {?} methodName\n     * @param {?} args\n     * @return {?}\n     */\n    invokeElementMethod(renderElement, methodName, args) {\n        ((/** @type {?} */ (renderElement)))[methodName].apply(renderElement, args);\n    }\n    /**\n     * @param {?} renderNode\n     * @param {?} text\n     * @return {?}\n     */\n    setText(renderNode, text) { this.delegate.setValue(renderNode, text); }\n    /**\n     * @return {?}\n     */\n    animate() { throw new Error('Renderer.animate is no longer supported!'); }\n}\n/**\n * @param {?} moduleType\n * @param {?} parent\n * @param {?} bootstrapComponents\n * @param {?} def\n * @return {?}\n */\nfunction createNgModuleRef(moduleType, parent, bootstrapComponents, def) {\n    return new NgModuleRef_(moduleType, parent, bootstrapComponents, def);\n}\nclass NgModuleRef_ {\n    /**\n     * @param {?} _moduleType\n     * @param {?} _parent\n     * @param {?} _bootstrapComponents\n     * @param {?} _def\n     */\n    constructor(_moduleType, _parent, _bootstrapComponents, _def) {\n        this._moduleType = _moduleType;\n        this._parent = _parent;\n        this._bootstrapComponents = _bootstrapComponents;\n        this._def = _def;\n        this._destroyListeners = [];\n        this._destroyed = false;\n        this.injector = this;\n        initNgModule(this);\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} injectFlags\n     * @return {?}\n     */\n    get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND, injectFlags = InjectFlags.Default) {\n        /** @type {?} */\n        let flags = 0 /* None */;\n        if (injectFlags & InjectFlags.SkipSelf) {\n            flags |= 1 /* SkipSelf */;\n        }\n        else if (injectFlags & InjectFlags.Self) {\n            flags |= 4 /* Self */;\n        }\n        return resolveNgModuleDep(this, { token: token, tokenKey: tokenKey(token), flags: flags }, notFoundValue);\n    }\n    /**\n     * @return {?}\n     */\n    get instance() { return this.get(this._moduleType); }\n    /**\n     * @return {?}\n     */\n    get componentFactoryResolver() { return this.get(ComponentFactoryResolver); }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        if (this._destroyed) {\n            throw new Error(`The ng module ${stringify(this.instance.constructor)} has already been destroyed.`);\n        }\n        this._destroyed = true;\n        callNgModuleLifecycle(this, 131072 /* OnDestroy */);\n        this._destroyListeners.forEach((/**\n         * @param {?} listener\n         * @return {?}\n         */\n        (listener) => listener()));\n    }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    onDestroy(callback) { this._destroyListeners.push(callback); }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst RendererV1TokenKey = tokenKey(Renderer);\n/** @type {?} */\nconst Renderer2TokenKey = tokenKey(Renderer2);\n/** @type {?} */\nconst ElementRefTokenKey = tokenKey(ElementRef);\n/** @type {?} */\nconst ViewContainerRefTokenKey = tokenKey(ViewContainerRef);\n/** @type {?} */\nconst TemplateRefTokenKey = tokenKey(TemplateRef);\n/** @type {?} */\nconst ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);\n/** @type {?} */\nconst InjectorRefTokenKey$1 = tokenKey(Injector);\n/** @type {?} */\nconst INJECTORRefTokenKey$1 = tokenKey(INJECTOR);\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueries\n * @param {?} childCount\n * @param {?} ctor\n * @param {?} deps\n * @param {?=} props\n * @param {?=} outputs\n * @return {?}\n */\nfunction directiveDef(checkIndex, flags, matchedQueries, childCount, ctor, deps, props, outputs) {\n    /** @type {?} */\n    const bindings = [];\n    if (props) {\n        for (let prop in props) {\n            const [bindingIndex, nonMinifiedName] = props[prop];\n            bindings[bindingIndex] = {\n                flags: 8 /* TypeProperty */,\n                name: prop, nonMinifiedName,\n                ns: null,\n                securityContext: null,\n                suffix: null\n            };\n        }\n    }\n    /** @type {?} */\n    const outputDefs = [];\n    if (outputs) {\n        for (let propName in outputs) {\n            outputDefs.push({ type: 1 /* DirectiveOutput */, propName, target: null, eventName: outputs[propName] });\n        }\n    }\n    flags |= 16384 /* TypeDirective */;\n    return _def(checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);\n}\n/**\n * @param {?} flags\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nfunction pipeDef(flags, ctor, deps) {\n    flags |= 16 /* TypePipe */;\n    return _def(-1, flags, null, 0, ctor, ctor, deps);\n}\n/**\n * @param {?} flags\n * @param {?} matchedQueries\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @return {?}\n */\nfunction providerDef(flags, matchedQueries, token, value, deps) {\n    return _def(-1, flags, matchedQueries, 0, token, value, deps);\n}\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} childCount\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @param {?=} bindings\n * @param {?=} outputs\n * @return {?}\n */\nfunction _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {\n    const { matchedQueries, references, matchedQueryIds } = splitMatchedQueriesDsl(matchedQueriesDsl);\n    if (!outputs) {\n        outputs = [];\n    }\n    if (!bindings) {\n        bindings = [];\n    }\n    // Need to resolve forwardRefs as e.g. for `useValue` we\n    // lowered the expression and then stopped evaluating it,\n    // i.e. also didn't unwrap it.\n    value = resolveForwardRef(value);\n    /** @type {?} */\n    const depDefs = splitDepsDsl(deps, stringify(token));\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex,\n        flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries, matchedQueryIds, references,\n        ngContentIndex: -1, childCount, bindings,\n        bindingFlags: calcBindingFlags(bindings), outputs,\n        element: null,\n        provider: { token, value, deps: depDefs },\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction createProviderInstance(view, def) {\n    return _createProviderInstance$1(view, def);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction createPipeInstance(view, def) {\n    // deps are looked up from component.\n    /** @type {?} */\n    let compView = view;\n    while (compView.parent && !isComponentView(compView)) {\n        compView = compView.parent;\n    }\n    // pipes can see the private services of the component\n    /** @type {?} */\n    const allowPrivateServices = true;\n    // pipes are always eager and classes!\n    return createClass((/** @type {?} */ (compView.parent)), (/** @type {?} */ (viewParentEl(compView))), allowPrivateServices, (/** @type {?} */ (def.provider)).value, (/** @type {?} */ (def.provider)).deps);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction createDirectiveInstance(view, def) {\n    // components can see other private services, other directives can't.\n    /** @type {?} */\n    const allowPrivateServices = (def.flags & 32768 /* Component */) > 0;\n    // directives are always eager and classes!\n    /** @type {?} */\n    const instance = createClass(view, (/** @type {?} */ (def.parent)), allowPrivateServices, (/** @type {?} */ (def.provider)).value, (/** @type {?} */ (def.provider)).deps);\n    if (def.outputs.length) {\n        for (let i = 0; i < def.outputs.length; i++) {\n            /** @type {?} */\n            const output = def.outputs[i];\n            /** @type {?} */\n            const outputObservable = instance[(/** @type {?} */ (output.propName))];\n            if (isObservable(outputObservable)) {\n                /** @type {?} */\n                const subscription = outputObservable.subscribe(eventHandlerClosure(view, (/** @type {?} */ (def.parent)).nodeIndex, output.eventName));\n                (/** @type {?} */ (view.disposables))[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);\n            }\n            else {\n                throw new Error(`@Output ${output.propName} not initialized in '${instance.constructor.name}'.`);\n            }\n        }\n    }\n    return instance;\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} eventName\n * @return {?}\n */\nfunction eventHandlerClosure(view, index, eventName) {\n    return (/**\n     * @param {?} event\n     * @return {?}\n     */\n    (event) => dispatchEvent(view, index, eventName, event));\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nfunction checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    const providerData = asProviderData(view, def.nodeIndex);\n    /** @type {?} */\n    const directive = providerData.instance;\n    /** @type {?} */\n    let changed = false;\n    /** @type {?} */\n    let changes = (/** @type {?} */ (undefined));\n    /** @type {?} */\n    const bindLen = def.bindings.length;\n    if (bindLen > 0 && checkBinding(view, def, 0, v0)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 0, v0, changes);\n    }\n    if (bindLen > 1 && checkBinding(view, def, 1, v1)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 1, v1, changes);\n    }\n    if (bindLen > 2 && checkBinding(view, def, 2, v2)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 2, v2, changes);\n    }\n    if (bindLen > 3 && checkBinding(view, def, 3, v3)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 3, v3, changes);\n    }\n    if (bindLen > 4 && checkBinding(view, def, 4, v4)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 4, v4, changes);\n    }\n    if (bindLen > 5 && checkBinding(view, def, 5, v5)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 5, v5, changes);\n    }\n    if (bindLen > 6 && checkBinding(view, def, 6, v6)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 6, v6, changes);\n    }\n    if (bindLen > 7 && checkBinding(view, def, 7, v7)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 7, v7, changes);\n    }\n    if (bindLen > 8 && checkBinding(view, def, 8, v8)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 8, v8, changes);\n    }\n    if (bindLen > 9 && checkBinding(view, def, 9, v9)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 9, v9, changes);\n    }\n    if (changes) {\n        directive.ngOnChanges(changes);\n    }\n    if ((def.flags & 65536 /* OnInit */) &&\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n        directive.ngOnInit();\n    }\n    if (def.flags & 262144 /* DoCheck */) {\n        directive.ngDoCheck();\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nfunction checkAndUpdateDirectiveDynamic(view, def, values) {\n    /** @type {?} */\n    const providerData = asProviderData(view, def.nodeIndex);\n    /** @type {?} */\n    const directive = providerData.instance;\n    /** @type {?} */\n    let changed = false;\n    /** @type {?} */\n    let changes = (/** @type {?} */ (undefined));\n    for (let i = 0; i < values.length; i++) {\n        if (checkBinding(view, def, i, values[i])) {\n            changed = true;\n            changes = updateProp(view, providerData, def, i, values[i], changes);\n        }\n    }\n    if (changes) {\n        directive.ngOnChanges(changes);\n    }\n    if ((def.flags & 65536 /* OnInit */) &&\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n        directive.ngOnInit();\n    }\n    if (def.flags & 262144 /* DoCheck */) {\n        directive.ngDoCheck();\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction _createProviderInstance$1(view, def) {\n    // private services can see other private services\n    /** @type {?} */\n    const allowPrivateServices = (def.flags & 8192 /* PrivateProvider */) > 0;\n    /** @type {?} */\n    const providerDef = def.provider;\n    switch (def.flags & 201347067 /* Types */) {\n        case 512 /* TypeClassProvider */:\n            return createClass(view, (/** @type {?} */ (def.parent)), allowPrivateServices, (/** @type {?} */ (providerDef)).value, (/** @type {?} */ (providerDef)).deps);\n        case 1024 /* TypeFactoryProvider */:\n            return callFactory(view, (/** @type {?} */ (def.parent)), allowPrivateServices, (/** @type {?} */ (providerDef)).value, (/** @type {?} */ (providerDef)).deps);\n        case 2048 /* TypeUseExistingProvider */:\n            return resolveDep(view, (/** @type {?} */ (def.parent)), allowPrivateServices, (/** @type {?} */ (providerDef)).deps[0]);\n        case 256 /* TypeValueProvider */:\n            return (/** @type {?} */ (providerDef)).value;\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nfunction createClass(view, elDef, allowPrivateServices, ctor, deps) {\n    /** @type {?} */\n    const len = deps.length;\n    switch (len) {\n        case 0:\n            return new ctor();\n        case 1:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n        case 2:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n        case 3:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n        default:\n            /** @type {?} */\n            const depValues = new Array(len);\n            for (let i = 0; i < len; i++) {\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n            }\n            return new ctor(...depValues);\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} factory\n * @param {?} deps\n * @return {?}\n */\nfunction callFactory(view, elDef, allowPrivateServices, factory, deps) {\n    /** @type {?} */\n    const len = deps.length;\n    switch (len) {\n        case 0:\n            return factory();\n        case 1:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n        case 2:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n        case 3:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n        default:\n            /** @type {?} */\n            const depValues = Array(len);\n            for (let i = 0; i < len; i++) {\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n            }\n            return factory(...depValues);\n    }\n}\n// This default value is when checking the hierarchy for a token.\n//\n// It means both:\n// - the token is not provided by the current injector,\n// - only the element injectors should be checked (ie do not check module injectors\n//\n//          mod1\n//         /\n//       el1   mod2\n//         \\  /\n//         el2\n//\n// When requesting el2.injector.get(token), we should check in the following order and return the\n// first found value:\n// - el2.injector.get(token, default)\n// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\n// - mod2.injector.get(token, default)\n/** @type {?} */\nconst NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} depDef\n * @param {?=} notFoundValue\n * @return {?}\n */\nfunction resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue = Injector.THROW_IF_NOT_FOUND) {\n    if (depDef.flags & 8 /* Value */) {\n        return depDef.token;\n    }\n    /** @type {?} */\n    const startView = view;\n    if (depDef.flags & 2 /* Optional */) {\n        notFoundValue = null;\n    }\n    /** @type {?} */\n    const tokenKey = depDef.tokenKey;\n    if (tokenKey === ChangeDetectorRefTokenKey) {\n        // directives on the same element as a component should be able to control the change detector\n        // of that component as well.\n        allowPrivateServices = !!(elDef && (/** @type {?} */ (elDef.element)).componentView);\n    }\n    if (elDef && (depDef.flags & 1 /* SkipSelf */)) {\n        allowPrivateServices = false;\n        elDef = (/** @type {?} */ (elDef.parent));\n    }\n    /** @type {?} */\n    let searchView = view;\n    while (searchView) {\n        if (elDef) {\n            switch (tokenKey) {\n                case RendererV1TokenKey: {\n                    /** @type {?} */\n                    const compView = findCompView(searchView, elDef, allowPrivateServices);\n                    return createRendererV1(compView);\n                }\n                case Renderer2TokenKey: {\n                    /** @type {?} */\n                    const compView = findCompView(searchView, elDef, allowPrivateServices);\n                    return compView.renderer;\n                }\n                case ElementRefTokenKey:\n                    return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);\n                case ViewContainerRefTokenKey:\n                    return asElementData(searchView, elDef.nodeIndex).viewContainer;\n                case TemplateRefTokenKey: {\n                    if ((/** @type {?} */ (elDef.element)).template) {\n                        return asElementData(searchView, elDef.nodeIndex).template;\n                    }\n                    break;\n                }\n                case ChangeDetectorRefTokenKey: {\n                    /** @type {?} */\n                    let cdView = findCompView(searchView, elDef, allowPrivateServices);\n                    return createChangeDetectorRef(cdView);\n                }\n                case InjectorRefTokenKey$1:\n                case INJECTORRefTokenKey$1:\n                    return createInjector$1(searchView, elDef);\n                default:\n                    /** @type {?} */\n                    const providerDef = (/** @type {?} */ ((allowPrivateServices ? (/** @type {?} */ (elDef.element)).allProviders :\n                        (/** @type {?} */ (elDef.element)).publicProviders)))[tokenKey];\n                    if (providerDef) {\n                        /** @type {?} */\n                        let providerData = asProviderData(searchView, providerDef.nodeIndex);\n                        if (!providerData) {\n                            providerData = { instance: _createProviderInstance$1(searchView, providerDef) };\n                            searchView.nodes[providerDef.nodeIndex] = (/** @type {?} */ (providerData));\n                        }\n                        return providerData.instance;\n                    }\n            }\n        }\n        allowPrivateServices = isComponentView(searchView);\n        elDef = (/** @type {?} */ (viewParentEl(searchView)));\n        searchView = (/** @type {?} */ (searchView.parent));\n        if (depDef.flags & 4 /* Self */) {\n            searchView = null;\n        }\n    }\n    /** @type {?} */\n    const value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);\n    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n        notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n        // Return the value from the root element injector when\n        // - it provides it\n        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        // - the module injector should not be checked\n        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        return value;\n    }\n    return startView.root.ngModule.injector.get(depDef.token, notFoundValue);\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @return {?}\n */\nfunction findCompView(view, elDef, allowPrivateServices) {\n    /** @type {?} */\n    let compView;\n    if (allowPrivateServices) {\n        compView = asElementData(view, elDef.nodeIndex).componentView;\n    }\n    else {\n        compView = view;\n        while (compView.parent && !isComponentView(compView)) {\n            compView = compView.parent;\n        }\n    }\n    return compView;\n}\n/**\n * @param {?} view\n * @param {?} providerData\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @param {?} changes\n * @return {?}\n */\nfunction updateProp(view, providerData, def, bindingIdx, value, changes) {\n    if (def.flags & 32768 /* Component */) {\n        /** @type {?} */\n        const compView = asElementData(view, (/** @type {?} */ (def.parent)).nodeIndex).componentView;\n        if (compView.def.flags & 2 /* OnPush */) {\n            compView.state |= 8 /* ChecksEnabled */;\n        }\n    }\n    /** @type {?} */\n    const binding = def.bindings[bindingIdx];\n    /** @type {?} */\n    const propName = (/** @type {?} */ (binding.name));\n    // Note: This is still safe with Closure Compiler as\n    // the user passed in the property name as an object has to `providerDef`,\n    // so Closure Compiler will have renamed the property correctly already.\n    providerData.instance[propName] = value;\n    if (def.flags & 524288 /* OnChanges */) {\n        changes = changes || {};\n        /** @type {?} */\n        const oldValue = WrappedValue.unwrap(view.oldValues[def.bindingIndex + bindingIdx]);\n        /** @type {?} */\n        const binding = def.bindings[bindingIdx];\n        changes[(/** @type {?} */ (binding.nonMinifiedName))] =\n            new SimpleChange(oldValue, value, (view.state & 2 /* FirstCheck */) !== 0);\n    }\n    view.oldValues[def.bindingIndex + bindingIdx] = value;\n    return changes;\n}\n// This function calls the ngAfterContentCheck, ngAfterContentInit,\n// ngAfterViewCheck, and ngAfterViewInit lifecycle hooks (depending on the node\n// flags in lifecycle). Unlike ngDoCheck, ngOnChanges and ngOnInit, which are\n// called during a pre-order traversal of the view tree (that is calling the\n// parent hooks before the child hooks) these events are sent in using a\n// post-order traversal of the tree (children before parents). This changes the\n// meaning of initIndex in the view state. For ngOnInit, initIndex tracks the\n// expected nodeIndex which a ngOnInit should be called. When sending\n// ngAfterContentInit and ngAfterViewInit it is the expected count of\n// ngAfterContentInit or ngAfterViewInit methods that have been called. This\n// ensure that despite being called recursively or after picking up after an\n// exception, the ngAfterContentInit or ngAfterViewInit will be called on the\n// correct nodes. Consider for example, the following (where E is an element\n// and D is a directive)\n//  Tree:       pre-order index  post-order index\n//    E1        0                6\n//      E2      1                1\n//       D3     2                0\n//      E4      3                5\n//       E5     4                4\n//        E6    5                2\n//        E7    6                3\n// As can be seen, the post-order index has an unclear relationship to the\n// pre-order index (postOrderIndex === preOrderIndex - parentCount +\n// childCount). Since number of calls to ngAfterContentInit and ngAfterViewInit\n// are stable (will be the same for the same view regardless of exceptions or\n// recursion) we just need to count them which will roughly correspond to the\n// post-order index (it skips elements and directives that do not have\n// lifecycle hooks).\n//\n// For example, if an exception is raised in the E6.onAfterViewInit() the\n// initIndex is left at 3 (by shouldCallLifecycleInitHook() which set it to\n// initIndex + 1). When checkAndUpdateView() is called again D3, E2 and E6 will\n// not have their ngAfterViewInit() called but, starting with E7, the rest of\n// the view will begin getting ngAfterViewInit() called until a check and\n// pass is complete.\n//\n// This algorthim also handles recursion. Consider if E4's ngAfterViewInit()\n// indirectly calls E1's ChangeDetectorRef.detectChanges(). The expected\n// initIndex is set to 6, the recusive checkAndUpdateView() starts walk again.\n// D3, E2, E6, E7, E5 and E4 are skipped, ngAfterViewInit() is called on E1.\n// When the recursion returns the initIndex will be 7 so E1 is skipped as it\n// has already been called in the recursively called checkAnUpdateView().\n/**\n * @param {?} view\n * @param {?} lifecycles\n * @return {?}\n */\nfunction callLifecycleHooksChildrenFirst(view, lifecycles) {\n    if (!(view.def.nodeFlags & lifecycles)) {\n        return;\n    }\n    /** @type {?} */\n    const nodes = view.def.nodes;\n    /** @type {?} */\n    let initIndex = 0;\n    for (let i = 0; i < nodes.length; i++) {\n        /** @type {?} */\n        const nodeDef = nodes[i];\n        /** @type {?} */\n        let parent = nodeDef.parent;\n        if (!parent && nodeDef.flags & lifecycles) {\n            // matching root node (e.g. a pipe)\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n        }\n        if ((nodeDef.childFlags & lifecycles) === 0) {\n            // no child matches one of the lifecycles\n            i += nodeDef.childCount;\n        }\n        while (parent && (parent.flags & 1 /* TypeElement */) &&\n            i === parent.nodeIndex + parent.childCount) {\n            // last child of an element\n            if (parent.directChildFlags & lifecycles) {\n                initIndex = callElementProvidersLifecycles(view, parent, lifecycles, initIndex);\n            }\n            parent = parent.parent;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} lifecycles\n * @param {?} initIndex\n * @return {?}\n */\nfunction callElementProvidersLifecycles(view, elDef, lifecycles, initIndex) {\n    for (let i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & lifecycles) {\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n        }\n        // only visit direct children\n        i += nodeDef.childCount;\n    }\n    return initIndex;\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} lifecycles\n * @param {?} initIndex\n * @return {?}\n */\nfunction callProviderLifecycles(view, index, lifecycles, initIndex) {\n    /** @type {?} */\n    const providerData = asProviderData(view, index);\n    if (!providerData) {\n        return;\n    }\n    /** @type {?} */\n    const provider = providerData.instance;\n    if (!provider) {\n        return;\n    }\n    Services.setCurrentNode(view, index);\n    if (lifecycles & 1048576 /* AfterContentInit */ &&\n        shouldCallLifecycleInitHook(view, 512 /* InitState_CallingAfterContentInit */, initIndex)) {\n        provider.ngAfterContentInit();\n    }\n    if (lifecycles & 2097152 /* AfterContentChecked */) {\n        provider.ngAfterContentChecked();\n    }\n    if (lifecycles & 4194304 /* AfterViewInit */ &&\n        shouldCallLifecycleInitHook(view, 768 /* InitState_CallingAfterViewInit */, initIndex)) {\n        provider.ngAfterViewInit();\n    }\n    if (lifecycles & 8388608 /* AfterViewChecked */) {\n        provider.ngAfterViewChecked();\n    }\n    if (lifecycles & 131072 /* OnDestroy */) {\n        provider.ngOnDestroy();\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ComponentFactoryResolver$1 extends ComponentFactoryResolver {\n    /**\n     * @param {?=} ngModule The NgModuleRef to which all resolved factories are bound.\n     */\n    constructor(ngModule) {\n        super();\n        this.ngModule = ngModule;\n    }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    resolveComponentFactory(component) {\n        ngDevMode && assertComponentType(component);\n        /** @type {?} */\n        const componentDef = (/** @type {?} */ (getComponentDef(component)));\n        return new ComponentFactory$1(componentDef, this.ngModule);\n    }\n}\n/**\n * @param {?} map\n * @return {?}\n */\nfunction toRefArray(map) {\n    /** @type {?} */\n    const array = [];\n    for (let nonMinified in map) {\n        if (map.hasOwnProperty(nonMinified)) {\n            /** @type {?} */\n            const minified = map[nonMinified];\n            array.push({ propName: minified, templateName: nonMinified });\n        }\n    }\n    return array;\n}\n/**\n * Default {\\@link RootContext} for all components rendered with {\\@link renderComponent}.\n * @type {?}\n */\nconst ROOT_CONTEXT = new InjectionToken('ROOT_CONTEXT_TOKEN', { providedIn: 'root', factory: (/**\n     * @return {?}\n     */\n    () => createRootContext(ɵɵinject(SCHEDULER))) });\n/**\n * A change detection scheduler token for {\\@link RootContext}. This token is the default value used\n * for the default `RootContext` found in the {\\@link ROOT_CONTEXT} token.\n * @type {?}\n */\nconst SCHEDULER = new InjectionToken('SCHEDULER_TOKEN', {\n    providedIn: 'root',\n    factory: (/**\n     * @return {?}\n     */\n    () => defaultScheduler),\n});\n/**\n * @param {?} rootViewInjector\n * @param {?} moduleInjector\n * @return {?}\n */\nfunction createChainedInjector(rootViewInjector, moduleInjector) {\n    return {\n        get: (/**\n         * @template T\n         * @param {?} token\n         * @param {?=} notFoundValue\n         * @param {?=} flags\n         * @return {?}\n         */\n        (token, notFoundValue, flags) => {\n            /** @type {?} */\n            const value = rootViewInjector.get(token, (/** @type {?} */ (NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)), flags);\n            if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n                notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n                // Return the value from the root element injector when\n                // - it provides it\n                //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n                // - the module injector should not be checked\n                //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n                return value;\n            }\n            return moduleInjector.get(token, notFoundValue, flags);\n        })\n    };\n}\n/**\n * Render3 implementation of {\\@link viewEngine_ComponentFactory}.\n * @template T\n */\nclass ComponentFactory$1 extends ComponentFactory {\n    /**\n     * @param {?} componentDef The component definition.\n     * @param {?=} ngModule The NgModuleRef to which the factory is bound.\n     */\n    constructor(componentDef, ngModule) {\n        super();\n        this.componentDef = componentDef;\n        this.ngModule = ngModule;\n        this.componentType = componentDef.type;\n        this.selector = (/** @type {?} */ (componentDef.selectors[0][0]));\n        // The component definition does not include the wildcard ('*') selector in its list.\n        // It is implicitly expected as the first item in the projectable nodes array.\n        this.ngContentSelectors =\n            componentDef.ngContentSelectors ? ['*', ...componentDef.ngContentSelectors] : [];\n        this.isBoundToModule = !!ngModule;\n    }\n    /**\n     * @return {?}\n     */\n    get inputs() {\n        return toRefArray(this.componentDef.inputs);\n    }\n    /**\n     * @return {?}\n     */\n    get outputs() {\n        return toRefArray(this.componentDef.outputs);\n    }\n    /**\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    create(injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        /** @type {?} */\n        const isInternalRootView = rootSelectorOrNode === undefined;\n        ngModule = ngModule || this.ngModule;\n        /** @type {?} */\n        const rootViewInjector = ngModule ? createChainedInjector(injector, ngModule.injector) : injector;\n        /** @type {?} */\n        const rendererFactory = (/** @type {?} */ (rootViewInjector.get(RendererFactory2, domRendererFactory3)));\n        /** @type {?} */\n        const sanitizer = rootViewInjector.get(Sanitizer, null);\n        /** @type {?} */\n        const hostRNode = isInternalRootView ?\n            elementCreate(this.selector, rendererFactory.createRenderer(null, this.componentDef)) :\n            locateHostElement(rendererFactory, rootSelectorOrNode);\n        /** @type {?} */\n        const rootFlags = this.componentDef.onPush ? 64 /* Dirty */ | 512 /* IsRoot */ :\n            16 /* CheckAlways */ | 512 /* IsRoot */;\n        // Check whether this Component needs to be isolated from other components, i.e. whether it\n        // should be placed into its own (empty) root context or existing root context should be used.\n        // Note: this is internal-only convention and might change in the future, so it should not be\n        // relied upon externally.\n        /** @type {?} */\n        const isIsolated = typeof rootSelectorOrNode === 'string' &&\n            /^#root-ng-internal-isolated-\\d+/.test(rootSelectorOrNode);\n        /** @type {?} */\n        const rootContext = (isInternalRootView || isIsolated) ?\n            createRootContext() :\n            rootViewInjector.get(ROOT_CONTEXT);\n        /** @type {?} */\n        const renderer = rendererFactory.createRenderer(hostRNode, this.componentDef);\n        if (rootSelectorOrNode && hostRNode) {\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            isProceduralRenderer(renderer) ?\n                renderer.setAttribute(hostRNode, 'ng-version', VERSION.full) :\n                hostRNode.setAttribute('ng-version', VERSION.full);\n        }\n        // Create the root view. Uses empty TView and ContentTemplate.\n        /** @type {?} */\n        const rootLView = createLView(null, createTView(-1, null, 1, 0, null, null, null, null), rootContext, rootFlags, null, null, rendererFactory, renderer, sanitizer, rootViewInjector);\n        // rootView is the parent when bootstrapping\n        /** @type {?} */\n        const oldLView = enterView(rootLView, null);\n        /** @type {?} */\n        let component;\n        /** @type {?} */\n        let tElementNode;\n        try {\n            /** @type {?} */\n            const componentView = createRootComponentView(hostRNode, this.componentDef, rootLView, rendererFactory, renderer);\n            tElementNode = (/** @type {?} */ (getTNode(0, rootLView)));\n            if (projectableNodes) {\n                // projectable nodes can be passed as array of arrays or an array of iterables (ngUpgrade\n                // case). Here we do normalize passed data structure to be an array of arrays to avoid\n                // complex checks down the line.\n                tElementNode.projection =\n                    projectableNodes.map((/**\n                     * @param {?} nodesforSlot\n                     * @return {?}\n                     */\n                    (nodesforSlot) => { return Array.from(nodesforSlot); }));\n            }\n            // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and\n            // executed here?\n            // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref\n            component = createRootComponent(componentView, this.componentDef, rootLView, rootContext, [LifecycleHooksFeature]);\n            addToViewTree(rootLView, componentView);\n            refreshDescendantViews(rootLView);\n        }\n        finally {\n            leaveView(oldLView);\n        }\n        /** @type {?} */\n        const componentRef = new ComponentRef$1(this.componentType, component, createElementRef(ElementRef, tElementNode, rootLView), rootLView, tElementNode);\n        if (isInternalRootView) {\n            // The host element of the internal root view is attached to the component's host view node\n            (/** @type {?} */ (componentRef.hostView._tViewNode)).child = tElementNode;\n        }\n        return componentRef;\n    }\n}\n/** @type {?} */\nconst componentFactoryResolver = new ComponentFactoryResolver$1();\n/**\n * Represents an instance of a Component created via a {\\@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {\\@link #destroy}\n * method.\n *\n * @template T\n */\nclass ComponentRef$1 extends ComponentRef {\n    /**\n     * @param {?} componentType\n     * @param {?} instance\n     * @param {?} location\n     * @param {?} _rootLView\n     * @param {?} _tNode\n     */\n    constructor(componentType, instance, location, _rootLView, _tNode) {\n        super();\n        this.location = location;\n        this._rootLView = _rootLView;\n        this._tNode = _tNode;\n        this.destroyCbs = [];\n        this.instance = instance;\n        this.hostView = this.changeDetectorRef = new RootViewRef(_rootLView);\n        this.hostView._tViewNode = assignTViewNodeToLView(_rootLView[TVIEW], null, -1, _rootLView);\n        this.componentType = componentType;\n    }\n    /**\n     * @return {?}\n     */\n    get injector() { return new NodeInjector(this._tNode, this._rootLView); }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n        (/** @type {?} */ (this.destroyCbs)).forEach((/**\n         * @param {?} fn\n         * @return {?}\n         */\n        fn => fn()));\n        this.destroyCbs = null;\n        !this.hostView.destroyed && this.hostView.destroy();\n    }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    onDestroy(callback) {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n        (/** @type {?} */ (this.destroyCbs)).push(callback);\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * NOTE: changes to the `ngI18nClosureMode` name must be synced with `compiler-cli/src/tooling.ts`.\n */\nif (typeof ngI18nClosureMode === 'undefined') {\n    // These property accesses can be ignored because ngI18nClosureMode will be set to false\n    // when optimizing code and the whole if statement will be dropped.\n    // Make sure to refer to ngI18nClosureMode as ['ngI18nClosureMode'] for closure.\n    // tslint:disable-next-line:no-toplevel-property-access\n    _global['ngI18nClosureMode'] =\n        // TODO(FW-1250): validate that this actually, you know, works.\n        // tslint:disable-next-line:no-toplevel-property-access\n        typeof goog !== 'undefined' && typeof goog.getMsg === 'function';\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n* Equivalent to ES6 spread, add each item to an array.\n*\n* @param items The items to add\n* @param arr The array to which you want to add the items\n*/\nfunction addAllToArray(items, arr) {\n    for (let i = 0; i < items.length; i++) {\n        arr.push(items[i]);\n    }\n}\n/**\n * Flattens an array.\n */\nfunction flatten(list, dst) {\n    if (dst === undefined)\n        dst = list;\n    for (let i = 0; i < list.length; i++) {\n        let item = list[i];\n        if (Array.isArray(item)) {\n            // we need to inline it.\n            if (dst === list) {\n                // Our assumption that the list was already flat was wrong and\n                // we need to clone flat since we need to write to it.\n                dst = list.slice(0, i);\n            }\n            flatten(item, dst);\n        }\n        else if (dst !== list) {\n            dst.push(item);\n        }\n    }\n    return dst;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MARKER = `�`;\n/** @type {?} */\nconst ICU_BLOCK_REGEXP = /^\\s*(�\\d+:?\\d*�)\\s*,\\s*(select|plural)\\s*,/;\n/** @type {?} */\nconst SUBTEMPLATE_REGEXP = /�\\/?\\*(\\d+:\\d+)�/gi;\n/** @type {?} */\nconst PH_REGEXP = /�(\\/?[#*]\\d+):?\\d*�/gi;\n/** @type {?} */\nconst BINDING_REGEXP = /�(\\d+):?\\d*�/gi;\n/** @type {?} */\nconst ICU_REGEXP = /({\\s*�\\d+:?\\d*�\\s*,\\s*\\S{6}\\s*,[\\s\\S]*})/gi;\n// i18nPostprocess consts\n/** @type {?} */\nconst ROOT_TEMPLATE_ID = 0;\n/** @type {?} */\nconst PP_MULTI_VALUE_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]/;\n/** @type {?} */\nconst PP_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]|(�\\/?\\*\\d+:\\d+�)/g;\n/** @type {?} */\nconst PP_ICU_VARS_REGEXP = /({\\s*)(VAR_(PLURAL|SELECT)(_\\d+)?)(\\s*,)/g;\n/** @type {?} */\nconst PP_ICUS_REGEXP = /�I18N_EXP_(ICU(_\\d+)?)�/g;\n/** @type {?} */\nconst PP_CLOSE_TEMPLATE_REGEXP = /\\/\\*/;\n/** @type {?} */\nconst PP_TEMPLATE_ID_REGEXP = /\\d+\\:(\\d+)/;\n/**\n * Breaks pattern into strings and top level {...} blocks.\n * Can be used to break a message into text and ICU expressions, or to break an ICU expression into\n * keys and cases.\n * Original code from closure library, modified for Angular.\n *\n * @param {?} pattern (sub)Pattern to be broken.\n *\n * @return {?}\n */\nfunction extractParts(pattern) {\n    if (!pattern) {\n        return [];\n    }\n    /** @type {?} */\n    let prevPos = 0;\n    /** @type {?} */\n    const braceStack = [];\n    /** @type {?} */\n    const results = [];\n    /** @type {?} */\n    const braces = /[{}]/g;\n    // lastIndex doesn't get set to 0 so we have to.\n    braces.lastIndex = 0;\n    /** @type {?} */\n    let match;\n    while (match = braces.exec(pattern)) {\n        /** @type {?} */\n        const pos = match.index;\n        if (match[0] == '}') {\n            braceStack.pop();\n            if (braceStack.length == 0) {\n                // End of the block.\n                /** @type {?} */\n                const block = pattern.substring(prevPos, pos);\n                if (ICU_BLOCK_REGEXP.test(block)) {\n                    results.push(parseICUBlock(block));\n                }\n                else if (block) { // Don't push empty strings\n                    results.push(block);\n                }\n                prevPos = pos + 1;\n            }\n        }\n        else {\n            if (braceStack.length == 0) {\n                /** @type {?} */\n                const substring = pattern.substring(prevPos, pos);\n                results.push(substring);\n                prevPos = pos + 1;\n            }\n            braceStack.push('{');\n        }\n    }\n    /** @type {?} */\n    const substring = pattern.substring(prevPos);\n    if (substring != '') {\n        results.push(substring);\n    }\n    return results;\n}\n/**\n * Parses text containing an ICU expression and produces a JSON object for it.\n * Original code from closure library, modified for Angular.\n *\n * @param {?} pattern Text containing an ICU expression that needs to be parsed.\n *\n * @return {?}\n */\nfunction parseICUBlock(pattern) {\n    /** @type {?} */\n    const cases = [];\n    /** @type {?} */\n    const values = [];\n    /** @type {?} */\n    let icuType = 1 /* plural */;\n    /** @type {?} */\n    let mainBinding = 0;\n    pattern = pattern.replace(ICU_BLOCK_REGEXP, (/**\n     * @param {?} str\n     * @param {?} binding\n     * @param {?} type\n     * @return {?}\n     */\n    function (str, binding, type) {\n        if (type === 'select') {\n            icuType = 0 /* select */;\n        }\n        else {\n            icuType = 1 /* plural */;\n        }\n        mainBinding = parseInt(binding.substr(1), 10);\n        return '';\n    }));\n    /** @type {?} */\n    const parts = (/** @type {?} */ (extractParts(pattern)));\n    // Looking for (key block)+ sequence. One of the keys has to be \"other\".\n    for (let pos = 0; pos < parts.length;) {\n        /** @type {?} */\n        let key = parts[pos++].trim();\n        if (icuType === 1 /* plural */) {\n            // Key can be \"=x\", we just want \"x\"\n            key = key.replace(/\\s*(?:=)?(\\w+)\\s*/, '$1');\n        }\n        if (key.length) {\n            cases.push(key);\n        }\n        /** @type {?} */\n        const blocks = (/** @type {?} */ (extractParts(parts[pos++])));\n        if (blocks.length) {\n            values.push(blocks);\n        }\n    }\n    assertGreaterThan(cases.indexOf('other'), -1, 'Missing key \"other\" in ICU statement.');\n    // TODO(ocombe): support ICU expressions in attributes, see #21615\n    return { type: icuType, mainBinding: mainBinding, cases, values };\n}\n/**\n * Removes everything inside the sub-templates of a message.\n * @param {?} message\n * @return {?}\n */\nfunction removeInnerTemplateTranslation(message) {\n    /** @type {?} */\n    let match;\n    /** @type {?} */\n    let res = '';\n    /** @type {?} */\n    let index = 0;\n    /** @type {?} */\n    let inTemplate = false;\n    /** @type {?} */\n    let tagMatched;\n    while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {\n        if (!inTemplate) {\n            res += message.substring(index, match.index + match[0].length);\n            tagMatched = match[1];\n            inTemplate = true;\n        }\n        else {\n            if (match[0] === `${MARKER}/*${tagMatched}${MARKER}`) {\n                index = match.index;\n                inTemplate = false;\n            }\n        }\n    }\n    ngDevMode &&\n        assertEqual(inTemplate, false, `Tag mismatch: unable to find the end of the sub-template in the translation \"${message}\"`);\n    res += message.substr(index);\n    return res;\n}\n/**\n * Extracts a part of a message and removes the rest.\n *\n * This method is used for extracting a part of the message associated with a template. A translated\n * message can span multiple templates.\n *\n * Example:\n * ```\n * <div i18n>Translate <span *ngIf>me</span>!</div>\n * ```\n *\n * @param {?} message The message to crop\n * @param {?=} subTemplateIndex Index of the sub-template to extract. If undefined it returns the\n * external template and removes all sub-templates.\n * @return {?}\n */\nfunction getTranslationForTemplate(message, subTemplateIndex) {\n    if (typeof subTemplateIndex !== 'number') {\n        // We want the root template message, ignore all sub-templates\n        return removeInnerTemplateTranslation(message);\n    }\n    else {\n        // We want a specific sub-template\n        /** @type {?} */\n        const start = message.indexOf(`:${subTemplateIndex}${MARKER}`) + 2 + subTemplateIndex.toString().length;\n        /** @type {?} */\n        const end = message.search(new RegExp(`${MARKER}\\\\/\\\\*\\\\d+:${subTemplateIndex}${MARKER}`));\n        return removeInnerTemplateTranslation(message.substring(start, end));\n    }\n}\n/**\n * Generate the OpCodes to update the bindings of a string.\n *\n * @param {?} str The string containing the bindings.\n * @param {?} destinationNode Index of the destination node which will receive the binding.\n * @param {?=} attrName Name of the attribute, if the string belongs to an attribute.\n * @param {?=} sanitizeFn Sanitization function used to sanitize the string after update, if necessary.\n * @return {?}\n */\nfunction generateBindingUpdateOpCodes(str, destinationNode, attrName, sanitizeFn = null) {\n    /** @type {?} */\n    const updateOpCodes = [null, null];\n    // Alloc space for mask and size\n    /** @type {?} */\n    const textParts = str.split(BINDING_REGEXP);\n    /** @type {?} */\n    let mask = 0;\n    for (let j = 0; j < textParts.length; j++) {\n        /** @type {?} */\n        const textValue = textParts[j];\n        if (j & 1) {\n            // Odd indexes are bindings\n            /** @type {?} */\n            const bindingIndex = parseInt(textValue, 10);\n            updateOpCodes.push(-1 - bindingIndex);\n            mask = mask | toMaskBit(bindingIndex);\n        }\n        else if (textValue !== '') {\n            // Even indexes are text\n            updateOpCodes.push(textValue);\n        }\n    }\n    updateOpCodes.push(destinationNode << 2 /* SHIFT_REF */ |\n        (attrName ? 1 /* Attr */ : 0 /* Text */));\n    if (attrName) {\n        updateOpCodes.push(attrName, sanitizeFn);\n    }\n    updateOpCodes[0] = mask;\n    updateOpCodes[1] = updateOpCodes.length - 2;\n    return updateOpCodes;\n}\n/**\n * @param {?} icuExpression\n * @param {?=} mask\n * @return {?}\n */\nfunction getBindingMask(icuExpression, mask = 0) {\n    mask = mask | toMaskBit(icuExpression.mainBinding);\n    /** @type {?} */\n    let match;\n    for (let i = 0; i < icuExpression.values.length; i++) {\n        /** @type {?} */\n        const valueArr = icuExpression.values[i];\n        for (let j = 0; j < valueArr.length; j++) {\n            /** @type {?} */\n            const value = valueArr[j];\n            if (typeof value === 'string') {\n                while (match = BINDING_REGEXP.exec(value)) {\n                    mask = mask | toMaskBit(parseInt(match[1], 10));\n                }\n            }\n            else {\n                mask = getBindingMask((/** @type {?} */ (value)), mask);\n            }\n        }\n    }\n    return mask;\n}\n/** @type {?} */\nconst i18nIndexStack = [];\n/** @type {?} */\nlet i18nIndexStackPointer = -1;\n/**\n * Convert binding index to mask bit.\n *\n * Each index represents a single bit on the bit-mask. Because bit-mask only has 32 bits, we make\n * the 32nd bit share all masks for all bindings higher than 32. Since it is extremely rare to have\n * more than 32 bindings this will be hit very rarely. The downside of hitting this corner case is\n * that we will execute binding code more often than necessary. (penalty of performance)\n * @param {?} bindingIndex\n * @return {?}\n */\nfunction toMaskBit(bindingIndex) {\n    return 1 << Math.min(bindingIndex, 31);\n}\n/** @type {?} */\nconst parentIndexStack = [];\n/**\n * Marks a block of text as translatable.\n *\n * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * \\@codeGenApi\n * @param {?} index A unique index of the translation in the static block.\n * @param {?} message The translation message.\n * @param {?=} subTemplateIndex Optional sub-template index in the `message`.\n *\n * @return {?}\n */\nfunction ɵɵi18nStart(index, message, subTemplateIndex) {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    ngDevMode && assertDefined(tView, `tView should be defined`);\n    i18nIndexStack[++i18nIndexStackPointer] = index;\n    if (tView.firstTemplatePass && tView.data[index + HEADER_OFFSET] === null) {\n        i18nStartFirstPass(tView, index, message, subTemplateIndex);\n    }\n}\n// Count for the number of vars that will be allocated for each i18n block.\n// It is global because this is used in multiple functions that include loops and recursive calls.\n// This is reset to 0 when `i18nStartFirstPass` is called.\n/** @type {?} */\nlet i18nVarsCount;\n/**\n * See `i18nStart` above.\n * @param {?} tView\n * @param {?} index\n * @param {?} message\n * @param {?=} subTemplateIndex\n * @return {?}\n */\nfunction i18nStartFirstPass(tView, index, message, subTemplateIndex) {\n    /** @type {?} */\n    const viewData = getLView();\n    /** @type {?} */\n    const startIndex = tView.blueprint.length - HEADER_OFFSET;\n    i18nVarsCount = 0;\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    const parentTNode = getIsParent() ? getPreviousOrParentTNode() :\n        previousOrParentTNode && previousOrParentTNode.parent;\n    /** @type {?} */\n    let parentIndex = parentTNode && parentTNode !== viewData[T_HOST] ? parentTNode.index - HEADER_OFFSET : index;\n    /** @type {?} */\n    let parentIndexPointer = 0;\n    parentIndexStack[parentIndexPointer] = parentIndex;\n    /** @type {?} */\n    const createOpCodes = [];\n    // If the previous node wasn't the direct parent then we have a translation without top level\n    // element and we need to keep a reference of the previous element if there is one\n    if (index > 0 && previousOrParentTNode !== parentTNode) {\n        // Create an OpCode to select the previous TNode\n        createOpCodes.push(previousOrParentTNode.index << 3 /* SHIFT_REF */ | 0 /* Select */);\n    }\n    /** @type {?} */\n    const updateOpCodes = [];\n    /** @type {?} */\n    const icuExpressions = [];\n    /** @type {?} */\n    const templateTranslation = getTranslationForTemplate(message, subTemplateIndex);\n    /** @type {?} */\n    const msgParts = templateTranslation.split(PH_REGEXP);\n    for (let i = 0; i < msgParts.length; i++) {\n        /** @type {?} */\n        let value = msgParts[i];\n        if (i & 1) {\n            // Odd indexes are placeholders (elements and sub-templates)\n            if (value.charAt(0) === '/') {\n                // It is a closing tag\n                if (value.charAt(1) === '#') {\n                    /** @type {?} */\n                    const phIndex = parseInt(value.substr(2), 10);\n                    parentIndex = parentIndexStack[--parentIndexPointer];\n                    createOpCodes.push(phIndex << 3 /* SHIFT_REF */ | 5 /* ElementEnd */);\n                }\n            }\n            else {\n                /** @type {?} */\n                const phIndex = parseInt(value.substr(1), 10);\n                // The value represents a placeholder that we move to the designated index\n                createOpCodes.push(phIndex << 3 /* SHIFT_REF */ | 0 /* Select */, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                if (value.charAt(0) === '#') {\n                    parentIndexStack[++parentIndexPointer] = parentIndex = phIndex;\n                }\n            }\n        }\n        else {\n            // Even indexes are text (including bindings & ICU expressions)\n            /** @type {?} */\n            const parts = extractParts(value);\n            for (let j = 0; j < parts.length; j++) {\n                if (j & 1) {\n                    // Odd indexes are ICU expressions\n                    // Create the comment node that will anchor the ICU expression\n                    /** @type {?} */\n                    const icuNodeIndex = startIndex + i18nVarsCount++;\n                    createOpCodes.push(COMMENT_MARKER, ngDevMode ? `ICU ${icuNodeIndex}` : '', icuNodeIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                    // Update codes for the ICU expression\n                    /** @type {?} */\n                    const icuExpression = (/** @type {?} */ (parts[j]));\n                    /** @type {?} */\n                    const mask = getBindingMask(icuExpression);\n                    icuStart(icuExpressions, icuExpression, icuNodeIndex, icuNodeIndex);\n                    // Since this is recursive, the last TIcu that was pushed is the one we want\n                    /** @type {?} */\n                    const tIcuIndex = icuExpressions.length - 1;\n                    updateOpCodes.push(toMaskBit(icuExpression.mainBinding), // mask of the main binding\n                    3, // skip 3 opCodes if not changed\n                    -1 - icuExpression.mainBinding, icuNodeIndex << 2 /* SHIFT_REF */ | 2 /* IcuSwitch */, tIcuIndex, mask, // mask of all the bindings of this ICU expression\n                    2, // skip 2 opCodes if not changed\n                    icuNodeIndex << 2 /* SHIFT_REF */ | 3 /* IcuUpdate */, tIcuIndex);\n                }\n                else if (parts[j] !== '') {\n                    /** @type {?} */\n                    const text = (/** @type {?} */ (parts[j]));\n                    // Even indexes are text (including bindings)\n                    /** @type {?} */\n                    const hasBinding = text.match(BINDING_REGEXP);\n                    // Create text nodes\n                    /** @type {?} */\n                    const textNodeIndex = startIndex + i18nVarsCount++;\n                    createOpCodes.push(\n                    // If there is a binding, the value will be set during update\n                    hasBinding ? '' : text, textNodeIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                    if (hasBinding) {\n                        addAllToArray(generateBindingUpdateOpCodes(text, textNodeIndex), updateOpCodes);\n                    }\n                }\n            }\n        }\n    }\n    allocExpando(viewData, i18nVarsCount);\n    ngDevMode &&\n        attachI18nOpCodesDebug(createOpCodes, updateOpCodes, icuExpressions.length ? icuExpressions : null, viewData);\n    // NOTE: local var needed to properly assert the type of `TI18n`.\n    /** @type {?} */\n    const tI18n = {\n        vars: i18nVarsCount,\n        create: createOpCodes,\n        update: updateOpCodes,\n        icus: icuExpressions.length ? icuExpressions : null,\n    };\n    tView.data[index + HEADER_OFFSET] = tI18n;\n}\n/**\n * @param {?} tNode\n * @param {?} parentTNode\n * @param {?} previousTNode\n * @return {?}\n */\nfunction appendI18nNode(tNode, parentTNode, previousTNode) {\n    ngDevMode && ngDevMode.rendererMoveNode++;\n    /** @type {?} */\n    const nextNode = tNode.next;\n    /** @type {?} */\n    const viewData = getLView();\n    if (!previousTNode) {\n        previousTNode = parentTNode;\n    }\n    // Re-organize node tree to put this node in the correct position.\n    if (previousTNode === parentTNode && tNode !== parentTNode.child) {\n        tNode.next = parentTNode.child;\n        parentTNode.child = tNode;\n    }\n    else if (previousTNode !== parentTNode && tNode !== previousTNode.next) {\n        tNode.next = previousTNode.next;\n        previousTNode.next = tNode;\n    }\n    else {\n        tNode.next = null;\n    }\n    if (parentTNode !== viewData[T_HOST]) {\n        tNode.parent = (/** @type {?} */ (parentTNode));\n    }\n    // If tNode was moved around, we might need to fix a broken link.\n    /** @type {?} */\n    let cursor = tNode.next;\n    while (cursor) {\n        if (cursor.next === tNode) {\n            cursor.next = nextNode;\n        }\n        cursor = cursor.next;\n    }\n    appendChild(getNativeByTNode(tNode, viewData), tNode, viewData);\n    /** @type {?} */\n    const slotValue = viewData[tNode.index];\n    if (tNode.type !== 0 /* Container */ && isLContainer(slotValue)) {\n        // Nodes that inject ViewContainerRef also have a comment node that should be moved\n        appendChild(slotValue[NATIVE], tNode, viewData);\n    }\n    return tNode;\n}\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n *    in case multiple ICUs have the same placeholder name\n *\n * \\@codeGenApi\n * @param {?} message Raw translation string for post processing\n * @param {?=} replacements Set of replacements that should be applied\n *\n * @return {?} Transformed string that can be consumed by i18nStart instruction\n *\n */\nfunction ɵɵi18nPostprocess(message, replacements = {}) {\n    /**\n     * Step 1: resolve all multi-value placeholders like [�#5�|�*1:1��#2:1�|�#4:1�]\n     *\n     * Note: due to the way we process nested templates (BFS), multi-value placeholders are typically\n     * grouped by templates, for example: [�#5�|�#6�|�#1:1�|�#3:2�] where �#5� and �#6� belong to root\n     * template, �#1:1� belong to nested template with index 1 and �#1:2� - nested template with index\n     * 3. However in real templates the order might be different: i.e. �#1:1� and/or �#3:2� may go in\n     * front of �#6�. The post processing step restores the right order by keeping track of the\n     * template id stack and looks for placeholders that belong to the currently active template.\n     * @type {?}\n     */\n    let result = message;\n    if (PP_MULTI_VALUE_PLACEHOLDERS_REGEXP.test(message)) {\n        /** @type {?} */\n        const matches = {};\n        /** @type {?} */\n        const templateIdsStack = [ROOT_TEMPLATE_ID];\n        result = result.replace(PP_PLACEHOLDERS_REGEXP, (/**\n         * @param {?} m\n         * @param {?} phs\n         * @param {?} tmpl\n         * @return {?}\n         */\n        (m, phs, tmpl) => {\n            /** @type {?} */\n            const content = phs || tmpl;\n            if (!matches[content]) {\n                /** @type {?} */\n                const placeholders = [];\n                content.split('|').forEach((/**\n                 * @param {?} placeholder\n                 * @return {?}\n                 */\n                (placeholder) => {\n                    /** @type {?} */\n                    const match = placeholder.match(PP_TEMPLATE_ID_REGEXP);\n                    /** @type {?} */\n                    const templateId = match ? parseInt(match[1], 10) : ROOT_TEMPLATE_ID;\n                    /** @type {?} */\n                    const isCloseTemplateTag = PP_CLOSE_TEMPLATE_REGEXP.test(placeholder);\n                    placeholders.push([templateId, isCloseTemplateTag, placeholder]);\n                }));\n                matches[content] = placeholders;\n            }\n            if (!matches[content].length) {\n                throw new Error(`i18n postprocess: unmatched placeholder - ${content}`);\n            }\n            /** @type {?} */\n            const currentTemplateId = templateIdsStack[templateIdsStack.length - 1];\n            /** @type {?} */\n            const placeholders = matches[content];\n            /** @type {?} */\n            let idx = 0;\n            // find placeholder index that matches current template id\n            for (let i = 0; i < placeholders.length; i++) {\n                if (placeholders[i][0] === currentTemplateId) {\n                    idx = i;\n                    break;\n                }\n            }\n            // update template id stack based on the current tag extracted\n            const [templateId, isCloseTemplateTag, placeholder] = placeholders[idx];\n            if (isCloseTemplateTag) {\n                templateIdsStack.pop();\n            }\n            else if (currentTemplateId !== templateId) {\n                templateIdsStack.push(templateId);\n            }\n            // remove processed tag from the list\n            placeholders.splice(idx, 1);\n            return placeholder;\n        }));\n        // verify that we injected all values\n        /** @type {?} */\n        const hasUnmatchedValues = Object.keys(matches).some((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => !!matches[key].length));\n        if (hasUnmatchedValues) {\n            throw new Error(`i18n postprocess: unmatched values - ${JSON.stringify(matches)}`);\n        }\n    }\n    // return current result if no replacements specified\n    if (!Object.keys(replacements).length) {\n        return result;\n    }\n    /**\n     * Step 2: replace all ICU vars (like \"VAR_PLURAL\")\n     */\n    result = result.replace(PP_ICU_VARS_REGEXP, (/**\n     * @param {?} match\n     * @param {?} start\n     * @param {?} key\n     * @param {?} _type\n     * @param {?} _idx\n     * @param {?} end\n     * @return {?}\n     */\n    (match, start, key, _type, _idx, end) => {\n        return replacements.hasOwnProperty(key) ? `${start}${replacements[key]}${end}` : match;\n    }));\n    /**\n     * Step 3: replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�) in case\n     * multiple ICUs have the same placeholder name\n     */\n    result = result.replace(PP_ICUS_REGEXP, (/**\n     * @param {?} match\n     * @param {?} key\n     * @return {?}\n     */\n    (match, key) => {\n        if (replacements.hasOwnProperty(key)) {\n            /** @type {?} */\n            const list = (/** @type {?} */ (replacements[key]));\n            if (!list.length) {\n                throw new Error(`i18n postprocess: unmatched ICU - ${match} with key: ${key}`);\n            }\n            return (/** @type {?} */ (list.shift()));\n        }\n        return match;\n    }));\n    return result;\n}\n/**\n * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes\n * into the render tree, moves the placeholder nodes and removes the deleted nodes.\n *\n * \\@codeGenApi\n * @return {?}\n */\nfunction ɵɵi18nEnd() {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    ngDevMode && assertDefined(tView, `tView should be defined`);\n    i18nEndFirstPass(tView);\n}\n/**\n * See `i18nEnd` above.\n * @param {?} tView\n * @return {?}\n */\nfunction i18nEndFirstPass(tView) {\n    /** @type {?} */\n    const viewData = getLView();\n    ngDevMode && assertEqual(viewData[BINDING_INDEX], viewData[TVIEW].bindingStartIndex, 'i18nEnd should be called before any binding');\n    /** @type {?} */\n    const rootIndex = i18nIndexStack[i18nIndexStackPointer--];\n    /** @type {?} */\n    const tI18n = (/** @type {?} */ (tView.data[rootIndex + HEADER_OFFSET]));\n    ngDevMode && assertDefined(tI18n, `You should call i18nStart before i18nEnd`);\n    // Find the last node that was added before `i18nEnd`\n    /** @type {?} */\n    let lastCreatedNode = getPreviousOrParentTNode();\n    // Read the instructions to insert/move/remove DOM elements\n    /** @type {?} */\n    const visitedNodes = readCreateOpCodes(rootIndex, tI18n.create, tI18n.icus, viewData);\n    // Remove deleted nodes\n    for (let i = rootIndex + 1; i <= lastCreatedNode.index - HEADER_OFFSET; i++) {\n        if (visitedNodes.indexOf(i) === -1) {\n            removeNode(i, viewData);\n        }\n    }\n}\n/**\n * Creates and stores the dynamic TNode, and unhooks it from the tree for now.\n * @param {?} index\n * @param {?} type\n * @param {?} native\n * @param {?} name\n * @return {?}\n */\nfunction createDynamicNodeAtIndex(index, type, native, name) {\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    const tNode = createNodeAtIndex(index, (/** @type {?} */ (type)), native, name, null);\n    // We are creating a dynamic node, the previous tNode might not be pointing at this node.\n    // We will link ourselves into the tree later with `appendI18nNode`.\n    if (previousOrParentTNode.next === tNode) {\n        previousOrParentTNode.next = null;\n    }\n    return tNode;\n}\n/**\n * @param {?} index\n * @param {?} createOpCodes\n * @param {?} icus\n * @param {?} viewData\n * @return {?}\n */\nfunction readCreateOpCodes(index, createOpCodes, icus, viewData) {\n    /** @type {?} */\n    const renderer = getLView()[RENDERER];\n    /** @type {?} */\n    let currentTNode = null;\n    /** @type {?} */\n    let previousTNode = null;\n    /** @type {?} */\n    const visitedNodes = [];\n    for (let i = 0; i < createOpCodes.length; i++) {\n        /** @type {?} */\n        const opCode = createOpCodes[i];\n        if (typeof opCode == 'string') {\n            /** @type {?} */\n            const textRNode = createTextNode(opCode, renderer);\n            /** @type {?} */\n            const textNodeIndex = (/** @type {?} */ (createOpCodes[++i]));\n            ngDevMode && ngDevMode.rendererCreateTextNode++;\n            previousTNode = currentTNode;\n            currentTNode = createDynamicNodeAtIndex(textNodeIndex, 3 /* Element */, textRNode, null);\n            visitedNodes.push(textNodeIndex);\n            setIsParent(false);\n        }\n        else if (typeof opCode == 'number') {\n            switch (opCode & 7 /* MASK_OPCODE */) {\n                case 1 /* AppendChild */:\n                    /** @type {?} */\n                    const destinationNodeIndex = opCode >>> 17 /* SHIFT_PARENT */;\n                    /** @type {?} */\n                    let destinationTNode;\n                    if (destinationNodeIndex === index) {\n                        // If the destination node is `i18nStart`, we don't have a\n                        // top-level node and we should use the host node instead\n                        destinationTNode = (/** @type {?} */ (viewData[T_HOST]));\n                    }\n                    else {\n                        destinationTNode = getTNode(destinationNodeIndex, viewData);\n                    }\n                    ngDevMode &&\n                        assertDefined((/** @type {?} */ (currentTNode)), `You need to create or select a node before you can insert it into the DOM`);\n                    previousTNode = appendI18nNode((/** @type {?} */ (currentTNode)), destinationTNode, previousTNode);\n                    break;\n                case 0 /* Select */:\n                    /** @type {?} */\n                    const nodeIndex = opCode >>> 3 /* SHIFT_REF */;\n                    visitedNodes.push(nodeIndex);\n                    previousTNode = currentTNode;\n                    currentTNode = getTNode(nodeIndex, viewData);\n                    if (currentTNode) {\n                        setPreviousOrParentTNode(currentTNode);\n                        if (currentTNode.type === 3 /* Element */) {\n                            setIsParent(true);\n                        }\n                    }\n                    break;\n                case 5 /* ElementEnd */:\n                    /** @type {?} */\n                    const elementIndex = opCode >>> 3 /* SHIFT_REF */;\n                    previousTNode = currentTNode = getTNode(elementIndex, viewData);\n                    setPreviousOrParentTNode(currentTNode);\n                    setIsParent(false);\n                    break;\n                case 4 /* Attr */:\n                    /** @type {?} */\n                    const elementNodeIndex = opCode >>> 3 /* SHIFT_REF */;\n                    /** @type {?} */\n                    const attrName = (/** @type {?} */ (createOpCodes[++i]));\n                    /** @type {?} */\n                    const attrValue = (/** @type {?} */ (createOpCodes[++i]));\n                    ɵɵelementAttribute(elementNodeIndex, attrName, attrValue);\n                    break;\n                default:\n                    throw new Error(`Unable to determine the type of mutate operation for \"${opCode}\"`);\n            }\n        }\n        else {\n            switch (opCode) {\n                case COMMENT_MARKER:\n                    /** @type {?} */\n                    const commentValue = (/** @type {?} */ (createOpCodes[++i]));\n                    /** @type {?} */\n                    const commentNodeIndex = (/** @type {?} */ (createOpCodes[++i]));\n                    ngDevMode && assertEqual(typeof commentValue, 'string', `Expected \"${commentValue}\" to be a comment node value`);\n                    /** @type {?} */\n                    const commentRNode = renderer.createComment(commentValue);\n                    ngDevMode && ngDevMode.rendererCreateComment++;\n                    previousTNode = currentTNode;\n                    currentTNode = createDynamicNodeAtIndex(commentNodeIndex, 5 /* IcuContainer */, commentRNode, null);\n                    visitedNodes.push(commentNodeIndex);\n                    attachPatchData(commentRNode, viewData);\n                    ((/** @type {?} */ (currentTNode))).activeCaseIndex = null;\n                    // We will add the case nodes later, during the update phase\n                    setIsParent(false);\n                    break;\n                case ELEMENT_MARKER:\n                    /** @type {?} */\n                    const tagNameValue = (/** @type {?} */ (createOpCodes[++i]));\n                    /** @type {?} */\n                    const elementNodeIndex = (/** @type {?} */ (createOpCodes[++i]));\n                    ngDevMode && assertEqual(typeof tagNameValue, 'string', `Expected \"${tagNameValue}\" to be an element node tag name`);\n                    /** @type {?} */\n                    const elementRNode = renderer.createElement(tagNameValue);\n                    ngDevMode && ngDevMode.rendererCreateElement++;\n                    previousTNode = currentTNode;\n                    currentTNode = createDynamicNodeAtIndex(elementNodeIndex, 3 /* Element */, elementRNode, tagNameValue);\n                    visitedNodes.push(elementNodeIndex);\n                    break;\n                default:\n                    throw new Error(`Unable to determine the type of mutate operation for \"${opCode}\"`);\n            }\n        }\n    }\n    setIsParent(false);\n    return visitedNodes;\n}\n/**\n * @param {?} updateOpCodes\n * @param {?} icus\n * @param {?} bindingsStartIndex\n * @param {?} changeMask\n * @param {?} viewData\n * @param {?=} bypassCheckBit\n * @return {?}\n */\nfunction readUpdateOpCodes(updateOpCodes, icus, bindingsStartIndex, changeMask, viewData, bypassCheckBit = false) {\n    /** @type {?} */\n    let caseCreated = false;\n    for (let i = 0; i < updateOpCodes.length; i++) {\n        // bit code to check if we should apply the next update\n        /** @type {?} */\n        const checkBit = (/** @type {?} */ (updateOpCodes[i]));\n        // Number of opCodes to skip until next set of update codes\n        /** @type {?} */\n        const skipCodes = (/** @type {?} */ (updateOpCodes[++i]));\n        if (bypassCheckBit || (checkBit & changeMask)) {\n            // The value has been updated since last checked\n            /** @type {?} */\n            let value = '';\n            for (let j = i + 1; j <= (i + skipCodes); j++) {\n                /** @type {?} */\n                const opCode = updateOpCodes[j];\n                if (typeof opCode == 'string') {\n                    value += opCode;\n                }\n                else if (typeof opCode == 'number') {\n                    if (opCode < 0) {\n                        // It's a binding index whose value is negative\n                        value += renderStringify(viewData[bindingsStartIndex - opCode]);\n                    }\n                    else {\n                        /** @type {?} */\n                        const nodeIndex = opCode >>> 2 /* SHIFT_REF */;\n                        /** @type {?} */\n                        let tIcuIndex;\n                        /** @type {?} */\n                        let tIcu;\n                        /** @type {?} */\n                        let icuTNode;\n                        switch (opCode & 3 /* MASK_OPCODE */) {\n                            case 1 /* Attr */:\n                                /** @type {?} */\n                                const attrName = (/** @type {?} */ (updateOpCodes[++j]));\n                                /** @type {?} */\n                                const sanitizeFn = (/** @type {?} */ (updateOpCodes[++j]));\n                                ɵɵelementAttribute(nodeIndex, attrName, value, sanitizeFn);\n                                break;\n                            case 0 /* Text */:\n                                ɵɵtextBinding(nodeIndex, value);\n                                break;\n                            case 2 /* IcuSwitch */:\n                                tIcuIndex = (/** @type {?} */ (updateOpCodes[++j]));\n                                tIcu = (/** @type {?} */ (icus))[tIcuIndex];\n                                icuTNode = (/** @type {?} */ (getTNode(nodeIndex, viewData)));\n                                // If there is an active case, delete the old nodes\n                                if (icuTNode.activeCaseIndex !== null) {\n                                    /** @type {?} */\n                                    const removeCodes = tIcu.remove[icuTNode.activeCaseIndex];\n                                    for (let k = 0; k < removeCodes.length; k++) {\n                                        /** @type {?} */\n                                        const removeOpCode = (/** @type {?} */ (removeCodes[k]));\n                                        switch (removeOpCode & 7 /* MASK_OPCODE */) {\n                                            case 3 /* Remove */:\n                                                /** @type {?} */\n                                                const nodeIndex = removeOpCode >>> 3 /* SHIFT_REF */;\n                                                removeNode(nodeIndex, viewData);\n                                                break;\n                                            case 6 /* RemoveNestedIcu */:\n                                                /** @type {?} */\n                                                const nestedIcuNodeIndex = (/** @type {?} */ (removeCodes[k + 1])) >>> 3 /* SHIFT_REF */;\n                                                /** @type {?} */\n                                                const nestedIcuTNode = (/** @type {?} */ (getTNode(nestedIcuNodeIndex, viewData)));\n                                                /** @type {?} */\n                                                const activeIndex = nestedIcuTNode.activeCaseIndex;\n                                                if (activeIndex !== null) {\n                                                    /** @type {?} */\n                                                    const nestedIcuTIndex = removeOpCode >>> 3 /* SHIFT_REF */;\n                                                    /** @type {?} */\n                                                    const nestedTIcu = (/** @type {?} */ (icus))[nestedIcuTIndex];\n                                                    addAllToArray(nestedTIcu.remove[activeIndex], removeCodes);\n                                                }\n                                                break;\n                                        }\n                                    }\n                                }\n                                // Update the active caseIndex\n                                /** @type {?} */\n                                const caseIndex = getCaseIndex(tIcu, value);\n                                icuTNode.activeCaseIndex = caseIndex !== -1 ? caseIndex : null;\n                                // Add the nodes for the new case\n                                readCreateOpCodes(-1, tIcu.create[caseIndex], icus, viewData);\n                                caseCreated = true;\n                                break;\n                            case 3 /* IcuUpdate */:\n                                tIcuIndex = (/** @type {?} */ (updateOpCodes[++j]));\n                                tIcu = (/** @type {?} */ (icus))[tIcuIndex];\n                                icuTNode = (/** @type {?} */ (getTNode(nodeIndex, viewData)));\n                                readUpdateOpCodes(tIcu.update[(/** @type {?} */ (icuTNode.activeCaseIndex))], icus, bindingsStartIndex, changeMask, viewData, caseCreated);\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n        i += skipCodes;\n    }\n}\n/**\n * @param {?} index\n * @param {?} viewData\n * @return {?}\n */\nfunction removeNode(index, viewData) {\n    /** @type {?} */\n    const removedPhTNode = getTNode(index, viewData);\n    /** @type {?} */\n    const removedPhRNode = getNativeByIndex(index, viewData);\n    if (removedPhRNode) {\n        nativeRemoveNode(viewData[RENDERER], removedPhRNode);\n    }\n    /** @type {?} */\n    const slotValue = (/** @type {?} */ (ɵɵload(index)));\n    if (isLContainer(slotValue)) {\n        /** @type {?} */\n        const lContainer = (/** @type {?} */ (slotValue));\n        if (removedPhTNode.type !== 0 /* Container */) {\n            nativeRemoveNode(viewData[RENDERER], lContainer[NATIVE]);\n        }\n    }\n    ngDevMode && ngDevMode.rendererRemoveNode++;\n}\n/**\n *\n * Use this instruction to create a translation block that doesn't contain any placeholder.\n * It calls both {\\@link i18nStart} and {\\@link i18nEnd} in one instruction.\n *\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * \\@codeGenApi\n * @param {?} index A unique index of the translation in the static block.\n * @param {?} message The translation message.\n * @param {?=} subTemplateIndex Optional sub-template index in the `message`.\n *\n * @return {?}\n */\nfunction ɵɵi18n(index, message, subTemplateIndex) {\n    ɵɵi18nStart(index, message, subTemplateIndex);\n    ɵɵi18nEnd();\n}\n/**\n * Marks a list of attributes as translatable.\n *\n * \\@codeGenApi\n * @param {?} index A unique index in the static block\n * @param {?} values\n *\n * @return {?}\n */\nfunction ɵɵi18nAttributes(index, values) {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    ngDevMode && assertDefined(tView, `tView should be defined`);\n    if (tView.firstTemplatePass && tView.data[index + HEADER_OFFSET] === null) {\n        i18nAttributesFirstPass(tView, index, values);\n    }\n}\n/**\n * See `i18nAttributes` above.\n * @param {?} tView\n * @param {?} index\n * @param {?} values\n * @return {?}\n */\nfunction i18nAttributesFirstPass(tView, index, values) {\n    /** @type {?} */\n    const previousElement = getPreviousOrParentTNode();\n    /** @type {?} */\n    const previousElementIndex = previousElement.index - HEADER_OFFSET;\n    /** @type {?} */\n    const updateOpCodes = [];\n    for (let i = 0; i < values.length; i += 2) {\n        /** @type {?} */\n        const attrName = values[i];\n        /** @type {?} */\n        const message = values[i + 1];\n        /** @type {?} */\n        const parts = message.split(ICU_REGEXP);\n        for (let j = 0; j < parts.length; j++) {\n            /** @type {?} */\n            const value = parts[j];\n            if (j & 1) ;\n            else if (value !== '') {\n                // Even indexes are text (including bindings)\n                /** @type {?} */\n                const hasBinding = !!value.match(BINDING_REGEXP);\n                if (hasBinding) {\n                    addAllToArray(generateBindingUpdateOpCodes(value, previousElementIndex, attrName), updateOpCodes);\n                }\n                else {\n                    ɵɵelementAttribute(previousElementIndex, attrName, value);\n                }\n            }\n        }\n    }\n    tView.data[index + HEADER_OFFSET] = updateOpCodes;\n}\n/** @type {?} */\nlet changeMask = 0b0;\n/** @type {?} */\nlet shiftsCounter = 0;\n/**\n * Stores the values of the bindings during each update cycle in order to determine if we need to\n * update the translated nodes.\n *\n * \\@codeGenApi\n * @template T\n * @param {?} expression The binding's new value or NO_CHANGE\n *\n * @return {?}\n */\nfunction ɵɵi18nExp(expression) {\n    if (expression !== NO_CHANGE) {\n        changeMask = changeMask | (1 << shiftsCounter);\n    }\n    shiftsCounter++;\n}\n/**\n * Updates a translation block or an i18n attribute when the bindings have changed.\n *\n * \\@codeGenApi\n * @param {?} index Index of either {\\@link i18nStart} (translation block) or {\\@link i18nAttributes}\n * (i18n attribute) on which it should update the content.\n *\n * @return {?}\n */\nfunction ɵɵi18nApply(index) {\n    if (shiftsCounter) {\n        /** @type {?} */\n        const lView = getLView();\n        /** @type {?} */\n        const tView = lView[TVIEW];\n        ngDevMode && assertDefined(tView, `tView should be defined`);\n        /** @type {?} */\n        const tI18n = tView.data[index + HEADER_OFFSET];\n        /** @type {?} */\n        let updateOpCodes;\n        /** @type {?} */\n        let icus = null;\n        if (Array.isArray(tI18n)) {\n            updateOpCodes = (/** @type {?} */ (tI18n));\n        }\n        else {\n            updateOpCodes = ((/** @type {?} */ (tI18n))).update;\n            icus = ((/** @type {?} */ (tI18n))).icus;\n        }\n        /** @type {?} */\n        const bindingsStartIndex = lView[BINDING_INDEX] - shiftsCounter - 1;\n        readUpdateOpCodes(updateOpCodes, icus, bindingsStartIndex, changeMask, lView);\n        // Reset changeMask & maskBit to default for the next update cycle\n        changeMask = 0b0;\n        shiftsCounter = 0;\n    }\n}\n/** @enum {number} */\nconst Plural = {\n    Zero: 0,\n    One: 1,\n    Two: 2,\n    Few: 3,\n    Many: 4,\n    Other: 5,\n};\nPlural[Plural.Zero] = 'Zero';\nPlural[Plural.One] = 'One';\nPlural[Plural.Two] = 'Two';\nPlural[Plural.Few] = 'Few';\nPlural[Plural.Many] = 'Many';\nPlural[Plural.Other] = 'Other';\n/**\n * Returns the plural case based on the locale.\n * This is a copy of the deprecated function that we used in Angular v4.\n * // TODO(ocombe): remove this once we can the real getPluralCase function\n *\n * @deprecated from v5 the plural case function is in locale data files common/locales/*.ts\n * @param {?} locale\n * @param {?} nLike\n * @return {?}\n */\nfunction getPluralCase(locale, nLike) {\n    if (typeof nLike === 'string') {\n        nLike = parseInt((/** @type {?} */ (nLike)), 10);\n    }\n    /** @type {?} */\n    const n = (/** @type {?} */ (nLike));\n    /** @type {?} */\n    const nDecimal = n.toString().replace(/^[^.]*\\.?/, '');\n    /** @type {?} */\n    const i = Math.floor(Math.abs(n));\n    /** @type {?} */\n    const v = nDecimal.length;\n    /** @type {?} */\n    const f = parseInt(nDecimal, 10);\n    /** @type {?} */\n    const t = parseInt(n.toString().replace(/^[^.]*\\.?|0+$/g, ''), 10) || 0;\n    /** @type {?} */\n    const lang = locale.split('-')[0].toLowerCase();\n    switch (lang) {\n        case 'af':\n        case 'asa':\n        case 'az':\n        case 'bem':\n        case 'bez':\n        case 'bg':\n        case 'brx':\n        case 'ce':\n        case 'cgg':\n        case 'chr':\n        case 'ckb':\n        case 'ee':\n        case 'el':\n        case 'eo':\n        case 'es':\n        case 'eu':\n        case 'fo':\n        case 'fur':\n        case 'gsw':\n        case 'ha':\n        case 'haw':\n        case 'hu':\n        case 'jgo':\n        case 'jmc':\n        case 'ka':\n        case 'kk':\n        case 'kkj':\n        case 'kl':\n        case 'ks':\n        case 'ksb':\n        case 'ky':\n        case 'lb':\n        case 'lg':\n        case 'mas':\n        case 'mgo':\n        case 'ml':\n        case 'mn':\n        case 'nb':\n        case 'nd':\n        case 'ne':\n        case 'nn':\n        case 'nnh':\n        case 'nyn':\n        case 'om':\n        case 'or':\n        case 'os':\n        case 'ps':\n        case 'rm':\n        case 'rof':\n        case 'rwk':\n        case 'saq':\n        case 'seh':\n        case 'sn':\n        case 'so':\n        case 'sq':\n        case 'ta':\n        case 'te':\n        case 'teo':\n        case 'tk':\n        case 'tr':\n        case 'ug':\n        case 'uz':\n        case 'vo':\n        case 'vun':\n        case 'wae':\n        case 'xog':\n            if (n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'ak':\n        case 'ln':\n        case 'mg':\n        case 'pa':\n        case 'ti':\n            if (n === Math.floor(n) && n >= 0 && n <= 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'am':\n        case 'as':\n        case 'bn':\n        case 'fa':\n        case 'gu':\n        case 'hi':\n        case 'kn':\n        case 'mr':\n        case 'zu':\n            if (i === 0 || n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'ar':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)\n                return Plural.Few;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)\n                return Plural.Many;\n            return Plural.Other;\n        case 'ast':\n        case 'ca':\n        case 'de':\n        case 'en':\n        case 'et':\n        case 'fi':\n        case 'fy':\n        case 'gl':\n        case 'it':\n        case 'nl':\n        case 'sv':\n        case 'sw':\n        case 'ur':\n        case 'yi':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            return Plural.Other;\n        case 'be':\n            if (n % 10 === 1 && !(n % 100 === 11))\n                return Plural.One;\n            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&\n                !(n % 100 >= 12 && n % 100 <= 14))\n                return Plural.Few;\n            if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||\n                n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'br':\n            if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))\n                return Plural.One;\n            if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))\n                return Plural.Two;\n            if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&\n                !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||\n                    n % 100 >= 90 && n % 100 <= 99))\n                return Plural.Few;\n            if (!(n === 0) && n % 1e6 === 0)\n                return Plural.Many;\n            return Plural.Other;\n        case 'bs':\n        case 'hr':\n        case 'sr':\n            if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14) ||\n                f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&\n                    !(f % 100 >= 12 && f % 100 <= 14))\n                return Plural.Few;\n            return Plural.Other;\n        case 'cs':\n        case 'sk':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)\n                return Plural.Few;\n            if (!(v === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'cy':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n === 3)\n                return Plural.Few;\n            if (n === 6)\n                return Plural.Many;\n            return Plural.Other;\n        case 'da':\n            if (n === 1 || !(t === 0) && (i === 0 || i === 1))\n                return Plural.One;\n            return Plural.Other;\n        case 'dsb':\n        case 'hsb':\n            if (v === 0 && i % 100 === 1 || f % 100 === 1)\n                return Plural.One;\n            if (v === 0 && i % 100 === 2 || f % 100 === 2)\n                return Plural.Two;\n            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||\n                f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)\n                return Plural.Few;\n            return Plural.Other;\n        case 'ff':\n        case 'fr':\n        case 'hy':\n        case 'kab':\n            if (i === 0 || i === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'fil':\n            if (v === 0 && (i === 1 || i === 2 || i === 3) ||\n                v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||\n                !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))\n                return Plural.One;\n            return Plural.Other;\n        case 'ga':\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n === Math.floor(n) && n >= 3 && n <= 6)\n                return Plural.Few;\n            if (n === Math.floor(n) && n >= 7 && n <= 10)\n                return Plural.Many;\n            return Plural.Other;\n        case 'gd':\n            if (n === 1 || n === 11)\n                return Plural.One;\n            if (n === 2 || n === 12)\n                return Plural.Two;\n            if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))\n                return Plural.Few;\n            return Plural.Other;\n        case 'gv':\n            if (v === 0 && i % 10 === 1)\n                return Plural.One;\n            if (v === 0 && i % 10 === 2)\n                return Plural.Two;\n            if (v === 0 &&\n                (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))\n                return Plural.Few;\n            if (!(v === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'he':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (i === 2 && v === 0)\n                return Plural.Two;\n            if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)\n                return Plural.Many;\n            return Plural.Other;\n        case 'is':\n            if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))\n                return Plural.One;\n            return Plural.Other;\n        case 'ksh':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'kw':\n        case 'naq':\n        case 'se':\n        case 'smn':\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            return Plural.Other;\n        case 'lag':\n            if (n === 0)\n                return Plural.Zero;\n            if ((i === 0 || i === 1) && !(n === 0))\n                return Plural.One;\n            return Plural.Other;\n        case 'lt':\n            if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))\n                return Plural.One;\n            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&\n                !(n % 100 >= 11 && n % 100 <= 19))\n                return Plural.Few;\n            if (!(f === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'lv':\n        case 'prg':\n            if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||\n                v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)\n                return Plural.Zero;\n            if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||\n                !(v === 2) && f % 10 === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'mk':\n            if (v === 0 && i % 10 === 1 || f % 10 === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'mt':\n            if (n === 1)\n                return Plural.One;\n            if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)\n                return Plural.Few;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)\n                return Plural.Many;\n            return Plural.Other;\n        case 'pl':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14))\n                return Plural.Few;\n            if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||\n                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'pt':\n            if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))\n                return Plural.One;\n            return Plural.Other;\n        case 'ro':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (!(v === 0) || n === 0 ||\n                !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)\n                return Plural.Few;\n            return Plural.Other;\n        case 'ru':\n        case 'uk':\n            if (v === 0 && i % 10 === 1 && !(i % 100 === 11))\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14))\n                return Plural.Few;\n            if (v === 0 && i % 10 === 0 ||\n                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'shi':\n            if (i === 0 || n === 1)\n                return Plural.One;\n            if (n === Math.floor(n) && n >= 2 && n <= 10)\n                return Plural.Few;\n            return Plural.Other;\n        case 'si':\n            if (n === 0 || n === 1 || i === 0 && f === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'sl':\n            if (v === 0 && i % 100 === 1)\n                return Plural.One;\n            if (v === 0 && i % 100 === 2)\n                return Plural.Two;\n            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))\n                return Plural.Few;\n            return Plural.Other;\n        case 'tzm':\n            if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)\n                return Plural.One;\n            return Plural.Other;\n        // When there is no specification, the default is always \"other\"\n        // Spec: http://cldr.unicode.org/index/cldr-spec/plural-rules\n        // > other (required—general plural form — also used if the language only has a single form)\n        default:\n            return Plural.Other;\n    }\n}\n/**\n * @param {?} value\n * @param {?} locale\n * @return {?}\n */\nfunction getPluralCategory(value, locale) {\n    /** @type {?} */\n    const plural = getPluralCase(locale, value);\n    switch (plural) {\n        case Plural.Zero:\n            return 'zero';\n        case Plural.One:\n            return 'one';\n        case Plural.Two:\n            return 'two';\n        case Plural.Few:\n            return 'few';\n        case Plural.Many:\n            return 'many';\n        default:\n            return 'other';\n    }\n}\n/**\n * Returns the index of the current case of an ICU expression depending on the main binding value\n *\n * @param {?} icuExpression\n * @param {?} bindingValue The value of the main binding used by this ICU expression\n * @return {?}\n */\nfunction getCaseIndex(icuExpression, bindingValue) {\n    /** @type {?} */\n    let index = icuExpression.cases.indexOf(bindingValue);\n    if (index === -1) {\n        switch (icuExpression.type) {\n            case 1 /* plural */: {\n                // TODO(ocombe): replace this hard-coded value by the real LOCALE_ID value\n                /** @type {?} */\n                const locale = 'en-US';\n                /** @type {?} */\n                const resolvedCase = getPluralCategory(bindingValue, locale);\n                index = icuExpression.cases.indexOf(resolvedCase);\n                if (index === -1 && resolvedCase !== 'other') {\n                    index = icuExpression.cases.indexOf('other');\n                }\n                break;\n            }\n            case 0 /* select */: {\n                index = icuExpression.cases.indexOf('other');\n                break;\n            }\n        }\n    }\n    return index;\n}\n/**\n * Generate the OpCodes for ICU expressions.\n *\n * @param {?} tIcus\n * @param {?} icuExpression\n * @param {?} startIndex\n * @param {?} expandoStartIndex\n * @return {?}\n */\nfunction icuStart(tIcus, icuExpression, startIndex, expandoStartIndex) {\n    /** @type {?} */\n    const createCodes = [];\n    /** @type {?} */\n    const removeCodes = [];\n    /** @type {?} */\n    const updateCodes = [];\n    /** @type {?} */\n    const vars = [];\n    /** @type {?} */\n    const childIcus = [];\n    for (let i = 0; i < icuExpression.values.length; i++) {\n        // Each value is an array of strings & other ICU expressions\n        /** @type {?} */\n        const valueArr = icuExpression.values[i];\n        /** @type {?} */\n        const nestedIcus = [];\n        for (let j = 0; j < valueArr.length; j++) {\n            /** @type {?} */\n            const value = valueArr[j];\n            if (typeof value !== 'string') {\n                // It is an nested ICU expression\n                /** @type {?} */\n                const icuIndex = nestedIcus.push((/** @type {?} */ (value))) - 1;\n                // Replace nested ICU expression by a comment node\n                valueArr[j] = `<!--�${icuIndex}�-->`;\n            }\n        }\n        /** @type {?} */\n        const icuCase = parseIcuCase(valueArr.join(''), startIndex, nestedIcus, tIcus, expandoStartIndex);\n        createCodes.push(icuCase.create);\n        removeCodes.push(icuCase.remove);\n        updateCodes.push(icuCase.update);\n        vars.push(icuCase.vars);\n        childIcus.push(icuCase.childIcus);\n    }\n    /** @type {?} */\n    const tIcu = {\n        type: icuExpression.type,\n        vars,\n        childIcus,\n        cases: icuExpression.cases,\n        create: createCodes,\n        remove: removeCodes,\n        update: updateCodes\n    };\n    tIcus.push(tIcu);\n    // Adding the maximum possible of vars needed (based on the cases with the most vars)\n    i18nVarsCount += Math.max(...vars);\n}\n/**\n * Transforms a string template into an HTML template and a list of instructions used to update\n * attributes or nodes that contain bindings.\n *\n * @param {?} unsafeHtml The string to parse\n * @param {?} parentIndex\n * @param {?} nestedIcus\n * @param {?} tIcus\n * @param {?} expandoStartIndex\n * @return {?}\n */\nfunction parseIcuCase(unsafeHtml, parentIndex, nestedIcus, tIcus, expandoStartIndex) {\n    /** @type {?} */\n    const inertBodyHelper = new InertBodyHelper(document);\n    /** @type {?} */\n    const inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n    if (!inertBodyElement) {\n        throw new Error('Unable to generate inert body element');\n    }\n    /** @type {?} */\n    const wrapper = (/** @type {?} */ (getTemplateContent((/** @type {?} */ (inertBodyElement))))) || inertBodyElement;\n    /** @type {?} */\n    const opCodes = { vars: 0, childIcus: [], create: [], remove: [], update: [] };\n    parseNodes(wrapper.firstChild, opCodes, parentIndex, nestedIcus, tIcus, expandoStartIndex);\n    return opCodes;\n}\n/** @type {?} */\nconst NESTED_ICU = /�(\\d+)�/;\n/**\n * Parses a node, its children and its siblings, and generates the mutate & update OpCodes.\n *\n * @param {?} currentNode The first node to parse\n * @param {?} icuCase The data for the ICU expression case that contains those nodes\n * @param {?} parentIndex Index of the current node's parent\n * @param {?} nestedIcus Data for the nested ICU expressions that this case contains\n * @param {?} tIcus Data for all ICU expressions of the current message\n * @param {?} expandoStartIndex Expando start index for the current ICU expression\n * @return {?}\n */\nfunction parseNodes(currentNode, icuCase, parentIndex, nestedIcus, tIcus, expandoStartIndex) {\n    if (currentNode) {\n        /** @type {?} */\n        const nestedIcusToCreate = [];\n        while (currentNode) {\n            /** @type {?} */\n            const nextNode = currentNode.nextSibling;\n            /** @type {?} */\n            const newIndex = expandoStartIndex + ++icuCase.vars;\n            switch (currentNode.nodeType) {\n                case Node.ELEMENT_NODE:\n                    /** @type {?} */\n                    const element = (/** @type {?} */ (currentNode));\n                    /** @type {?} */\n                    const tagName = element.tagName.toLowerCase();\n                    if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n                        // This isn't a valid element, we won't create an element for it\n                        icuCase.vars--;\n                    }\n                    else {\n                        icuCase.create.push(ELEMENT_MARKER, tagName, newIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                        /** @type {?} */\n                        const elAttrs = element.attributes;\n                        for (let i = 0; i < elAttrs.length; i++) {\n                            /** @type {?} */\n                            const attr = (/** @type {?} */ (elAttrs.item(i)));\n                            /** @type {?} */\n                            const lowerAttrName = attr.name.toLowerCase();\n                            /** @type {?} */\n                            const hasBinding = !!attr.value.match(BINDING_REGEXP);\n                            // we assume the input string is safe, unless it's using a binding\n                            if (hasBinding) {\n                                if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {\n                                    if (URI_ATTRS[lowerAttrName]) {\n                                        addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name, _sanitizeUrl), icuCase.update);\n                                    }\n                                    else if (SRCSET_ATTRS[lowerAttrName]) {\n                                        addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name, sanitizeSrcset), icuCase.update);\n                                    }\n                                    else {\n                                        addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name), icuCase.update);\n                                    }\n                                }\n                                else {\n                                    ngDevMode &&\n                                        console.warn(`WARNING: ignoring unsafe attribute value ${lowerAttrName} on element ${tagName} (see http://g.co/ng/security#xss)`);\n                                }\n                            }\n                            else {\n                                icuCase.create.push(newIndex << 3 /* SHIFT_REF */ | 4 /* Attr */, attr.name, attr.value);\n                            }\n                        }\n                        // Parse the children of this node (if any)\n                        parseNodes(currentNode.firstChild, icuCase, newIndex, nestedIcus, tIcus, expandoStartIndex);\n                        // Remove the parent node after the children\n                        icuCase.remove.push(newIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n                    }\n                    break;\n                case Node.TEXT_NODE:\n                    /** @type {?} */\n                    const value = currentNode.textContent || '';\n                    /** @type {?} */\n                    const hasBinding = value.match(BINDING_REGEXP);\n                    icuCase.create.push(hasBinding ? '' : value, newIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                    icuCase.remove.push(newIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n                    if (hasBinding) {\n                        addAllToArray(generateBindingUpdateOpCodes(value, newIndex), icuCase.update);\n                    }\n                    break;\n                case Node.COMMENT_NODE:\n                    // Check if the comment node is a placeholder for a nested ICU\n                    /** @type {?} */\n                    const match = NESTED_ICU.exec(currentNode.textContent || '');\n                    if (match) {\n                        /** @type {?} */\n                        const nestedIcuIndex = parseInt(match[1], 10);\n                        /** @type {?} */\n                        const newLocal = ngDevMode ? `nested ICU ${nestedIcuIndex}` : '';\n                        // Create the comment node that will anchor the ICU expression\n                        icuCase.create.push(COMMENT_MARKER, newLocal, newIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                        /** @type {?} */\n                        const nestedIcu = nestedIcus[nestedIcuIndex];\n                        nestedIcusToCreate.push([nestedIcu, newIndex]);\n                    }\n                    else {\n                        // We do not handle any other type of comment\n                        icuCase.vars--;\n                    }\n                    break;\n                default:\n                    // We do not handle any other type of element\n                    icuCase.vars--;\n            }\n            currentNode = (/** @type {?} */ (nextNode));\n        }\n        for (let i = 0; i < nestedIcusToCreate.length; i++) {\n            /** @type {?} */\n            const nestedIcu = nestedIcusToCreate[i][0];\n            /** @type {?} */\n            const nestedIcuNodeIndex = nestedIcusToCreate[i][1];\n            icuStart(tIcus, nestedIcu, nestedIcuNodeIndex, expandoStartIndex + icuCase.vars);\n            // Since this is recursive, the last TIcu that was pushed is the one we want\n            /** @type {?} */\n            const nestTIcuIndex = tIcus.length - 1;\n            icuCase.vars += Math.max(...tIcus[nestTIcuIndex].vars);\n            icuCase.childIcus.push(nestTIcuIndex);\n            /** @type {?} */\n            const mask = getBindingMask(nestedIcu);\n            icuCase.update.push(toMaskBit(nestedIcu.mainBinding), // mask of the main binding\n            3, // skip 3 opCodes if not changed\n            -1 - nestedIcu.mainBinding, nestedIcuNodeIndex << 2 /* SHIFT_REF */ | 2 /* IcuSwitch */, nestTIcuIndex, mask, // mask of all the bindings of this ICU expression\n            2, // skip 2 opCodes if not changed\n            nestedIcuNodeIndex << 2 /* SHIFT_REF */ | 3 /* IcuUpdate */, nestTIcuIndex);\n            icuCase.remove.push(nestTIcuIndex << 3 /* SHIFT_REF */ | 6 /* RemoveNestedIcu */, nestedIcuNodeIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n        }\n    }\n}\n/** @type {?} */\nlet TRANSLATIONS = {};\n/**\n * Set the configuration for `i18nLocalize`.\n *\n * @deprecated this method is temporary & should not be used as it will be removed soon\n * @param {?=} options\n * @return {?}\n */\nfunction i18nConfigureLocalize(options = {\n    translations: {}\n}) {\n    TRANSLATIONS = options.translations;\n}\n/** @type {?} */\nconst LOCALIZE_PH_REGEXP = /\\{\\$(.*?)\\}/g;\n/**\n * A goog.getMsg-like function for users that do not use Closure.\n *\n * This method is required as a *temporary* measure to prevent i18n tests from being blocked while\n * running outside of Closure Compiler. This method will not be needed once runtime translation\n * service support is introduced.\n *\n * \\@publicApi\n * @deprecated this method is temporary & should not be used as it will be removed soon\n * @param {?} input\n * @param {?=} placeholders\n * @return {?}\n */\nfunction ɵɵi18nLocalize(input, placeholders = {}) {\n    if (typeof TRANSLATIONS[input] !== 'undefined') { // to account for empty string\n        input = TRANSLATIONS[input];\n    }\n    return Object.keys(placeholders).length ?\n        input.replace(LOCALIZE_PH_REGEXP, (/**\n         * @param {?} match\n         * @param {?} key\n         * @return {?}\n         */\n        (match, key) => placeholders[key] || '')) :\n        input;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst COMPONENT_FACTORY_RESOLVER = {\n    provide: ComponentFactoryResolver,\n    useClass: ComponentFactoryResolver$1,\n    deps: [NgModuleRef],\n};\n/**\n * @template T\n */\nclass NgModuleRef$1 extends NgModuleRef {\n    /**\n     * @param {?} ngModuleType\n     * @param {?} _parent\n     */\n    constructor(ngModuleType, _parent) {\n        super();\n        this._parent = _parent;\n        // tslint:disable-next-line:require-internal-with-underscore\n        this._bootstrapComponents = [];\n        this.injector = this;\n        this.destroyCbs = [];\n        /** @type {?} */\n        /** @nocollapse */ const ngModuleDef = getNgModuleDef(ngModuleType);\n        ngDevMode && assertDefined(ngModuleDef, `NgModule '${stringify(ngModuleType)}' is not a subtype of 'NgModuleType'.`);\n        this._bootstrapComponents = maybeUnwrapFn((/** @type {?} */ (ngModuleDef)).bootstrap);\n        /** @type {?} */\n        const additionalProviders = [\n            {\n                provide: NgModuleRef,\n                useValue: this,\n            },\n            COMPONENT_FACTORY_RESOLVER\n        ];\n        this._r3Injector = (/** @type {?} */ (createInjector(ngModuleType, _parent, additionalProviders, stringify(ngModuleType))));\n        this.instance = this.get(ngModuleType);\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} injectFlags\n     * @return {?}\n     */\n    get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND, injectFlags = InjectFlags.Default) {\n        if (token === Injector || token === NgModuleRef || token === INJECTOR) {\n            return this;\n        }\n        return this._r3Injector.get(token, notFoundValue, injectFlags);\n    }\n    /**\n     * @return {?}\n     */\n    get componentFactoryResolver() {\n        return this.get(ComponentFactoryResolver);\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n        /** @type {?} */\n        const injector = this._r3Injector;\n        !injector.destroyed && injector.destroy();\n        (/** @type {?} */ (this.destroyCbs)).forEach((/**\n         * @param {?} fn\n         * @return {?}\n         */\n        fn => fn()));\n        this.destroyCbs = null;\n    }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    onDestroy(callback) {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n        (/** @type {?} */ (this.destroyCbs)).push(callback);\n    }\n}\n/**\n * @template T\n */\nclass NgModuleFactory$1 extends NgModuleFactory {\n    /**\n     * @param {?} moduleType\n     */\n    constructor(moduleType) {\n        super();\n        this.moduleType = moduleType;\n    }\n    /**\n     * @param {?} parentInjector\n     * @return {?}\n     */\n    create(parentInjector) {\n        return new NgModuleRef$1(this.moduleType, parentInjector);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Adds decorator, constructor, and property metadata to a given type via static metadata fields\n * on the type.\n *\n * These metadata fields can later be read with Angular's `ReflectionCapabilities` API.\n *\n * Calls to `setClassMetadata` can be marked as pure, resulting in the metadata assignments being\n * tree-shaken away during production builds.\n * @param {?} type\n * @param {?} decorators\n * @param {?} ctorParameters\n * @param {?} propDecorators\n * @return {?}\n */\nfunction setClassMetadata(type, decorators, ctorParameters, propDecorators) {\n    return (/** @type {?} */ (noSideEffects((/**\n     * @return {?}\n     */\n    () => {\n        /** @type {?} */\n        const clazz = (/** @type {?} */ (type));\n        // We determine whether a class has its own metadata by taking the metadata from the parent\n        // constructor and checking whether it's the same as the subclass metadata below. We can't use\n        // `hasOwnProperty` here because it doesn't work correctly in IE10 for static fields that are\n        // defined by TS. See https://github.com/angular/angular/pull/28439#issuecomment-459349218.\n        /** @type {?} */\n        const parentPrototype = clazz.prototype ? Object.getPrototypeOf(clazz.prototype) : null;\n        /** @type {?} */\n        const parentConstructor = parentPrototype && parentPrototype.constructor;\n        if (decorators !== null) {\n            if (clazz.decorators !== undefined &&\n                (!parentConstructor || parentConstructor.decorators !== clazz.decorators)) {\n                clazz.decorators.push(...decorators);\n            }\n            else {\n                clazz.decorators = decorators;\n            }\n        }\n        if (ctorParameters !== null) {\n            // Rather than merging, clobber the existing parameters. If other projects exist which use\n            // tsickle-style annotations and reflect over them in the same way, this could cause issues,\n            // but that is vanishingly unlikely.\n            clazz.ctorParameters = ctorParameters;\n        }\n        if (propDecorators !== null) {\n            // The property decorator objects are merged as it is possible different fields have different\n            // decorator types. Decorators on individual fields are not merged, as it's also incredibly\n            // unlikely that a field will be decorated both with an Angular decorator and a non-Angular\n            // decorator that's also been downleveled.\n            if (clazz.propDecorators !== undefined &&\n                (!parentConstructor || parentConstructor.propDecorators !== clazz.propDecorators)) {\n                clazz.propDecorators = Object.assign({}, clazz.propDecorators, propDecorators);\n            }\n            else {\n                clazz.propDecorators = propDecorators;\n            }\n        }\n    }))));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Bindings for pure functions are stored after regular bindings.\n *\n * |------consts------|---------vars---------|                 |----- hostVars (dir1) ------|\n * ------------------------------------------------------------------------------------------\n * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |\n * ------------------------------------------------------------------------------------------\n *                    ^                      ^\n *      TView.bindingStartIndex      TView.expandoStartIndex\n *\n * Pure function instructions are given an offset from the binding root. Adding the offset to the\n * binding root gives the first index where the bindings are stored. In component views, the binding\n * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +\n * any directive instances + any hostVars in directives evaluated before it.\n *\n * See VIEW_DATA.md for more information about host binding resolution.\n */\n/**\n * If the value hasn't been saved, calls the pure function to store and return the\n * value. If it has been saved, returns the saved value.\n *\n * \\@codeGenApi\n * @template T\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn Function that returns a value\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} value\n *\n */\nfunction ɵɵpureFunction0(slotOffset, pureFn, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    return isCreationMode() ?\n        updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) :\n        getBinding(lView, bindingIndex);\n}\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * \\@codeGenApi\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn Function that returns an updated value\n * @param {?} exp Updated expression value\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n *\n */\nfunction ɵɵpureFunction1(slotOffset, pureFn, exp, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    return bindingUpdated(lView, bindingIndex, exp) ?\n        updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) :\n        getBinding(lView, bindingIndex + 1);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * \\@codeGenApi\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n *\n */\nfunction ɵɵpureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    return bindingUpdated2(lView, bindingIndex, exp1, exp2) ?\n        updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) :\n        getBinding(lView, bindingIndex + 2);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * \\@codeGenApi\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n *\n */\nfunction ɵɵpureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ?\n        updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) :\n        getBinding(lView, bindingIndex + 3);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * \\@codeGenApi\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n *\n */\nfunction ɵɵpureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ?\n        updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) :\n        getBinding(lView, bindingIndex + 4);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * \\@codeGenApi\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n *\n */\nfunction ɵɵpureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated(lView, bindingIndex + 4, exp5) || different ?\n        updateBinding(lView, bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) :\n            pureFn(exp1, exp2, exp3, exp4, exp5)) :\n        getBinding(lView, bindingIndex + 5);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * \\@codeGenApi\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n *\n */\nfunction ɵɵpureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ?\n        updateBinding(lView, bindingIndex + 6, thisArg ?\n            pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) :\n        getBinding(lView, bindingIndex + 6);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * \\@codeGenApi\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?} exp7\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n *\n */\nfunction ɵɵpureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    let different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ?\n        updateBinding(lView, bindingIndex + 7, thisArg ?\n            pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) :\n        getBinding(lView, bindingIndex + 7);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * \\@codeGenApi\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?} exp7\n * @param {?} exp8\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n *\n */\nfunction ɵɵpureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ?\n        updateBinding(lView, bindingIndex + 8, thisArg ?\n            pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) :\n        getBinding(lView, bindingIndex + 8);\n}\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * \\@codeGenApi\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param {?} exps An array of binding values\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n *\n */\nfunction ɵɵpureFunctionV(slotOffset, pureFn, exps, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    let bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    let different = false;\n    /** @type {?} */\n    const lView = getLView();\n    for (let i = 0; i < exps.length; i++) {\n        bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);\n    }\n    return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) :\n        getBinding(lView, bindingIndex);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Create a pipe.\n *\n * \\@codeGenApi\n * @param {?} index Pipe index where the pipe will be stored.\n * @param {?} pipeName The name of the pipe\n * @return {?} T the instance of the pipe.\n *\n */\nfunction ɵɵpipe(index, pipeName) {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    /** @type {?} */\n    let pipeDef;\n    /** @type {?} */\n    const adjustedIndex = index + HEADER_OFFSET;\n    if (tView.firstTemplatePass) {\n        pipeDef = getPipeDef$1(pipeName, tView.pipeRegistry);\n        tView.data[adjustedIndex] = pipeDef;\n        if (pipeDef.onDestroy) {\n            (tView.destroyHooks || (tView.destroyHooks = [])).push(adjustedIndex, pipeDef.onDestroy);\n        }\n    }\n    else {\n        pipeDef = (/** @type {?} */ (tView.data[adjustedIndex]));\n    }\n    /** @type {?} */\n    const pipeInstance = pipeDef.factory(null);\n    store(index, pipeInstance);\n    return pipeInstance;\n}\n/**\n * Searches the pipe registry for a pipe with the given name. If one is found,\n * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.\n *\n * \\@publicApi\n * @param {?} name Name of pipe to resolve\n * @param {?} registry Full list of available pipes\n * @return {?} Matching PipeDef\n *\n */\nfunction getPipeDef$1(name, registry) {\n    if (registry) {\n        for (let i = registry.length - 1; i >= 0; i--) {\n            /** @type {?} */\n            const pipeDef = registry[i];\n            if (name === pipeDef.name) {\n                return pipeDef;\n            }\n        }\n    }\n    throw new Error(`The pipe '${name}' could not be found!`);\n}\n/**\n * Invokes a pipe with 1 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * \\@codeGenApi\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n *\n * @return {?}\n */\nfunction ɵɵpipeBind1(index, slotOffset, v1) {\n    /** @type {?} */\n    const pipeInstance = ɵɵload(index);\n    return unwrapValue$1(isPure(index) ? ɵɵpureFunction1(slotOffset, pipeInstance.transform, v1, pipeInstance) :\n        pipeInstance.transform(v1));\n}\n/**\n * Invokes a pipe with 2 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * \\@codeGenApi\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n *\n * @return {?}\n */\nfunction ɵɵpipeBind2(index, slotOffset, v1, v2) {\n    /** @type {?} */\n    const pipeInstance = ɵɵload(index);\n    return unwrapValue$1(isPure(index) ? ɵɵpureFunction2(slotOffset, pipeInstance.transform, v1, v2, pipeInstance) :\n        pipeInstance.transform(v1, v2));\n}\n/**\n * Invokes a pipe with 3 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * \\@codeGenApi\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n * @param {?} v3 4rd argument to {\\@link PipeTransform#transform}.\n *\n * @return {?}\n */\nfunction ɵɵpipeBind3(index, slotOffset, v1, v2, v3) {\n    /** @type {?} */\n    const pipeInstance = ɵɵload(index);\n    return unwrapValue$1(isPure(index) ?\n        ɵɵpureFunction3(slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) :\n        pipeInstance.transform(v1, v2, v3));\n}\n/**\n * Invokes a pipe with 4 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * \\@codeGenApi\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n * @param {?} v3 3rd argument to {\\@link PipeTransform#transform}.\n * @param {?} v4 4th argument to {\\@link PipeTransform#transform}.\n *\n * @return {?}\n */\nfunction ɵɵpipeBind4(index, slotOffset, v1, v2, v3, v4) {\n    /** @type {?} */\n    const pipeInstance = ɵɵload(index);\n    return unwrapValue$1(isPure(index) ?\n        ɵɵpureFunction4(slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) :\n        pipeInstance.transform(v1, v2, v3, v4));\n}\n/**\n * Invokes a pipe with variable number of arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * \\@codeGenApi\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} values Array of arguments to pass to {\\@link PipeTransform#transform} method.\n *\n * @return {?}\n */\nfunction ɵɵpipeBindV(index, slotOffset, values) {\n    /** @type {?} */\n    const pipeInstance = ɵɵload(index);\n    return unwrapValue$1(isPure(index) ? ɵɵpureFunctionV(slotOffset, pipeInstance.transform, values, pipeInstance) :\n        pipeInstance.transform.apply(pipeInstance, values));\n}\n/**\n * @param {?} index\n * @return {?}\n */\nfunction isPure(index) {\n    return ((/** @type {?} */ (getLView()[TVIEW].data[index + HEADER_OFFSET]))).pure;\n}\n/**\n * Unwrap the output of a pipe transformation.\n * In order to trick change detection into considering that the new value is always different from\n * the old one, the old value is overwritten by NO_CHANGE.\n *\n * @param {?} newValue the pipe transformation output.\n * @return {?}\n */\nfunction unwrapValue$1(newValue) {\n    if (WrappedValue.isWrapped(newValue)) {\n        newValue = WrappedValue.unwrap(newValue);\n        /** @type {?} */\n        const lView = getLView();\n        // The NO_CHANGE value needs to be written at the index where the impacted binding value is\n        // stored\n        /** @type {?} */\n        const bindingToInvalidateIdx = lView[BINDING_INDEX];\n        lView[bindingToInvalidateIdx] = NO_CHANGE;\n    }\n    return newValue;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Use in directives and components to emit custom events synchronously\n * or asynchronously, and register handlers for those events by subscribing\n * to an instance.\n *\n * \\@usageNotes\n *\n * In the following example, a component defines two output properties\n * that create event emitters. When the title is clicked, the emitter\n * emits an open or close event to toggle the current visibility state.\n *\n * ```\n * \\@Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n * \\@Output() open: EventEmitter<any> = new EventEmitter();\n * \\@Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * Access the event object with the `$event` argument passed to the output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * ### Notes\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n *\n * \\@publicApi\n * @template T\n */\nclass EventEmitter extends Subject {\n    // tslint:disable-line\n    /**\n     * Creates an instance of this class that can\n     * deliver events synchronously or asynchronously.\n     *\n     * @param {?=} isAsync When true, deliver events asynchronously.\n     *\n     */\n    constructor(isAsync = false) {\n        super();\n        this.__isAsync = isAsync;\n    }\n    /**\n     * Emits an event containing a given value.\n     * @param {?=} value The value to emit.\n     * @return {?}\n     */\n    emit(value) { super.next(value); }\n    /**\n     * Registers handlers for events emitted by this instance.\n     * @param {?=} generatorOrNext When supplied, a custom handler for emitted events.\n     * @param {?=} error When supplied, a custom handler for an error notification\n     * from this emitter.\n     * @param {?=} complete When supplied, a custom handler for a completion\n     * notification from this emitter.\n     * @return {?}\n     */\n    subscribe(generatorOrNext, error, complete) {\n        /** @type {?} */\n        let schedulerFn;\n        /** @type {?} */\n        let errorFn = (/**\n         * @param {?} err\n         * @return {?}\n         */\n        (err) => null);\n        /** @type {?} */\n        let completeFn = (/**\n         * @return {?}\n         */\n        () => null);\n        if (generatorOrNext && typeof generatorOrNext === 'object') {\n            schedulerFn = this.__isAsync ? (/**\n             * @param {?} value\n             * @return {?}\n             */\n            (value) => {\n                setTimeout((/**\n                 * @return {?}\n                 */\n                () => generatorOrNext.next(value)));\n            }) : (/**\n             * @param {?} value\n             * @return {?}\n             */\n            (value) => { generatorOrNext.next(value); });\n            if (generatorOrNext.error) {\n                errorFn = this.__isAsync ? (/**\n                 * @param {?} err\n                 * @return {?}\n                 */\n                (err) => { setTimeout((/**\n                 * @return {?}\n                 */\n                () => generatorOrNext.error(err))); }) :\n                    (/**\n                     * @param {?} err\n                     * @return {?}\n                     */\n                    (err) => { generatorOrNext.error(err); });\n            }\n            if (generatorOrNext.complete) {\n                completeFn = this.__isAsync ? (/**\n                 * @return {?}\n                 */\n                () => { setTimeout((/**\n                 * @return {?}\n                 */\n                () => generatorOrNext.complete())); }) :\n                    (/**\n                     * @return {?}\n                     */\n                    () => { generatorOrNext.complete(); });\n            }\n        }\n        else {\n            schedulerFn = this.__isAsync ? (/**\n             * @param {?} value\n             * @return {?}\n             */\n            (value) => { setTimeout((/**\n             * @return {?}\n             */\n            () => generatorOrNext(value))); }) :\n                (/**\n                 * @param {?} value\n                 * @return {?}\n                 */\n                (value) => { generatorOrNext(value); });\n            if (error) {\n                errorFn =\n                    this.__isAsync ? (/**\n                     * @param {?} err\n                     * @return {?}\n                     */\n                    (err) => { setTimeout((/**\n                     * @return {?}\n                     */\n                    () => error(err))); }) : (/**\n                     * @param {?} err\n                     * @return {?}\n                     */\n                    (err) => { error(err); });\n            }\n            if (complete) {\n                completeFn =\n                    this.__isAsync ? (/**\n                     * @return {?}\n                     */\n                    () => { setTimeout((/**\n                     * @return {?}\n                     */\n                    () => complete())); }) : (/**\n                     * @return {?}\n                     */\n                    () => { complete(); });\n            }\n        }\n        /** @type {?} */\n        const sink = super.subscribe(schedulerFn, errorFn, completeFn);\n        if (generatorOrNext instanceof Subscription) {\n            generatorOrNext.add(sink);\n        }\n        return sink;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {\\@link ViewChildren}, {\\@link ContentChildren}, and {\\@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * \\@usageNotes\n * ### Example\n * ```typescript\n * \\@Component({...})\n * class Container {\n * \\@ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n *\n * \\@publicApi\n * @template T\n */\nclass QueryList {\n    constructor() {\n        this.dirty = true;\n        this._results = [];\n        this.changes = new EventEmitter();\n        this.length = 0;\n    }\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     * @template U\n     * @param {?} fn\n     * @return {?}\n     */\n    map(fn) { return this._results.map(fn); }\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     * @param {?} fn\n     * @return {?}\n     */\n    filter(fn) {\n        return this._results.filter(fn);\n    }\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     * @param {?} fn\n     * @return {?}\n     */\n    find(fn) {\n        return this._results.find(fn);\n    }\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     * @template U\n     * @param {?} fn\n     * @param {?} init\n     * @return {?}\n     */\n    reduce(fn, init) {\n        return this._results.reduce(fn, init);\n    }\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     * @param {?} fn\n     * @return {?}\n     */\n    forEach(fn) { this._results.forEach(fn); }\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     * @param {?} fn\n     * @return {?}\n     */\n    some(fn) {\n        return this._results.some(fn);\n    }\n    /**\n     * Returns a copy of the internal results list as an Array.\n     * @return {?}\n     */\n    toArray() { return this._results.slice(); }\n    /**\n     * @return {?}\n     */\n    [getSymbolIterator()]() { return ((/** @type {?} */ (this._results)))[getSymbolIterator()](); }\n    /**\n     * @return {?}\n     */\n    toString() { return this._results.toString(); }\n    /**\n     * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that\n     * on change detection, it will not notify of changes to the queries, unless a new change\n     * occurs.\n     *\n     * @param {?} resultsTree The results tree to store\n     * @return {?}\n     */\n    reset(resultsTree) {\n        this._results = flatten(resultsTree);\n        ((/** @type {?} */ (this))).dirty = false;\n        ((/** @type {?} */ (this))).length = this._results.length;\n        ((/** @type {?} */ (this))).last = this._results[this.length - 1];\n        ((/** @type {?} */ (this))).first = this._results[0];\n    }\n    /**\n     * Triggers a change event by emitting on the `changes` {\\@link EventEmitter}.\n     * @return {?}\n     */\n    notifyOnChanges() { ((/** @type {?} */ (this.changes))).emit(this); }\n    /**\n     * internal\n     * @return {?}\n     */\n    setDirty() { ((/** @type {?} */ (this))).dirty = true; }\n    /**\n     * internal\n     * @return {?}\n     */\n    destroy() {\n        ((/** @type {?} */ (this.changes))).complete();\n        ((/** @type {?} */ (this.changes))).unsubscribe();\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass LQueries_ {\n    /**\n     * @param {?} parent\n     * @param {?} shallow\n     * @param {?} deep\n     */\n    constructor(parent, shallow, deep) {\n        this.parent = parent;\n        this.shallow = shallow;\n        this.deep = deep;\n    }\n    /**\n     * @template T\n     * @param {?} queryList\n     * @param {?} predicate\n     * @param {?=} descend\n     * @param {?=} read\n     * @return {?}\n     */\n    track(queryList, predicate, descend, read) {\n        if (descend) {\n            this.deep = createQuery(this.deep, queryList, predicate, read != null ? read : null);\n        }\n        else {\n            this.shallow = createQuery(this.shallow, queryList, predicate, read != null ? read : null);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    clone() { return new LQueries_(this, null, this.deep); }\n    /**\n     * @return {?}\n     */\n    container() {\n        /** @type {?} */\n        const shallowResults = copyQueriesToContainer(this.shallow);\n        /** @type {?} */\n        const deepResults = copyQueriesToContainer(this.deep);\n        return shallowResults || deepResults ? new LQueries_(this, shallowResults, deepResults) : null;\n    }\n    /**\n     * @return {?}\n     */\n    createView() {\n        /** @type {?} */\n        const shallowResults = copyQueriesToView(this.shallow);\n        /** @type {?} */\n        const deepResults = copyQueriesToView(this.deep);\n        return shallowResults || deepResults ? new LQueries_(this, shallowResults, deepResults) : null;\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    insertView(index) {\n        insertView$1(index, this.shallow);\n        insertView$1(index, this.deep);\n    }\n    /**\n     * @param {?} tNode\n     * @return {?}\n     */\n    addNode(tNode) {\n        add(this.deep, tNode, false);\n        add(this.shallow, tNode, false);\n    }\n    /**\n     * @param {?} tNode\n     * @return {?}\n     */\n    insertNodeBeforeViews(tNode) {\n        add(this.deep, tNode, true);\n        add(this.shallow, tNode, true);\n    }\n    /**\n     * @return {?}\n     */\n    removeView() {\n        removeView$1(this.shallow);\n        removeView$1(this.deep);\n    }\n}\n/**\n * @param {?} query\n * @return {?}\n */\nfunction copyQueriesToContainer(query) {\n    /** @type {?} */\n    let result = null;\n    while (query) {\n        /** @type {?} */\n        const containerValues = [];\n        query.values.push(containerValues);\n        /** @type {?} */\n        const clonedQuery = {\n            next: result,\n            list: query.list,\n            predicate: query.predicate,\n            values: containerValues,\n            containerValues: null\n        };\n        result = clonedQuery;\n        query = query.next;\n    }\n    return result;\n}\n/**\n * @param {?} query\n * @return {?}\n */\nfunction copyQueriesToView(query) {\n    /** @type {?} */\n    let result = null;\n    while (query) {\n        /** @type {?} */\n        const clonedQuery = {\n            next: result,\n            list: query.list,\n            predicate: query.predicate,\n            values: [],\n            containerValues: query.values\n        };\n        result = clonedQuery;\n        query = query.next;\n    }\n    return result;\n}\n/**\n * @param {?} index\n * @param {?} query\n * @return {?}\n */\nfunction insertView$1(index, query) {\n    while (query) {\n        ngDevMode && assertViewQueryhasPointerToDeclarationContainer(query);\n        (/** @type {?} */ (query.containerValues)).splice(index, 0, query.values);\n        // mark a query as dirty only when inserted view had matching modes\n        if (query.values.length) {\n            query.list.setDirty();\n        }\n        query = query.next;\n    }\n}\n/**\n * @param {?} query\n * @return {?}\n */\nfunction removeView$1(query) {\n    while (query) {\n        ngDevMode && assertViewQueryhasPointerToDeclarationContainer(query);\n        /** @type {?} */\n        const containerValues = (/** @type {?} */ (query.containerValues));\n        /** @type {?} */\n        const viewValuesIdx = containerValues.indexOf(query.values);\n        /** @type {?} */\n        const removed = containerValues.splice(viewValuesIdx, 1);\n        // mark a query as dirty only when removed view had matching modes\n        ngDevMode && assertEqual(removed.length, 1, 'removed.length');\n        if (removed[0].length) {\n            query.list.setDirty();\n        }\n        query = query.next;\n    }\n}\n/**\n * @param {?} query\n * @return {?}\n */\nfunction assertViewQueryhasPointerToDeclarationContainer(query) {\n    assertDefined(query.containerValues, 'View queries need to have a pointer to container values.');\n}\n/**\n * Iterates over local names for a given node and returns directive index\n * (or -1 if a local name points to an element).\n *\n * @param {?} tNode static data of a node to check\n * @param {?} selector selector to match\n * @return {?} directive index, -1 or null if a selector didn't match any of the local names\n */\nfunction getIdxOfMatchingSelector(tNode, selector) {\n    /** @type {?} */\n    const localNames = tNode.localNames;\n    if (localNames) {\n        for (let i = 0; i < localNames.length; i += 2) {\n            if (localNames[i] === selector) {\n                return (/** @type {?} */ (localNames[i + 1]));\n            }\n        }\n    }\n    return null;\n}\n// TODO: \"read\" should be an AbstractType (FW-486)\n/**\n * @param {?} read\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nfunction queryByReadToken(read, tNode, currentView) {\n    /** @type {?} */\n    const factoryFn = ((/** @type {?} */ (read)))[NG_ELEMENT_ID];\n    if (typeof factoryFn === 'function') {\n        return factoryFn();\n    }\n    else {\n        /** @type {?} */\n        const matchingIdx = locateDirectiveOrProvider(tNode, currentView, (/** @type {?} */ (read)), false, false);\n        if (matchingIdx !== null) {\n            return getNodeInjectable(currentView[TVIEW].data, currentView, matchingIdx, (/** @type {?} */ (tNode)));\n        }\n    }\n    return null;\n}\n/**\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nfunction queryByTNodeType(tNode, currentView) {\n    if (tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */) {\n        return createElementRef(ElementRef, tNode, currentView);\n    }\n    if (tNode.type === 0 /* Container */) {\n        return createTemplateRef(TemplateRef, ElementRef, tNode, currentView);\n    }\n    return null;\n}\n/**\n * @param {?} templateRefToken\n * @param {?} tNode\n * @param {?} currentView\n * @param {?} read\n * @return {?}\n */\nfunction queryByTemplateRef(templateRefToken, tNode, currentView, read) {\n    /** @type {?} */\n    const templateRefResult = ((/** @type {?} */ (templateRefToken)))[NG_ELEMENT_ID]();\n    if (read) {\n        return templateRefResult ? queryByReadToken(read, tNode, currentView) : null;\n    }\n    return templateRefResult;\n}\n/**\n * @param {?} tNode\n * @param {?} currentView\n * @param {?} read\n * @param {?} matchingIdx\n * @return {?}\n */\nfunction queryRead(tNode, currentView, read, matchingIdx) {\n    if (read) {\n        return queryByReadToken(read, tNode, currentView);\n    }\n    if (matchingIdx > -1) {\n        return getNodeInjectable(currentView[TVIEW].data, currentView, matchingIdx, (/** @type {?} */ (tNode)));\n    }\n    // if read token and / or strategy is not specified,\n    // detect it using appropriate tNode type\n    return queryByTNodeType(tNode, currentView);\n}\n/**\n * Add query matches for a given node.\n *\n * @param {?} query The first query in the linked list\n * @param {?} tNode The TNode to match against queries\n * @param {?} insertBeforeContainer Whether or not we should add matches before the last\n * container array. This mode is necessary if the query container had to be created\n * out of order (e.g. a view was created in a constructor)\n * @return {?}\n */\nfunction add(query, tNode, insertBeforeContainer) {\n    /** @type {?} */\n    const currentView = getLView();\n    while (query) {\n        /** @type {?} */\n        const predicate = query.predicate;\n        /** @type {?} */\n        const type = (/** @type {?} */ (predicate.type));\n        if (type) {\n            /** @type {?} */\n            let result = null;\n            if (type === TemplateRef) {\n                result = queryByTemplateRef(type, tNode, currentView, predicate.read);\n            }\n            else {\n                /** @type {?} */\n                const matchingIdx = locateDirectiveOrProvider(tNode, currentView, type, false, false);\n                if (matchingIdx !== null) {\n                    result = queryRead(tNode, currentView, predicate.read, matchingIdx);\n                }\n            }\n            if (result !== null) {\n                addMatch(query, result, insertBeforeContainer);\n            }\n        }\n        else {\n            /** @type {?} */\n            const selector = (/** @type {?} */ (predicate.selector));\n            for (let i = 0; i < selector.length; i++) {\n                /** @type {?} */\n                const matchingIdx = getIdxOfMatchingSelector(tNode, selector[i]);\n                if (matchingIdx !== null) {\n                    /** @type {?} */\n                    const result = queryRead(tNode, currentView, predicate.read, matchingIdx);\n                    if (result !== null) {\n                        addMatch(query, result, insertBeforeContainer);\n                    }\n                }\n            }\n        }\n        query = query.next;\n    }\n}\n/**\n * @param {?} query\n * @param {?} matchingValue\n * @param {?} insertBeforeViewMatches\n * @return {?}\n */\nfunction addMatch(query, matchingValue, insertBeforeViewMatches) {\n    // Views created in constructors may have their container values created too early. In this case,\n    // ensure template node results are spliced before container results. Otherwise, results inside\n    // embedded views will appear before results on parent template nodes when flattened.\n    insertBeforeViewMatches ? query.values.splice(-1, 0, matchingValue) :\n        query.values.push(matchingValue);\n    query.list.setDirty();\n}\n/**\n * @template T\n * @param {?} predicate\n * @param {?} read\n * @return {?}\n */\nfunction createPredicate(predicate, read) {\n    /** @type {?} */\n    const isArray = Array.isArray(predicate);\n    return {\n        type: isArray ? null : (/** @type {?} */ (predicate)),\n        selector: isArray ? (/** @type {?} */ (predicate)) : null,\n        read: read\n    };\n}\n/**\n * @template T\n * @param {?} previous\n * @param {?} queryList\n * @param {?} predicate\n * @param {?} read\n * @return {?}\n */\nfunction createQuery(previous, queryList, predicate, read) {\n    return {\n        next: previous,\n        list: queryList,\n        predicate: createPredicate(predicate, read),\n        values: ((/** @type {?} */ ((/** @type {?} */ (queryList)))))._valuesTree,\n        containerValues: null\n    };\n}\n/**\n * Creates and returns a QueryList.\n *\n * @template T\n * @param {?} predicate The type for which the query will search\n * @param {?} descend Whether or not to descend into children\n * @param {?} read What to save in the query\n * @return {?} QueryList<T>\n */\nfunction query(\n// TODO: \"read\" should be an AbstractType (FW-486)\npredicate, descend, read) {\n    ngDevMode && assertPreviousIsParent(getIsParent());\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const queryList = (/** @type {?} */ (new QueryList()));\n    /** @type {?} */\n    const queries = lView[QUERIES] || (lView[QUERIES] = new LQueries_(null, null, null));\n    queryList._valuesTree = [];\n    queryList._static = false;\n    queries.track(queryList, predicate, descend, read);\n    storeCleanupWithContext(lView, queryList, queryList.destroy);\n    return queryList;\n}\n/**\n * Refreshes a query by combining matches from all active views and removing matches from deleted\n * views.\n *\n * \\@codeGenApi\n * @param {?} queryList\n * @return {?} `true` if a query got dirty during change detection or if this is a static query\n * resolving in creation mode, `false` otherwise.\n *\n */\nfunction ɵɵqueryRefresh(queryList) {\n    /** @type {?} */\n    const queryListImpl = ((/** @type {?} */ ((/** @type {?} */ (queryList)))));\n    /** @type {?} */\n    const creationMode = isCreationMode();\n    // if creation mode and static or update mode and not static\n    if (queryList.dirty && creationMode === queryListImpl._static) {\n        queryList.reset(queryListImpl._valuesTree || []);\n        queryList.notifyOnChanges();\n        return true;\n    }\n    return false;\n}\n/**\n * Creates new QueryList for a static view query.\n *\n * \\@codeGenApi\n * @template T\n * @param {?} predicate The type for which the query will search\n * @param {?} descend Whether or not to descend into children\n * @param {?} read What to save in the query\n *\n * @return {?}\n */\nfunction ɵɵstaticViewQuery(\n// TODO(FW-486): \"read\" should be an AbstractType\npredicate, descend, read) {\n    /** @type {?} */\n    const queryList = (/** @type {?} */ (ɵɵviewQuery(predicate, descend, read)));\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    queryList._static = true;\n    if (!tView.staticViewQueries) {\n        tView.staticViewQueries = true;\n    }\n}\n/**\n * Creates new QueryList, stores the reference in LView and returns QueryList.\n *\n * \\@codeGenApi\n * @template T\n * @param {?} predicate The type for which the query will search\n * @param {?} descend Whether or not to descend into children\n * @param {?} read What to save in the query\n * @return {?} QueryList<T>\n *\n */\nfunction ɵɵviewQuery(\n// TODO(FW-486): \"read\" should be an AbstractType\npredicate, descend, read) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    if (tView.firstTemplatePass) {\n        tView.expandoStartIndex++;\n    }\n    /** @type {?} */\n    const index = getCurrentQueryIndex();\n    /** @type {?} */\n    const viewQuery = query(predicate, descend, read);\n    store(index - HEADER_OFFSET, viewQuery);\n    setCurrentQueryIndex(index + 1);\n    return viewQuery;\n}\n/**\n * Loads current View Query and moves the pointer/index to the next View Query in LView.\n *\n * \\@codeGenApi\n * @template T\n * @return {?}\n */\nfunction ɵɵloadViewQuery() {\n    /** @type {?} */\n    const index = getCurrentQueryIndex();\n    setCurrentQueryIndex(index + 1);\n    return ɵɵload(index - HEADER_OFFSET);\n}\n/**\n * Registers a QueryList, associated with a content query, for later refresh (part of a view\n * refresh).\n *\n * \\@codeGenApi\n * @template T\n * @param {?} directiveIndex Current directive index\n * @param {?} predicate The type for which the query will search\n * @param {?} descend Whether or not to descend into children\n * @param {?} read What to save in the query\n * @return {?} QueryList<T>\n *\n */\nfunction ɵɵcontentQuery(directiveIndex, predicate, descend, \n// TODO(FW-486): \"read\" should be an AbstractType\nread) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const contentQuery = query(predicate, descend, read);\n    (lView[CONTENT_QUERIES] || (lView[CONTENT_QUERIES] = [])).push(contentQuery);\n    if (tView.firstTemplatePass) {\n        /** @type {?} */\n        const tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);\n        /** @type {?} */\n        const lastSavedDirectiveIndex = tView.contentQueries.length ? tView.contentQueries[tView.contentQueries.length - 1] : -1;\n        if (directiveIndex !== lastSavedDirectiveIndex) {\n            tViewContentQueries.push(directiveIndex);\n        }\n    }\n    return contentQuery;\n}\n/**\n * Registers a QueryList, associated with a static content query, for later refresh\n * (part of a view refresh).\n *\n * \\@codeGenApi\n * @template T\n * @param {?} directiveIndex Current directive index\n * @param {?} predicate The type for which the query will search\n * @param {?} descend Whether or not to descend into children\n * @param {?} read What to save in the query\n * @return {?} QueryList<T>\n *\n */\nfunction ɵɵstaticContentQuery(directiveIndex, predicate, descend, \n// TODO(FW-486): \"read\" should be an AbstractType\nread) {\n    /** @type {?} */\n    const queryList = (/** @type {?} */ (ɵɵcontentQuery(directiveIndex, predicate, descend, read)));\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    queryList._static = true;\n    if (!tView.staticContentQueries) {\n        tView.staticContentQueries = true;\n    }\n}\n/**\n *\n * \\@codeGenApi\n * @template T\n * @return {?}\n */\nfunction ɵɵloadContentQuery() {\n    /** @type {?} */\n    const lView = getLView();\n    ngDevMode &&\n        assertDefined(lView[CONTENT_QUERIES], 'Content QueryList array should be defined if reading a query.');\n    /** @type {?} */\n    const index = getCurrentQueryIndex();\n    ngDevMode && assertDataInRange((/** @type {?} */ (lView[CONTENT_QUERIES])), index);\n    setCurrentQueryIndex(index + 1);\n    return (/** @type {?} */ (lView[CONTENT_QUERIES]))[index];\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the\n * `<ng-template>` element.\n *\n * \\@codeGenApi\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nfunction ɵɵtemplateRefExtractor(tNode, currentView) {\n    return createTemplateRef(TemplateRef, ElementRef, tNode, currentView);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used to load ng module factories.\n *\n * \\@publicApi\n * @deprecated the `string` form of `loadChildren` is deprecated, and `NgModuleFactoryLoader` is\n * part of its implementation. See `LoadChildren` for more details.\n * @abstract\n */\nclass NgModuleFactoryLoader {\n}\n/**\n * Map of module-id to the corresponding NgModule.\n * - In pre Ivy we track NgModuleFactory,\n * - In post Ivy we track the NgModuleType\n * @type {?}\n */\nconst modules = new Map();\n/**\n * Registers a loaded module. Should only be called from generated NgModuleFactory code.\n * \\@publicApi\n * @param {?} id\n * @param {?} factory\n * @return {?}\n */\nfunction registerModuleFactory(id, factory) {\n    /** @type {?} */\n    const existing = (/** @type {?} */ (modules.get(id)));\n    assertSameOrNotExisting(id, existing && existing.moduleType, factory.moduleType);\n    modules.set(id, factory);\n}\n/**\n * @param {?} id\n * @param {?} type\n * @param {?} incoming\n * @return {?}\n */\nfunction assertSameOrNotExisting(id, type, incoming) {\n    if (type && type !== incoming) {\n        throw new Error(`Duplicate module registered for ${id} - ${stringify(type)} vs ${stringify(type.name)}`);\n    }\n}\n/**\n * @param {?} id\n * @param {?} ngModuleType\n * @return {?}\n */\nfunction registerNgModuleType(id, ngModuleType) {\n    /** @type {?} */\n    const existing = (/** @type {?} */ (modules.get(id)));\n    assertSameOrNotExisting(id, existing, ngModuleType);\n    modules.set(id, ngModuleType);\n}\n/**\n * @param {?} id\n * @return {?}\n */\nfunction getModuleFactory__PRE_R3__(id) {\n    /** @type {?} */\n    const factory = (/** @type {?} */ (modules.get(id)));\n    if (!factory)\n        throw noModuleError(id);\n    return factory;\n}\n/**\n * @param {?} id\n * @return {?}\n */\nfunction getModuleFactory__POST_R3__(id) {\n    /** @type {?} */\n    const type = (/** @type {?} */ (modules.get(id)));\n    if (!type)\n        throw noModuleError(id);\n    return new NgModuleFactory$1(type);\n}\n/**\n * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\n * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\n * cannot be found.\n * \\@publicApi\n * @type {?}\n */\nconst getModuleFactory = getModuleFactory__PRE_R3__;\n/**\n * @param {?} id\n * @return {?}\n */\nfunction noModuleError(id) {\n    return new Error(`No module with ID ${id} loaded`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst ɵ0$8 = /**\n * @return {?}\n */\n() => ({\n    'ɵɵdefineBase': ɵɵdefineBase,\n    'ɵɵdefineComponent': ɵɵdefineComponent,\n    'ɵɵdefineDirective': ɵɵdefineDirective,\n    'ɵɵdefineInjectable': ɵɵdefineInjectable,\n    'ɵɵdefineInjector': ɵɵdefineInjector,\n    'ɵɵdefineNgModule': ɵɵdefineNgModule,\n    'ɵɵdefinePipe': ɵɵdefinePipe,\n    'ɵɵdirectiveInject': ɵɵdirectiveInject,\n    'ɵɵgetFactoryOf': ɵɵgetFactoryOf,\n    'ɵɵgetInheritedFactory': ɵɵgetInheritedFactory,\n    'ɵɵinject': ɵɵinject,\n    'ɵɵinjectAttribute': ɵɵinjectAttribute,\n    'ɵɵtemplateRefExtractor': ɵɵtemplateRefExtractor,\n    'ɵɵNgOnChangesFeature': ɵɵNgOnChangesFeature,\n    'ɵɵProvidersFeature': ɵɵProvidersFeature,\n    'ɵɵInheritDefinitionFeature': ɵɵInheritDefinitionFeature,\n    'ɵɵelementAttribute': ɵɵelementAttribute,\n    'ɵɵbind': ɵɵbind,\n    'ɵɵcontainer': ɵɵcontainer,\n    'ɵɵnextContext': ɵɵnextContext,\n    'ɵɵcontainerRefreshStart': ɵɵcontainerRefreshStart,\n    'ɵɵcontainerRefreshEnd': ɵɵcontainerRefreshEnd,\n    'ɵɵnamespaceHTML': ɵɵnamespaceHTML,\n    'ɵɵnamespaceMathML': ɵɵnamespaceMathML,\n    'ɵɵnamespaceSVG': ɵɵnamespaceSVG,\n    'ɵɵenableBindings': ɵɵenableBindings,\n    'ɵɵdisableBindings': ɵɵdisableBindings,\n    'ɵɵallocHostVars': ɵɵallocHostVars,\n    'ɵɵelementStart': ɵɵelementStart,\n    'ɵɵelementEnd': ɵɵelementEnd,\n    'ɵɵelement': ɵɵelement,\n    'ɵɵelementContainerStart': ɵɵelementContainerStart,\n    'ɵɵelementContainerEnd': ɵɵelementContainerEnd,\n    'ɵɵpureFunction0': ɵɵpureFunction0,\n    'ɵɵpureFunction1': ɵɵpureFunction1,\n    'ɵɵpureFunction2': ɵɵpureFunction2,\n    'ɵɵpureFunction3': ɵɵpureFunction3,\n    'ɵɵpureFunction4': ɵɵpureFunction4,\n    'ɵɵpureFunction5': ɵɵpureFunction5,\n    'ɵɵpureFunction6': ɵɵpureFunction6,\n    'ɵɵpureFunction7': ɵɵpureFunction7,\n    'ɵɵpureFunction8': ɵɵpureFunction8,\n    'ɵɵpureFunctionV': ɵɵpureFunctionV,\n    'ɵɵgetCurrentView': ɵɵgetCurrentView,\n    'ɵɵrestoreView': ɵɵrestoreView,\n    'ɵɵinterpolation1': ɵɵinterpolation1,\n    'ɵɵinterpolation2': ɵɵinterpolation2,\n    'ɵɵinterpolation3': ɵɵinterpolation3,\n    'ɵɵinterpolation4': ɵɵinterpolation4,\n    'ɵɵinterpolation5': ɵɵinterpolation5,\n    'ɵɵinterpolation6': ɵɵinterpolation6,\n    'ɵɵinterpolation7': ɵɵinterpolation7,\n    'ɵɵinterpolation8': ɵɵinterpolation8,\n    'ɵɵinterpolationV': ɵɵinterpolationV,\n    'ɵɵlistener': ɵɵlistener,\n    'ɵɵload': ɵɵload,\n    'ɵɵprojection': ɵɵprojection,\n    'ɵɵelementProperty': ɵɵelementProperty,\n    'ɵɵcomponentHostSyntheticProperty': ɵɵcomponentHostSyntheticProperty,\n    'ɵɵcomponentHostSyntheticListener': ɵɵcomponentHostSyntheticListener,\n    'ɵɵpipeBind1': ɵɵpipeBind1,\n    'ɵɵpipeBind2': ɵɵpipeBind2,\n    'ɵɵpipeBind3': ɵɵpipeBind3,\n    'ɵɵpipeBind4': ɵɵpipeBind4,\n    'ɵɵpipeBindV': ɵɵpipeBindV,\n    'ɵɵprojectionDef': ɵɵprojectionDef,\n    'ɵɵproperty': ɵɵproperty,\n    'ɵɵpropertyInterpolate': ɵɵpropertyInterpolate,\n    'ɵɵpropertyInterpolate1': ɵɵpropertyInterpolate1,\n    'ɵɵpropertyInterpolate2': ɵɵpropertyInterpolate2,\n    'ɵɵpropertyInterpolate3': ɵɵpropertyInterpolate3,\n    'ɵɵpropertyInterpolate4': ɵɵpropertyInterpolate4,\n    'ɵɵpropertyInterpolate5': ɵɵpropertyInterpolate5,\n    'ɵɵpropertyInterpolate6': ɵɵpropertyInterpolate6,\n    'ɵɵpropertyInterpolate7': ɵɵpropertyInterpolate7,\n    'ɵɵpropertyInterpolate8': ɵɵpropertyInterpolate8,\n    'ɵɵpropertyInterpolateV': ɵɵpropertyInterpolateV,\n    'ɵɵpipe': ɵɵpipe,\n    'ɵɵqueryRefresh': ɵɵqueryRefresh,\n    'ɵɵviewQuery': ɵɵviewQuery,\n    'ɵɵstaticViewQuery': ɵɵstaticViewQuery,\n    'ɵɵstaticContentQuery': ɵɵstaticContentQuery,\n    'ɵɵloadViewQuery': ɵɵloadViewQuery,\n    'ɵɵcontentQuery': ɵɵcontentQuery,\n    'ɵɵloadContentQuery': ɵɵloadContentQuery,\n    'ɵɵreference': ɵɵreference,\n    'ɵɵelementHostAttrs': ɵɵelementHostAttrs,\n    'ɵɵelementStyling': ɵɵelementStyling,\n    'ɵɵelementStylingMap': ɵɵelementStylingMap,\n    'ɵɵelementStyleProp': ɵɵelementStyleProp,\n    'ɵɵelementStylingApply': ɵɵelementStylingApply,\n    'ɵɵelementClassProp': ɵɵelementClassProp,\n    'ɵɵelementHostStyling': ɵɵelementHostStyling,\n    'ɵɵelementHostStylingMap': ɵɵelementHostStylingMap,\n    'ɵɵelementHostStyleProp': ɵɵelementHostStyleProp,\n    'ɵɵelementHostStylingApply': ɵɵelementHostStylingApply,\n    'ɵɵelementHostClassProp': ɵɵelementHostClassProp,\n    'ɵɵselect': ɵɵselect,\n    'ɵɵtemplate': ɵɵtemplate,\n    'ɵɵtext': ɵɵtext,\n    'ɵɵtextBinding': ɵɵtextBinding,\n    'ɵɵembeddedViewStart': ɵɵembeddedViewStart,\n    'ɵɵembeddedViewEnd': ɵɵembeddedViewEnd,\n    'ɵɵi18n': ɵɵi18n,\n    'ɵɵi18nAttributes': ɵɵi18nAttributes,\n    'ɵɵi18nExp': ɵɵi18nExp,\n    'ɵɵi18nStart': ɵɵi18nStart,\n    'ɵɵi18nEnd': ɵɵi18nEnd,\n    'ɵɵi18nApply': ɵɵi18nApply,\n    'ɵɵi18nPostprocess': ɵɵi18nPostprocess,\n    'ɵɵi18nLocalize': ɵɵi18nLocalize,\n    'ɵɵresolveWindow': ɵɵresolveWindow,\n    'ɵɵresolveDocument': ɵɵresolveDocument,\n    'ɵɵresolveBody': ɵɵresolveBody,\n    'ɵɵsetComponentScope': ɵɵsetComponentScope,\n    'ɵɵsetNgModuleScope': ɵɵsetNgModuleScope,\n    'ɵɵsanitizeHtml': ɵɵsanitizeHtml,\n    'ɵɵsanitizeStyle': ɵɵsanitizeStyle,\n    'ɵɵdefaultStyleSanitizer': ɵɵdefaultStyleSanitizer,\n    'ɵɵsanitizeResourceUrl': ɵɵsanitizeResourceUrl,\n    'ɵɵsanitizeScript': ɵɵsanitizeScript,\n    'ɵɵsanitizeUrl': ɵɵsanitizeUrl,\n    'ɵɵsanitizeUrlOrResourceUrl': ɵɵsanitizeUrlOrResourceUrl,\n    'ɵregisterNgModuleType': registerNgModuleType,\n});\n/**\n * A mapping of the \\@angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of \\@angular/core.\n * @type {?}\n */\nconst angularCoreEnv = ((ɵ0$8))();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EMPTY_ARRAY$4 = [];\n/** @type {?} */\nconst moduleQueue = [];\n/**\n * Enqueues moduleDef to be checked later to see if scope can be set on its\n * component declarations.\n * @param {?} moduleType\n * @param {?} ngModule\n * @return {?}\n */\nfunction enqueueModuleForDelayedScoping(moduleType, ngModule) {\n    moduleQueue.push({ moduleType, ngModule });\n}\n/** @type {?} */\nlet flushingModuleQueue = false;\n/**\n * Loops over queued module definitions, if a given module definition has all of its\n * declarations resolved, it dequeues that module definition and sets the scope on\n * its declarations.\n * @return {?}\n */\nfunction flushModuleScopingQueueAsMuchAsPossible() {\n    if (!flushingModuleQueue) {\n        flushingModuleQueue = true;\n        try {\n            for (let i = moduleQueue.length - 1; i >= 0; i--) {\n                const { moduleType, ngModule } = moduleQueue[i];\n                if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {\n                    // dequeue\n                    moduleQueue.splice(i, 1);\n                    setScopeOnDeclaredComponents(moduleType, ngModule);\n                }\n            }\n        }\n        finally {\n            flushingModuleQueue = false;\n        }\n    }\n}\n/**\n * Returns truthy if a declaration has resolved. If the declaration happens to be\n * an array of declarations, it will recurse to check each declaration in that array\n * (which may also be arrays).\n * @param {?} declaration\n * @return {?}\n */\nfunction isResolvedDeclaration(declaration) {\n    if (Array.isArray(declaration)) {\n        return declaration.every(isResolvedDeclaration);\n    }\n    return !!resolveForwardRef(declaration);\n}\n/**\n * Compiles a module in JIT mode.\n *\n * This function automatically gets called when a class has a `\\@NgModule` decorator.\n * @param {?} moduleType\n * @param {?=} ngModule\n * @return {?}\n */\nfunction compileNgModule(moduleType, ngModule = {}) {\n    compileNgModuleDefs((/** @type {?} */ (moduleType)), ngModule);\n    // Because we don't know if all declarations have resolved yet at the moment the\n    // NgModule decorator is executing, we're enqueueing the setting of module scope\n    // on its declarations to be run at a later time when all declarations for the module,\n    // including forward refs, have resolved.\n    enqueueModuleForDelayedScoping(moduleType, ngModule);\n}\n/**\n * Compiles and adds the `ngModuleDef` and `ngInjectorDef` properties to the module class.\n * @param {?} moduleType\n * @param {?} ngModule\n * @return {?}\n */\nfunction compileNgModuleDefs(moduleType, ngModule) {\n    ngDevMode && assertDefined(moduleType, 'Required value moduleType');\n    ngDevMode && assertDefined(ngModule, 'Required value ngModule');\n    /** @type {?} */\n    const declarations = flatten(ngModule.declarations || EMPTY_ARRAY$4);\n    /** @type {?} */\n    /** @nocollapse */ let ngModuleDef = null;\n    Object.defineProperty(moduleType, NG_MODULE_DEF, {\n        configurable: true,\n        get: (/**\n         * @return {?}\n         */\n        () => {\n            if (ngModuleDef === null) {\n                ngModuleDef = getCompilerFacade().compileNgModule(angularCoreEnv, `ng:///${moduleType.name}/ngModuleDef.js`, {\n                    type: moduleType,\n                    bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY$4).map(resolveForwardRef),\n                    declarations: declarations.map(resolveForwardRef),\n                    imports: flatten(ngModule.imports || EMPTY_ARRAY$4)\n                        .map(resolveForwardRef)\n                        .map(expandModuleWithProviders),\n                    exports: flatten(ngModule.exports || EMPTY_ARRAY$4)\n                        .map(resolveForwardRef)\n                        .map(expandModuleWithProviders),\n                    emitInline: true,\n                    schemas: ngModule.schemas ? flatten(ngModule.schemas) : null,\n                });\n            }\n            return ngModuleDef;\n        })\n    });\n    if (ngModule.id) {\n        registerNgModuleType(ngModule.id, moduleType);\n    }\n    /** @type {?} */\n    /** @nocollapse */ let ngInjectorDef = null;\n    Object.defineProperty(moduleType, NG_INJECTOR_DEF, {\n        get: (/**\n         * @return {?}\n         */\n        () => {\n            if (ngInjectorDef === null) {\n                ngDevMode && verifySemanticsOfNgModuleDef((/** @type {?} */ ((/** @type {?} */ (moduleType)))));\n                /** @type {?} */\n                const meta = {\n                    name: moduleType.name,\n                    type: moduleType,\n                    deps: reflectDependencies(moduleType),\n                    providers: ngModule.providers || EMPTY_ARRAY$4,\n                    imports: [\n                        (ngModule.imports || EMPTY_ARRAY$4).map(resolveForwardRef),\n                        (ngModule.exports || EMPTY_ARRAY$4).map(resolveForwardRef),\n                    ],\n                };\n                ngInjectorDef = getCompilerFacade().compileInjector(angularCoreEnv, `ng:///${moduleType.name}/ngInjectorDef.js`, meta);\n            }\n            return ngInjectorDef;\n        }),\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n/**\n * @param {?} moduleType\n * @return {?}\n */\nfunction verifySemanticsOfNgModuleDef(moduleType) {\n    if (verifiedNgModule.get(moduleType))\n        return;\n    verifiedNgModule.set(moduleType, true);\n    moduleType = resolveForwardRef(moduleType);\n    /** @type {?} */\n    /** @nocollapse */ const ngModuleDef = getNgModuleDef(moduleType, true);\n    /** @type {?} */\n    const errors = [];\n    /** @type {?} */\n    const declarations = maybeUnwrapFn(ngModuleDef.declarations);\n    /** @type {?} */\n    const imports = maybeUnwrapFn(ngModuleDef.imports);\n    flatten(imports).map(unwrapModuleWithProvidersImports).forEach(verifySemanticsOfNgModuleDef);\n    /** @type {?} */\n    const exports = maybeUnwrapFn(ngModuleDef.exports);\n    declarations.forEach(verifyDeclarationsHaveDefinitions);\n    /** @type {?} */\n    const combinedDeclarations = [\n        ...declarations.map(resolveForwardRef),\n        ...flatten(imports.map(computeCombinedExports)).map(resolveForwardRef),\n    ];\n    exports.forEach(verifyExportsAreDeclaredOrReExported);\n    declarations.forEach(verifyDeclarationIsUnique);\n    declarations.forEach(verifyComponentEntryComponentsIsPartOfNgModule);\n    /** @type {?} */\n    const ngModule = getAnnotation(moduleType, 'NgModule');\n    if (ngModule) {\n        ngModule.imports &&\n            flatten(ngModule.imports)\n                .map(unwrapModuleWithProvidersImports)\n                .forEach(verifySemanticsOfNgModuleDef);\n        ngModule.bootstrap && ngModule.bootstrap.forEach(verifyCorrectBootstrapType);\n        ngModule.bootstrap && ngModule.bootstrap.forEach(verifyComponentIsPartOfNgModule);\n        ngModule.entryComponents && ngModule.entryComponents.forEach(verifyComponentIsPartOfNgModule);\n    }\n    // Throw Error if any errors were detected.\n    if (errors.length) {\n        throw new Error(errors.join('\\n'));\n    }\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    function verifyDeclarationsHaveDefinitions(type) {\n        type = resolveForwardRef(type);\n        /** @type {?} */\n        const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef(type);\n        if (!def) {\n            errors.push(`Unexpected value '${stringifyForError(type)}' declared by the module '${stringifyForError(moduleType)}'. Please add a @Pipe/@Directive/@Component annotation.`);\n        }\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    function verifyExportsAreDeclaredOrReExported(type) {\n        type = resolveForwardRef(type);\n        /** @type {?} */\n        const kind = getComponentDef(type) && 'component' || getDirectiveDef(type) && 'directive' ||\n            getPipeDef(type) && 'pipe';\n        if (kind) {\n            // only checked if we are declared as Component, Directive, or Pipe\n            // Modules don't need to be declared or imported.\n            if (combinedDeclarations.lastIndexOf(type) === -1) {\n                // We are exporting something which we don't explicitly declare or import.\n                errors.push(`Can't export ${kind} ${stringifyForError(type)} from ${stringifyForError(moduleType)} as it was neither declared nor imported!`);\n            }\n        }\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    function verifyDeclarationIsUnique(type) {\n        type = resolveForwardRef(type);\n        /** @type {?} */\n        const existingModule = ownerNgModule.get(type);\n        if (existingModule && existingModule !== moduleType) {\n            /** @type {?} */\n            const modules = [existingModule, moduleType].map(stringifyForError).sort();\n            errors.push(`Type ${stringifyForError(type)} is part of the declarations of 2 modules: ${modules[0]} and ${modules[1]}! ` +\n                `Please consider moving ${stringifyForError(type)} to a higher module that imports ${modules[0]} and ${modules[1]}. ` +\n                `You can also create a new NgModule that exports and includes ${stringifyForError(type)} then import that NgModule in ${modules[0]} and ${modules[1]}.`);\n        }\n        else {\n            // Mark type as having owner.\n            ownerNgModule.set(type, moduleType);\n        }\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    function verifyComponentIsPartOfNgModule(type) {\n        type = resolveForwardRef(type);\n        /** @type {?} */\n        const existingModule = ownerNgModule.get(type);\n        if (!existingModule) {\n            errors.push(`Component ${stringifyForError(type)} is not part of any NgModule or the module has not been imported into your module.`);\n        }\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    function verifyCorrectBootstrapType(type) {\n        type = resolveForwardRef(type);\n        if (!getComponentDef(type)) {\n            errors.push(`${stringifyForError(type)} cannot be used as an entry component.`);\n        }\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    function verifyComponentEntryComponentsIsPartOfNgModule(type) {\n        type = resolveForwardRef(type);\n        if (getComponentDef(type)) {\n            // We know we are component\n            /** @type {?} */\n            const component = getAnnotation(type, 'Component');\n            if (component && component.entryComponents) {\n                component.entryComponents.forEach(verifyComponentIsPartOfNgModule);\n            }\n        }\n    }\n}\n/**\n * @param {?} typeOrWithProviders\n * @return {?}\n */\nfunction unwrapModuleWithProvidersImports(typeOrWithProviders) {\n    typeOrWithProviders = resolveForwardRef(typeOrWithProviders);\n    return ((/** @type {?} */ (typeOrWithProviders))).ngModule || typeOrWithProviders;\n}\n/**\n * @template T\n * @param {?} type\n * @param {?} name\n * @return {?}\n */\nfunction getAnnotation(type, name) {\n    /** @type {?} */\n    let annotation = null;\n    collect(type.__annotations__);\n    collect(type.decorators);\n    return annotation;\n    /**\n     * @param {?} annotations\n     * @return {?}\n     */\n    function collect(annotations) {\n        if (annotations) {\n            annotations.forEach(readAnnotation);\n        }\n    }\n    /**\n     * @param {?} decorator\n     * @return {?}\n     */\n    function readAnnotation(decorator) {\n        if (!annotation) {\n            /** @type {?} */\n            const proto = Object.getPrototypeOf(decorator);\n            if (proto.ngMetadataName == name) {\n                annotation = (/** @type {?} */ (decorator));\n            }\n            else if (decorator.type) {\n                /** @type {?} */\n                const proto = Object.getPrototypeOf(decorator.type);\n                if (proto.ngMetadataName == name) {\n                    annotation = decorator.args[0];\n                }\n            }\n        }\n    }\n}\n/**\n * Keep track of compiled components. This is needed because in tests we often want to compile the\n * same component with more than one NgModule. This would cause an error unless we reset which\n * NgModule the component belongs to. We keep the list of compiled components here so that the\n * TestBed can reset it later.\n * @type {?}\n */\nlet ownerNgModule = new Map();\n/** @type {?} */\nlet verifiedNgModule = new Map();\n/**\n * @return {?}\n */\nfunction resetCompiledComponents() {\n    ownerNgModule = new Map();\n    verifiedNgModule = new Map();\n    moduleQueue.length = 0;\n}\n/**\n * Computes the combined declarations of explicit declarations, as well as declarations inherited by\n * traversing the exports of imported modules.\n * @param {?} type\n * @return {?}\n */\nfunction computeCombinedExports(type) {\n    type = resolveForwardRef(type);\n    /** @type {?} */\n    /** @nocollapse */ const ngModuleDef = getNgModuleDef(type, true);\n    return [...flatten(maybeUnwrapFn(ngModuleDef.exports).map((/**\n         * @param {?} type\n         * @return {?}\n         */\n        (type) => {\n            /** @type {?} */\n            /** @nocollapse */ const ngModuleDef = getNgModuleDef(type);\n            if (ngModuleDef) {\n                verifySemanticsOfNgModuleDef((/** @type {?} */ ((/** @type {?} */ (type)))));\n                return computeCombinedExports(type);\n            }\n            else {\n                return type;\n            }\n        })))];\n}\n/**\n * Some declared components may be compiled asynchronously, and thus may not have their\n * ngComponentDef set yet. If this is the case, then a reference to the module is written into\n * the `ngSelectorScope` property of the declared type.\n * @param {?} moduleType\n * @param {?} ngModule\n * @return {?}\n */\nfunction setScopeOnDeclaredComponents(moduleType, ngModule) {\n    /** @type {?} */\n    const declarations = flatten(ngModule.declarations || EMPTY_ARRAY$4);\n    /** @type {?} */\n    const transitiveScopes = transitiveScopesFor(moduleType);\n    declarations.forEach((/**\n     * @param {?} declaration\n     * @return {?}\n     */\n    declaration => {\n        if (declaration.hasOwnProperty(NG_COMPONENT_DEF)) {\n            // An `ngComponentDef` field exists - go ahead and patch the component directly.\n            /** @type {?} */\n            const component = (/** @type {?} */ (declaration));\n            /** @type {?} */\n            const componentDef = (/** @type {?} */ (getComponentDef(component)));\n            patchComponentDefWithScope(componentDef, transitiveScopes);\n        }\n        else if (!declaration.hasOwnProperty(NG_DIRECTIVE_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {\n            // Set `ngSelectorScope` for future reference when the component compilation finishes.\n            ((/** @type {?} */ (declaration))).ngSelectorScope = moduleType;\n        }\n    }));\n}\n/**\n * Patch the definition of a component with directives and pipes from the compilation scope of\n * a given module.\n * @template C\n * @param {?} componentDef\n * @param {?} transitiveScopes\n * @return {?}\n */\nfunction patchComponentDefWithScope(componentDef, transitiveScopes) {\n    componentDef.directiveDefs = (/**\n     * @return {?}\n     */\n    () => Array.from(transitiveScopes.compilation.directives)\n        .map((/**\n     * @param {?} dir\n     * @return {?}\n     */\n    dir => dir.hasOwnProperty(NG_COMPONENT_DEF) ? (/** @type {?} */ (getComponentDef(dir))) :\n        (/** @type {?} */ (getDirectiveDef(dir)))))\n        .filter((/**\n     * @param {?} def\n     * @return {?}\n     */\n    def => !!def)));\n    componentDef.pipeDefs = (/**\n     * @return {?}\n     */\n    () => Array.from(transitiveScopes.compilation.pipes).map((/**\n     * @param {?} pipe\n     * @return {?}\n     */\n    pipe => (/** @type {?} */ (getPipeDef(pipe))))));\n    componentDef.schemas = transitiveScopes.schemas;\n    // Since we avoid Components/Directives/Pipes recompiling in case there are no overrides, we\n    // may face a problem where previously compiled defs available to a given Component/Directive\n    // are cached in TView and may become stale (in case any of these defs gets recompiled). In\n    // order to avoid this problem, we force fresh TView to be created.\n    componentDef.template.ngPrivateData = undefined;\n}\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.\n *\n * This operation is memoized and the result is cached on the module's definition. It can be called\n * on modules with components that have not fully compiled yet, but the result should not be used\n * until they have.\n * @template T\n * @param {?} moduleType\n * @param {?=} processNgModuleFn\n * @return {?}\n */\nfunction transitiveScopesFor(moduleType, processNgModuleFn) {\n    if (!isNgModule(moduleType)) {\n        throw new Error(`${moduleType.name} does not have an ngModuleDef`);\n    }\n    /** @type {?} */\n    const def = (/** @type {?} */ (getNgModuleDef(moduleType)));\n    if (def.transitiveCompileScopes !== null) {\n        return def.transitiveCompileScopes;\n    }\n    /** @type {?} */\n    const scopes = {\n        schemas: def.schemas || null,\n        compilation: {\n            directives: new Set(),\n            pipes: new Set(),\n        },\n        exported: {\n            directives: new Set(),\n            pipes: new Set(),\n        },\n    };\n    maybeUnwrapFn(def.declarations).forEach((/**\n     * @param {?} declared\n     * @return {?}\n     */\n    declared => {\n        /** @type {?} */\n        const declaredWithDefs = (/** @type {?} */ (declared));\n        if (getPipeDef(declaredWithDefs)) {\n            scopes.compilation.pipes.add(declared);\n        }\n        else {\n            // Either declared has an ngComponentDef or ngDirectiveDef, or it's a component which hasn't\n            // had its template compiled yet. In either case, it gets added to the compilation's\n            // directives.\n            scopes.compilation.directives.add(declared);\n        }\n    }));\n    maybeUnwrapFn(def.imports).forEach((/**\n     * @template I\n     * @param {?} imported\n     * @return {?}\n     */\n    (imported) => {\n        /** @type {?} */\n        const importedType = (/** @type {?} */ (imported));\n        if (!isNgModule(importedType)) {\n            throw new Error(`Importing ${importedType.name} which does not have an ngModuleDef`);\n        }\n        if (processNgModuleFn) {\n            processNgModuleFn((/** @type {?} */ (importedType)));\n        }\n        // When this module imports another, the imported module's exported directives and pipes are\n        // added to the compilation scope of this module.\n        /** @type {?} */\n        const importedScope = transitiveScopesFor(importedType, processNgModuleFn);\n        importedScope.exported.directives.forEach((/**\n         * @param {?} entry\n         * @return {?}\n         */\n        entry => scopes.compilation.directives.add(entry)));\n        importedScope.exported.pipes.forEach((/**\n         * @param {?} entry\n         * @return {?}\n         */\n        entry => scopes.compilation.pipes.add(entry)));\n    }));\n    maybeUnwrapFn(def.exports).forEach((/**\n     * @template E\n     * @param {?} exported\n     * @return {?}\n     */\n    (exported) => {\n        /** @type {?} */\n        const exportedType = (/** @type {?} */ (exported));\n        // Either the type is a module, a pipe, or a component/directive (which may not have an\n        // ngComponentDef as it might be compiled asynchronously).\n        if (isNgModule(exportedType)) {\n            // When this module exports another, the exported module's exported directives and pipes are\n            // added to both the compilation and exported scopes of this module.\n            /** @type {?} */\n            const exportedScope = transitiveScopesFor(exportedType, processNgModuleFn);\n            exportedScope.exported.directives.forEach((/**\n             * @param {?} entry\n             * @return {?}\n             */\n            entry => {\n                scopes.compilation.directives.add(entry);\n                scopes.exported.directives.add(entry);\n            }));\n            exportedScope.exported.pipes.forEach((/**\n             * @param {?} entry\n             * @return {?}\n             */\n            entry => {\n                scopes.compilation.pipes.add(entry);\n                scopes.exported.pipes.add(entry);\n            }));\n        }\n        else if (getPipeDef(exportedType)) {\n            scopes.exported.pipes.add(exportedType);\n        }\n        else {\n            scopes.exported.directives.add(exportedType);\n        }\n    }));\n    def.transitiveCompileScopes = scopes;\n    return scopes;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction expandModuleWithProviders(value) {\n    if (isModuleWithProviders(value)) {\n        return value.ngModule;\n    }\n    return value;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isModuleWithProviders(value) {\n    return ((/** @type {?} */ (value))).ngModule !== undefined;\n}\n/**\n * @template T\n * @param {?} value\n * @return {?}\n */\nfunction isNgModule(value) {\n    return !!getNgModuleDef(value);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Compile an Angular component according to its decorator metadata, and patch the resulting\n * ngComponentDef onto the component type.\n *\n * Compilation may be asynchronous (due to the need to resolve URLs for the component template or\n * other resources, for example). In the event that compilation is not immediate, `compileComponent`\n * will enqueue resource resolution into a global queue and will fail to return the `ngComponentDef`\n * until the global queue has been resolved with a call to `resolveComponentResources`.\n * @param {?} type\n * @param {?} metadata\n * @return {?}\n */\nfunction compileComponent(type, metadata) {\n    /** @type {?} */\n    /** @nocollapse */ let ngComponentDef = null;\n    // Metadata may have resources which need to be resolved.\n    maybeQueueResolutionOfComponentResources(type, metadata);\n    Object.defineProperty(type, NG_COMPONENT_DEF, {\n        get: (/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const compiler = getCompilerFacade();\n            if (ngComponentDef === null) {\n                if (componentNeedsResolution(metadata)) {\n                    /** @type {?} */\n                    const error = [`Component '${type.name}' is not resolved:`];\n                    if (metadata.templateUrl) {\n                        error.push(` - templateUrl: ${metadata.templateUrl}`);\n                    }\n                    if (metadata.styleUrls && metadata.styleUrls.length) {\n                        error.push(` - styleUrls: ${JSON.stringify(metadata.styleUrls)}`);\n                    }\n                    error.push(`Did you run and wait for 'resolveComponentResources()'?`);\n                    throw new Error(error.join('\\n'));\n                }\n                /** @type {?} */\n                const templateUrl = metadata.templateUrl || `ng:///${type.name}/template.html`;\n                /** @type {?} */\n                const meta = Object.assign({}, directiveMetadata(type, metadata), { typeSourceSpan: compiler.createParseSourceSpan('Component', type.name, templateUrl), template: metadata.template || '', preserveWhitespaces: metadata.preserveWhitespaces || false, styles: metadata.styles || EMPTY_ARRAY$1, animations: metadata.animations, directives: [], changeDetection: metadata.changeDetection, pipes: new Map(), encapsulation: metadata.encapsulation || ViewEncapsulation.Emulated, interpolation: metadata.interpolation, viewProviders: metadata.viewProviders || null });\n                if (meta.usesInheritance) {\n                    addBaseDefToUndecoratedParents(type);\n                }\n                ngComponentDef = compiler.compileComponent(angularCoreEnv, templateUrl, meta);\n                // When NgModule decorator executed, we enqueued the module definition such that\n                // it would only dequeue and add itself as module scope to all of its declarations,\n                // but only if  if all of its declarations had resolved. This call runs the check\n                // to see if any modules that are in the queue can be dequeued and add scope to\n                // their declarations.\n                flushModuleScopingQueueAsMuchAsPossible();\n                // If component compilation is async, then the @NgModule annotation which declares the\n                // component may execute and set an ngSelectorScope property on the component type. This\n                // allows the component to patch itself with directiveDefs from the module after it\n                // finishes compiling.\n                if (hasSelectorScope(type)) {\n                    /** @type {?} */\n                    const scopes = transitiveScopesFor(type.ngSelectorScope);\n                    patchComponentDefWithScope(ngComponentDef, scopes);\n                }\n            }\n            return ngComponentDef;\n        }),\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n    // Add ngInjectableDef so components are reachable through the module injector by default\n    // This is mostly to support injecting components in tests. In real application code,\n    // components should be retrieved through the node injector, so this isn't a problem.\n    compileInjectable(type);\n}\n/**\n * @template T\n * @param {?} component\n * @return {?}\n */\nfunction hasSelectorScope(component) {\n    return ((/** @type {?} */ (component))).ngSelectorScope !== undefined;\n}\n/**\n * Compile an Angular directive according to its decorator metadata, and patch the resulting\n * ngDirectiveDef onto the component type.\n *\n * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which\n * will resolve when compilation completes and the directive becomes usable.\n * @param {?} type\n * @param {?} directive\n * @return {?}\n */\nfunction compileDirective(type, directive) {\n    /** @type {?} */\n    /** @nocollapse */ let ngDirectiveDef = null;\n    Object.defineProperty(type, NG_DIRECTIVE_DEF, {\n        get: (/**\n         * @return {?}\n         */\n        () => {\n            if (ngDirectiveDef === null) {\n                /** @type {?} */\n                const name = type && type.name;\n                /** @type {?} */\n                const sourceMapUrl = `ng:///${name}/ngDirectiveDef.js`;\n                /** @type {?} */\n                const compiler = getCompilerFacade();\n                /** @type {?} */\n                const facade = directiveMetadata((/** @type {?} */ (type)), directive);\n                facade.typeSourceSpan = compiler.createParseSourceSpan('Directive', name, sourceMapUrl);\n                if (facade.usesInheritance) {\n                    addBaseDefToUndecoratedParents(type);\n                }\n                ngDirectiveDef = compiler.compileDirective(angularCoreEnv, sourceMapUrl, facade);\n            }\n            return ngDirectiveDef;\n        }),\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n    // Add ngInjectableDef so directives are reachable through the module injector by default\n    // This is mostly to support injecting directives in tests. In real application code,\n    // directives should be retrieved through the node injector, so this isn't a problem.\n    compileInjectable(type);\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction extendsDirectlyFromObject(type) {\n    return Object.getPrototypeOf(type.prototype) === Object.prototype;\n}\n/**\n * Extract the `R3DirectiveMetadata` for a particular directive (either a `Directive` or a\n * `Component`).\n * @param {?} type\n * @param {?} metadata\n * @return {?}\n */\nfunction directiveMetadata(type, metadata) {\n    // Reflect inputs and outputs.\n    /** @type {?} */\n    const propMetadata = getReflect().ownPropMetadata(type);\n    return {\n        name: type.name,\n        type: type,\n        typeArgumentCount: 0,\n        selector: (/** @type {?} */ (metadata.selector)),\n        deps: reflectDependencies(type),\n        host: metadata.host || EMPTY_OBJ,\n        propMetadata: propMetadata,\n        inputs: metadata.inputs || EMPTY_ARRAY$1,\n        outputs: metadata.outputs || EMPTY_ARRAY$1,\n        queries: extractQueriesMetadata(type, propMetadata, isContentQuery),\n        lifecycle: { usesOnChanges: type.prototype.hasOwnProperty('ngOnChanges') },\n        typeSourceSpan: (/** @type {?} */ (null)),\n        usesInheritance: !extendsDirectlyFromObject(type),\n        exportAs: extractExportAs(metadata.exportAs),\n        providers: metadata.providers || null,\n        viewQueries: extractQueriesMetadata(type, propMetadata, isViewQuery),\n    };\n}\n/**\n * Adds an `ngBaseDef` to all parent classes of a type that don't have an Angular decorator.\n * @param {?} type\n * @return {?}\n */\nfunction addBaseDefToUndecoratedParents(type) {\n    /** @type {?} */\n    const objPrototype = Object.prototype;\n    /** @type {?} */\n    let parent = Object.getPrototypeOf(type);\n    // Go up the prototype until we hit `Object`.\n    while (parent && parent !== objPrototype) {\n        // Since inheritance works if the class was annotated already, we only need to add\n        // the base def if there are no annotations and the base def hasn't been created already.\n        if (!getDirectiveDef(parent) && !getComponentDef(parent) && !getBaseDef(parent)) {\n            /** @type {?} */\n            const facade = extractBaseDefMetadata(parent);\n            facade && compileBase(parent, facade);\n        }\n        parent = Object.getPrototypeOf(parent);\n    }\n}\n/**\n * Compiles the base metadata into a base definition.\n * @param {?} type\n * @param {?} facade\n * @return {?}\n */\nfunction compileBase(type, facade) {\n    /** @type {?} */\n    /** @nocollapse */ let ngBaseDef = null;\n    Object.defineProperty(type, NG_BASE_DEF, {\n        get: (/**\n         * @return {?}\n         */\n        () => {\n            if (ngBaseDef === null) {\n                /** @type {?} */\n                const name = type && type.name;\n                /** @type {?} */\n                const sourceMapUrl = `ng://${name}/ngBaseDef.js`;\n                /** @type {?} */\n                const compiler = getCompilerFacade();\n                ngBaseDef = compiler.compileBase(angularCoreEnv, sourceMapUrl, facade);\n            }\n            return ngBaseDef;\n        }),\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n/**\n * Extracts the metadata necessary to construct an `ngBaseDef` from a class.\n * @param {?} type\n * @return {?}\n */\nfunction extractBaseDefMetadata(type) {\n    /** @type {?} */\n    const propMetadata = getReflect().ownPropMetadata(type);\n    /** @type {?} */\n    const viewQueries = extractQueriesMetadata(type, propMetadata, isViewQuery);\n    /** @type {?} */\n    const queries = extractQueriesMetadata(type, propMetadata, isContentQuery);\n    /** @type {?} */\n    let inputs;\n    /** @type {?} */\n    let outputs;\n    for (const field in propMetadata) {\n        propMetadata[field].forEach((/**\n         * @param {?} ann\n         * @return {?}\n         */\n        ann => {\n            if (ann.ngMetadataName === 'Input') {\n                inputs = inputs || {};\n                inputs[field] = ann.bindingPropertyName ? [ann.bindingPropertyName, field] : field;\n            }\n            else if (ann.ngMetadataName === 'Output') {\n                outputs = outputs || {};\n                outputs[field] = ann.bindingPropertyName || field;\n            }\n        }));\n    }\n    // Only generate the base def if there's any info inside it.\n    if (inputs || outputs || viewQueries.length || queries.length) {\n        return { inputs, outputs, viewQueries, queries };\n    }\n    return null;\n}\n/**\n * @param {?} selector\n * @return {?}\n */\nfunction convertToR3QueryPredicate(selector) {\n    return typeof selector === 'string' ? splitByComma(selector) : resolveForwardRef(selector);\n}\n/**\n * @param {?} propertyName\n * @param {?} ann\n * @return {?}\n */\nfunction convertToR3QueryMetadata(propertyName, ann) {\n    return {\n        propertyName: propertyName,\n        predicate: convertToR3QueryPredicate(ann.selector),\n        descendants: ann.descendants,\n        first: ann.first,\n        read: ann.read ? ann.read : null,\n        static: !!ann.static\n    };\n}\n/**\n * @param {?} type\n * @param {?} propMetadata\n * @param {?} isQueryAnn\n * @return {?}\n */\nfunction extractQueriesMetadata(type, propMetadata, isQueryAnn) {\n    /** @type {?} */\n    const queriesMeta = [];\n    for (const field in propMetadata) {\n        if (propMetadata.hasOwnProperty(field)) {\n            /** @type {?} */\n            const annotations = propMetadata[field];\n            annotations.forEach((/**\n             * @param {?} ann\n             * @return {?}\n             */\n            ann => {\n                if (isQueryAnn(ann)) {\n                    if (!ann.selector) {\n                        throw new Error(`Can't construct a query for the property \"${field}\" of ` +\n                            `\"${stringifyForError(type)}\" since the query selector wasn't defined.`);\n                    }\n                    if (annotations.some(isInputAnn)) {\n                        throw new Error(`Cannot combine @Input decorators with query decorators`);\n                    }\n                    queriesMeta.push(convertToR3QueryMetadata(field, ann));\n                }\n            }));\n        }\n    }\n    return queriesMeta;\n}\n/**\n * @param {?} exportAs\n * @return {?}\n */\nfunction extractExportAs(exportAs) {\n    if (exportAs === undefined) {\n        return null;\n    }\n    return exportAs.split(',').map((/**\n     * @param {?} part\n     * @return {?}\n     */\n    part => part.trim()));\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isContentQuery(value) {\n    /** @type {?} */\n    const name = value.ngMetadataName;\n    return name === 'ContentChild' || name === 'ContentChildren';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isViewQuery(value) {\n    /** @type {?} */\n    const name = value.ngMetadataName;\n    return name === 'ViewChild' || name === 'ViewChildren';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isInputAnn(value) {\n    return value.ngMetadataName === 'Input';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction splitByComma(value) {\n    return value.split(',').map((/**\n     * @param {?} piece\n     * @return {?}\n     */\n    piece => piece.trim()));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} type\n * @param {?} meta\n * @return {?}\n */\nfunction compilePipe(type, meta) {\n    /** @type {?} */\n    /** @nocollapse */ let ngPipeDef = null;\n    Object.defineProperty(type, NG_PIPE_DEF, {\n        get: (/**\n         * @return {?}\n         */\n        () => {\n            if (ngPipeDef === null) {\n                /** @type {?} */\n                const typeName = type.name;\n                ngPipeDef =\n                    getCompilerFacade().compilePipe(angularCoreEnv, `ng:///${typeName}/ngPipeDef.js`, {\n                        type: type,\n                        typeArgumentCount: 0,\n                        name: typeName,\n                        deps: reflectDependencies(type),\n                        pipeName: meta.name,\n                        pure: meta.pure !== undefined ? meta.pure : true\n                    });\n            }\n            return ngPipeDef;\n        }),\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// WARNING: interface has both a type and a value, skipping emit\nconst ɵ0$9 = /**\n * @param {?=} dir\n * @return {?}\n */\n(dir = {}) => dir, ɵ1$2 = /**\n * @param {?} type\n * @param {?} meta\n * @return {?}\n */\n(type, meta) => SWITCH_COMPILE_DIRECTIVE(type, meta);\n/**\n * Type of the Directive metadata.\n *\n * \\@publicApi\n * @type {?}\n */\nconst Directive = makeDecorator('Directive', (ɵ0$9), undefined, undefined, (ɵ1$2));\n// WARNING: interface has both a type and a value, skipping emit\nconst ɵ2$2 = /**\n * @param {?=} c\n * @return {?}\n */\n(c = {}) => (Object.assign({ changeDetection: ChangeDetectionStrategy.Default }, c)), ɵ3$1 = /**\n * @param {?} type\n * @param {?} meta\n * @return {?}\n */\n(type, meta) => SWITCH_COMPILE_COMPONENT(type, meta);\n/**\n * Component decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Component = makeDecorator('Component', (ɵ2$2), Directive, undefined, (ɵ3$1));\n// WARNING: interface has both a type and a value, skipping emit\nconst ɵ4 = /**\n * @param {?} p\n * @return {?}\n */\n(p) => (Object.assign({ pure: true }, p)), ɵ5 = /**\n * @param {?} type\n * @param {?} meta\n * @return {?}\n */\n(type, meta) => SWITCH_COMPILE_PIPE(type, meta);\n/**\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Pipe = makeDecorator('Pipe', (ɵ4), undefined, undefined, (ɵ5));\n// WARNING: interface has both a type and a value, skipping emit\nconst ɵ6 = /**\n * @param {?=} bindingPropertyName\n * @return {?}\n */\n(bindingPropertyName) => ({ bindingPropertyName });\n/**\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Input = makePropDecorator('Input', (ɵ6));\n// WARNING: interface has both a type and a value, skipping emit\nconst ɵ7 = /**\n * @param {?=} bindingPropertyName\n * @return {?}\n */\n(bindingPropertyName) => ({ bindingPropertyName });\n/**\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Output = makePropDecorator('Output', (ɵ7));\n// WARNING: interface has both a type and a value, skipping emit\nconst ɵ8 = /**\n * @param {?=} hostPropertyName\n * @return {?}\n */\n(hostPropertyName) => ({ hostPropertyName });\n/**\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst HostBinding = makePropDecorator('HostBinding', (ɵ8));\n// WARNING: interface has both a type and a value, skipping emit\nconst ɵ9 = /**\n * @param {?=} eventName\n * @param {?=} args\n * @return {?}\n */\n(eventName, args) => ({ eventName, args });\n/**\n * Binds a CSS event to a host listener and supplies configuration metadata.\n * Angular invokes the supplied handler method when the host element emits the specified event,\n * and updates the bound element with the result.\n * If the handler method returns false, applies `preventDefault` on the bound element.\n *\n * \\@usageNotes\n *\n * The following example declares a directive\n * that attaches a click listener to a button and counts clicks.\n *\n * ```\n * \\@Directive({selector: 'button[counting]'})\n * class CountClicks {\n *   numberOfClicks = 0;\n *\n * \\@HostListener('click', ['$event.target'])\n *   onClick(btn) {\n *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);\n *  }\n * }\n *\n * \\@Component({\n *   selector: 'app',\n *   template: '<button counting>Increment</button>',\n * })\n * class App {}\n * ```\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst HostListener = makePropDecorator('HostListener', (ɵ9));\n/** @type {?} */\nconst SWITCH_COMPILE_COMPONENT__POST_R3__ = compileComponent;\n/** @type {?} */\nconst SWITCH_COMPILE_DIRECTIVE__POST_R3__ = compileDirective;\n/** @type {?} */\nconst SWITCH_COMPILE_PIPE__POST_R3__ = compilePipe;\n/** @type {?} */\nconst SWITCH_COMPILE_COMPONENT__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_COMPILE_DIRECTIVE__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_COMPILE_PIPE__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_COMPILE_COMPONENT = SWITCH_COMPILE_COMPONENT__PRE_R3__;\n/** @type {?} */\nconst SWITCH_COMPILE_DIRECTIVE = SWITCH_COMPILE_DIRECTIVE__PRE_R3__;\n/** @type {?} */\nconst SWITCH_COMPILE_PIPE = SWITCH_COMPILE_PIPE__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// WARNING: interface has both a type and a value, skipping emit\nconst ɵ0$a = /**\n * @param {?} ngModule\n * @return {?}\n */\n(ngModule) => ngModule, ɵ1$3 = /**\n * Decorator that marks the following class as an NgModule, and supplies\n * configuration metadata for it.\n *\n * * The `declarations` and `entryComponents` options configure the compiler\n * with information about what belongs to the NgModule.\n * * The `providers` options configures the NgModule's injector to provide\n * dependencies the NgModule members.\n * * The `imports` and `exports` options bring in members from other modules, and make\n * this module's members available to others.\n * @param {?} type\n * @param {?} meta\n * @return {?}\n */\n(type, meta) => SWITCH_COMPILE_NGMODULE(type, meta);\n/**\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst NgModule = makeDecorator('NgModule', (ɵ0$a), undefined, undefined, (ɵ1$3));\n/**\n * @param {?} moduleType\n * @param {?} metadata\n * @return {?}\n */\nfunction preR3NgModuleCompile(moduleType, metadata) {\n    /** @type {?} */\n    let imports = (metadata && metadata.imports) || [];\n    if (metadata && metadata.exports) {\n        imports = [...imports, metadata.exports];\n    }\n    /** @nocollapse */ moduleType.ngInjectorDef = ɵɵdefineInjector({\n        factory: convertInjectableProviderToFactory(moduleType, { useClass: moduleType }),\n        providers: metadata && metadata.providers,\n        imports: imports,\n    });\n}\n/** @type {?} */\nconst SWITCH_COMPILE_NGMODULE__POST_R3__ = compileNgModule;\n/** @type {?} */\nconst SWITCH_COMPILE_NGMODULE__PRE_R3__ = preR3NgModuleCompile;\n/** @type {?} */\nconst SWITCH_COMPILE_NGMODULE = SWITCH_COMPILE_NGMODULE__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A function that will be executed when an application is initialized.\n *\n * \\@publicApi\n * @type {?}\n */\nconst APP_INITIALIZER = new InjectionToken('Application Initializer');\n/**\n * A class that reflects the state of running {\\@link APP_INITIALIZER}s.\n *\n * \\@publicApi\n */\nclass ApplicationInitStatus {\n    /**\n     * @param {?} appInits\n     */\n    constructor(appInits) {\n        this.appInits = appInits;\n        this.initialized = false;\n        this.done = false;\n        this.donePromise = new Promise((/**\n         * @param {?} res\n         * @param {?} rej\n         * @return {?}\n         */\n        (res, rej) => {\n            this.resolve = res;\n            this.reject = rej;\n        }));\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    runInitializers() {\n        if (this.initialized) {\n            return;\n        }\n        /** @type {?} */\n        const asyncInitPromises = [];\n        /** @type {?} */\n        const complete = (/**\n         * @return {?}\n         */\n        () => {\n            ((/** @type {?} */ (this))).done = true;\n            this.resolve();\n        });\n        if (this.appInits) {\n            for (let i = 0; i < this.appInits.length; i++) {\n                /** @type {?} */\n                const initResult = this.appInits[i]();\n                if (isPromise(initResult)) {\n                    asyncInitPromises.push(initResult);\n                }\n            }\n        }\n        Promise.all(asyncInitPromises).then((/**\n         * @return {?}\n         */\n        () => { complete(); })).catch((/**\n         * @param {?} e\n         * @return {?}\n         */\n        e => { this.reject(e); }));\n        if (asyncInitPromises.length === 0) {\n            complete();\n        }\n        this.initialized = true;\n    }\n}\nApplicationInitStatus.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nApplicationInitStatus.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A DI Token representing a unique string id assigned to the application by Angular and used\n * primarily for prefixing application attributes and CSS styles when\n * {\\@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.\n *\n * If you need to avoid randomly generated value to be used as an application id, you can provide\n * a custom value via a DI provider <!-- TODO: provider --> configuring the root {\\@link Injector}\n * using this token.\n * \\@publicApi\n * @type {?}\n */\nconst APP_ID = new InjectionToken('AppId');\n/**\n * @return {?}\n */\nfunction _appIdRandomProviderFactory() {\n    return `${_randomChar()}${_randomChar()}${_randomChar()}`;\n}\n/**\n * Providers that will generate a random APP_ID_TOKEN.\n * \\@publicApi\n * @type {?}\n */\nconst APP_ID_RANDOM_PROVIDER = {\n    provide: APP_ID,\n    useFactory: _appIdRandomProviderFactory,\n    deps: (/** @type {?} */ ([])),\n};\n/**\n * @return {?}\n */\nfunction _randomChar() {\n    return String.fromCharCode(97 + Math.floor(Math.random() * 25));\n}\n/**\n * A function that will be executed when a platform is initialized.\n * \\@publicApi\n * @type {?}\n */\nconst PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');\n/**\n * A token that indicates an opaque platform id.\n * \\@publicApi\n * @type {?}\n */\nconst PLATFORM_ID = new InjectionToken('Platform ID');\n/**\n * All callbacks provided via this token will be called for every component that is bootstrapped.\n * Signature of the callback:\n *\n * `(componentRef: ComponentRef) => void`.\n *\n * \\@publicApi\n * @type {?}\n */\nconst APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');\n/**\n * A token which indicates the root directory of the application\n * \\@publicApi\n * @type {?}\n */\nconst PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass Console {\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    log(message) {\n        // tslint:disable-next-line:no-console\n        console.log(message);\n    }\n    // Note: for reporting errors use `DOM.logError()` as it is platform specific\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    warn(message) {\n        // tslint:disable-next-line:no-console\n        console.warn(message);\n    }\n}\nConsole.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * \\@publicApi\n * @template T\n */\nclass ModuleWithComponentFactories {\n    /**\n     * @param {?} ngModuleFactory\n     * @param {?} componentFactories\n     */\n    constructor(ngModuleFactory, componentFactories) {\n        this.ngModuleFactory = ngModuleFactory;\n        this.componentFactories = componentFactories;\n    }\n}\n/**\n * @return {?}\n */\nfunction _throwError() {\n    throw new Error(`Runtime compiler is not loaded`);\n}\n/** @type {?} */\nconst Compiler_compileModuleSync__PRE_R3__ = (/** @type {?} */ (_throwError));\n/** @type {?} */\nconst Compiler_compileModuleSync__POST_R3__ = (/**\n * @template T\n * @param {?} moduleType\n * @return {?}\n */\nfunction (moduleType) {\n    return new NgModuleFactory$1(moduleType);\n});\n/** @type {?} */\nconst Compiler_compileModuleSync = Compiler_compileModuleSync__PRE_R3__;\n/** @type {?} */\nconst Compiler_compileModuleAsync__PRE_R3__ = (/** @type {?} */ (_throwError));\n/** @type {?} */\nconst Compiler_compileModuleAsync__POST_R3__ = (/**\n * @template T\n * @param {?} moduleType\n * @return {?}\n */\nfunction (moduleType) {\n    return Promise.resolve(Compiler_compileModuleSync__POST_R3__(moduleType));\n});\n/** @type {?} */\nconst Compiler_compileModuleAsync = Compiler_compileModuleAsync__PRE_R3__;\n/** @type {?} */\nconst Compiler_compileModuleAndAllComponentsSync__PRE_R3__ = (/** @type {?} */ (_throwError));\n/** @type {?} */\nconst Compiler_compileModuleAndAllComponentsSync__POST_R3__ = (/**\n * @template T\n * @param {?} moduleType\n * @return {?}\n */\nfunction (moduleType) {\n    /** @type {?} */\n    const ngModuleFactory = Compiler_compileModuleSync__POST_R3__(moduleType);\n    /** @type {?} */\n    const moduleDef = (/** @type {?} */ (getNgModuleDef(moduleType)));\n    /** @type {?} */\n    const componentFactories = maybeUnwrapFn(moduleDef.declarations)\n        .reduce((/**\n     * @param {?} factories\n     * @param {?} declaration\n     * @return {?}\n     */\n    (factories, declaration) => {\n        /** @type {?} */\n        const componentDef = getComponentDef(declaration);\n        componentDef && factories.push(new ComponentFactory$1(componentDef));\n        return factories;\n    }), (/** @type {?} */ ([])));\n    return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n});\n/** @type {?} */\nconst Compiler_compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync__PRE_R3__;\n/** @type {?} */\nconst Compiler_compileModuleAndAllComponentsAsync__PRE_R3__ = (/** @type {?} */ (_throwError));\n/** @type {?} */\nconst Compiler_compileModuleAndAllComponentsAsync__POST_R3__ = (/**\n * @template T\n * @param {?} moduleType\n * @return {?}\n */\nfunction (moduleType) {\n    return Promise.resolve(Compiler_compileModuleAndAllComponentsSync__POST_R3__(moduleType));\n});\n/** @type {?} */\nconst Compiler_compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync__PRE_R3__;\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {\\@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * Each `\\@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n *\n * \\@publicApi\n */\nclass Compiler {\n    constructor() {\n        /**\n         * Compiles the given NgModule and all of its components. All templates of the components listed\n         * in `entryComponents` have to be inlined.\n         */\n        this.compileModuleSync = Compiler_compileModuleSync;\n        /**\n         * Compiles the given NgModule and all of its components\n         */\n        this.compileModuleAsync = Compiler_compileModuleAsync;\n        /**\n         * Same as {\\@link #compileModuleSync} but also creates ComponentFactories for all components.\n         */\n        this.compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync;\n        /**\n         * Same as {\\@link #compileModuleAsync} but also creates ComponentFactories for all components.\n         */\n        this.compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync;\n    }\n    /**\n     * Clears all caches.\n     * @return {?}\n     */\n    clearCache() { }\n    /**\n     * Clears the cache for the given component/ngModule.\n     * @param {?} type\n     * @return {?}\n     */\n    clearCacheFor(type) { }\n    /**\n     * Returns the id for a given NgModule, if one is defined and known to the compiler.\n     * @param {?} moduleType\n     * @return {?}\n     */\n    getModuleId(moduleType) { return undefined; }\n}\nCompiler.decorators = [\n    { type: Injectable }\n];\n/**\n * Token to provide CompilerOptions in the platform injector.\n *\n * \\@publicApi\n * @type {?}\n */\nconst COMPILER_OPTIONS = new InjectionToken('compilerOptions');\n/**\n * A factory for creating a Compiler\n *\n * \\@publicApi\n * @abstract\n */\nclass CompilerFactory {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet trace;\n/** @type {?} */\nlet events;\n/**\n * @return {?}\n */\nfunction detectWTF() {\n    /** @type {?} */\n    const wtf = ((/** @type {?} */ (_global)))['wtf'];\n    if (wtf) {\n        trace = wtf['trace'];\n        if (trace) {\n            events = trace['events'];\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @param {?} signature\n * @param {?=} flags\n * @return {?}\n */\nfunction createScope(signature, flags = null) {\n    return events.createScope(signature, flags);\n}\n/**\n * @template T\n * @param {?} scope\n * @param {?=} returnValue\n * @return {?}\n */\nfunction leave(scope, returnValue) {\n    trace.leaveScope(scope, returnValue);\n    return returnValue;\n}\n/**\n * @param {?} rangeType\n * @param {?} action\n * @return {?}\n */\nfunction startTimeRange(rangeType, action) {\n    return trace.beginTimeRange(rangeType, action);\n}\n/**\n * @param {?} range\n * @return {?}\n */\nfunction endTimeRange(range) {\n    trace.endTimeRange(range);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * True if WTF is enabled.\n * @type {?}\n */\nconst wtfEnabled = detectWTF();\n/**\n * @param {?=} arg0\n * @param {?=} arg1\n * @return {?}\n */\nfunction noopScope(arg0, arg1) {\n    return null;\n}\n/**\n * Create trace scope.\n *\n * Scopes must be strictly nested and are analogous to stack frames, but\n * do not have to follow the stack frames. Instead it is recommended that they follow logical\n * nesting. You may want to use\n * [Event\n * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)\n * as they are defined in WTF.\n *\n * Used to mark scope entry. The return value is used to leave the scope.\n *\n *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');\n *\n *     someMethod() {\n *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI\n *        // DO SOME WORK HERE\n *        return wtfLeave(s, 123); // Return value 123\n *     }\n *\n * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can\n * negatively impact the performance of your application. For this reason we recommend that\n * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and\n * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to\n * exception, will produce incorrect trace, but presence of exception signifies logic error which\n * needs to be fixed before the app should be profiled. Add try-finally only when you expect that\n * an exception is expected during normal execution while profiling.\n *\n * \\@publicApi\n * @deprecated the Web Tracing Framework is no longer supported in Angular\n * @type {?}\n */\nconst wtfCreateScope = wtfEnabled ? createScope : (/**\n * @param {?} signature\n * @param {?=} flags\n * @return {?}\n */\n(signature, flags) => noopScope);\n/**\n * Used to mark end of Scope.\n *\n * - `scope` to end.\n * - `returnValue` (optional) to be passed to the WTF.\n *\n * Returns the `returnValue for easy chaining.\n * \\@publicApi\n * @deprecated the Web Tracing Framework is no longer supported in Angular\n * @type {?}\n */\nconst wtfLeave = wtfEnabled ? leave : (/**\n * @param {?} s\n * @param {?=} r\n * @return {?}\n */\n(s, r) => r);\n/**\n * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.\n * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been\n * enabled.\n *\n *     someMethod() {\n *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');\n *        var future = new Future.delay(5).then((_) {\n *          wtfEndTimeRange(s);\n *        });\n *     }\n * \\@publicApi\n * @deprecated the Web Tracing Framework is no longer supported in Angular\n * @type {?}\n */\nconst wtfStartTimeRange = wtfEnabled ? startTimeRange : (/**\n * @param {?} rangeType\n * @param {?} action\n * @return {?}\n */\n(rangeType, action) => null);\n/**\n * Ends a async time range operation.\n * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been\n * enabled.\n * \\@publicApi\n * @deprecated the Web Tracing Framework is no longer supported in Angular\n * @type {?}\n */\nconst wtfEndTimeRange = wtfEnabled ? endTimeRange : (/**\n * @param {?} r\n * @return {?}\n */\n(r) => null);\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst promise = (() => Promise.resolve(0))();\nfunction scheduleMicroTask(fn) {\n    if (typeof Zone === 'undefined') {\n        // use promise to schedule microTask instead of use Zone\n        promise.then(() => { fn && fn.apply(null, null); });\n    }\n    else {\n        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {\\@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {\\@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '\\@angular/core';\n * import {NgIf} from '\\@angular/common';\n *\n * \\@Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nclass NgZone {\n    /**\n     * @param {?} __0\n     */\n    constructor({ enableLongStackTrace = false }) {\n        this.hasPendingMicrotasks = false;\n        this.hasPendingMacrotasks = false;\n        /**\n         * Whether there are no outstanding microtasks or macrotasks.\n         */\n        this.isStable = true;\n        /**\n         * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n         */\n        this.onUnstable = new EventEmitter(false);\n        /**\n         * Notifies when there is no more microtasks enqueued in the current VM Turn.\n         * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n         * For this reason this event can fire multiple times per VM Turn.\n         */\n        this.onMicrotaskEmpty = new EventEmitter(false);\n        /**\n         * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n         * implies we are about to relinquish VM turn.\n         * This event gets called just once.\n         */\n        this.onStable = new EventEmitter(false);\n        /**\n         * Notifies that an error has been delivered.\n         */\n        this.onError = new EventEmitter(false);\n        if (typeof Zone == 'undefined') {\n            throw new Error(`In this configuration Angular requires Zone.js`);\n        }\n        Zone.assertZonePatched();\n        /** @type {?} */\n        const self = (/** @type {?} */ ((/** @type {?} */ (this))));\n        self._nesting = 0;\n        self._outer = self._inner = Zone.current;\n        if (((/** @type {?} */ (Zone)))['wtfZoneSpec']) {\n            self._inner = self._inner.fork(((/** @type {?} */ (Zone)))['wtfZoneSpec']);\n        }\n        if (((/** @type {?} */ (Zone)))['TaskTrackingZoneSpec']) {\n            self._inner = self._inner.fork(new ((/** @type {?} */ (((/** @type {?} */ (Zone)))['TaskTrackingZoneSpec']))));\n        }\n        if (enableLongStackTrace && ((/** @type {?} */ (Zone)))['longStackTraceZoneSpec']) {\n            self._inner = self._inner.fork(((/** @type {?} */ (Zone)))['longStackTraceZoneSpec']);\n        }\n        forkInnerZoneWithAngularBehavior(self);\n    }\n    /**\n     * @return {?}\n     */\n    static isInAngularZone() { return Zone.current.get('isAngularZone') === true; }\n    /**\n     * @return {?}\n     */\n    static assertInAngularZone() {\n        if (!NgZone.isInAngularZone()) {\n            throw new Error('Expected to be in Angular Zone, but it is not!');\n        }\n    }\n    /**\n     * @return {?}\n     */\n    static assertNotInAngularZone() {\n        if (NgZone.isInAngularZone()) {\n            throw new Error('Expected to not be in Angular Zone, but it is!');\n        }\n    }\n    /**\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n     * the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @return {?}\n     */\n    run(fn, applyThis, applyArgs) {\n        return (/** @type {?} */ (((/** @type {?} */ ((/** @type {?} */ (this)))))._inner.run(fn, applyThis, applyArgs)));\n    }\n    /**\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n     * returned by the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @param {?=} name\n     * @return {?}\n     */\n    runTask(fn, applyThis, applyArgs, name) {\n        /** @type {?} */\n        const zone = ((/** @type {?} */ ((/** @type {?} */ (this)))))._inner;\n        /** @type {?} */\n        const task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop$1, noop$1);\n        try {\n            return (/** @type {?} */ (zone.runTask(task, applyThis, applyArgs)));\n        }\n        finally {\n            zone.cancelTask(task);\n        }\n    }\n    /**\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n     * rethrown.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @return {?}\n     */\n    runGuarded(fn, applyThis, applyArgs) {\n        return (/** @type {?} */ (((/** @type {?} */ ((/** @type {?} */ (this)))))._inner.runGuarded(fn, applyThis, applyArgs)));\n    }\n    /**\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n     * the function.\n     *\n     * Running functions via {\\@link #runOutsideAngular} allows you to escape Angular's zone and do\n     * work that\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * outside of the Angular zone.\n     *\n     * Use {\\@link #run} to reenter the Angular zone and do work that updates the application model.\n     * @template T\n     * @param {?} fn\n     * @return {?}\n     */\n    runOutsideAngular(fn) {\n        return (/** @type {?} */ (((/** @type {?} */ ((/** @type {?} */ (this)))))._outer.run(fn)));\n    }\n}\n/**\n * @return {?}\n */\nfunction noop$1() { }\n/** @type {?} */\nconst EMPTY_PAYLOAD = {};\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction checkStable(zone) {\n    if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\n        try {\n            zone._nesting++;\n            zone.onMicrotaskEmpty.emit(null);\n        }\n        finally {\n            zone._nesting--;\n            if (!zone.hasPendingMicrotasks) {\n                try {\n                    zone.runOutsideAngular((/**\n                     * @return {?}\n                     */\n                    () => zone.onStable.emit(null)));\n                }\n                finally {\n                    zone.isStable = true;\n                }\n            }\n        }\n    }\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction forkInnerZoneWithAngularBehavior(zone) {\n    zone._inner = zone._inner.fork({\n        name: 'angular',\n        properties: (/** @type {?} */ ({ 'isAngularZone': true })),\n        onInvokeTask: (/**\n         * @param {?} delegate\n         * @param {?} current\n         * @param {?} target\n         * @param {?} task\n         * @param {?} applyThis\n         * @param {?} applyArgs\n         * @return {?}\n         */\n        (delegate, current, target, task, applyThis, applyArgs) => {\n            try {\n                onEnter(zone);\n                return delegate.invokeTask(target, task, applyThis, applyArgs);\n            }\n            finally {\n                onLeave(zone);\n            }\n        }),\n        onInvoke: (/**\n         * @param {?} delegate\n         * @param {?} current\n         * @param {?} target\n         * @param {?} callback\n         * @param {?} applyThis\n         * @param {?} applyArgs\n         * @param {?} source\n         * @return {?}\n         */\n        (delegate, current, target, callback, applyThis, applyArgs, source) => {\n            try {\n                onEnter(zone);\n                return delegate.invoke(target, callback, applyThis, applyArgs, source);\n            }\n            finally {\n                onLeave(zone);\n            }\n        }),\n        onHasTask: (/**\n         * @param {?} delegate\n         * @param {?} current\n         * @param {?} target\n         * @param {?} hasTaskState\n         * @return {?}\n         */\n        (delegate, current, target, hasTaskState) => {\n            delegate.hasTask(target, hasTaskState);\n            if (current === target) {\n                // We are only interested in hasTask events which originate from our zone\n                // (A child hasTask event is not interesting to us)\n                if (hasTaskState.change == 'microTask') {\n                    zone.hasPendingMicrotasks = hasTaskState.microTask;\n                    checkStable(zone);\n                }\n                else if (hasTaskState.change == 'macroTask') {\n                    zone.hasPendingMacrotasks = hasTaskState.macroTask;\n                }\n            }\n        }),\n        onHandleError: (/**\n         * @param {?} delegate\n         * @param {?} current\n         * @param {?} target\n         * @param {?} error\n         * @return {?}\n         */\n        (delegate, current, target, error) => {\n            delegate.handleError(target, error);\n            zone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => zone.onError.emit(error)));\n            return false;\n        })\n    });\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction onEnter(zone) {\n    zone._nesting++;\n    if (zone.isStable) {\n        zone.isStable = false;\n        zone.onUnstable.emit(null);\n    }\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction onLeave(zone) {\n    zone._nesting--;\n    checkStable(zone);\n}\n/**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nclass NoopNgZone {\n    constructor() {\n        this.hasPendingMicrotasks = false;\n        this.hasPendingMacrotasks = false;\n        this.isStable = true;\n        this.onUnstable = new EventEmitter();\n        this.onMicrotaskEmpty = new EventEmitter();\n        this.onStable = new EventEmitter();\n        this.onError = new EventEmitter();\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    run(fn) { return fn(); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    runGuarded(fn) { return fn(); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    runOutsideAngular(fn) { return fn(); }\n    /**\n     * @template T\n     * @param {?} fn\n     * @return {?}\n     */\n    runTask(fn) { return fn(); }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser and by services such as Protractor. Each bootstrapped Angular\n * application on the page will have an instance of Testability.\n * \\@publicApi\n */\nclass Testability {\n    /**\n     * @param {?} _ngZone\n     */\n    constructor(_ngZone) {\n        this._ngZone = _ngZone;\n        this._pendingCount = 0;\n        this._isZoneStable = true;\n        /**\n         * Whether any work was done since the last 'whenStable' callback. This is\n         * useful to detect if this could have potentially destabilized another\n         * component while it is stabilizing.\n         * \\@internal\n         */\n        this._didWork = false;\n        this._callbacks = [];\n        this.taskTrackingZone = null;\n        this._watchAngularEvents();\n        _ngZone.run((/**\n         * @return {?}\n         */\n        () => {\n            this.taskTrackingZone =\n                typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');\n        }));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _watchAngularEvents() {\n        this._ngZone.onUnstable.subscribe({\n            next: (/**\n             * @return {?}\n             */\n            () => {\n                this._didWork = true;\n                this._isZoneStable = false;\n            })\n        });\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            this._ngZone.onStable.subscribe({\n                next: (/**\n                 * @return {?}\n                 */\n                () => {\n                    NgZone.assertNotInAngularZone();\n                    scheduleMicroTask((/**\n                     * @return {?}\n                     */\n                    () => {\n                        this._isZoneStable = true;\n                        this._runCallbacksIfReady();\n                    }));\n                })\n            });\n        }));\n    }\n    /**\n     * Increases the number of pending request\n     * @deprecated pending requests are now tracked with zones.\n     * @return {?}\n     */\n    increasePendingRequestCount() {\n        this._pendingCount += 1;\n        this._didWork = true;\n        return this._pendingCount;\n    }\n    /**\n     * Decreases the number of pending request\n     * @deprecated pending requests are now tracked with zones\n     * @return {?}\n     */\n    decreasePendingRequestCount() {\n        this._pendingCount -= 1;\n        if (this._pendingCount < 0) {\n            throw new Error('pending async requests below zero');\n        }\n        this._runCallbacksIfReady();\n        return this._pendingCount;\n    }\n    /**\n     * Whether an associated application is stable\n     * @return {?}\n     */\n    isStable() {\n        return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _runCallbacksIfReady() {\n        if (this.isStable()) {\n            // Schedules the call backs in a new frame so that it is always async.\n            scheduleMicroTask((/**\n             * @return {?}\n             */\n            () => {\n                while (this._callbacks.length !== 0) {\n                    /** @type {?} */\n                    let cb = (/** @type {?} */ (this._callbacks.pop()));\n                    clearTimeout(cb.timeoutId);\n                    cb.doneCb(this._didWork);\n                }\n                this._didWork = false;\n            }));\n        }\n        else {\n            // Still not stable, send updates.\n            /** @type {?} */\n            let pending = this.getPendingTasks();\n            this._callbacks = this._callbacks.filter((/**\n             * @param {?} cb\n             * @return {?}\n             */\n            (cb) => {\n                if (cb.updateCb && cb.updateCb(pending)) {\n                    clearTimeout(cb.timeoutId);\n                    return false;\n                }\n                return true;\n            }));\n            this._didWork = true;\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    getPendingTasks() {\n        if (!this.taskTrackingZone) {\n            return [];\n        }\n        // Copy the tasks data so that we don't leak tasks.\n        return this.taskTrackingZone.macroTasks.map((/**\n         * @param {?} t\n         * @return {?}\n         */\n        (t) => {\n            return {\n                source: t.source,\n                // From TaskTrackingZone:\n                // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40\n                creationLocation: (/** @type {?} */ (((/** @type {?} */ (t))).creationLocation)),\n                data: t.data\n            };\n        }));\n    }\n    /**\n     * @private\n     * @param {?} cb\n     * @param {?=} timeout\n     * @param {?=} updateCb\n     * @return {?}\n     */\n    addCallback(cb, timeout, updateCb) {\n        /** @type {?} */\n        let timeoutId = -1;\n        if (timeout && timeout > 0) {\n            timeoutId = setTimeout((/**\n             * @return {?}\n             */\n            () => {\n                this._callbacks = this._callbacks.filter((/**\n                 * @param {?} cb\n                 * @return {?}\n                 */\n                (cb) => cb.timeoutId !== timeoutId));\n                cb(this._didWork, this.getPendingTasks());\n            }), timeout);\n        }\n        this._callbacks.push((/** @type {?} */ ({ doneCb: cb, timeoutId: timeoutId, updateCb: updateCb })));\n    }\n    /**\n     * Wait for the application to be stable with a timeout. If the timeout is reached before that\n     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n     *\n     * @param {?} doneCb The callback to invoke when Angular is stable or the timeout expires\n     *    whichever comes first.\n     * @param {?=} timeout Optional. The maximum time to wait for Angular to become stable. If not\n     *    specified, whenStable() will wait forever.\n     * @param {?=} updateCb Optional. If specified, this callback will be invoked whenever the set of\n     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n     *    and no further updates will be issued.\n     * @return {?}\n     */\n    whenStable(doneCb, timeout, updateCb) {\n        if (updateCb && !this.taskTrackingZone) {\n            throw new Error('Task tracking zone is required when passing an update callback to ' +\n                'whenStable(). Is \"zone.js/dist/task-tracking.js\" loaded?');\n        }\n        // These arguments are 'Function' above to keep the public API simple.\n        this.addCallback((/** @type {?} */ (doneCb)), timeout, (/** @type {?} */ (updateCb)));\n        this._runCallbacksIfReady();\n    }\n    /**\n     * Get the number of pending requests\n     * @deprecated pending requests are now tracked with zones\n     * @return {?}\n     */\n    getPendingRequestCount() { return this._pendingCount; }\n    /**\n     * Find providers by name\n     * @param {?} using The root element to search from\n     * @param {?} provider The name of binding variable\n     * @param {?} exactMatch Whether using exactMatch\n     * @return {?}\n     */\n    findProviders(using, provider, exactMatch) {\n        // TODO(juliemr): implement.\n        return [];\n    }\n}\nTestability.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nTestability.ctorParameters = () => [\n    { type: NgZone }\n];\n/**\n * A global registry of {\\@link Testability} instances for specific elements.\n * \\@publicApi\n */\nclass TestabilityRegistry {\n    constructor() {\n        /**\n         * \\@internal\n         */\n        this._applications = new Map();\n        _testabilityGetter.addToWindow(this);\n    }\n    /**\n     * Registers an application with a testability hook so that it can be tracked\n     * @param {?} token token of application, root element\n     * @param {?} testability Testability hook\n     * @return {?}\n     */\n    registerApplication(token, testability) {\n        this._applications.set(token, testability);\n    }\n    /**\n     * Unregisters an application.\n     * @param {?} token token of application, root element\n     * @return {?}\n     */\n    unregisterApplication(token) { this._applications.delete(token); }\n    /**\n     * Unregisters all applications\n     * @return {?}\n     */\n    unregisterAllApplications() { this._applications.clear(); }\n    /**\n     * Get a testability hook associated with the application\n     * @param {?} elem root element\n     * @return {?}\n     */\n    getTestability(elem) { return this._applications.get(elem) || null; }\n    /**\n     * Get all registered testabilities\n     * @return {?}\n     */\n    getAllTestabilities() { return Array.from(this._applications.values()); }\n    /**\n     * Get all registered applications(root elements)\n     * @return {?}\n     */\n    getAllRootElements() { return Array.from(this._applications.keys()); }\n    /**\n     * Find testability of a node in the Tree\n     * @param {?} elem node\n     * @param {?=} findInAncestors whether finding testability in ancestors if testability was not found in\n     * current node\n     * @return {?}\n     */\n    findTestabilityInTree(elem, findInAncestors = true) {\n        return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n    }\n}\nTestabilityRegistry.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nTestabilityRegistry.ctorParameters = () => [];\nclass _NoopGetTestability {\n    /**\n     * @param {?} registry\n     * @return {?}\n     */\n    addToWindow(registry) { }\n    /**\n     * @param {?} registry\n     * @param {?} elem\n     * @param {?} findInAncestors\n     * @return {?}\n     */\n    findTestabilityInTree(registry, elem, findInAncestors) {\n        return null;\n    }\n}\n/**\n * Set the {\\@link GetTestability} implementation used by the Angular testing framework.\n * \\@publicApi\n * @param {?} getter\n * @return {?}\n */\nfunction setTestabilityGetter(getter) {\n    _testabilityGetter = getter;\n}\n/** @type {?} */\nlet _testabilityGetter = new _NoopGetTestability();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet _platform;\n/** @type {?} */\nlet compileNgModuleFactory = compileNgModuleFactory__PRE_R3__;\n/**\n * @template M\n * @param {?} injector\n * @param {?} options\n * @param {?} moduleType\n * @return {?}\n */\nfunction compileNgModuleFactory__PRE_R3__(injector, options, moduleType) {\n    /** @type {?} */\n    const compilerFactory = injector.get(CompilerFactory);\n    /** @type {?} */\n    const compiler = compilerFactory.createCompiler([options]);\n    return compiler.compileModuleAsync(moduleType);\n}\n/**\n * @template M\n * @param {?} injector\n * @param {?} options\n * @param {?} moduleType\n * @return {?}\n */\nfunction compileNgModuleFactory__POST_R3__(injector, options, moduleType) {\n    ngDevMode && assertNgModuleType(moduleType);\n    /** @type {?} */\n    const moduleFactory = new NgModuleFactory$1(moduleType);\n    if (isComponentResourceResolutionQueueEmpty()) {\n        return Promise.resolve(moduleFactory);\n    }\n    /** @type {?} */\n    const compilerOptions = injector.get(COMPILER_OPTIONS, []).concat(options);\n    /** @type {?} */\n    const compilerProviders = _mergeArrays(compilerOptions.map((/**\n     * @param {?} o\n     * @return {?}\n     */\n    o => (/** @type {?} */ (o.providers)))));\n    // In case there are no compiler providers, we just return the module factory as\n    // there won't be any resource loader. This can happen with Ivy, because AOT compiled\n    // modules can be still passed through \"bootstrapModule\". In that case we shouldn't\n    // unnecessarily require the JIT compiler.\n    if (compilerProviders.length === 0) {\n        return Promise.resolve(moduleFactory);\n    }\n    /** @type {?} */\n    const compiler = getCompilerFacade();\n    /** @type {?} */\n    const compilerInjector = Injector.create({ providers: compilerProviders });\n    /** @type {?} */\n    const resourceLoader = compilerInjector.get(compiler.ResourceLoader);\n    // The resource loader can also return a string while the \"resolveComponentResources\"\n    // always expects a promise. Therefore we need to wrap the returned value in a promise.\n    return resolveComponentResources((/**\n     * @param {?} url\n     * @return {?}\n     */\n    url => Promise.resolve(resourceLoader.get(url))))\n        .then((/**\n     * @return {?}\n     */\n    () => moduleFactory));\n}\n/** @type {?} */\nlet isBoundToModule = isBoundToModule__PRE_R3__;\n/**\n * @template C\n * @param {?} cf\n * @return {?}\n */\nfunction isBoundToModule__PRE_R3__(cf) {\n    return cf instanceof ComponentFactoryBoundToModule;\n}\n/**\n * @template C\n * @param {?} cf\n * @return {?}\n */\nfunction isBoundToModule__POST_R3__(cf) {\n    return ((/** @type {?} */ (cf))).isBoundToModule;\n}\n/** @type {?} */\nconst ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * \\@publicApi\n */\nclass NgProbeToken {\n    /**\n     * @param {?} name\n     * @param {?} token\n     */\n    constructor(name, token) {\n        this.name = name;\n        this.token = token;\n    }\n}\n/**\n * Creates a platform.\n * Platforms have to be eagerly created via this function.\n *\n * \\@publicApi\n * @param {?} injector\n * @return {?}\n */\nfunction createPlatform(injector) {\n    if (_platform && !_platform.destroyed &&\n        !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n        throw new Error('There can be only one platform. Destroy the previous one to create a new one.');\n    }\n    _platform = injector.get(PlatformRef);\n    /** @type {?} */\n    const inits = injector.get(PLATFORM_INITIALIZER, null);\n    if (inits)\n        inits.forEach((/**\n         * @param {?} init\n         * @return {?}\n         */\n        (init) => init()));\n    return _platform;\n}\n/**\n * Creates a factory for a platform\n *\n * \\@publicApi\n * @param {?} parentPlatformFactory\n * @param {?} name\n * @param {?=} providers\n * @return {?}\n */\nfunction createPlatformFactory(parentPlatformFactory, name, providers = []) {\n    /** @type {?} */\n    const desc = `Platform: ${name}`;\n    /** @type {?} */\n    const marker = new InjectionToken(desc);\n    return (/**\n     * @param {?=} extraProviders\n     * @return {?}\n     */\n    (extraProviders = []) => {\n        /** @type {?} */\n        let platform = getPlatform();\n        if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n            if (parentPlatformFactory) {\n                parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));\n            }\n            else {\n                /** @type {?} */\n                const injectedProviders = providers.concat(extraProviders).concat({ provide: marker, useValue: true });\n                createPlatform(Injector.create({ providers: injectedProviders, name: desc }));\n            }\n        }\n        return assertPlatform(marker);\n    });\n}\n/**\n * Checks that there currently is a platform which contains the given token as a provider.\n *\n * \\@publicApi\n * @param {?} requiredToken\n * @return {?}\n */\nfunction assertPlatform(requiredToken) {\n    /** @type {?} */\n    const platform = getPlatform();\n    if (!platform) {\n        throw new Error('No platform exists!');\n    }\n    if (!platform.injector.get(requiredToken, null)) {\n        throw new Error('A platform with a different configuration has been created. Please destroy it first.');\n    }\n    return platform;\n}\n/**\n * Destroy the existing platform.\n *\n * \\@publicApi\n * @return {?}\n */\nfunction destroyPlatform() {\n    if (_platform && !_platform.destroyed) {\n        _platform.destroy();\n    }\n}\n/**\n * Returns the current platform.\n *\n * \\@publicApi\n * @return {?}\n */\nfunction getPlatform() {\n    return _platform && !_platform.destroyed ? _platform : null;\n}\n/**\n * The Angular platform is the entry point for Angular on a web page. Each page\n * has exactly one platform, and services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n *\n * A page's platform is initialized implicitly when a platform is created via a platform factory\n * (e.g. {\\@link platformBrowser}), or explicitly by calling the {\\@link createPlatform} function.\n *\n * \\@publicApi\n */\nclass PlatformRef {\n    /**\n     * \\@internal\n     * @param {?} _injector\n     */\n    constructor(_injector) {\n        this._injector = _injector;\n        this._modules = [];\n        this._destroyListeners = [];\n        this._destroyed = false;\n    }\n    /**\n     * Creates an instance of an `\\@NgModule` for the given platform\n     * for offline compilation.\n     *\n     * \\@usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * my_module.ts:\n     *\n     * \\@NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * main.ts:\n     * import {MyModuleNgFactory} from './my_module.ngfactory';\n     * import {platformBrowser} from '\\@angular/platform-browser';\n     *\n     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n     * ```\n     * @template M\n     * @param {?} moduleFactory\n     * @param {?=} options\n     * @return {?}\n     */\n    bootstrapModuleFactory(moduleFactory, options) {\n        // Note: We need to create the NgZone _before_ we instantiate the module,\n        // as instantiating the module creates some providers eagerly.\n        // So we create a mini parent injector that just contains the new NgZone and\n        // pass that as parent to the NgModuleFactory.\n        /** @type {?} */\n        const ngZoneOption = options ? options.ngZone : undefined;\n        /** @type {?} */\n        const ngZone = getNgZone(ngZoneOption);\n        /** @type {?} */\n        const providers = [{ provide: NgZone, useValue: ngZone }];\n        // Attention: Don't use ApplicationRef.run here,\n        // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n        return ngZone.run((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const ngZoneInjector = Injector.create({ providers: providers, parent: this.injector, name: moduleFactory.moduleType.name });\n            /** @type {?} */\n            const moduleRef = (/** @type {?} */ (moduleFactory.create(ngZoneInjector)));\n            /** @type {?} */\n            const exceptionHandler = moduleRef.injector.get(ErrorHandler, null);\n            if (!exceptionHandler) {\n                throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n            }\n            moduleRef.onDestroy((/**\n             * @return {?}\n             */\n            () => remove(this._modules, moduleRef)));\n            (/** @type {?} */ (ngZone)).runOutsideAngular((/**\n             * @return {?}\n             */\n            () => (/** @type {?} */ (ngZone)).onError.subscribe({ next: (/**\n                 * @param {?} error\n                 * @return {?}\n                 */\n                (error) => { exceptionHandler.handleError(error); }) })));\n            return _callAndReportToErrorHandler(exceptionHandler, (/** @type {?} */ (ngZone)), (/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const initStatus = moduleRef.injector.get(ApplicationInitStatus);\n                initStatus.runInitializers();\n                return initStatus.donePromise.then((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._moduleDoBootstrap(moduleRef);\n                    return moduleRef;\n                }));\n            }));\n        }));\n    }\n    /**\n     * Creates an instance of an `\\@NgModule` for a given platform using the given runtime compiler.\n     *\n     * \\@usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * \\@NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n     * ```\n     *\n     * @template M\n     * @param {?} moduleType\n     * @param {?=} compilerOptions\n     * @return {?}\n     */\n    bootstrapModule(moduleType, compilerOptions = []) {\n        /** @type {?} */\n        const options = optionsReducer({}, compilerOptions);\n        return compileNgModuleFactory(this.injector, options, moduleType)\n            .then((/**\n         * @param {?} moduleFactory\n         * @return {?}\n         */\n        moduleFactory => this.bootstrapModuleFactory(moduleFactory, options)));\n    }\n    /**\n     * @private\n     * @param {?} moduleRef\n     * @return {?}\n     */\n    _moduleDoBootstrap(moduleRef) {\n        /** @type {?} */\n        const appRef = (/** @type {?} */ (moduleRef.injector.get(ApplicationRef)));\n        if (moduleRef._bootstrapComponents.length > 0) {\n            moduleRef._bootstrapComponents.forEach((/**\n             * @param {?} f\n             * @return {?}\n             */\n            f => appRef.bootstrap(f)));\n        }\n        else if (moduleRef.instance.ngDoBootstrap) {\n            moduleRef.instance.ngDoBootstrap(appRef);\n        }\n        else {\n            throw new Error(`The module ${stringify(moduleRef.instance.constructor)} was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ` +\n                `Please define one of these.`);\n        }\n        this._modules.push(moduleRef);\n    }\n    /**\n     * Register a listener to be called when the platform is disposed.\n     * @param {?} callback\n     * @return {?}\n     */\n    onDestroy(callback) { this._destroyListeners.push(callback); }\n    /**\n     * Retrieve the platform {\\@link Injector}, which is the parent injector for\n     * every Angular application on the page and provides singleton providers.\n     * @return {?}\n     */\n    get injector() { return this._injector; }\n    /**\n     * Destroy the Angular platform and all Angular applications on the page.\n     * @return {?}\n     */\n    destroy() {\n        if (this._destroyed) {\n            throw new Error('The platform has already been destroyed!');\n        }\n        this._modules.slice().forEach((/**\n         * @param {?} module\n         * @return {?}\n         */\n        module => module.destroy()));\n        this._destroyListeners.forEach((/**\n         * @param {?} listener\n         * @return {?}\n         */\n        listener => listener()));\n        this._destroyed = true;\n    }\n    /**\n     * @return {?}\n     */\n    get destroyed() { return this._destroyed; }\n}\nPlatformRef.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nPlatformRef.ctorParameters = () => [\n    { type: Injector }\n];\n/**\n * @param {?=} ngZoneOption\n * @return {?}\n */\nfunction getNgZone(ngZoneOption) {\n    /** @type {?} */\n    let ngZone;\n    if (ngZoneOption === 'noop') {\n        ngZone = new NoopNgZone();\n    }\n    else {\n        ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) ||\n            new NgZone({ enableLongStackTrace: isDevMode() });\n    }\n    return ngZone;\n}\n/**\n * @param {?} errorHandler\n * @param {?} ngZone\n * @param {?} callback\n * @return {?}\n */\nfunction _callAndReportToErrorHandler(errorHandler, ngZone, callback) {\n    try {\n        /** @type {?} */\n        const result = callback();\n        if (isPromise(result)) {\n            return result.catch((/**\n             * @param {?} e\n             * @return {?}\n             */\n            (e) => {\n                ngZone.runOutsideAngular((/**\n                 * @return {?}\n                 */\n                () => errorHandler.handleError(e)));\n                // rethrow as the exception handler might not do it\n                throw e;\n            }));\n        }\n        return result;\n    }\n    catch (e) {\n        ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => errorHandler.handleError(e)));\n        // rethrow as the exception handler might not do it\n        throw e;\n    }\n}\n/**\n * @template T\n * @param {?} dst\n * @param {?} objs\n * @return {?}\n */\nfunction optionsReducer(dst, objs) {\n    if (Array.isArray(objs)) {\n        dst = objs.reduce(optionsReducer, dst);\n    }\n    else {\n        dst = Object.assign({}, dst, ((/** @type {?} */ (objs))));\n    }\n    return dst;\n}\n/**\n * A reference to an Angular application running on a page.\n *\n * \\@usageNotes\n *\n * {\\@a is-stable-examples}\n * ### isStable examples and caveats\n *\n * Note two important points about `isStable`, demonstrated in the examples below:\n * - the application will never be stable if you start any kind\n * of recurrent asynchronous task when the application starts\n * (for example for a polling process, started with a `setInterval`, a `setTimeout`\n * or using RxJS operators like `interval`);\n * - the `isStable` Observable runs outside of the Angular zone.\n *\n * Let's imagine that you start a recurrent task\n * (here incrementing a counter, using RxJS `interval`),\n * and at the same time subscribe to `isStable`.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *      filter(stable => stable)\n *   ).subscribe(() => console.log('App is stable now');\n *   interval(1000).subscribe(counter => console.log(counter));\n * }\n * ```\n * In this example, `isStable` will never emit `true`,\n * and the trace \"App is stable now\" will never get logged.\n *\n * If you want to execute something when the app is stable,\n * you have to wait for the application to be stable\n * before starting your polling process.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     tap(stable => console.log('App is stable now')),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => console.log(counter));\n * }\n * ```\n * In this example, the trace \"App is stable now\" will be logged\n * and then the counter starts incrementing every second.\n *\n * Note also that this Observable runs outside of the Angular zone,\n * which means that the code in the subscription\n * to this Observable will not trigger the change detection.\n *\n * Let's imagine that instead of logging the counter value,\n * you update a field of your component\n * and display it in its template.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => this.value = counter);\n * }\n * ```\n * As the `isStable` Observable runs outside the zone,\n * the `value` field will be updated properly,\n * but the template will not be refreshed!\n *\n * You'll have to manually trigger the change detection to update the template.\n *\n * ```\n * constructor(appRef: ApplicationRef, cd: ChangeDetectorRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => {\n *     this.value = counter;\n *     cd.detectChanges();\n *   });\n * }\n * ```\n *\n * Or make the subscription callback run inside the zone.\n *\n * ```\n * constructor(appRef: ApplicationRef, zone: NgZone) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => zone.run(() => this.value = counter));\n * }\n * ```\n *\n * \\@publicApi\n */\nclass ApplicationRef {\n    /**\n     * \\@internal\n     * @param {?} _zone\n     * @param {?} _console\n     * @param {?} _injector\n     * @param {?} _exceptionHandler\n     * @param {?} _componentFactoryResolver\n     * @param {?} _initStatus\n     */\n    constructor(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {\n        this._zone = _zone;\n        this._console = _console;\n        this._injector = _injector;\n        this._exceptionHandler = _exceptionHandler;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._initStatus = _initStatus;\n        this._bootstrapListeners = [];\n        this._views = [];\n        this._runningTick = false;\n        this._enforceNoNewChanges = false;\n        this._stable = true;\n        /**\n         * Get a list of component types registered to this application.\n         * This list is populated even before the component is created.\n         */\n        this.componentTypes = [];\n        /**\n         * Get a list of components registered to this application.\n         */\n        this.components = [];\n        this._enforceNoNewChanges = isDevMode();\n        this._zone.onMicrotaskEmpty.subscribe({ next: (/**\n             * @return {?}\n             */\n            () => { this._zone.run((/**\n             * @return {?}\n             */\n            () => { this.tick(); })); }) });\n        /** @type {?} */\n        const isCurrentlyStable = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            this._stable = this._zone.isStable && !this._zone.hasPendingMacrotasks &&\n                !this._zone.hasPendingMicrotasks;\n            this._zone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                observer.next(this._stable);\n                observer.complete();\n            }));\n        }));\n        /** @type {?} */\n        const isStable = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            // Create the subscription to onStable outside the Angular Zone so that\n            // the callback is run outside the Angular Zone.\n            /** @type {?} */\n            let stableSub;\n            this._zone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                stableSub = this._zone.onStable.subscribe((/**\n                 * @return {?}\n                 */\n                () => {\n                    NgZone.assertNotInAngularZone();\n                    // Check whether there are no pending macro/micro tasks in the next tick\n                    // to allow for NgZone to update the state.\n                    scheduleMicroTask((/**\n                     * @return {?}\n                     */\n                    () => {\n                        if (!this._stable && !this._zone.hasPendingMacrotasks &&\n                            !this._zone.hasPendingMicrotasks) {\n                            this._stable = true;\n                            observer.next(true);\n                        }\n                    }));\n                }));\n            }));\n            /** @type {?} */\n            const unstableSub = this._zone.onUnstable.subscribe((/**\n             * @return {?}\n             */\n            () => {\n                NgZone.assertInAngularZone();\n                if (this._stable) {\n                    this._stable = false;\n                    this._zone.runOutsideAngular((/**\n                     * @return {?}\n                     */\n                    () => { observer.next(false); }));\n                }\n            }));\n            return (/**\n             * @return {?}\n             */\n            () => {\n                stableSub.unsubscribe();\n                unstableSub.unsubscribe();\n            });\n        }));\n        ((/** @type {?} */ (this))).isStable =\n            merge$1(isCurrentlyStable, isStable.pipe(share()));\n    }\n    /**\n     * Bootstrap a new component at the root level of the application.\n     *\n     * \\@usageNotes\n     * ### Bootstrap process\n     *\n     * When bootstrapping a new root component into an application, Angular mounts the\n     * specified application component onto DOM elements identified by the componentType's\n     * selector and kicks off automatic change detection to finish initializing the component.\n     *\n     * Optionally, a component can be mounted onto a DOM element that does not match the\n     * componentType's selector.\n     *\n     * ### Example\n     * {\\@example core/ts/platform/platform.ts region='longform'}\n     * @template C\n     * @param {?} componentOrFactory\n     * @param {?=} rootSelectorOrNode\n     * @return {?}\n     */\n    bootstrap(componentOrFactory, rootSelectorOrNode) {\n        if (!this._initStatus.done) {\n            throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n        }\n        /** @type {?} */\n        let componentFactory;\n        if (componentOrFactory instanceof ComponentFactory) {\n            componentFactory = componentOrFactory;\n        }\n        else {\n            componentFactory =\n                (/** @type {?} */ (this._componentFactoryResolver.resolveComponentFactory(componentOrFactory)));\n        }\n        this.componentTypes.push(componentFactory.componentType);\n        // Create a factory associated with the current module if it's not bound to some other\n        /** @type {?} */\n        const ngModule = isBoundToModule(componentFactory) ? null : this._injector.get(NgModuleRef);\n        /** @type {?} */\n        const selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n        /** @type {?} */\n        const compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\n        compRef.onDestroy((/**\n         * @return {?}\n         */\n        () => { this._unloadComponent(compRef); }));\n        /** @type {?} */\n        const testability = compRef.injector.get(Testability, null);\n        if (testability) {\n            compRef.injector.get(TestabilityRegistry)\n                .registerApplication(compRef.location.nativeElement, testability);\n        }\n        this._loadComponent(compRef);\n        if (isDevMode()) {\n            this._console.log(`Angular is running in the development mode. Call enableProdMode() to enable the production mode.`);\n        }\n        return compRef;\n    }\n    /**\n     * Invoke this method to explicitly process change detection and its side-effects.\n     *\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n     * further changes are detected. If additional changes are picked up during this second cycle,\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\n     * pass.\n     * In this case, Angular throws an error, since an Angular application can only have one change\n     * detection pass during which all change detection must complete.\n     * @return {?}\n     */\n    tick() {\n        if (this._runningTick) {\n            throw new Error('ApplicationRef.tick is called recursively');\n        }\n        /** @type {?} */\n        const scope = ApplicationRef._tickScope();\n        try {\n            this._runningTick = true;\n            for (let view of this._views) {\n                view.detectChanges();\n            }\n            if (this._enforceNoNewChanges) {\n                for (let view of this._views) {\n                    view.checkNoChanges();\n                }\n            }\n        }\n        catch (e) {\n            // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n            this._zone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => this._exceptionHandler.handleError(e)));\n        }\n        finally {\n            this._runningTick = false;\n            wtfLeave(scope);\n        }\n    }\n    /**\n     * Attaches a view so that it will be dirty checked.\n     * The view will be automatically detached when it is destroyed.\n     * This will throw if the view is already attached to a ViewContainer.\n     * @param {?} viewRef\n     * @return {?}\n     */\n    attachView(viewRef) {\n        /** @type {?} */\n        const view = ((/** @type {?} */ (viewRef)));\n        this._views.push(view);\n        view.attachToAppRef(this);\n    }\n    /**\n     * Detaches a view from dirty checking again.\n     * @param {?} viewRef\n     * @return {?}\n     */\n    detachView(viewRef) {\n        /** @type {?} */\n        const view = ((/** @type {?} */ (viewRef)));\n        remove(this._views, view);\n        view.detachFromAppRef();\n    }\n    /**\n     * @private\n     * @param {?} componentRef\n     * @return {?}\n     */\n    _loadComponent(componentRef) {\n        this.attachView(componentRef.hostView);\n        this.tick();\n        this.components.push(componentRef);\n        // Get the listeners lazily to prevent DI cycles.\n        /** @type {?} */\n        const listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);\n        listeners.forEach((/**\n         * @param {?} listener\n         * @return {?}\n         */\n        (listener) => listener(componentRef)));\n    }\n    /**\n     * @private\n     * @param {?} componentRef\n     * @return {?}\n     */\n    _unloadComponent(componentRef) {\n        this.detachView(componentRef.hostView);\n        remove(this.components, componentRef);\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // TODO(alxhub): Dispose of the NgZone.\n        this._views.slice().forEach((/**\n         * @param {?} view\n         * @return {?}\n         */\n        (view) => view.destroy()));\n    }\n    /**\n     * Returns the number of attached views.\n     * @return {?}\n     */\n    get viewCount() { return this._views.length; }\n}\n/**\n * \\@internal\n */\nApplicationRef._tickScope = wtfCreateScope('ApplicationRef#tick()');\nApplicationRef.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nApplicationRef.ctorParameters = () => [\n    { type: NgZone },\n    { type: Console },\n    { type: Injector },\n    { type: ErrorHandler },\n    { type: ComponentFactoryResolver },\n    { type: ApplicationInitStatus }\n];\n/**\n * @template T\n * @param {?} list\n * @param {?} el\n * @return {?}\n */\nfunction remove(list, el) {\n    /** @type {?} */\n    const index = list.indexOf(el);\n    if (index > -1) {\n        list.splice(index, 1);\n    }\n}\n/**\n * @param {?} parts\n * @return {?}\n */\nfunction _mergeArrays(parts) {\n    /** @type {?} */\n    const result = [];\n    parts.forEach((/**\n     * @param {?} part\n     * @return {?}\n     */\n    (part) => part && result.push(...part)));\n    return result;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nconst SWITCH_IVY_ENABLED__POST_R3__ = true;\n/** @type {?} */\nconst SWITCH_IVY_ENABLED__PRE_R3__ = false;\n/** @type {?} */\nconst ivyEnabled = SWITCH_IVY_ENABLED__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst _SEPARATOR = '#';\n/** @type {?} */\nconst FACTORY_CLASS_SUFFIX = 'NgFactory';\n/**\n * Configuration for SystemJsNgModuleLoader.\n * token.\n *\n * \\@publicApi\n * @deprecated the `string` form of `loadChildren` is deprecated, and `SystemJsNgModuleLoaderConfig`\n * is part of its implementation. See `LoadChildren` for more details.\n * @abstract\n */\nclass SystemJsNgModuleLoaderConfig {\n}\n/** @type {?} */\nconst DEFAULT_CONFIG = {\n    factoryPathPrefix: '',\n    factoryPathSuffix: '.ngfactory',\n};\n/**\n * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\n * \\@publicApi\n * @deprecated the `string` form of `loadChildren` is deprecated, and `SystemJsNgModuleLoader` is\n * part of its implementation. See `LoadChildren` for more details.\n */\nclass SystemJsNgModuleLoader {\n    /**\n     * @param {?} _compiler\n     * @param {?=} config\n     */\n    constructor(_compiler, config) {\n        this._compiler = _compiler;\n        this._config = config || DEFAULT_CONFIG;\n    }\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    load(path) {\n        /** @type {?} */\n        const legacyOfflineMode = !ivyEnabled && this._compiler instanceof Compiler;\n        return legacyOfflineMode ? this.loadFactory(path) : this.loadAndCompile(path);\n    }\n    /**\n     * @private\n     * @param {?} path\n     * @return {?}\n     */\n    loadAndCompile(path) {\n        let [module, exportName] = path.split(_SEPARATOR);\n        if (exportName === undefined) {\n            exportName = 'default';\n        }\n        return System.import(module)\n            .then((/**\n         * @param {?} module\n         * @return {?}\n         */\n        (module) => module[exportName]))\n            .then((/**\n         * @param {?} type\n         * @return {?}\n         */\n        (type) => checkNotEmpty(type, module, exportName)))\n            .then((/**\n         * @param {?} type\n         * @return {?}\n         */\n        (type) => this._compiler.compileModuleAsync(type)));\n    }\n    /**\n     * @private\n     * @param {?} path\n     * @return {?}\n     */\n    loadFactory(path) {\n        let [module, exportName] = path.split(_SEPARATOR);\n        /** @type {?} */\n        let factoryClassSuffix = FACTORY_CLASS_SUFFIX;\n        if (exportName === undefined) {\n            exportName = 'default';\n            factoryClassSuffix = '';\n        }\n        return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)\n            .then((/**\n         * @param {?} module\n         * @return {?}\n         */\n        (module) => module[exportName + factoryClassSuffix]))\n            .then((/**\n         * @param {?} factory\n         * @return {?}\n         */\n        (factory) => checkNotEmpty(factory, module, exportName)));\n    }\n}\nSystemJsNgModuleLoader.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nSystemJsNgModuleLoader.ctorParameters = () => [\n    { type: Compiler },\n    { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional }] }\n];\n/**\n * @param {?} value\n * @param {?} modulePath\n * @param {?} exportName\n * @return {?}\n */\nfunction checkNotEmpty(value, modulePath, exportName) {\n    if (!value) {\n        throw new Error(`Cannot find '${exportName}' in '${modulePath}'`);\n    }\n    return value;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents an Angular [view](guide/glossary#view),\n * specifically the [host view](guide/glossary#view-tree) that is defined by a component.\n * Also serves as the base class\n * that adds destroy methods for [embedded views](guide/glossary#view-tree).\n *\n * @see `EmbeddedViewRef`\n *\n * \\@publicApi\n * @abstract\n */\nclass ViewRef$1 extends ChangeDetectorRef {\n}\n/**\n * Represents an Angular [view](guide/glossary#view) in a view container.\n * An [embedded view](guide/glossary#view-tree) can be referenced from a component\n * other than the hosting component whose template defines it, or it can be defined\n * independently by a `TemplateRef`.\n *\n * Properties of elements in a view can change, but the structure (number and order) of elements in\n * a view cannot. Change the structure of elements by inserting, moving, or\n * removing nested views in a view container.\n *\n * @see `ViewContainerRef`\n *\n * \\@usageNotes\n *\n * The following template breaks down into two separate `TemplateRef` instances,\n * an outer one and an inner one.\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * This is the outer `TemplateRef`:\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n *\n * This is the inner `TemplateRef`:\n *\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * The outer and inner `TemplateRef` instances are assembled into views as follows:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * \\@publicApi\n * @abstract\n * @template C\n */\nclass EmbeddedViewRef extends ViewRef$1 {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@publicApi\n */\nclass DebugEventListener {\n    /**\n     * @param {?} name\n     * @param {?} callback\n     */\n    constructor(name, callback) {\n        this.name = name;\n        this.callback = callback;\n    }\n}\n// WARNING: interface has both a type and a value, skipping emit\nclass DebugNode__PRE_R3__ {\n    /**\n     * @param {?} nativeNode\n     * @param {?} parent\n     * @param {?} _debugContext\n     */\n    constructor(nativeNode, parent, _debugContext) {\n        this.listeners = [];\n        this.parent = null;\n        this._debugContext = _debugContext;\n        this.nativeNode = nativeNode;\n        if (parent && parent instanceof DebugElement__PRE_R3__) {\n            parent.addChild(this);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get injector() { return this._debugContext.injector; }\n    /**\n     * @return {?}\n     */\n    get componentInstance() { return this._debugContext.component; }\n    /**\n     * @return {?}\n     */\n    get context() { return this._debugContext.context; }\n    /**\n     * @return {?}\n     */\n    get references() { return this._debugContext.references; }\n    /**\n     * @return {?}\n     */\n    get providerTokens() { return this._debugContext.providerTokens; }\n}\n// WARNING: interface has both a type and a value, skipping emit\nclass DebugElement__PRE_R3__ extends DebugNode__PRE_R3__ {\n    /**\n     * @param {?} nativeNode\n     * @param {?} parent\n     * @param {?} _debugContext\n     */\n    constructor(nativeNode, parent, _debugContext) {\n        super(nativeNode, parent, _debugContext);\n        this.properties = {};\n        this.attributes = {};\n        this.classes = {};\n        this.styles = {};\n        this.childNodes = [];\n        this.nativeElement = nativeNode;\n    }\n    /**\n     * @param {?} child\n     * @return {?}\n     */\n    addChild(child) {\n        if (child) {\n            this.childNodes.push(child);\n            ((/** @type {?} */ (child))).parent = this;\n        }\n    }\n    /**\n     * @param {?} child\n     * @return {?}\n     */\n    removeChild(child) {\n        /** @type {?} */\n        const childIndex = this.childNodes.indexOf(child);\n        if (childIndex !== -1) {\n            ((/** @type {?} */ (child))).parent = null;\n            this.childNodes.splice(childIndex, 1);\n        }\n    }\n    /**\n     * @param {?} child\n     * @param {?} newChildren\n     * @return {?}\n     */\n    insertChildrenAfter(child, newChildren) {\n        /** @type {?} */\n        const siblingIndex = this.childNodes.indexOf(child);\n        if (siblingIndex !== -1) {\n            this.childNodes.splice(siblingIndex + 1, 0, ...newChildren);\n            newChildren.forEach((/**\n             * @param {?} c\n             * @return {?}\n             */\n            c => {\n                if (c.parent) {\n                    ((/** @type {?} */ (c.parent))).removeChild(c);\n                }\n                ((/** @type {?} */ (child))).parent = this;\n            }));\n        }\n    }\n    /**\n     * @param {?} refChild\n     * @param {?} newChild\n     * @return {?}\n     */\n    insertBefore(refChild, newChild) {\n        /** @type {?} */\n        const refIndex = this.childNodes.indexOf(refChild);\n        if (refIndex === -1) {\n            this.addChild(newChild);\n        }\n        else {\n            if (newChild.parent) {\n                ((/** @type {?} */ (newChild.parent))).removeChild(newChild);\n            }\n            ((/** @type {?} */ (newChild))).parent = this;\n            this.childNodes.splice(refIndex, 0, newChild);\n        }\n    }\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    query(predicate) {\n        /** @type {?} */\n        const results = this.queryAll(predicate);\n        return results[0] || null;\n    }\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    queryAll(predicate) {\n        /** @type {?} */\n        const matches = [];\n        _queryElementChildren(this, predicate, matches);\n        return matches;\n    }\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    queryAllNodes(predicate) {\n        /** @type {?} */\n        const matches = [];\n        _queryNodeChildren(this, predicate, matches);\n        return matches;\n    }\n    /**\n     * @return {?}\n     */\n    get children() {\n        return (/** @type {?} */ (this\n            .childNodes //\n            .filter((/**\n         * @param {?} node\n         * @return {?}\n         */\n        (node) => node instanceof DebugElement__PRE_R3__))));\n    }\n    /**\n     * @param {?} eventName\n     * @param {?} eventObj\n     * @return {?}\n     */\n    triggerEventHandler(eventName, eventObj) {\n        this.listeners.forEach((/**\n         * @param {?} listener\n         * @return {?}\n         */\n        (listener) => {\n            if (listener.name == eventName) {\n                listener.callback(eventObj);\n            }\n        }));\n    }\n}\n/**\n * \\@publicApi\n * @param {?} debugEls\n * @return {?}\n */\nfunction asNativeElements(debugEls) {\n    return debugEls.map((/**\n     * @param {?} el\n     * @return {?}\n     */\n    (el) => el.nativeElement));\n}\n/**\n * @param {?} element\n * @param {?} predicate\n * @param {?} matches\n * @return {?}\n */\nfunction _queryElementChildren(element, predicate, matches) {\n    element.childNodes.forEach((/**\n     * @param {?} node\n     * @return {?}\n     */\n    node => {\n        if (node instanceof DebugElement__PRE_R3__) {\n            if (predicate(node)) {\n                matches.push(node);\n            }\n            _queryElementChildren(node, predicate, matches);\n        }\n    }));\n}\n/**\n * @param {?} parentNode\n * @param {?} predicate\n * @param {?} matches\n * @return {?}\n */\nfunction _queryNodeChildren(parentNode, predicate, matches) {\n    if (parentNode instanceof DebugElement__PRE_R3__) {\n        parentNode.childNodes.forEach((/**\n         * @param {?} node\n         * @return {?}\n         */\n        node => {\n            if (predicate(node)) {\n                matches.push(node);\n            }\n            if (node instanceof DebugElement__PRE_R3__) {\n                _queryNodeChildren(node, predicate, matches);\n            }\n        }));\n    }\n}\nclass DebugNode__POST_R3__ {\n    /**\n     * @param {?} nativeNode\n     */\n    constructor(nativeNode) { this.nativeNode = nativeNode; }\n    /**\n     * @return {?}\n     */\n    get parent() {\n        /** @type {?} */\n        const parent = (/** @type {?} */ (this.nativeNode.parentNode));\n        return parent ? new DebugElement__POST_R3__(parent) : null;\n    }\n    /**\n     * @return {?}\n     */\n    get injector() { return getInjector(this.nativeNode); }\n    /**\n     * @return {?}\n     */\n    get componentInstance() {\n        /** @type {?} */\n        const nativeElement = this.nativeNode;\n        return nativeElement &&\n            (getComponent((/** @type {?} */ (nativeElement))) || getViewComponent(nativeElement));\n    }\n    /**\n     * @return {?}\n     */\n    get context() { return getContext((/** @type {?} */ (this.nativeNode))); }\n    /**\n     * @return {?}\n     */\n    get listeners() {\n        return getListeners((/** @type {?} */ (this.nativeNode))).filter(isBrowserEvents);\n    }\n    /**\n     * @return {?}\n     */\n    get references() { return getLocalRefs(this.nativeNode); }\n    /**\n     * @return {?}\n     */\n    get providerTokens() { return getInjectionTokens((/** @type {?} */ (this.nativeNode))); }\n}\nclass DebugElement__POST_R3__ extends DebugNode__POST_R3__ {\n    /**\n     * @param {?} nativeNode\n     */\n    constructor(nativeNode) {\n        ngDevMode && assertDomNode(nativeNode);\n        super(nativeNode);\n    }\n    /**\n     * @return {?}\n     */\n    get nativeElement() {\n        return this.nativeNode.nodeType == Node.ELEMENT_NODE ? (/** @type {?} */ (this.nativeNode)) : null;\n    }\n    /**\n     * @return {?}\n     */\n    get name() { return (/** @type {?} */ (this.nativeElement)).nodeName; }\n    /**\n     *  Gets a map of property names to property values for an element.\n     *\n     *  This map includes:\n     *  - Regular property bindings (e.g. `[id]=\"id\"`)\n     *  - Host property bindings (e.g. `host: { '[id]': \"id\" }`)\n     *  - Interpolated property bindings (e.g. `id=\"{{ value }}\")\n     *\n     *  It does not include:\n     *  - input property bindings (e.g. `[myCustomInput]=\"value\"`)\n     *  - attribute bindings (e.g. `[attr.role]=\"menu\"`)\n     * @return {?}\n     */\n    get properties() {\n        /** @type {?} */\n        const context = (/** @type {?} */ (loadLContext(this.nativeNode)));\n        /** @type {?} */\n        const lView = context.lView;\n        /** @type {?} */\n        const tData = lView[TVIEW].data;\n        /** @type {?} */\n        const tNode = (/** @type {?} */ (tData[context.nodeIndex]));\n        /** @type {?} */\n        const properties = collectPropertyBindings(tNode, lView, tData);\n        /** @type {?} */\n        const hostProperties = collectHostPropertyBindings(tNode, lView, tData);\n        /** @type {?} */\n        const className = collectClassNames(this);\n        /** @type {?} */\n        const output = Object.assign({}, properties, hostProperties);\n        if (className) {\n            output['className'] = output['className'] ? output['className'] + ` ${className}` : className;\n        }\n        return output;\n    }\n    /**\n     * @return {?}\n     */\n    get attributes() {\n        /** @type {?} */\n        const attributes = {};\n        /** @type {?} */\n        const element = this.nativeElement;\n        if (element) {\n            /** @type {?} */\n            const eAttrs = element.attributes;\n            for (let i = 0; i < eAttrs.length; i++) {\n                /** @type {?} */\n                const attr = eAttrs[i];\n                attributes[attr.name] = attr.value;\n            }\n        }\n        return attributes;\n    }\n    /**\n     * @return {?}\n     */\n    get classes() {\n        /** @type {?} */\n        const classes = {};\n        /** @type {?} */\n        const element = this.nativeElement;\n        if (element) {\n            /** @type {?} */\n            const lContext = loadLContextFromNode(element);\n            /** @type {?} */\n            const stylingContext = getStylingContextFromLView(lContext.nodeIndex, lContext.lView);\n            if (stylingContext) {\n                for (let i = 10 /* SingleStylesStartPosition */; i < stylingContext.length; i += 4 /* Size */) {\n                    if (isClassBasedValue(stylingContext, i)) {\n                        /** @type {?} */\n                        const className = getProp(stylingContext, i);\n                        /** @type {?} */\n                        const value = getValue(stylingContext, i);\n                        if (typeof value == 'boolean') {\n                            // we want to ignore `null` since those don't overwrite the values.\n                            classes[className] = value;\n                        }\n                    }\n                }\n            }\n            else {\n                // Fallback, just read DOM.\n                /** @type {?} */\n                const eClasses = element.classList;\n                for (let i = 0; i < eClasses.length; i++) {\n                    classes[eClasses[i]] = true;\n                }\n            }\n        }\n        return classes;\n    }\n    /**\n     * @return {?}\n     */\n    get styles() {\n        /** @type {?} */\n        const styles = {};\n        /** @type {?} */\n        const element = this.nativeElement;\n        if (element) {\n            /** @type {?} */\n            const lContext = loadLContextFromNode(element);\n            /** @type {?} */\n            const stylingContext = getStylingContextFromLView(lContext.nodeIndex, lContext.lView);\n            if (stylingContext) {\n                for (let i = 10 /* SingleStylesStartPosition */; i < stylingContext.length; i += 4 /* Size */) {\n                    if (!isClassBasedValue(stylingContext, i)) {\n                        /** @type {?} */\n                        const styleName = getProp(stylingContext, i);\n                        /** @type {?} */\n                        const value = (/** @type {?} */ (getValue(stylingContext, i)));\n                        if (value !== null) {\n                            // we want to ignore `null` since those don't overwrite the values.\n                            styles[styleName] = value;\n                        }\n                    }\n                }\n            }\n            else {\n                // Fallback, just read DOM.\n                /** @type {?} */\n                const eStyles = ((/** @type {?} */ (element))).style;\n                for (let i = 0; i < eStyles.length; i++) {\n                    /** @type {?} */\n                    const name = eStyles.item(i);\n                    styles[name] = eStyles.getPropertyValue(name);\n                }\n            }\n        }\n        return styles;\n    }\n    /**\n     * @return {?}\n     */\n    get childNodes() {\n        /** @type {?} */\n        const childNodes = this.nativeNode.childNodes;\n        /** @type {?} */\n        const children = [];\n        for (let i = 0; i < childNodes.length; i++) {\n            /** @type {?} */\n            const element = childNodes[i];\n            children.push(getDebugNode__POST_R3__(element));\n        }\n        return children;\n    }\n    /**\n     * @return {?}\n     */\n    get children() {\n        /** @type {?} */\n        const nativeElement = this.nativeElement;\n        if (!nativeElement)\n            return [];\n        /** @type {?} */\n        const childNodes = nativeElement.children;\n        /** @type {?} */\n        const children = [];\n        for (let i = 0; i < childNodes.length; i++) {\n            /** @type {?} */\n            const element = childNodes[i];\n            children.push(getDebugNode__POST_R3__(element));\n        }\n        return children;\n    }\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    query(predicate) {\n        /** @type {?} */\n        const results = this.queryAll(predicate);\n        return results[0] || null;\n    }\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    queryAll(predicate) {\n        /** @type {?} */\n        const matches = [];\n        _queryAllR3(this, predicate, matches, true);\n        return matches;\n    }\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    queryAllNodes(predicate) {\n        /** @type {?} */\n        const matches = [];\n        _queryAllR3(this, predicate, matches, false);\n        return matches;\n    }\n    /**\n     * @param {?} eventName\n     * @param {?} eventObj\n     * @return {?}\n     */\n    triggerEventHandler(eventName, eventObj) {\n        this.listeners.forEach((/**\n         * @param {?} listener\n         * @return {?}\n         */\n        (listener) => {\n            if (listener.name === eventName) {\n                listener.callback(eventObj);\n            }\n        }));\n    }\n}\n/**\n * Walk the TNode tree to find matches for the predicate.\n *\n * @param {?} parentElement the element from which the walk is started\n * @param {?} predicate the predicate to match\n * @param {?} matches the list of positive matches\n * @param {?} elementsOnly whether only elements should be searched\n * @return {?}\n */\nfunction _queryAllR3(parentElement, predicate, matches, elementsOnly) {\n    /** @type {?} */\n    const context = (/** @type {?} */ (loadLContext(parentElement.nativeNode)));\n    /** @type {?} */\n    const parentTNode = (/** @type {?} */ (context.lView[TVIEW].data[context.nodeIndex]));\n    _queryNodeChildrenR3(parentTNode, context.lView, predicate, matches, elementsOnly, parentElement.nativeNode);\n}\n/**\n * Recursively match the current TNode against the predicate, and goes on with the next ones.\n *\n * @param {?} tNode the current TNode\n * @param {?} lView the LView of this TNode\n * @param {?} predicate the predicate to match\n * @param {?} matches the list of positive matches\n * @param {?} elementsOnly whether only elements should be searched\n * @param {?} rootNativeNode the root native node on which prediccate shouold not be matched\n * @return {?}\n */\nfunction _queryNodeChildrenR3(tNode, lView, predicate, matches, elementsOnly, rootNativeNode) {\n    // For each type of TNode, specific logic is executed.\n    if (tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */) {\n        // Case 1: the TNode is an element\n        // The native node has to be checked.\n        _addQueryMatchR3(getNativeByTNode(tNode, lView), predicate, matches, elementsOnly, rootNativeNode);\n        if (isComponent(tNode)) {\n            // If the element is the host of a component, then all nodes in its view have to be processed.\n            // Note: the component's content (tNode.child) will be processed from the insertion points.\n            /** @type {?} */\n            const componentView = getComponentViewByIndex(tNode.index, lView);\n            if (componentView && componentView[TVIEW].firstChild)\n                _queryNodeChildrenR3((/** @type {?} */ (componentView[TVIEW].firstChild)), componentView, predicate, matches, elementsOnly, rootNativeNode);\n        }\n        else {\n            // Otherwise, its children have to be processed.\n            if (tNode.child)\n                _queryNodeChildrenR3(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);\n        }\n        // In all cases, if a dynamic container exists for this node, each view inside it has to be\n        // processed.\n        /** @type {?} */\n        const nodeOrContainer = lView[tNode.index];\n        if (isLContainer(nodeOrContainer)) {\n            _queryNodeChildrenInContainerR3(nodeOrContainer, predicate, matches, elementsOnly, rootNativeNode);\n        }\n    }\n    else if (tNode.type === 0 /* Container */) {\n        // Case 2: the TNode is a container\n        // The native node has to be checked.\n        /** @type {?} */\n        const lContainer = lView[tNode.index];\n        _addQueryMatchR3(lContainer[NATIVE], predicate, matches, elementsOnly, rootNativeNode);\n        // Each view inside the container has to be processed.\n        _queryNodeChildrenInContainerR3(lContainer, predicate, matches, elementsOnly, rootNativeNode);\n    }\n    else if (tNode.type === 1 /* Projection */) {\n        // Case 3: the TNode is a projection insertion point (i.e. a <ng-content>).\n        // The nodes projected at this location all need to be processed.\n        /** @type {?} */\n        const componentView = findComponentView((/** @type {?} */ (lView)));\n        /** @type {?} */\n        const componentHost = (/** @type {?} */ (componentView[T_HOST]));\n        /** @type {?} */\n        const head = ((/** @type {?} */ (componentHost.projection)))[(/** @type {?} */ (tNode.projection))];\n        if (Array.isArray(head)) {\n            for (let nativeNode of head) {\n                _addQueryMatchR3(nativeNode, predicate, matches, elementsOnly, rootNativeNode);\n            }\n        }\n        else {\n            if (head) {\n                /** @type {?} */\n                const nextLView = (/** @type {?} */ ((/** @type {?} */ (componentView[PARENT]))));\n                /** @type {?} */\n                const nextTNode = (/** @type {?} */ (nextLView[TVIEW].data[head.index]));\n                _queryNodeChildrenR3(nextTNode, nextLView, predicate, matches, elementsOnly, rootNativeNode);\n            }\n        }\n    }\n    else {\n        // Case 4: the TNode is a view.\n        if (tNode.child) {\n            _queryNodeChildrenR3(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);\n        }\n    }\n    // To determine the next node to be processed, we need to use the next or the projectionNext link,\n    // depending on whether the current node has been projected.\n    /** @type {?} */\n    const nextTNode = (tNode.flags & 2 /* isProjected */) ? tNode.projectionNext : tNode.next;\n    if (nextTNode) {\n        _queryNodeChildrenR3(nextTNode, lView, predicate, matches, elementsOnly, rootNativeNode);\n    }\n}\n/**\n * Process all TNodes in a given container.\n *\n * @param {?} lContainer the container to be processed\n * @param {?} predicate the predicate to match\n * @param {?} matches the list of positive matches\n * @param {?} elementsOnly whether only elements should be searched\n * @param {?} rootNativeNode the root native node on which prediccate shouold not be matched\n * @return {?}\n */\nfunction _queryNodeChildrenInContainerR3(lContainer, predicate, matches, elementsOnly, rootNativeNode) {\n    for (let i = 0; i < lContainer[VIEWS].length; i++) {\n        /** @type {?} */\n        const childView = lContainer[VIEWS][i];\n        _queryNodeChildrenR3((/** @type {?} */ (childView[TVIEW].node)), childView, predicate, matches, elementsOnly, rootNativeNode);\n    }\n}\n/**\n * Match the current native node against the predicate.\n *\n * @param {?} nativeNode the current native node\n * @param {?} predicate the predicate to match\n * @param {?} matches the list of positive matches\n * @param {?} elementsOnly whether only elements should be searched\n * @param {?} rootNativeNode the root native node on which prediccate shouold not be matched\n * @return {?}\n */\nfunction _addQueryMatchR3(nativeNode, predicate, matches, elementsOnly, rootNativeNode) {\n    if (rootNativeNode !== nativeNode) {\n        /** @type {?} */\n        const debugNode = getDebugNode(nativeNode);\n        if (debugNode && (elementsOnly ? debugNode instanceof DebugElement__POST_R3__ : true) &&\n            predicate(debugNode)) {\n            matches.push(debugNode);\n        }\n    }\n}\n/**\n * Iterates through the property bindings for a given node and generates\n * a map of property names to values. This map only contains property bindings\n * defined in templates, not in host bindings.\n * @param {?} tNode\n * @param {?} lView\n * @param {?} tData\n * @return {?}\n */\nfunction collectPropertyBindings(tNode, lView, tData) {\n    /** @type {?} */\n    const properties = {};\n    /** @type {?} */\n    let bindingIndex = getFirstBindingIndex(tNode.propertyMetadataStartIndex, tData);\n    while (bindingIndex < tNode.propertyMetadataEndIndex) {\n        /** @type {?} */\n        let value;\n        /** @type {?} */\n        let propMetadata = (/** @type {?} */ (tData[bindingIndex]));\n        while (!isPropMetadataString(propMetadata)) {\n            // This is the first value for an interpolation. We need to build up\n            // the full interpolation by combining runtime values in LView with\n            // the static interstitial values stored in TData.\n            value = (value || '') + renderStringify(lView[bindingIndex]) + tData[bindingIndex];\n            propMetadata = (/** @type {?} */ (tData[++bindingIndex]));\n        }\n        value = value === undefined ? lView[bindingIndex] : value += lView[bindingIndex];\n        // Property metadata string has 3 parts: property name, prefix, and suffix\n        /** @type {?} */\n        const metadataParts = propMetadata.split(INTERPOLATION_DELIMITER);\n        /** @type {?} */\n        const propertyName = metadataParts[0];\n        // Attr bindings don't have property names and should be skipped\n        if (propertyName) {\n            // Wrap value with prefix and suffix (will be '' for normal bindings), if they're defined.\n            // Avoid wrapping for normal bindings so that the value doesn't get cast to a string.\n            properties[propertyName] = (metadataParts[1] && metadataParts[2]) ?\n                metadataParts[1] + value + metadataParts[2] :\n                value;\n        }\n        bindingIndex++;\n    }\n    return properties;\n}\n/**\n * Retrieves the first binding index that holds values for this property\n * binding.\n *\n * For normal bindings (e.g. `[id]=\"id\"`), the binding index is the\n * same as the metadata index. For interpolations (e.g. `id=\"{{id}}-{{name}}\"`),\n * there can be multiple binding values, so we might have to loop backwards\n * from the metadata index until we find the first one.\n *\n * @param {?} metadataIndex The index of the first property metadata string for\n * this node.\n * @param {?} tData The data array for the current TView\n * @return {?} The first binding index for this binding\n */\nfunction getFirstBindingIndex(metadataIndex, tData) {\n    /** @type {?} */\n    let currentBindingIndex = metadataIndex - 1;\n    // If the slot before the metadata holds a string, we know that this\n    // metadata applies to an interpolation with at least 2 bindings, and\n    // we need to search further to access the first binding value.\n    /** @type {?} */\n    let currentValue = tData[currentBindingIndex];\n    // We need to iterate until we hit either a:\n    // - TNode (it is an element slot marking the end of `consts` section), OR a\n    // - metadata string (slot is attribute metadata or a previous node's property metadata)\n    while (typeof currentValue === 'string' && !isPropMetadataString(currentValue)) {\n        currentValue = tData[--currentBindingIndex];\n    }\n    return currentBindingIndex + 1;\n}\n/**\n * @param {?} tNode\n * @param {?} lView\n * @param {?} tData\n * @return {?}\n */\nfunction collectHostPropertyBindings(tNode, lView, tData) {\n    /** @type {?} */\n    const properties = {};\n    // Host binding values for a node are stored after directives on that node\n    /** @type {?} */\n    let hostPropIndex = tNode.directiveEnd;\n    /** @type {?} */\n    let propMetadata = (/** @type {?} */ (tData[hostPropIndex]));\n    // When we reach a value in TView.data that is not a string, we know we've\n    // hit the next node's providers and directives and should stop copying data.\n    while (typeof propMetadata === 'string') {\n        /** @type {?} */\n        const propertyName = propMetadata.split(INTERPOLATION_DELIMITER)[0];\n        properties[propertyName] = lView[hostPropIndex];\n        propMetadata = tData[++hostPropIndex];\n    }\n    return properties;\n}\n/**\n * @param {?} debugElement\n * @return {?}\n */\nfunction collectClassNames(debugElement) {\n    /** @type {?} */\n    const classes = debugElement.classes;\n    /** @type {?} */\n    let output = '';\n    for (const className of Object.keys(classes)) {\n        if (classes[className]) {\n            output = output ? output + ` ${className}` : className;\n        }\n    }\n    return output;\n}\n// Need to keep the nodes in a global Map so that multiple angular apps are supported.\n/** @type {?} */\nconst _nativeNodeToDebugNode = new Map();\n/**\n * @param {?} nativeNode\n * @return {?}\n */\nfunction getDebugNode__PRE_R3__(nativeNode) {\n    return _nativeNodeToDebugNode.get(nativeNode) || null;\n}\n/**\n * @param {?} nativeNode\n * @return {?}\n */\nfunction getDebugNode__POST_R3__(nativeNode) {\n    if (nativeNode instanceof Node) {\n        return nativeNode.nodeType == Node.ELEMENT_NODE ?\n            new DebugElement__POST_R3__((/** @type {?} */ (nativeNode))) :\n            new DebugNode__POST_R3__(nativeNode);\n    }\n    return null;\n}\n/**\n * \\@publicApi\n * @type {?}\n */\nconst getDebugNode = getDebugNode__PRE_R3__;\n/**\n * @param {?} node\n * @return {?}\n */\nfunction indexDebugNode(node) {\n    _nativeNodeToDebugNode.set(node.nativeNode, node);\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction removeDebugNodeFromIndex(node) {\n    _nativeNodeToDebugNode.delete(node.nativeNode);\n}\n/**\n * \\@publicApi\n * @type {?}\n */\nconst DebugNode = (/** @type {?} */ (DebugNode__PRE_R3__));\n/**\n * \\@publicApi\n * @type {?}\n */\nconst DebugElement = (/** @type {?} */ (DebugElement__PRE_R3__));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst _CORE_PLATFORM_PROVIDERS = [\n    // Set a default platform name for platforms that don't set it explicitly.\n    { provide: PLATFORM_ID, useValue: 'unknown' },\n    { provide: PlatformRef, deps: [Injector] },\n    { provide: TestabilityRegistry, deps: [] },\n    { provide: Console, deps: [] },\n];\n/**\n * This platform has to be included in any other platform\n *\n * \\@publicApi\n * @type {?}\n */\nconst platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Provide this token to set the locale of your application.\n * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\n * DecimalPipe and PercentPipe) and by ICU expressions.\n *\n * See the [i18n guide](guide/i18n#setting-up-locale) for more information.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import { LOCALE_ID } from '\\@angular/core';\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\n * });\n * ```\n *\n * \\@publicApi\n * @type {?}\n */\nconst LOCALE_ID = new InjectionToken('LocaleId');\n/**\n * Use this token at bootstrap to provide the content of your translation file (`xtb`,\n * `xlf` or `xlf2`) when you want to translate your application in another language.\n *\n * See the [i18n guide](guide/i18n#merge) for more information.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS } from '\\@angular/core';\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * // content of your translation file\n * const translations = '....';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\n * });\n * ```\n *\n * \\@publicApi\n * @type {?}\n */\nconst TRANSLATIONS$1 = new InjectionToken('Translations');\n/**\n * Provide this token at bootstrap to set the format of your {\\@link TRANSLATIONS}: `xtb`,\n * `xlf` or `xlf2`.\n *\n * See the [i18n guide](guide/i18n#merge) for more information.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS_FORMAT } from '\\@angular/core';\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\n * });\n * ```\n *\n * \\@publicApi\n * @type {?}\n */\nconst TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');\n/** @enum {number} */\nconst MissingTranslationStrategy = {\n    Error: 0,\n    Warning: 1,\n    Ignore: 2,\n};\nMissingTranslationStrategy[MissingTranslationStrategy.Error] = 'Error';\nMissingTranslationStrategy[MissingTranslationStrategy.Warning] = 'Warning';\nMissingTranslationStrategy[MissingTranslationStrategy.Ignore] = 'Ignore';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction _iterableDiffersFactory() {\n    return defaultIterableDiffers;\n}\n/**\n * @return {?}\n */\nfunction _keyValueDiffersFactory() {\n    return defaultKeyValueDiffers;\n}\n/**\n * @param {?=} locale\n * @return {?}\n */\nfunction _localeFactory(locale) {\n    return locale || 'en-US';\n}\n/**\n * A built-in [dependency injection token](guide/glossary#di-token)\n * that is used to configure the root injector for bootstrapping.\n * @type {?}\n */\nconst APPLICATION_MODULE_PROVIDERS = [\n    {\n        provide: ApplicationRef,\n        useClass: ApplicationRef,\n        deps: [NgZone, Console, Injector, ErrorHandler, ComponentFactoryResolver, ApplicationInitStatus]\n    },\n    { provide: SCHEDULER, deps: [NgZone], useFactory: zoneSchedulerFactory },\n    {\n        provide: ApplicationInitStatus,\n        useClass: ApplicationInitStatus,\n        deps: [[new Optional(), APP_INITIALIZER]]\n    },\n    { provide: Compiler, useClass: Compiler, deps: [] },\n    APP_ID_RANDOM_PROVIDER,\n    { provide: IterableDiffers, useFactory: _iterableDiffersFactory, deps: [] },\n    { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory, deps: [] },\n    {\n        provide: LOCALE_ID,\n        useFactory: _localeFactory,\n        deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]\n    },\n];\n/**\n * Schedule work at next available slot.\n *\n * In Ivy this is just `requestAnimationFrame`. For compatibility reasons when bootstrapped\n * using `platformRef.bootstrap` we need to use `NgZone.onStable` as the scheduling mechanism.\n * This overrides the scheduling mechanism in Ivy to `NgZone.onStable`.\n *\n * @param {?} ngZone NgZone to use for scheduling.\n * @return {?}\n */\nfunction zoneSchedulerFactory(ngZone) {\n    /** @type {?} */\n    let queue = [];\n    ngZone.onStable.subscribe((/**\n     * @return {?}\n     */\n    () => {\n        while (queue.length) {\n            (/** @type {?} */ (queue.pop()))();\n        }\n    }));\n    return (/**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { queue.push(fn); });\n}\n/**\n * Configures the root injector for an app with\n * providers of `\\@angular/core` dependencies that `ApplicationRef` needs\n * to bootstrap components.\n *\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command.\n *\n * \\@publicApi\n */\nclass ApplicationModule {\n    // Inject ApplicationRef to make it eager...\n    /**\n     * @param {?} appRef\n     */\n    constructor(appRef) { }\n}\nApplicationModule.decorators = [\n    { type: NgModule, args: [{ providers: APPLICATION_MODULE_PROVIDERS },] }\n];\n/** @nocollapse */\nApplicationModule.ctorParameters = () => [\n    { type: ApplicationRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} ngContentIndex\n * @param {?} childCount\n * @param {?=} handleEvent\n * @param {?=} templateFactory\n * @return {?}\n */\nfunction anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {\n    flags |= 1 /* TypeElement */;\n    const { matchedQueries, references, matchedQueryIds } = splitMatchedQueriesDsl(matchedQueriesDsl);\n    /** @type {?} */\n    const template = templateFactory ? resolveDefinition(templateFactory) : null;\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        flags,\n        checkIndex: -1,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries, matchedQueryIds, references, ngContentIndex, childCount,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: {\n            ns: null,\n            name: null,\n            attrs: null, template,\n            componentProvider: null,\n            componentView: null,\n            componentRendererType: null,\n            publicProviders: null,\n            allProviders: null,\n            handleEvent: handleEvent || NOOP\n        },\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} ngContentIndex\n * @param {?} childCount\n * @param {?} namespaceAndName\n * @param {?=} fixedAttrs\n * @param {?=} bindings\n * @param {?=} outputs\n * @param {?=} handleEvent\n * @param {?=} componentView\n * @param {?=} componentRendererType\n * @return {?}\n */\nfunction elementDef(checkIndex, flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs = [], bindings, outputs, handleEvent, componentView, componentRendererType) {\n    if (!handleEvent) {\n        handleEvent = NOOP;\n    }\n    const { matchedQueries, references, matchedQueryIds } = splitMatchedQueriesDsl(matchedQueriesDsl);\n    /** @type {?} */\n    let ns = (/** @type {?} */ (null));\n    /** @type {?} */\n    let name = (/** @type {?} */ (null));\n    if (namespaceAndName) {\n        [ns, name] = splitNamespace(namespaceAndName);\n    }\n    bindings = bindings || [];\n    /** @type {?} */\n    const bindingDefs = new Array(bindings.length);\n    for (let i = 0; i < bindings.length; i++) {\n        const [bindingFlags, namespaceAndName, suffixOrSecurityContext] = bindings[i];\n        const [ns, name] = splitNamespace(namespaceAndName);\n        /** @type {?} */\n        let securityContext = (/** @type {?} */ (undefined));\n        /** @type {?} */\n        let suffix = (/** @type {?} */ (undefined));\n        switch (bindingFlags & 15 /* Types */) {\n            case 4 /* TypeElementStyle */:\n                suffix = (/** @type {?} */ (suffixOrSecurityContext));\n                break;\n            case 1 /* TypeElementAttribute */:\n            case 8 /* TypeProperty */:\n                securityContext = (/** @type {?} */ (suffixOrSecurityContext));\n                break;\n        }\n        bindingDefs[i] =\n            { flags: bindingFlags, ns, name, nonMinifiedName: name, securityContext, suffix };\n    }\n    outputs = outputs || [];\n    /** @type {?} */\n    const outputDefs = new Array(outputs.length);\n    for (let i = 0; i < outputs.length; i++) {\n        const [target, eventName] = outputs[i];\n        outputDefs[i] = {\n            type: 0 /* ElementOutput */,\n            target: (/** @type {?} */ (target)), eventName,\n            propName: null\n        };\n    }\n    fixedAttrs = fixedAttrs || [];\n    /** @type {?} */\n    const attrs = (/** @type {?} */ (fixedAttrs.map((/**\n     * @param {?} __0\n     * @return {?}\n     */\n    ([namespaceAndName, value]) => {\n        const [ns, name] = splitNamespace(namespaceAndName);\n        return [ns, name, value];\n    }))));\n    componentRendererType = resolveRendererType2(componentRendererType);\n    if (componentView) {\n        flags |= 33554432 /* ComponentView */;\n    }\n    flags |= 1 /* TypeElement */;\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex,\n        flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries, matchedQueryIds, references, ngContentIndex, childCount,\n        bindings: bindingDefs,\n        bindingFlags: calcBindingFlags(bindingDefs),\n        outputs: outputDefs,\n        element: {\n            ns,\n            name,\n            attrs,\n            template: null,\n            // will bet set by the view definition\n            componentProvider: null,\n            componentView: componentView || null,\n            componentRendererType: componentRendererType,\n            publicProviders: null,\n            allProviders: null,\n            handleEvent: handleEvent || NOOP,\n        },\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nfunction createElement(view, renderHost, def) {\n    /** @type {?} */\n    const elDef = (/** @type {?} */ (def.element));\n    /** @type {?} */\n    const rootSelectorOrNode = view.root.selectorOrNode;\n    /** @type {?} */\n    const renderer = view.renderer;\n    /** @type {?} */\n    let el;\n    if (view.parent || !rootSelectorOrNode) {\n        if (elDef.name) {\n            el = renderer.createElement(elDef.name, elDef.ns);\n        }\n        else {\n            el = renderer.createComment('');\n        }\n        /** @type {?} */\n        const parentEl = getParentRenderElement(view, renderHost, def);\n        if (parentEl) {\n            renderer.appendChild(parentEl, el);\n        }\n    }\n    else {\n        // when using native Shadow DOM, do not clear the root element contents to allow slot projection\n        /** @type {?} */\n        const preserveContent = (!!elDef.componentRendererType &&\n            elDef.componentRendererType.encapsulation === ViewEncapsulation.ShadowDom);\n        el = renderer.selectRootElement(rootSelectorOrNode, preserveContent);\n    }\n    if (elDef.attrs) {\n        for (let i = 0; i < elDef.attrs.length; i++) {\n            const [ns, name, value] = elDef.attrs[i];\n            renderer.setAttribute(el, name, value, ns);\n        }\n    }\n    return el;\n}\n/**\n * @param {?} view\n * @param {?} compView\n * @param {?} def\n * @param {?} el\n * @return {?}\n */\nfunction listenToElementOutputs(view, compView, def, el) {\n    for (let i = 0; i < def.outputs.length; i++) {\n        /** @type {?} */\n        const output = def.outputs[i];\n        /** @type {?} */\n        const handleEventClosure = renderEventHandlerClosure(view, def.nodeIndex, elementEventFullName(output.target, output.eventName));\n        /** @type {?} */\n        let listenTarget = output.target;\n        /** @type {?} */\n        let listenerView = view;\n        if (output.target === 'component') {\n            listenTarget = null;\n            listenerView = compView;\n        }\n        /** @type {?} */\n        const disposable = (/** @type {?} */ (listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure)));\n        (/** @type {?} */ (view.disposables))[def.outputIndex + i] = disposable;\n    }\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} eventName\n * @return {?}\n */\nfunction renderEventHandlerClosure(view, index, eventName) {\n    return (/**\n     * @param {?} event\n     * @return {?}\n     */\n    (event) => dispatchEvent(view, index, eventName, event));\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nfunction checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    const bindLen = def.bindings.length;\n    /** @type {?} */\n    let changed = false;\n    if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9))\n        changed = true;\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nfunction checkAndUpdateElementDynamic(view, def, values) {\n    /** @type {?} */\n    let changed = false;\n    for (let i = 0; i < values.length; i++) {\n        if (checkAndUpdateElementValue(view, def, i, values[i]))\n            changed = true;\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nfunction checkAndUpdateElementValue(view, def, bindingIdx, value) {\n    if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {\n        return false;\n    }\n    /** @type {?} */\n    const binding = def.bindings[bindingIdx];\n    /** @type {?} */\n    const elData = asElementData(view, def.nodeIndex);\n    /** @type {?} */\n    const renderNode = elData.renderElement;\n    /** @type {?} */\n    const name = (/** @type {?} */ (binding.name));\n    switch (binding.flags & 15 /* Types */) {\n        case 1 /* TypeElementAttribute */:\n            setElementAttribute(view, binding, renderNode, binding.ns, name, value);\n            break;\n        case 2 /* TypeElementClass */:\n            setElementClass(view, renderNode, name, value);\n            break;\n        case 4 /* TypeElementStyle */:\n            setElementStyle(view, binding, renderNode, name, value);\n            break;\n        case 8 /* TypeProperty */:\n            /** @type {?} */\n            const bindView = (def.flags & 33554432 /* ComponentView */ &&\n                binding.flags & 32 /* SyntheticHostProperty */) ?\n                elData.componentView :\n                view;\n            setElementProperty(bindView, binding, renderNode, name, value);\n            break;\n    }\n    return true;\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} ns\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementAttribute(view, binding, renderNode, ns, name, value) {\n    /** @type {?} */\n    const securityContext = binding.securityContext;\n    /** @type {?} */\n    let renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n    renderValue = renderValue != null ? renderValue.toString() : null;\n    /** @type {?} */\n    const renderer = view.renderer;\n    if (value != null) {\n        renderer.setAttribute(renderNode, name, renderValue, ns);\n    }\n    else {\n        renderer.removeAttribute(renderNode, name, ns);\n    }\n}\n/**\n * @param {?} view\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementClass(view, renderNode, name, value) {\n    /** @type {?} */\n    const renderer = view.renderer;\n    if (value) {\n        renderer.addClass(renderNode, name);\n    }\n    else {\n        renderer.removeClass(renderNode, name);\n    }\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementStyle(view, binding, renderNode, name, value) {\n    /** @type {?} */\n    let renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, (/** @type {?} */ (value)));\n    if (renderValue != null) {\n        renderValue = renderValue.toString();\n        /** @type {?} */\n        const unit = binding.suffix;\n        if (unit != null) {\n            renderValue = renderValue + unit;\n        }\n    }\n    else {\n        renderValue = null;\n    }\n    /** @type {?} */\n    const renderer = view.renderer;\n    if (renderValue != null) {\n        renderer.setStyle(renderNode, name, renderValue);\n    }\n    else {\n        renderer.removeStyle(renderNode, name);\n    }\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementProperty(view, binding, renderNode, name, value) {\n    /** @type {?} */\n    const securityContext = binding.securityContext;\n    /** @type {?} */\n    let renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n    view.renderer.setProperty(renderNode, name, renderValue);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} flags\n * @param {?} id\n * @param {?} bindings\n * @return {?}\n */\nfunction queryDef(flags, id, bindings) {\n    /** @type {?} */\n    let bindingDefs = [];\n    for (let propName in bindings) {\n        /** @type {?} */\n        const bindingType = bindings[propName];\n        bindingDefs.push({ propName, bindingType });\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        // TODO(vicb): check\n        checkIndex: -1, flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        ngContentIndex: -1,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {},\n        childCount: 0,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: { id, filterId: filterQueryId(id), bindings: bindingDefs },\n        ngContent: null\n    };\n}\n/**\n * @return {?}\n */\nfunction createQuery$1() {\n    return new QueryList();\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction dirtyParentQueries(view) {\n    /** @type {?} */\n    const queryIds = view.def.nodeMatchedQueries;\n    while (view.parent && isEmbeddedView(view)) {\n        /** @type {?} */\n        let tplDef = (/** @type {?} */ (view.parentNodeDef));\n        view = view.parent;\n        // content queries\n        /** @type {?} */\n        const end = tplDef.nodeIndex + tplDef.childCount;\n        for (let i = 0; i <= end; i++) {\n            /** @type {?} */\n            const nodeDef = view.def.nodes[i];\n            if ((nodeDef.flags & 67108864 /* TypeContentQuery */) &&\n                (nodeDef.flags & 536870912 /* DynamicQuery */) &&\n                ((/** @type {?} */ (nodeDef.query)).filterId & queryIds) === (/** @type {?} */ (nodeDef.query)).filterId) {\n                asQueryList(view, i).setDirty();\n            }\n            if ((nodeDef.flags & 1 /* TypeElement */ && i + nodeDef.childCount < tplDef.nodeIndex) ||\n                !(nodeDef.childFlags & 67108864 /* TypeContentQuery */) ||\n                !(nodeDef.childFlags & 536870912 /* DynamicQuery */)) {\n                // skip elements that don't contain the template element or no query.\n                i += nodeDef.childCount;\n            }\n        }\n    }\n    // view queries\n    if (view.def.nodeFlags & 134217728 /* TypeViewQuery */) {\n        for (let i = 0; i < view.def.nodes.length; i++) {\n            /** @type {?} */\n            const nodeDef = view.def.nodes[i];\n            if ((nodeDef.flags & 134217728 /* TypeViewQuery */) && (nodeDef.flags & 536870912 /* DynamicQuery */)) {\n                asQueryList(view, i).setDirty();\n            }\n            // only visit the root nodes\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @return {?}\n */\nfunction checkAndUpdateQuery(view, nodeDef) {\n    /** @type {?} */\n    const queryList = asQueryList(view, nodeDef.nodeIndex);\n    if (!queryList.dirty) {\n        return;\n    }\n    /** @type {?} */\n    let directiveInstance;\n    /** @type {?} */\n    let newValues = (/** @type {?} */ (undefined));\n    if (nodeDef.flags & 67108864 /* TypeContentQuery */) {\n        /** @type {?} */\n        const elementDef = (/** @type {?} */ ((/** @type {?} */ (nodeDef.parent)).parent));\n        newValues = calcQueryValues(view, elementDef.nodeIndex, elementDef.nodeIndex + elementDef.childCount, (/** @type {?} */ (nodeDef.query)), []);\n        directiveInstance = asProviderData(view, (/** @type {?} */ (nodeDef.parent)).nodeIndex).instance;\n    }\n    else if (nodeDef.flags & 134217728 /* TypeViewQuery */) {\n        newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, (/** @type {?} */ (nodeDef.query)), []);\n        directiveInstance = view.component;\n    }\n    queryList.reset(newValues);\n    /** @type {?} */\n    const bindings = (/** @type {?} */ (nodeDef.query)).bindings;\n    /** @type {?} */\n    let notify = false;\n    for (let i = 0; i < bindings.length; i++) {\n        /** @type {?} */\n        const binding = bindings[i];\n        /** @type {?} */\n        let boundValue;\n        switch (binding.bindingType) {\n            case 0 /* First */:\n                boundValue = queryList.first;\n                break;\n            case 1 /* All */:\n                boundValue = queryList;\n                notify = true;\n                break;\n        }\n        directiveInstance[binding.propName] = boundValue;\n    }\n    if (notify) {\n        queryList.notifyOnChanges();\n    }\n}\n/**\n * @param {?} view\n * @param {?} startIndex\n * @param {?} endIndex\n * @param {?} queryDef\n * @param {?} values\n * @return {?}\n */\nfunction calcQueryValues(view, startIndex, endIndex, queryDef, values) {\n    for (let i = startIndex; i <= endIndex; i++) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[i];\n        /** @type {?} */\n        const valueType = nodeDef.matchedQueries[queryDef.id];\n        if (valueType != null) {\n            values.push(getQueryValue(view, nodeDef, valueType));\n        }\n        if (nodeDef.flags & 1 /* TypeElement */ && (/** @type {?} */ (nodeDef.element)).template &&\n            ((/** @type {?} */ ((/** @type {?} */ (nodeDef.element)).template)).nodeMatchedQueries & queryDef.filterId) ===\n                queryDef.filterId) {\n            /** @type {?} */\n            const elementData = asElementData(view, i);\n            // check embedded views that were attached at the place of their template,\n            // but process child nodes first if some match the query (see issue #16568)\n            if ((nodeDef.childMatchedQueries & queryDef.filterId) === queryDef.filterId) {\n                calcQueryValues(view, i + 1, i + nodeDef.childCount, queryDef, values);\n                i += nodeDef.childCount;\n            }\n            if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                /** @type {?} */\n                const embeddedViews = (/** @type {?} */ (elementData.viewContainer))._embeddedViews;\n                for (let k = 0; k < embeddedViews.length; k++) {\n                    /** @type {?} */\n                    const embeddedView = embeddedViews[k];\n                    /** @type {?} */\n                    const dvc = declaredViewContainer(embeddedView);\n                    if (dvc && dvc === elementData) {\n                        calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);\n                    }\n                }\n            }\n            /** @type {?} */\n            const projectedViews = elementData.template._projectedViews;\n            if (projectedViews) {\n                for (let k = 0; k < projectedViews.length; k++) {\n                    /** @type {?} */\n                    const projectedView = projectedViews[k];\n                    calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);\n                }\n            }\n        }\n        if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {\n            // if no child matches the query, skip the children.\n            i += nodeDef.childCount;\n        }\n    }\n    return values;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} queryValueType\n * @return {?}\n */\nfunction getQueryValue(view, nodeDef, queryValueType) {\n    if (queryValueType != null) {\n        // a match\n        switch (queryValueType) {\n            case 1 /* RenderElement */:\n                return asElementData(view, nodeDef.nodeIndex).renderElement;\n            case 0 /* ElementRef */:\n                return new ElementRef(asElementData(view, nodeDef.nodeIndex).renderElement);\n            case 2 /* TemplateRef */:\n                return asElementData(view, nodeDef.nodeIndex).template;\n            case 3 /* ViewContainerRef */:\n                return asElementData(view, nodeDef.nodeIndex).viewContainer;\n            case 4 /* Provider */:\n                return asProviderData(view, nodeDef.nodeIndex).instance;\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} ngContentIndex\n * @param {?} index\n * @return {?}\n */\nfunction ngContentDef(ngContentIndex, index) {\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: -1,\n        flags: 8 /* TypeNgContent */,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {}, ngContentIndex,\n        childCount: 0,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: { index }\n    };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nfunction appendNgContent(view, renderHost, def) {\n    /** @type {?} */\n    const parentEl = getParentRenderElement(view, renderHost, def);\n    if (!parentEl) {\n        // Nothing to do if there is no parent element.\n        return;\n    }\n    /** @type {?} */\n    const ngContentIndex = (/** @type {?} */ (def.ngContent)).index;\n    visitProjectedRenderNodes(view, ngContentIndex, 1 /* AppendChild */, parentEl, null, undefined);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} checkIndex\n * @param {?} argCount\n * @return {?}\n */\nfunction purePipeDef(checkIndex, argCount) {\n    // argCount + 1 to include the pipe as first arg\n    return _pureExpressionDef(128 /* TypePurePipe */, checkIndex, new Array(argCount + 1));\n}\n/**\n * @param {?} checkIndex\n * @param {?} argCount\n * @return {?}\n */\nfunction pureArrayDef(checkIndex, argCount) {\n    return _pureExpressionDef(32 /* TypePureArray */, checkIndex, new Array(argCount));\n}\n/**\n * @param {?} checkIndex\n * @param {?} propToIndex\n * @return {?}\n */\nfunction pureObjectDef(checkIndex, propToIndex) {\n    /** @type {?} */\n    const keys = Object.keys(propToIndex);\n    /** @type {?} */\n    const nbKeys = keys.length;\n    /** @type {?} */\n    const propertyNames = new Array(nbKeys);\n    for (let i = 0; i < nbKeys; i++) {\n        /** @type {?} */\n        const key = keys[i];\n        /** @type {?} */\n        const index = propToIndex[key];\n        propertyNames[index] = key;\n    }\n    return _pureExpressionDef(64 /* TypePureObject */, checkIndex, propertyNames);\n}\n/**\n * @param {?} flags\n * @param {?} checkIndex\n * @param {?} propertyNames\n * @return {?}\n */\nfunction _pureExpressionDef(flags, checkIndex, propertyNames) {\n    /** @type {?} */\n    const bindings = new Array(propertyNames.length);\n    for (let i = 0; i < propertyNames.length; i++) {\n        /** @type {?} */\n        const prop = propertyNames[i];\n        bindings[i] = {\n            flags: 8 /* TypeProperty */,\n            name: prop,\n            ns: null,\n            nonMinifiedName: prop,\n            securityContext: null,\n            suffix: null\n        };\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex,\n        flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {},\n        ngContentIndex: -1,\n        childCount: 0, bindings,\n        bindingFlags: calcBindingFlags(bindings),\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction createPureExpression(view, def) {\n    return { value: undefined };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nfunction checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    const bindings = def.bindings;\n    /** @type {?} */\n    let changed = false;\n    /** @type {?} */\n    const bindLen = bindings.length;\n    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\n        changed = true;\n    if (changed) {\n        /** @type {?} */\n        const data = asPureExpressionData(view, def.nodeIndex);\n        /** @type {?} */\n        let value;\n        switch (def.flags & 201347067 /* Types */) {\n            case 32 /* TypePureArray */:\n                value = new Array(bindings.length);\n                if (bindLen > 0)\n                    value[0] = v0;\n                if (bindLen > 1)\n                    value[1] = v1;\n                if (bindLen > 2)\n                    value[2] = v2;\n                if (bindLen > 3)\n                    value[3] = v3;\n                if (bindLen > 4)\n                    value[4] = v4;\n                if (bindLen > 5)\n                    value[5] = v5;\n                if (bindLen > 6)\n                    value[6] = v6;\n                if (bindLen > 7)\n                    value[7] = v7;\n                if (bindLen > 8)\n                    value[8] = v8;\n                if (bindLen > 9)\n                    value[9] = v9;\n                break;\n            case 64 /* TypePureObject */:\n                value = {};\n                if (bindLen > 0)\n                    value[(/** @type {?} */ (bindings[0].name))] = v0;\n                if (bindLen > 1)\n                    value[(/** @type {?} */ (bindings[1].name))] = v1;\n                if (bindLen > 2)\n                    value[(/** @type {?} */ (bindings[2].name))] = v2;\n                if (bindLen > 3)\n                    value[(/** @type {?} */ (bindings[3].name))] = v3;\n                if (bindLen > 4)\n                    value[(/** @type {?} */ (bindings[4].name))] = v4;\n                if (bindLen > 5)\n                    value[(/** @type {?} */ (bindings[5].name))] = v5;\n                if (bindLen > 6)\n                    value[(/** @type {?} */ (bindings[6].name))] = v6;\n                if (bindLen > 7)\n                    value[(/** @type {?} */ (bindings[7].name))] = v7;\n                if (bindLen > 8)\n                    value[(/** @type {?} */ (bindings[8].name))] = v8;\n                if (bindLen > 9)\n                    value[(/** @type {?} */ (bindings[9].name))] = v9;\n                break;\n            case 128 /* TypePurePipe */:\n                /** @type {?} */\n                const pipe = v0;\n                switch (bindLen) {\n                    case 1:\n                        value = pipe.transform(v0);\n                        break;\n                    case 2:\n                        value = pipe.transform(v1);\n                        break;\n                    case 3:\n                        value = pipe.transform(v1, v2);\n                        break;\n                    case 4:\n                        value = pipe.transform(v1, v2, v3);\n                        break;\n                    case 5:\n                        value = pipe.transform(v1, v2, v3, v4);\n                        break;\n                    case 6:\n                        value = pipe.transform(v1, v2, v3, v4, v5);\n                        break;\n                    case 7:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6);\n                        break;\n                    case 8:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);\n                        break;\n                    case 9:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);\n                        break;\n                    case 10:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);\n                        break;\n                }\n                break;\n        }\n        data.value = value;\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nfunction checkAndUpdatePureExpressionDynamic(view, def, values) {\n    /** @type {?} */\n    const bindings = def.bindings;\n    /** @type {?} */\n    let changed = false;\n    for (let i = 0; i < values.length; i++) {\n        // Note: We need to loop over all values, so that\n        // the old values are updates as well!\n        if (checkAndUpdateBinding(view, def, i, values[i])) {\n            changed = true;\n        }\n    }\n    if (changed) {\n        /** @type {?} */\n        const data = asPureExpressionData(view, def.nodeIndex);\n        /** @type {?} */\n        let value;\n        switch (def.flags & 201347067 /* Types */) {\n            case 32 /* TypePureArray */:\n                value = values;\n                break;\n            case 64 /* TypePureObject */:\n                value = {};\n                for (let i = 0; i < values.length; i++) {\n                    value[(/** @type {?} */ (bindings[i].name))] = values[i];\n                }\n                break;\n            case 128 /* TypePurePipe */:\n                /** @type {?} */\n                const pipe = values[0];\n                /** @type {?} */\n                const params = values.slice(1);\n                value = ((/** @type {?} */ (pipe.transform)))(...params);\n                break;\n        }\n        data.value = value;\n    }\n    return changed;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} checkIndex\n * @param {?} ngContentIndex\n * @param {?} staticText\n * @return {?}\n */\nfunction textDef(checkIndex, ngContentIndex, staticText) {\n    /** @type {?} */\n    const bindings = new Array(staticText.length - 1);\n    for (let i = 1; i < staticText.length; i++) {\n        bindings[i - 1] = {\n            flags: 8 /* TypeProperty */,\n            name: null,\n            ns: null,\n            nonMinifiedName: null,\n            securityContext: null,\n            suffix: staticText[i],\n        };\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex,\n        flags: 2 /* TypeText */,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {}, ngContentIndex,\n        childCount: 0, bindings,\n        bindingFlags: 8 /* TypeProperty */,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: { prefix: staticText[0] },\n        query: null,\n        ngContent: null,\n    };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nfunction createText(view, renderHost, def) {\n    /** @type {?} */\n    let renderNode;\n    /** @type {?} */\n    const renderer = view.renderer;\n    renderNode = renderer.createText((/** @type {?} */ (def.text)).prefix);\n    /** @type {?} */\n    const parentEl = getParentRenderElement(view, renderHost, def);\n    if (parentEl) {\n        renderer.appendChild(parentEl, renderNode);\n    }\n    return { renderText: renderNode };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nfunction checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    let changed = false;\n    /** @type {?} */\n    const bindings = def.bindings;\n    /** @type {?} */\n    const bindLen = bindings.length;\n    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\n        changed = true;\n    if (changed) {\n        /** @type {?} */\n        let value = (/** @type {?} */ (def.text)).prefix;\n        if (bindLen > 0)\n            value += _addInterpolationPart(v0, bindings[0]);\n        if (bindLen > 1)\n            value += _addInterpolationPart(v1, bindings[1]);\n        if (bindLen > 2)\n            value += _addInterpolationPart(v2, bindings[2]);\n        if (bindLen > 3)\n            value += _addInterpolationPart(v3, bindings[3]);\n        if (bindLen > 4)\n            value += _addInterpolationPart(v4, bindings[4]);\n        if (bindLen > 5)\n            value += _addInterpolationPart(v5, bindings[5]);\n        if (bindLen > 6)\n            value += _addInterpolationPart(v6, bindings[6]);\n        if (bindLen > 7)\n            value += _addInterpolationPart(v7, bindings[7]);\n        if (bindLen > 8)\n            value += _addInterpolationPart(v8, bindings[8]);\n        if (bindLen > 9)\n            value += _addInterpolationPart(v9, bindings[9]);\n        /** @type {?} */\n        const renderNode = asTextData(view, def.nodeIndex).renderText;\n        view.renderer.setValue(renderNode, value);\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nfunction checkAndUpdateTextDynamic(view, def, values) {\n    /** @type {?} */\n    const bindings = def.bindings;\n    /** @type {?} */\n    let changed = false;\n    for (let i = 0; i < values.length; i++) {\n        // Note: We need to loop over all values, so that\n        // the old values are updates as well!\n        if (checkAndUpdateBinding(view, def, i, values[i])) {\n            changed = true;\n        }\n    }\n    if (changed) {\n        /** @type {?} */\n        let value = '';\n        for (let i = 0; i < values.length; i++) {\n            value = value + _addInterpolationPart(values[i], bindings[i]);\n        }\n        value = (/** @type {?} */ (def.text)).prefix + value;\n        /** @type {?} */\n        const renderNode = asTextData(view, def.nodeIndex).renderText;\n        view.renderer.setValue(renderNode, value);\n    }\n    return changed;\n}\n/**\n * @param {?} value\n * @param {?} binding\n * @return {?}\n */\nfunction _addInterpolationPart(value, binding) {\n    /** @type {?} */\n    const valueStr = value != null ? value.toString() : '';\n    return valueStr + binding.suffix;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} flags\n * @param {?} nodes\n * @param {?=} updateDirectives\n * @param {?=} updateRenderer\n * @return {?}\n */\nfunction viewDef(flags, nodes, updateDirectives, updateRenderer) {\n    // clone nodes and set auto calculated values\n    /** @type {?} */\n    let viewBindingCount = 0;\n    /** @type {?} */\n    let viewDisposableCount = 0;\n    /** @type {?} */\n    let viewNodeFlags = 0;\n    /** @type {?} */\n    let viewRootNodeFlags = 0;\n    /** @type {?} */\n    let viewMatchedQueries = 0;\n    /** @type {?} */\n    let currentParent = null;\n    /** @type {?} */\n    let currentRenderParent = null;\n    /** @type {?} */\n    let currentElementHasPublicProviders = false;\n    /** @type {?} */\n    let currentElementHasPrivateProviders = false;\n    /** @type {?} */\n    let lastRenderRootNode = null;\n    for (let i = 0; i < nodes.length; i++) {\n        /** @type {?} */\n        const node = nodes[i];\n        node.nodeIndex = i;\n        node.parent = currentParent;\n        node.bindingIndex = viewBindingCount;\n        node.outputIndex = viewDisposableCount;\n        node.renderParent = currentRenderParent;\n        viewNodeFlags |= node.flags;\n        viewMatchedQueries |= node.matchedQueryIds;\n        if (node.element) {\n            /** @type {?} */\n            const elDef = node.element;\n            elDef.publicProviders =\n                currentParent ? (/** @type {?} */ (currentParent.element)).publicProviders : Object.create(null);\n            elDef.allProviders = elDef.publicProviders;\n            // Note: We assume that all providers of an element are before any child element!\n            currentElementHasPublicProviders = false;\n            currentElementHasPrivateProviders = false;\n            if (node.element.template) {\n                viewMatchedQueries |= node.element.template.nodeMatchedQueries;\n            }\n        }\n        validateNode(currentParent, node, nodes.length);\n        viewBindingCount += node.bindings.length;\n        viewDisposableCount += node.outputs.length;\n        if (!currentRenderParent && (node.flags & 3 /* CatRenderNode */)) {\n            lastRenderRootNode = node;\n        }\n        if (node.flags & 20224 /* CatProvider */) {\n            if (!currentElementHasPublicProviders) {\n                currentElementHasPublicProviders = true;\n                // Use prototypical inheritance to not get O(n^2) complexity...\n                (/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).publicProviders =\n                    Object.create((/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).publicProviders);\n                (/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).allProviders = (/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).publicProviders;\n            }\n            /** @type {?} */\n            const isPrivateService = (node.flags & 8192 /* PrivateProvider */) !== 0;\n            /** @type {?} */\n            const isComponent = (node.flags & 32768 /* Component */) !== 0;\n            if (!isPrivateService || isComponent) {\n                (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).publicProviders))[tokenKey((/** @type {?} */ (node.provider)).token)] = node;\n            }\n            else {\n                if (!currentElementHasPrivateProviders) {\n                    currentElementHasPrivateProviders = true;\n                    // Use prototypical inheritance to not get O(n^2) complexity...\n                    (/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).allProviders =\n                        Object.create((/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).publicProviders);\n                }\n                (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).allProviders))[tokenKey((/** @type {?} */ (node.provider)).token)] = node;\n            }\n            if (isComponent) {\n                (/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).componentProvider = node;\n            }\n        }\n        if (currentParent) {\n            currentParent.childFlags |= node.flags;\n            currentParent.directChildFlags |= node.flags;\n            currentParent.childMatchedQueries |= node.matchedQueryIds;\n            if (node.element && node.element.template) {\n                currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;\n            }\n        }\n        else {\n            viewRootNodeFlags |= node.flags;\n        }\n        if (node.childCount > 0) {\n            currentParent = node;\n            if (!isNgContainer(node)) {\n                currentRenderParent = node;\n            }\n        }\n        else {\n            // When the current node has no children, check if it is the last children of its parent.\n            // When it is, propagate the flags up.\n            // The loop is required because an element could be the last transitive children of several\n            // elements. We loop to either the root or the highest opened element (= with remaining\n            // children)\n            while (currentParent && i === currentParent.nodeIndex + currentParent.childCount) {\n                /** @type {?} */\n                const newParent = currentParent.parent;\n                if (newParent) {\n                    newParent.childFlags |= currentParent.childFlags;\n                    newParent.childMatchedQueries |= currentParent.childMatchedQueries;\n                }\n                currentParent = newParent;\n                // We also need to update the render parent & account for ng-container\n                if (currentParent && isNgContainer(currentParent)) {\n                    currentRenderParent = currentParent.renderParent;\n                }\n                else {\n                    currentRenderParent = currentParent;\n                }\n            }\n        }\n    }\n    /** @type {?} */\n    const handleEvent = (/**\n     * @param {?} view\n     * @param {?} nodeIndex\n     * @param {?} eventName\n     * @param {?} event\n     * @return {?}\n     */\n    (view, nodeIndex, eventName, event) => (/** @type {?} */ ((/** @type {?} */ (nodes[nodeIndex].element)).handleEvent))(view, eventName, event));\n    return {\n        // Will be filled later...\n        factory: null,\n        nodeFlags: viewNodeFlags,\n        rootNodeFlags: viewRootNodeFlags,\n        nodeMatchedQueries: viewMatchedQueries, flags,\n        nodes: nodes,\n        updateDirectives: updateDirectives || NOOP,\n        updateRenderer: updateRenderer || NOOP, handleEvent,\n        bindingCount: viewBindingCount,\n        outputCount: viewDisposableCount, lastRenderRootNode\n    };\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction isNgContainer(node) {\n    return (node.flags & 1 /* TypeElement */) !== 0 && (/** @type {?} */ (node.element)).name === null;\n}\n/**\n * @param {?} parent\n * @param {?} node\n * @param {?} nodeCount\n * @return {?}\n */\nfunction validateNode(parent, node, nodeCount) {\n    /** @type {?} */\n    const template = node.element && node.element.template;\n    if (template) {\n        if (!template.lastRenderRootNode) {\n            throw new Error(`Illegal State: Embedded templates without nodes are not allowed!`);\n        }\n        if (template.lastRenderRootNode &&\n            template.lastRenderRootNode.flags & 16777216 /* EmbeddedViews */) {\n            throw new Error(`Illegal State: Last root node of a template can't have embedded views, at index ${node.nodeIndex}!`);\n        }\n    }\n    if (node.flags & 20224 /* CatProvider */) {\n        /** @type {?} */\n        const parentFlags = parent ? parent.flags : 0;\n        if ((parentFlags & 1 /* TypeElement */) === 0) {\n            throw new Error(`Illegal State: StaticProvider/Directive nodes need to be children of elements or anchors, at index ${node.nodeIndex}!`);\n        }\n    }\n    if (node.query) {\n        if (node.flags & 67108864 /* TypeContentQuery */ &&\n            (!parent || (parent.flags & 16384 /* TypeDirective */) === 0)) {\n            throw new Error(`Illegal State: Content Query nodes need to be children of directives, at index ${node.nodeIndex}!`);\n        }\n        if (node.flags & 134217728 /* TypeViewQuery */ && parent) {\n            throw new Error(`Illegal State: View Query nodes have to be top level nodes, at index ${node.nodeIndex}!`);\n        }\n    }\n    if (node.childCount) {\n        /** @type {?} */\n        const parentEnd = parent ? parent.nodeIndex + parent.childCount : nodeCount - 1;\n        if (node.nodeIndex <= parentEnd && node.nodeIndex + node.childCount > parentEnd) {\n            throw new Error(`Illegal State: childCount of node leads outside of parent, at index ${node.nodeIndex}!`);\n        }\n    }\n}\n/**\n * @param {?} parent\n * @param {?} anchorDef\n * @param {?} viewDef\n * @param {?=} context\n * @return {?}\n */\nfunction createEmbeddedView(parent, anchorDef, viewDef, context) {\n    // embedded views are seen as siblings to the anchor, so we need\n    // to get the parent of the anchor and use it as parentIndex.\n    /** @type {?} */\n    const view = createView(parent.root, parent.renderer, parent, anchorDef, viewDef);\n    initView(view, parent.component, context);\n    createViewNodes(view);\n    return view;\n}\n/**\n * @param {?} root\n * @param {?} def\n * @param {?=} context\n * @return {?}\n */\nfunction createRootView(root, def, context) {\n    /** @type {?} */\n    const view = createView(root, root.renderer, null, null, def);\n    initView(view, context, context);\n    createViewNodes(view);\n    return view;\n}\n/**\n * @param {?} parentView\n * @param {?} nodeDef\n * @param {?} viewDef\n * @param {?} hostElement\n * @return {?}\n */\nfunction createComponentView(parentView, nodeDef, viewDef, hostElement) {\n    /** @type {?} */\n    const rendererType = (/** @type {?} */ (nodeDef.element)).componentRendererType;\n    /** @type {?} */\n    let compRenderer;\n    if (!rendererType) {\n        compRenderer = parentView.root.renderer;\n    }\n    else {\n        compRenderer = parentView.root.rendererFactory.createRenderer(hostElement, rendererType);\n    }\n    return createView(parentView.root, compRenderer, parentView, (/** @type {?} */ (nodeDef.element)).componentProvider, viewDef);\n}\n/**\n * @param {?} root\n * @param {?} renderer\n * @param {?} parent\n * @param {?} parentNodeDef\n * @param {?} def\n * @return {?}\n */\nfunction createView(root, renderer, parent, parentNodeDef, def) {\n    /** @type {?} */\n    const nodes = new Array(def.nodes.length);\n    /** @type {?} */\n    const disposables = def.outputCount ? new Array(def.outputCount) : null;\n    /** @type {?} */\n    const view = {\n        def,\n        parent,\n        viewContainerParent: null, parentNodeDef,\n        context: null,\n        component: null, nodes,\n        state: 13 /* CatInit */, root, renderer,\n        oldValues: new Array(def.bindingCount), disposables,\n        initIndex: -1\n    };\n    return view;\n}\n/**\n * @param {?} view\n * @param {?} component\n * @param {?} context\n * @return {?}\n */\nfunction initView(view, component, context) {\n    view.component = component;\n    view.context = context;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction createViewNodes(view) {\n    /** @type {?} */\n    let renderHost;\n    if (isComponentView(view)) {\n        /** @type {?} */\n        const hostDef = view.parentNodeDef;\n        renderHost = asElementData((/** @type {?} */ (view.parent)), (/** @type {?} */ ((/** @type {?} */ (hostDef)).parent)).nodeIndex).renderElement;\n    }\n    /** @type {?} */\n    const def = view.def;\n    /** @type {?} */\n    const nodes = view.nodes;\n    for (let i = 0; i < def.nodes.length; i++) {\n        /** @type {?} */\n        const nodeDef = def.nodes[i];\n        Services.setCurrentNode(view, i);\n        /** @type {?} */\n        let nodeData;\n        switch (nodeDef.flags & 201347067 /* Types */) {\n            case 1 /* TypeElement */:\n                /** @type {?} */\n                const el = (/** @type {?} */ (createElement(view, renderHost, nodeDef)));\n                /** @type {?} */\n                let componentView = (/** @type {?} */ (undefined));\n                if (nodeDef.flags & 33554432 /* ComponentView */) {\n                    /** @type {?} */\n                    const compViewDef = resolveDefinition((/** @type {?} */ ((/** @type {?} */ (nodeDef.element)).componentView)));\n                    componentView = Services.createComponentView(view, nodeDef, compViewDef, el);\n                }\n                listenToElementOutputs(view, componentView, nodeDef, el);\n                nodeData = (/** @type {?} */ ({\n                    renderElement: el,\n                    componentView,\n                    viewContainer: null,\n                    template: (/** @type {?} */ (nodeDef.element)).template ? createTemplateData(view, nodeDef) : undefined\n                }));\n                if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                    nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);\n                }\n                break;\n            case 2 /* TypeText */:\n                nodeData = (/** @type {?} */ (createText(view, renderHost, nodeDef)));\n                break;\n            case 512 /* TypeClassProvider */:\n            case 1024 /* TypeFactoryProvider */:\n            case 2048 /* TypeUseExistingProvider */:\n            case 256 /* TypeValueProvider */: {\n                nodeData = nodes[i];\n                if (!nodeData && !(nodeDef.flags & 4096 /* LazyProvider */)) {\n                    /** @type {?} */\n                    const instance = createProviderInstance(view, nodeDef);\n                    nodeData = (/** @type {?} */ ({ instance }));\n                }\n                break;\n            }\n            case 16 /* TypePipe */: {\n                /** @type {?} */\n                const instance = createPipeInstance(view, nodeDef);\n                nodeData = (/** @type {?} */ ({ instance }));\n                break;\n            }\n            case 16384 /* TypeDirective */: {\n                nodeData = nodes[i];\n                if (!nodeData) {\n                    /** @type {?} */\n                    const instance = createDirectiveInstance(view, nodeDef);\n                    nodeData = (/** @type {?} */ ({ instance }));\n                }\n                if (nodeDef.flags & 32768 /* Component */) {\n                    /** @type {?} */\n                    const compView = asElementData(view, (/** @type {?} */ (nodeDef.parent)).nodeIndex).componentView;\n                    initView(compView, nodeData.instance, nodeData.instance);\n                }\n                break;\n            }\n            case 32 /* TypePureArray */:\n            case 64 /* TypePureObject */:\n            case 128 /* TypePurePipe */:\n                nodeData = (/** @type {?} */ (createPureExpression(view, nodeDef)));\n                break;\n            case 67108864 /* TypeContentQuery */:\n            case 134217728 /* TypeViewQuery */:\n                nodeData = (/** @type {?} */ (createQuery$1()));\n                break;\n            case 8 /* TypeNgContent */:\n                appendNgContent(view, renderHost, nodeDef);\n                // no runtime data needed for NgContent...\n                nodeData = undefined;\n                break;\n        }\n        nodes[i] = nodeData;\n    }\n    // Create the ViewData.nodes of component views after we created everything else,\n    // so that e.g. ng-content works\n    execComponentViewsAction(view, ViewAction.CreateViewNodes);\n    // fill static content and view queries\n    execQueriesAction(view, 67108864 /* TypeContentQuery */ | 134217728 /* TypeViewQuery */, 268435456 /* StaticQuery */, 0 /* CheckAndUpdate */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction checkNoChangesView(view) {\n    markProjectedViewsForCheck(view);\n    Services.updateDirectives(view, 1 /* CheckNoChanges */);\n    execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);\n    Services.updateRenderer(view, 1 /* CheckNoChanges */);\n    execComponentViewsAction(view, ViewAction.CheckNoChanges);\n    // Note: We don't check queries for changes as we didn't do this in v2.x.\n    // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.\n    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction checkAndUpdateView(view) {\n    if (view.state & 1 /* BeforeFirstCheck */) {\n        view.state &= ~1 /* BeforeFirstCheck */;\n        view.state |= 2 /* FirstCheck */;\n    }\n    else {\n        view.state &= ~2 /* FirstCheck */;\n    }\n    shiftInitState(view, 0 /* InitState_BeforeInit */, 256 /* InitState_CallingOnInit */);\n    markProjectedViewsForCheck(view);\n    Services.updateDirectives(view, 0 /* CheckAndUpdate */);\n    execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);\n    execQueriesAction(view, 67108864 /* TypeContentQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n    /** @type {?} */\n    let callInit = shiftInitState(view, 256 /* InitState_CallingOnInit */, 512 /* InitState_CallingAfterContentInit */);\n    callLifecycleHooksChildrenFirst(view, 2097152 /* AfterContentChecked */ | (callInit ? 1048576 /* AfterContentInit */ : 0));\n    Services.updateRenderer(view, 0 /* CheckAndUpdate */);\n    execComponentViewsAction(view, ViewAction.CheckAndUpdate);\n    execQueriesAction(view, 134217728 /* TypeViewQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n    callInit = shiftInitState(view, 512 /* InitState_CallingAfterContentInit */, 768 /* InitState_CallingAfterViewInit */);\n    callLifecycleHooksChildrenFirst(view, 8388608 /* AfterViewChecked */ | (callInit ? 4194304 /* AfterViewInit */ : 0));\n    if (view.def.flags & 2 /* OnPush */) {\n        view.state &= ~8 /* ChecksEnabled */;\n    }\n    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n    shiftInitState(view, 768 /* InitState_CallingAfterViewInit */, 1024 /* InitState_AfterInit */);\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    if (argStyle === 0 /* Inline */) {\n        return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    }\n    else {\n        return checkAndUpdateNodeDynamic(view, nodeDef, v0);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction markProjectedViewsForCheck(view) {\n    /** @type {?} */\n    const def = view.def;\n    if (!(def.nodeFlags & 4 /* ProjectedTemplate */)) {\n        return;\n    }\n    for (let i = 0; i < def.nodes.length; i++) {\n        /** @type {?} */\n        const nodeDef = def.nodes[i];\n        if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n            /** @type {?} */\n            const projectedViews = asElementData(view, i).template._projectedViews;\n            if (projectedViews) {\n                for (let i = 0; i < projectedViews.length; i++) {\n                    /** @type {?} */\n                    const projectedView = projectedViews[i];\n                    projectedView.state |= 32 /* CheckProjectedView */;\n                    markParentViewsForCheckProjectedViews(projectedView, view);\n                }\n            }\n        }\n        else if ((nodeDef.childFlags & 4 /* ProjectedTemplate */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    switch (nodeDef.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 2 /* TypeText */:\n            return checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 16384 /* TypeDirective */:\n            return checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 32 /* TypePureArray */:\n        case 64 /* TypePureObject */:\n        case 128 /* TypePurePipe */:\n            return checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        default:\n            throw 'unreachable';\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} values\n * @return {?}\n */\nfunction checkAndUpdateNodeDynamic(view, nodeDef, values) {\n    switch (nodeDef.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return checkAndUpdateElementDynamic(view, nodeDef, values);\n        case 2 /* TypeText */:\n            return checkAndUpdateTextDynamic(view, nodeDef, values);\n        case 16384 /* TypeDirective */:\n            return checkAndUpdateDirectiveDynamic(view, nodeDef, values);\n        case 32 /* TypePureArray */:\n        case 64 /* TypePureObject */:\n        case 128 /* TypePurePipe */:\n            return checkAndUpdatePureExpressionDynamic(view, nodeDef, values);\n        default:\n            throw 'unreachable';\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    if (argStyle === 0 /* Inline */) {\n        checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    }\n    else {\n        checkNoChangesNodeDynamic(view, nodeDef, v0);\n    }\n    // Returning false is ok here as we would have thrown in case of a change.\n    return false;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nfunction checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    const bindLen = nodeDef.bindings.length;\n    if (bindLen > 0)\n        checkBindingNoChanges(view, nodeDef, 0, v0);\n    if (bindLen > 1)\n        checkBindingNoChanges(view, nodeDef, 1, v1);\n    if (bindLen > 2)\n        checkBindingNoChanges(view, nodeDef, 2, v2);\n    if (bindLen > 3)\n        checkBindingNoChanges(view, nodeDef, 3, v3);\n    if (bindLen > 4)\n        checkBindingNoChanges(view, nodeDef, 4, v4);\n    if (bindLen > 5)\n        checkBindingNoChanges(view, nodeDef, 5, v5);\n    if (bindLen > 6)\n        checkBindingNoChanges(view, nodeDef, 6, v6);\n    if (bindLen > 7)\n        checkBindingNoChanges(view, nodeDef, 7, v7);\n    if (bindLen > 8)\n        checkBindingNoChanges(view, nodeDef, 8, v8);\n    if (bindLen > 9)\n        checkBindingNoChanges(view, nodeDef, 9, v9);\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} values\n * @return {?}\n */\nfunction checkNoChangesNodeDynamic(view, nodeDef, values) {\n    for (let i = 0; i < values.length; i++) {\n        checkBindingNoChanges(view, nodeDef, i, values[i]);\n    }\n}\n/**\n * Workaround https://github.com/angular/tsickle/issues/497\n * @suppress {misplacedTypeAnnotation}\n * @param {?} view\n * @param {?} nodeDef\n * @return {?}\n */\nfunction checkNoChangesQuery(view, nodeDef) {\n    /** @type {?} */\n    const queryList = asQueryList(view, nodeDef.nodeIndex);\n    if (queryList.dirty) {\n        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.nodeIndex), `Query ${(/** @type {?} */ (nodeDef.query)).id} not dirty`, `Query ${(/** @type {?} */ (nodeDef.query)).id} dirty`, (view.state & 1 /* BeforeFirstCheck */) !== 0);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction destroyView(view) {\n    if (view.state & 128 /* Destroyed */) {\n        return;\n    }\n    execEmbeddedViewsAction(view, ViewAction.Destroy);\n    execComponentViewsAction(view, ViewAction.Destroy);\n    callLifecycleHooksChildrenFirst(view, 131072 /* OnDestroy */);\n    if (view.disposables) {\n        for (let i = 0; i < view.disposables.length; i++) {\n            view.disposables[i]();\n        }\n    }\n    detachProjectedView(view);\n    if (view.renderer.destroyNode) {\n        destroyViewNodes(view);\n    }\n    if (isComponentView(view)) {\n        view.renderer.destroy();\n    }\n    view.state |= 128 /* Destroyed */;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction destroyViewNodes(view) {\n    /** @type {?} */\n    const len = view.def.nodes.length;\n    for (let i = 0; i < len; i++) {\n        /** @type {?} */\n        const def = view.def.nodes[i];\n        if (def.flags & 1 /* TypeElement */) {\n            (/** @type {?} */ (view.renderer.destroyNode))(asElementData(view, i).renderElement);\n        }\n        else if (def.flags & 2 /* TypeText */) {\n            (/** @type {?} */ (view.renderer.destroyNode))(asTextData(view, i).renderText);\n        }\n        else if (def.flags & 67108864 /* TypeContentQuery */ || def.flags & 134217728 /* TypeViewQuery */) {\n            asQueryList(view, i).destroy();\n        }\n    }\n}\n/** @enum {number} */\nconst ViewAction = {\n    CreateViewNodes: 0,\n    CheckNoChanges: 1,\n    CheckNoChangesProjectedViews: 2,\n    CheckAndUpdate: 3,\n    CheckAndUpdateProjectedViews: 4,\n    Destroy: 5,\n};\nViewAction[ViewAction.CreateViewNodes] = 'CreateViewNodes';\nViewAction[ViewAction.CheckNoChanges] = 'CheckNoChanges';\nViewAction[ViewAction.CheckNoChangesProjectedViews] = 'CheckNoChangesProjectedViews';\nViewAction[ViewAction.CheckAndUpdate] = 'CheckAndUpdate';\nViewAction[ViewAction.CheckAndUpdateProjectedViews] = 'CheckAndUpdateProjectedViews';\nViewAction[ViewAction.Destroy] = 'Destroy';\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execComponentViewsAction(view, action) {\n    /** @type {?} */\n    const def = view.def;\n    if (!(def.nodeFlags & 33554432 /* ComponentView */)) {\n        return;\n    }\n    for (let i = 0; i < def.nodes.length; i++) {\n        /** @type {?} */\n        const nodeDef = def.nodes[i];\n        if (nodeDef.flags & 33554432 /* ComponentView */) {\n            // a leaf\n            callViewAction(asElementData(view, i).componentView, action);\n        }\n        else if ((nodeDef.childFlags & 33554432 /* ComponentView */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execEmbeddedViewsAction(view, action) {\n    /** @type {?} */\n    const def = view.def;\n    if (!(def.nodeFlags & 16777216 /* EmbeddedViews */)) {\n        return;\n    }\n    for (let i = 0; i < def.nodes.length; i++) {\n        /** @type {?} */\n        const nodeDef = def.nodes[i];\n        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n            // a leaf\n            /** @type {?} */\n            const embeddedViews = (/** @type {?} */ (asElementData(view, i).viewContainer))._embeddedViews;\n            for (let k = 0; k < embeddedViews.length; k++) {\n                callViewAction(embeddedViews[k], action);\n            }\n        }\n        else if ((nodeDef.childFlags & 16777216 /* EmbeddedViews */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction callViewAction(view, action) {\n    /** @type {?} */\n    const viewState = view.state;\n    switch (action) {\n        case ViewAction.CheckNoChanges:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n                    checkNoChangesView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, ViewAction.CheckNoChangesProjectedViews);\n                }\n            }\n            break;\n        case ViewAction.CheckNoChangesProjectedViews:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if (viewState & 32 /* CheckProjectedView */) {\n                    checkNoChangesView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, action);\n                }\n            }\n            break;\n        case ViewAction.CheckAndUpdate:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n                    checkAndUpdateView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);\n                }\n            }\n            break;\n        case ViewAction.CheckAndUpdateProjectedViews:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if (viewState & 32 /* CheckProjectedView */) {\n                    checkAndUpdateView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, action);\n                }\n            }\n            break;\n        case ViewAction.Destroy:\n            // Note: destroyView recurses over all views,\n            // so we don't need to special case projected views here.\n            destroyView(view);\n            break;\n        case ViewAction.CreateViewNodes:\n            createViewNodes(view);\n            break;\n    }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execProjectedViewsAction(view, action) {\n    execEmbeddedViewsAction(view, action);\n    execComponentViewsAction(view, action);\n}\n/**\n * @param {?} view\n * @param {?} queryFlags\n * @param {?} staticDynamicQueryFlag\n * @param {?} checkType\n * @return {?}\n */\nfunction execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {\n    if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {\n        return;\n    }\n    /** @type {?} */\n    const nodeCount = view.def.nodes.length;\n    for (let i = 0; i < nodeCount; i++) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[i];\n        if ((nodeDef.flags & queryFlags) && (nodeDef.flags & staticDynamicQueryFlag)) {\n            Services.setCurrentNode(view, nodeDef.nodeIndex);\n            switch (checkType) {\n                case 0 /* CheckAndUpdate */:\n                    checkAndUpdateQuery(view, nodeDef);\n                    break;\n                case 1 /* CheckNoChanges */:\n                    checkNoChangesQuery(view, nodeDef);\n                    break;\n            }\n        }\n        if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {\n            // no child has a matching query\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet initialized = false;\n/**\n * @return {?}\n */\nfunction initServicesIfNeeded() {\n    if (initialized) {\n        return;\n    }\n    initialized = true;\n    /** @type {?} */\n    const services = isDevMode() ? createDebugServices() : createProdServices();\n    Services.setCurrentNode = services.setCurrentNode;\n    Services.createRootView = services.createRootView;\n    Services.createEmbeddedView = services.createEmbeddedView;\n    Services.createComponentView = services.createComponentView;\n    Services.createNgModuleRef = services.createNgModuleRef;\n    Services.overrideProvider = services.overrideProvider;\n    Services.overrideComponentView = services.overrideComponentView;\n    Services.clearOverrides = services.clearOverrides;\n    Services.checkAndUpdateView = services.checkAndUpdateView;\n    Services.checkNoChangesView = services.checkNoChangesView;\n    Services.destroyView = services.destroyView;\n    Services.resolveDep = resolveDep;\n    Services.createDebugContext = services.createDebugContext;\n    Services.handleEvent = services.handleEvent;\n    Services.updateDirectives = services.updateDirectives;\n    Services.updateRenderer = services.updateRenderer;\n    Services.dirtyParentQueries = dirtyParentQueries;\n}\n/**\n * @return {?}\n */\nfunction createProdServices() {\n    return {\n        setCurrentNode: (/**\n         * @return {?}\n         */\n        () => { }),\n        createRootView: createProdRootView,\n        createEmbeddedView: createEmbeddedView,\n        createComponentView: createComponentView,\n        createNgModuleRef: createNgModuleRef,\n        overrideProvider: NOOP,\n        overrideComponentView: NOOP,\n        clearOverrides: NOOP,\n        checkAndUpdateView: checkAndUpdateView,\n        checkNoChangesView: checkNoChangesView,\n        destroyView: destroyView,\n        createDebugContext: (/**\n         * @param {?} view\n         * @param {?} nodeIndex\n         * @return {?}\n         */\n        (view, nodeIndex) => new DebugContext_(view, nodeIndex)),\n        handleEvent: (/**\n         * @param {?} view\n         * @param {?} nodeIndex\n         * @param {?} eventName\n         * @param {?} event\n         * @return {?}\n         */\n        (view, nodeIndex, eventName, event) => view.def.handleEvent(view, nodeIndex, eventName, event)),\n        updateDirectives: (/**\n         * @param {?} view\n         * @param {?} checkType\n         * @return {?}\n         */\n        (view, checkType) => view.def.updateDirectives(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\n            prodCheckNoChangesNode, view)),\n        updateRenderer: (/**\n         * @param {?} view\n         * @param {?} checkType\n         * @return {?}\n         */\n        (view, checkType) => view.def.updateRenderer(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\n            prodCheckNoChangesNode, view)),\n    };\n}\n/**\n * @return {?}\n */\nfunction createDebugServices() {\n    return {\n        setCurrentNode: debugSetCurrentNode,\n        createRootView: debugCreateRootView,\n        createEmbeddedView: debugCreateEmbeddedView,\n        createComponentView: debugCreateComponentView,\n        createNgModuleRef: debugCreateNgModuleRef,\n        overrideProvider: debugOverrideProvider,\n        overrideComponentView: debugOverrideComponentView,\n        clearOverrides: debugClearOverrides,\n        checkAndUpdateView: debugCheckAndUpdateView,\n        checkNoChangesView: debugCheckNoChangesView,\n        destroyView: debugDestroyView,\n        createDebugContext: (/**\n         * @param {?} view\n         * @param {?} nodeIndex\n         * @return {?}\n         */\n        (view, nodeIndex) => new DebugContext_(view, nodeIndex)),\n        handleEvent: debugHandleEvent,\n        updateDirectives: debugUpdateDirectives,\n        updateRenderer: debugUpdateRenderer,\n    };\n}\n/**\n * @param {?} elInjector\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @param {?} def\n * @param {?} ngModule\n * @param {?=} context\n * @return {?}\n */\nfunction createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n    /** @type {?} */\n    const rendererFactory = ngModule.injector.get(RendererFactory2);\n    return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);\n}\n/**\n * @param {?} elInjector\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @param {?} def\n * @param {?} ngModule\n * @param {?=} context\n * @return {?}\n */\nfunction debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n    /** @type {?} */\n    const rendererFactory = ngModule.injector.get(RendererFactory2);\n    /** @type {?} */\n    const root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);\n    /** @type {?} */\n    const defWithOverride = applyProviderOverridesToView(def);\n    return callWithDebugContext(DebugAction.create, createRootView, null, [root, defWithOverride, context]);\n}\n/**\n * @param {?} elInjector\n * @param {?} ngModule\n * @param {?} rendererFactory\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @return {?}\n */\nfunction createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {\n    /** @type {?} */\n    const sanitizer = ngModule.injector.get(Sanitizer);\n    /** @type {?} */\n    const errorHandler = ngModule.injector.get(ErrorHandler);\n    /** @type {?} */\n    const renderer = rendererFactory.createRenderer(null, null);\n    return {\n        ngModule,\n        injector: elInjector, projectableNodes,\n        selectorOrNode: rootSelectorOrNode, sanitizer, rendererFactory, renderer, errorHandler\n    };\n}\n/**\n * @param {?} parentView\n * @param {?} anchorDef\n * @param {?} viewDef\n * @param {?=} context\n * @return {?}\n */\nfunction debugCreateEmbeddedView(parentView, anchorDef, viewDef, context) {\n    /** @type {?} */\n    const defWithOverride = applyProviderOverridesToView(viewDef);\n    return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parentView, anchorDef, defWithOverride, context]);\n}\n/**\n * @param {?} parentView\n * @param {?} nodeDef\n * @param {?} viewDef\n * @param {?} hostElement\n * @return {?}\n */\nfunction debugCreateComponentView(parentView, nodeDef, viewDef, hostElement) {\n    /** @type {?} */\n    const overrideComponentView = viewDefOverrides.get((/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (nodeDef.element)).componentProvider)).provider)).token);\n    if (overrideComponentView) {\n        viewDef = overrideComponentView;\n    }\n    else {\n        viewDef = applyProviderOverridesToView(viewDef);\n    }\n    return callWithDebugContext(DebugAction.create, createComponentView, null, [parentView, nodeDef, viewDef, hostElement]);\n}\n/**\n * @param {?} moduleType\n * @param {?} parentInjector\n * @param {?} bootstrapComponents\n * @param {?} def\n * @return {?}\n */\nfunction debugCreateNgModuleRef(moduleType, parentInjector, bootstrapComponents, def) {\n    /** @type {?} */\n    const defWithOverride = applyProviderOverridesToNgModule(def);\n    return createNgModuleRef(moduleType, parentInjector, bootstrapComponents, defWithOverride);\n}\n/** @type {?} */\nconst providerOverrides = new Map();\n/** @type {?} */\nconst providerOverridesWithScope = new Map();\n/** @type {?} */\nconst viewDefOverrides = new Map();\n/**\n * @param {?} override\n * @return {?}\n */\nfunction debugOverrideProvider(override) {\n    providerOverrides.set(override.token, override);\n    /** @type {?} */\n    let injectableDef;\n    if (typeof override.token === 'function' && (injectableDef = getInjectableDef(override.token)) &&\n        typeof injectableDef.providedIn === 'function') {\n        providerOverridesWithScope.set((/** @type {?} */ (override.token)), override);\n    }\n}\n/**\n * @param {?} comp\n * @param {?} compFactory\n * @return {?}\n */\nfunction debugOverrideComponentView(comp, compFactory) {\n    /** @type {?} */\n    const hostViewDef = resolveDefinition(getComponentViewDefinitionFactory(compFactory));\n    /** @type {?} */\n    const compViewDef = resolveDefinition((/** @type {?} */ ((/** @type {?} */ (hostViewDef.nodes[0].element)).componentView)));\n    viewDefOverrides.set(comp, compViewDef);\n}\n/**\n * @return {?}\n */\nfunction debugClearOverrides() {\n    providerOverrides.clear();\n    providerOverridesWithScope.clear();\n    viewDefOverrides.clear();\n}\n// Notes about the algorithm:\n// 1) Locate the providers of an element and check if one of them was overwritten\n// 2) Change the providers of that element\n//\n// We only create new datastructures if we need to, to keep perf impact\n// reasonable.\n/**\n * @param {?} def\n * @return {?}\n */\nfunction applyProviderOverridesToView(def) {\n    if (providerOverrides.size === 0) {\n        return def;\n    }\n    /** @type {?} */\n    const elementIndicesWithOverwrittenProviders = findElementIndicesWithOverwrittenProviders(def);\n    if (elementIndicesWithOverwrittenProviders.length === 0) {\n        return def;\n    }\n    // clone the whole view definition,\n    // as it maintains references between the nodes that are hard to update.\n    def = (/** @type {?} */ (def.factory))((/**\n     * @return {?}\n     */\n    () => NOOP));\n    for (let i = 0; i < elementIndicesWithOverwrittenProviders.length; i++) {\n        applyProviderOverridesToElement(def, elementIndicesWithOverwrittenProviders[i]);\n    }\n    return def;\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    function findElementIndicesWithOverwrittenProviders(def) {\n        /** @type {?} */\n        const elIndicesWithOverwrittenProviders = [];\n        /** @type {?} */\n        let lastElementDef = null;\n        for (let i = 0; i < def.nodes.length; i++) {\n            /** @type {?} */\n            const nodeDef = def.nodes[i];\n            if (nodeDef.flags & 1 /* TypeElement */) {\n                lastElementDef = nodeDef;\n            }\n            if (lastElementDef && nodeDef.flags & 3840 /* CatProviderNoDirective */ &&\n                providerOverrides.has((/** @type {?} */ (nodeDef.provider)).token)) {\n                elIndicesWithOverwrittenProviders.push((/** @type {?} */ (lastElementDef)).nodeIndex);\n                lastElementDef = null;\n            }\n        }\n        return elIndicesWithOverwrittenProviders;\n    }\n    /**\n     * @param {?} viewDef\n     * @param {?} elIndex\n     * @return {?}\n     */\n    function applyProviderOverridesToElement(viewDef, elIndex) {\n        for (let i = elIndex + 1; i < viewDef.nodes.length; i++) {\n            /** @type {?} */\n            const nodeDef = viewDef.nodes[i];\n            if (nodeDef.flags & 1 /* TypeElement */) {\n                // stop at the next element\n                return;\n            }\n            if (nodeDef.flags & 3840 /* CatProviderNoDirective */) {\n                /** @type {?} */\n                const provider = (/** @type {?} */ (nodeDef.provider));\n                /** @type {?} */\n                const override = providerOverrides.get(provider.token);\n                if (override) {\n                    nodeDef.flags = (nodeDef.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\n                    provider.deps = splitDepsDsl(override.deps);\n                    provider.value = override.value;\n                }\n            }\n        }\n    }\n}\n// Notes about the algorithm:\n// We only create new datastructures if we need to, to keep perf impact\n// reasonable.\n/**\n * @param {?} def\n * @return {?}\n */\nfunction applyProviderOverridesToNgModule(def) {\n    const { hasOverrides, hasDeprecatedOverrides } = calcHasOverrides(def);\n    if (!hasOverrides) {\n        return def;\n    }\n    // clone the whole view definition,\n    // as it maintains references between the nodes that are hard to update.\n    def = (/** @type {?} */ (def.factory))((/**\n     * @return {?}\n     */\n    () => NOOP));\n    applyProviderOverrides(def);\n    return def;\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    function calcHasOverrides(def) {\n        /** @type {?} */\n        let hasOverrides = false;\n        /** @type {?} */\n        let hasDeprecatedOverrides = false;\n        if (providerOverrides.size === 0) {\n            return { hasOverrides, hasDeprecatedOverrides };\n        }\n        def.providers.forEach((/**\n         * @param {?} node\n         * @return {?}\n         */\n        node => {\n            /** @type {?} */\n            const override = providerOverrides.get(node.token);\n            if ((node.flags & 3840 /* CatProviderNoDirective */) && override) {\n                hasOverrides = true;\n                hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n            }\n        }));\n        def.modules.forEach((/**\n         * @param {?} module\n         * @return {?}\n         */\n        module => {\n            providerOverridesWithScope.forEach((/**\n             * @param {?} override\n             * @param {?} token\n             * @return {?}\n             */\n            (override, token) => {\n                if ((/** @type {?} */ (getInjectableDef(token))).providedIn === module) {\n                    hasOverrides = true;\n                    hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n                }\n            }));\n        }));\n        return { hasOverrides, hasDeprecatedOverrides };\n    }\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    function applyProviderOverrides(def) {\n        for (let i = 0; i < def.providers.length; i++) {\n            /** @type {?} */\n            const provider = def.providers[i];\n            if (hasDeprecatedOverrides) {\n                // We had a bug where me made\n                // all providers lazy. Keep this logic behind a flag\n                // for migrating existing users.\n                provider.flags |= 4096 /* LazyProvider */;\n            }\n            /** @type {?} */\n            const override = providerOverrides.get(provider.token);\n            if (override) {\n                provider.flags = (provider.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\n                provider.deps = splitDepsDsl(override.deps);\n                provider.value = override.value;\n            }\n        }\n        if (providerOverridesWithScope.size > 0) {\n            /** @type {?} */\n            let moduleSet = new Set(def.modules);\n            providerOverridesWithScope.forEach((/**\n             * @param {?} override\n             * @param {?} token\n             * @return {?}\n             */\n            (override, token) => {\n                if (moduleSet.has((/** @type {?} */ (getInjectableDef(token))).providedIn)) {\n                    /** @type {?} */\n                    let provider = {\n                        token: token,\n                        flags: override.flags | (hasDeprecatedOverrides ? 4096 /* LazyProvider */ : 0 /* None */),\n                        deps: splitDepsDsl(override.deps),\n                        value: override.value,\n                        index: def.providers.length,\n                    };\n                    def.providers.push(provider);\n                    def.providersByKey[tokenKey(token)] = provider;\n                }\n            }));\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} checkIndex\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction prodCheckAndUpdateNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    const nodeDef = view.def.nodes[checkIndex];\n    checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    return (nodeDef.flags & 224 /* CatPureExpression */) ?\n        asPureExpressionData(view, checkIndex).value :\n        undefined;\n}\n/**\n * @param {?} view\n * @param {?} checkIndex\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction prodCheckNoChangesNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    const nodeDef = view.def.nodes[checkIndex];\n    checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    return (nodeDef.flags & 224 /* CatPureExpression */) ?\n        asPureExpressionData(view, checkIndex).value :\n        undefined;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugCheckAndUpdateView(view) {\n    return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugCheckNoChangesView(view) {\n    return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugDestroyView(view) {\n    return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);\n}\n/** @enum {number} */\nconst DebugAction = {\n    create: 0,\n    detectChanges: 1,\n    checkNoChanges: 2,\n    destroy: 3,\n    handleEvent: 4,\n};\nDebugAction[DebugAction.create] = 'create';\nDebugAction[DebugAction.detectChanges] = 'detectChanges';\nDebugAction[DebugAction.checkNoChanges] = 'checkNoChanges';\nDebugAction[DebugAction.destroy] = 'destroy';\nDebugAction[DebugAction.handleEvent] = 'handleEvent';\n/** @type {?} */\nlet _currentAction;\n/** @type {?} */\nlet _currentView;\n/** @type {?} */\nlet _currentNodeIndex;\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction debugSetCurrentNode(view, nodeIndex) {\n    _currentView = view;\n    _currentNodeIndex = nodeIndex;\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @param {?} eventName\n * @param {?} event\n * @return {?}\n */\nfunction debugHandleEvent(view, nodeIndex, eventName, event) {\n    debugSetCurrentNode(view, nodeIndex);\n    return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);\n}\n/**\n * @param {?} view\n * @param {?} checkType\n * @return {?}\n */\nfunction debugUpdateDirectives(view, checkType) {\n    if (view.state & 128 /* Destroyed */) {\n        throw viewDestroyedError(DebugAction[_currentAction]);\n    }\n    debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));\n    return view.def.updateDirectives(debugCheckDirectivesFn, view);\n    /**\n     * @param {?} view\n     * @param {?} nodeIndex\n     * @param {?} argStyle\n     * @param {...?} values\n     * @return {?}\n     */\n    function debugCheckDirectivesFn(view, nodeIndex, argStyle, ...values) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[nodeIndex];\n        if (checkType === 0 /* CheckAndUpdate */) {\n            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n        }\n        else {\n            debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n        }\n        if (nodeDef.flags & 16384 /* TypeDirective */) {\n            debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));\n        }\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\n            asPureExpressionData(view, nodeDef.nodeIndex).value :\n            undefined;\n    }\n}\n/**\n * @param {?} view\n * @param {?} checkType\n * @return {?}\n */\nfunction debugUpdateRenderer(view, checkType) {\n    if (view.state & 128 /* Destroyed */) {\n        throw viewDestroyedError(DebugAction[_currentAction]);\n    }\n    debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));\n    return view.def.updateRenderer(debugCheckRenderNodeFn, view);\n    /**\n     * @param {?} view\n     * @param {?} nodeIndex\n     * @param {?} argStyle\n     * @param {...?} values\n     * @return {?}\n     */\n    function debugCheckRenderNodeFn(view, nodeIndex, argStyle, ...values) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[nodeIndex];\n        if (checkType === 0 /* CheckAndUpdate */) {\n            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n        }\n        else {\n            debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n        }\n        if (nodeDef.flags & 3 /* CatRenderNode */) {\n            debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));\n        }\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\n            asPureExpressionData(view, nodeDef.nodeIndex).value :\n            undefined;\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?} givenValues\n * @return {?}\n */\nfunction debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {\n    /** @type {?} */\n    const changed = ((/** @type {?} */ (checkAndUpdateNode)))(view, nodeDef, argStyle, ...givenValues);\n    if (changed) {\n        /** @type {?} */\n        const values = argStyle === 1 /* Dynamic */ ? givenValues[0] : givenValues;\n        if (nodeDef.flags & 16384 /* TypeDirective */) {\n            /** @type {?} */\n            const bindingValues = {};\n            for (let i = 0; i < nodeDef.bindings.length; i++) {\n                /** @type {?} */\n                const binding = nodeDef.bindings[i];\n                /** @type {?} */\n                const value = values[i];\n                if (binding.flags & 8 /* TypeProperty */) {\n                    bindingValues[normalizeDebugBindingName((/** @type {?} */ (binding.nonMinifiedName)))] =\n                        normalizeDebugBindingValue(value);\n                }\n            }\n            /** @type {?} */\n            const elDef = (/** @type {?} */ (nodeDef.parent));\n            /** @type {?} */\n            const el = asElementData(view, elDef.nodeIndex).renderElement;\n            if (!(/** @type {?} */ (elDef.element)).name) {\n                // a comment.\n                view.renderer.setValue(el, `bindings=${JSON.stringify(bindingValues, null, 2)}`);\n            }\n            else {\n                // a regular element.\n                for (let attr in bindingValues) {\n                    /** @type {?} */\n                    const value = bindingValues[attr];\n                    if (value != null) {\n                        view.renderer.setAttribute(el, attr, value);\n                    }\n                    else {\n                        view.renderer.removeAttribute(el, attr);\n                    }\n                }\n            }\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?} values\n * @return {?}\n */\nfunction debugCheckNoChangesNode(view, nodeDef, argStyle, values) {\n    ((/** @type {?} */ (checkNoChangesNode)))(view, nodeDef, argStyle, ...values);\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction nextDirectiveWithBinding(view, nodeIndex) {\n    for (let i = nodeIndex; i < view.def.nodes.length; i++) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & 16384 /* TypeDirective */ && nodeDef.bindings && nodeDef.bindings.length) {\n            return i;\n        }\n    }\n    return null;\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction nextRenderNodeWithBinding(view, nodeIndex) {\n    for (let i = nodeIndex; i < view.def.nodes.length; i++) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[i];\n        if ((nodeDef.flags & 3 /* CatRenderNode */) && nodeDef.bindings && nodeDef.bindings.length) {\n            return i;\n        }\n    }\n    return null;\n}\nclass DebugContext_ {\n    /**\n     * @param {?} view\n     * @param {?} nodeIndex\n     */\n    constructor(view, nodeIndex) {\n        this.view = view;\n        this.nodeIndex = nodeIndex;\n        if (nodeIndex == null) {\n            this.nodeIndex = nodeIndex = 0;\n        }\n        this.nodeDef = view.def.nodes[nodeIndex];\n        /** @type {?} */\n        let elDef = this.nodeDef;\n        /** @type {?} */\n        let elView = view;\n        while (elDef && (elDef.flags & 1 /* TypeElement */) === 0) {\n            elDef = (/** @type {?} */ (elDef.parent));\n        }\n        if (!elDef) {\n            while (!elDef && elView) {\n                elDef = (/** @type {?} */ (viewParentEl(elView)));\n                elView = (/** @type {?} */ (elView.parent));\n            }\n        }\n        this.elDef = elDef;\n        this.elView = elView;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    get elOrCompView() {\n        // Has to be done lazily as we use the DebugContext also during creation of elements...\n        return asElementData(this.elView, this.elDef.nodeIndex).componentView || this.view;\n    }\n    /**\n     * @return {?}\n     */\n    get injector() { return createInjector$1(this.elView, this.elDef); }\n    /**\n     * @return {?}\n     */\n    get component() { return this.elOrCompView.component; }\n    /**\n     * @return {?}\n     */\n    get context() { return this.elOrCompView.context; }\n    /**\n     * @return {?}\n     */\n    get providerTokens() {\n        /** @type {?} */\n        const tokens = [];\n        if (this.elDef) {\n            for (let i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n                /** @type {?} */\n                const childDef = this.elView.def.nodes[i];\n                if (childDef.flags & 20224 /* CatProvider */) {\n                    tokens.push((/** @type {?} */ (childDef.provider)).token);\n                }\n                i += childDef.childCount;\n            }\n        }\n        return tokens;\n    }\n    /**\n     * @return {?}\n     */\n    get references() {\n        /** @type {?} */\n        const references = {};\n        if (this.elDef) {\n            collectReferences(this.elView, this.elDef, references);\n            for (let i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n                /** @type {?} */\n                const childDef = this.elView.def.nodes[i];\n                if (childDef.flags & 20224 /* CatProvider */) {\n                    collectReferences(this.elView, childDef, references);\n                }\n                i += childDef.childCount;\n            }\n        }\n        return references;\n    }\n    /**\n     * @return {?}\n     */\n    get componentRenderElement() {\n        /** @type {?} */\n        const elData = findHostElement(this.elOrCompView);\n        return elData ? elData.renderElement : undefined;\n    }\n    /**\n     * @return {?}\n     */\n    get renderNode() {\n        return this.nodeDef.flags & 2 /* TypeText */ ? renderNode(this.view, this.nodeDef) :\n            renderNode(this.elView, this.elDef);\n    }\n    /**\n     * @param {?} console\n     * @param {...?} values\n     * @return {?}\n     */\n    logError(console, ...values) {\n        /** @type {?} */\n        let logViewDef;\n        /** @type {?} */\n        let logNodeIndex;\n        if (this.nodeDef.flags & 2 /* TypeText */) {\n            logViewDef = this.view.def;\n            logNodeIndex = this.nodeDef.nodeIndex;\n        }\n        else {\n            logViewDef = this.elView.def;\n            logNodeIndex = this.elDef.nodeIndex;\n        }\n        // Note: we only generate a log function for text and element nodes\n        // to make the generated code as small as possible.\n        /** @type {?} */\n        const renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);\n        /** @type {?} */\n        let currRenderNodeIndex = -1;\n        /** @type {?} */\n        let nodeLogger = (/**\n         * @return {?}\n         */\n        () => {\n            currRenderNodeIndex++;\n            if (currRenderNodeIndex === renderNodeIndex) {\n                return console.error.bind(console, ...values);\n            }\n            else {\n                return NOOP;\n            }\n        });\n        (/** @type {?} */ (logViewDef.factory))(nodeLogger);\n        if (currRenderNodeIndex < renderNodeIndex) {\n            console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');\n            ((/** @type {?} */ (console.error)))(...values);\n        }\n    }\n}\n/**\n * @param {?} viewDef\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction getRenderNodeIndex(viewDef, nodeIndex) {\n    /** @type {?} */\n    let renderNodeIndex = -1;\n    for (let i = 0; i <= nodeIndex; i++) {\n        /** @type {?} */\n        const nodeDef = viewDef.nodes[i];\n        if (nodeDef.flags & 3 /* CatRenderNode */) {\n            renderNodeIndex++;\n        }\n    }\n    return renderNodeIndex;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction findHostElement(view) {\n    while (view && !isComponentView(view)) {\n        view = (/** @type {?} */ (view.parent));\n    }\n    if (view.parent) {\n        return asElementData(view.parent, (/** @type {?} */ (viewParentEl(view))).nodeIndex);\n    }\n    return null;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} references\n * @return {?}\n */\nfunction collectReferences(view, nodeDef, references) {\n    for (let refName in nodeDef.references) {\n        references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);\n    }\n}\n/**\n * @param {?} action\n * @param {?} fn\n * @param {?} self\n * @param {?} args\n * @return {?}\n */\nfunction callWithDebugContext(action, fn, self, args) {\n    /** @type {?} */\n    const oldAction = _currentAction;\n    /** @type {?} */\n    const oldView = _currentView;\n    /** @type {?} */\n    const oldNodeIndex = _currentNodeIndex;\n    try {\n        _currentAction = action;\n        /** @type {?} */\n        const result = fn.apply(self, args);\n        _currentView = oldView;\n        _currentNodeIndex = oldNodeIndex;\n        _currentAction = oldAction;\n        return result;\n    }\n    catch (e) {\n        if (isViewDebugError(e) || !_currentView) {\n            throw e;\n        }\n        throw viewWrappedDebugError(e, (/** @type {?} */ (getCurrentDebugContext())));\n    }\n}\n/**\n * @return {?}\n */\nfunction getCurrentDebugContext() {\n    return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;\n}\nclass DebugRendererFactory2 {\n    /**\n     * @param {?} delegate\n     */\n    constructor(delegate) {\n        this.delegate = delegate;\n    }\n    /**\n     * @param {?} element\n     * @param {?} renderData\n     * @return {?}\n     */\n    createRenderer(element, renderData) {\n        return new DebugRenderer2(this.delegate.createRenderer(element, renderData));\n    }\n    /**\n     * @return {?}\n     */\n    begin() {\n        if (this.delegate.begin) {\n            this.delegate.begin();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    end() {\n        if (this.delegate.end) {\n            this.delegate.end();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    whenRenderingDone() {\n        if (this.delegate.whenRenderingDone) {\n            return this.delegate.whenRenderingDone();\n        }\n        return Promise.resolve(null);\n    }\n}\nclass DebugRenderer2 {\n    /**\n     * @param {?} delegate\n     */\n    constructor(delegate) {\n        this.delegate = delegate;\n        /**\n         * Factory function used to create a `DebugContext` when a node is created.\n         *\n         * The `DebugContext` allows to retrieve information about the nodes that are useful in tests.\n         *\n         * The factory is configurable so that the `DebugRenderer2` could instantiate either a View Engine\n         * or a Render context.\n         */\n        this.debugContextFactory = getCurrentDebugContext;\n        this.data = this.delegate.data;\n    }\n    /**\n     * @private\n     * @param {?} nativeElement\n     * @return {?}\n     */\n    createDebugContext(nativeElement) { return this.debugContextFactory(nativeElement); }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    destroyNode(node) {\n        removeDebugNodeFromIndex((/** @type {?} */ (getDebugNode(node))));\n        if (this.delegate.destroyNode) {\n            this.delegate.destroyNode(node);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    destroy() { this.delegate.destroy(); }\n    /**\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    createElement(name, namespace) {\n        /** @type {?} */\n        const el = this.delegate.createElement(name, namespace);\n        /** @type {?} */\n        const debugCtx = this.createDebugContext(el);\n        if (debugCtx) {\n            /** @type {?} */\n            const debugEl = new DebugElement__PRE_R3__(el, null, debugCtx);\n            ((/** @type {?} */ (debugEl))).name = name;\n            indexDebugNode(debugEl);\n        }\n        return el;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    createComment(value) {\n        /** @type {?} */\n        const comment = this.delegate.createComment(value);\n        /** @type {?} */\n        const debugCtx = this.createDebugContext(comment);\n        if (debugCtx) {\n            indexDebugNode(new DebugNode__PRE_R3__(comment, null, debugCtx));\n        }\n        return comment;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    createText(value) {\n        /** @type {?} */\n        const text = this.delegate.createText(value);\n        /** @type {?} */\n        const debugCtx = this.createDebugContext(text);\n        if (debugCtx) {\n            indexDebugNode(new DebugNode__PRE_R3__(text, null, debugCtx));\n        }\n        return text;\n    }\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    appendChild(parent, newChild) {\n        /** @type {?} */\n        const debugEl = getDebugNode(parent);\n        /** @type {?} */\n        const debugChildEl = getDebugNode(newChild);\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.addChild(debugChildEl);\n        }\n        this.delegate.appendChild(parent, newChild);\n    }\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    insertBefore(parent, newChild, refChild) {\n        /** @type {?} */\n        const debugEl = getDebugNode(parent);\n        /** @type {?} */\n        const debugChildEl = getDebugNode(newChild);\n        /** @type {?} */\n        const debugRefEl = (/** @type {?} */ (getDebugNode(refChild)));\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.insertBefore(debugRefEl, debugChildEl);\n        }\n        this.delegate.insertBefore(parent, newChild, refChild);\n    }\n    /**\n     * @param {?} parent\n     * @param {?} oldChild\n     * @return {?}\n     */\n    removeChild(parent, oldChild) {\n        /** @type {?} */\n        const debugEl = getDebugNode(parent);\n        /** @type {?} */\n        const debugChildEl = getDebugNode(oldChild);\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.removeChild(debugChildEl);\n        }\n        this.delegate.removeChild(parent, oldChild);\n    }\n    /**\n     * @param {?} selectorOrNode\n     * @param {?=} preserveContent\n     * @return {?}\n     */\n    selectRootElement(selectorOrNode, preserveContent) {\n        /** @type {?} */\n        const el = this.delegate.selectRootElement(selectorOrNode, preserveContent);\n        /** @type {?} */\n        const debugCtx = getCurrentDebugContext();\n        if (debugCtx) {\n            indexDebugNode(new DebugElement__PRE_R3__(el, null, debugCtx));\n        }\n        return el;\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} namespace\n     * @return {?}\n     */\n    setAttribute(el, name, value, namespace) {\n        /** @type {?} */\n        const debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            /** @type {?} */\n            const fullName = namespace ? namespace + ':' + name : name;\n            debugEl.attributes[fullName] = value;\n        }\n        this.delegate.setAttribute(el, name, value, namespace);\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    removeAttribute(el, name, namespace) {\n        /** @type {?} */\n        const debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            /** @type {?} */\n            const fullName = namespace ? namespace + ':' + name : name;\n            debugEl.attributes[fullName] = null;\n        }\n        this.delegate.removeAttribute(el, name, namespace);\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    addClass(el, name) {\n        /** @type {?} */\n        const debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.classes[name] = true;\n        }\n        this.delegate.addClass(el, name);\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    removeClass(el, name) {\n        /** @type {?} */\n        const debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.classes[name] = false;\n        }\n        this.delegate.removeClass(el, name);\n    }\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} value\n     * @param {?} flags\n     * @return {?}\n     */\n    setStyle(el, style, value, flags) {\n        /** @type {?} */\n        const debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.styles[style] = value;\n        }\n        this.delegate.setStyle(el, style, value, flags);\n    }\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} flags\n     * @return {?}\n     */\n    removeStyle(el, style, flags) {\n        /** @type {?} */\n        const debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.styles[style] = null;\n        }\n        this.delegate.removeStyle(el, style, flags);\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    setProperty(el, name, value) {\n        /** @type {?} */\n        const debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.properties[name] = value;\n        }\n        this.delegate.setProperty(el, name, value);\n    }\n    /**\n     * @param {?} target\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    listen(target, eventName, callback) {\n        if (typeof target !== 'string') {\n            /** @type {?} */\n            const debugEl = getDebugNode(target);\n            if (debugEl) {\n                debugEl.listeners.push(new DebugEventListener(eventName, callback));\n            }\n        }\n        return this.delegate.listen(target, eventName, callback);\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    parentNode(node) { return this.delegate.parentNode(node); }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    nextSibling(node) { return this.delegate.nextSibling(node); }\n    /**\n     * @param {?} node\n     * @param {?} value\n     * @return {?}\n     */\n    setValue(node, value) { return this.delegate.setValue(node, value); }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} override\n * @return {?}\n */\nfunction overrideProvider(override) {\n    initServicesIfNeeded();\n    return Services.overrideProvider(override);\n}\n/**\n * @param {?} comp\n * @param {?} componentFactory\n * @return {?}\n */\nfunction overrideComponentView(comp, componentFactory) {\n    initServicesIfNeeded();\n    return Services.overrideComponentView(comp, componentFactory);\n}\n/**\n * @return {?}\n */\nfunction clearOverrides() {\n    initServicesIfNeeded();\n    return Services.clearOverrides();\n}\n// Attention: this function is called as top level function.\n// Putting any logic in here will destroy closure tree shaking!\n/**\n * @param {?} ngModuleType\n * @param {?} bootstrapComponents\n * @param {?} defFactory\n * @return {?}\n */\nfunction createNgModuleFactory(ngModuleType, bootstrapComponents, defFactory) {\n    return new NgModuleFactory_(ngModuleType, bootstrapComponents, defFactory);\n}\n/**\n * @param {?} def\n * @return {?}\n */\nfunction cloneNgModuleDefinition(def) {\n    /** @type {?} */\n    const providers = Array.from(def.providers);\n    /** @type {?} */\n    const modules = Array.from(def.modules);\n    /** @type {?} */\n    const providersByKey = {};\n    for (const key in def.providersByKey) {\n        providersByKey[key] = def.providersByKey[key];\n    }\n    return {\n        factory: def.factory,\n        isRoot: def.isRoot, providers, modules, providersByKey,\n    };\n}\nclass NgModuleFactory_ extends NgModuleFactory {\n    /**\n     * @param {?} moduleType\n     * @param {?} _bootstrapComponents\n     * @param {?} _ngModuleDefFactory\n     */\n    constructor(moduleType, _bootstrapComponents, _ngModuleDefFactory) {\n        // Attention: this ctor is called as top level function.\n        // Putting any logic in here will destroy closure tree shaking!\n        super();\n        this.moduleType = moduleType;\n        this._bootstrapComponents = _bootstrapComponents;\n        this._ngModuleDefFactory = _ngModuleDefFactory;\n    }\n    /**\n     * @param {?} parentInjector\n     * @return {?}\n     */\n    create(parentInjector) {\n        initServicesIfNeeded();\n        // Clone the NgModuleDefinition so that any tree shakeable provider definition\n        // added to this instance of the NgModuleRef doesn't affect the cached copy.\n        // See https://github.com/angular/angular/issues/25018.\n        /** @type {?} */\n        const def = cloneNgModuleDefinition(resolveDefinition(this._ngModuleDefFactory));\n        return Services.createNgModuleRef(this.moduleType, parentInjector || Injector.NULL, this._bootstrapComponents, def);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { APPLICATION_MODULE_PROVIDERS as ɵangular_packages_core_core_r, _iterableDiffersFactory as ɵangular_packages_core_core_o, _keyValueDiffersFactory as ɵangular_packages_core_core_p, _localeFactory as ɵangular_packages_core_core_q, zoneSchedulerFactory as ɵangular_packages_core_core_s, _appIdRandomProviderFactory as ɵangular_packages_core_core_f, DefaultIterableDifferFactory as ɵangular_packages_core_core_m, DefaultKeyValueDifferFactory as ɵangular_packages_core_core_n, DebugElement__PRE_R3__ as ɵangular_packages_core_core_l, DebugNode__PRE_R3__ as ɵangular_packages_core_core_k, NullInjector as ɵangular_packages_core_core_a, injectInjectorOnly as ɵangular_packages_core_core_b, ReflectiveInjector_ as ɵangular_packages_core_core_c, ReflectiveDependency as ɵangular_packages_core_core_d, resolveReflectiveProviders as ɵangular_packages_core_core_e, getModuleFactory__PRE_R3__ as ɵangular_packages_core_core_j, wtfEnabled as ɵangular_packages_core_core_t, createScope as ɵangular_packages_core_core_v, detectWTF as ɵangular_packages_core_core_u, endTimeRange as ɵangular_packages_core_core_y, leave as ɵangular_packages_core_core_w, startTimeRange as ɵangular_packages_core_core_x, SCHEDULER as ɵangular_packages_core_core_bb, injectAttributeImpl as ɵangular_packages_core_core_bc, getLView as ɵangular_packages_core_core_bd, getPreviousOrParentTNode as ɵangular_packages_core_core_be, nextContextImpl as ɵangular_packages_core_core_bf, BoundPlayerFactory as ɵangular_packages_core_core_bj, getRootContext as ɵangular_packages_core_core_bp, loadInternal as ɵangular_packages_core_core_bo, createElementRef as ɵangular_packages_core_core_g, createTemplateRef as ɵangular_packages_core_core_h, createViewRef as ɵangular_packages_core_core_i, getUrlSanitizer as ɵangular_packages_core_core_bh, noSideEffects as ɵangular_packages_core_core_bn, makeParamDecorator as ɵangular_packages_core_core_bk, makePropDecorator as ɵangular_packages_core_core_bl, getClosureSafeProperty as ɵangular_packages_core_core_bq, _def as ɵangular_packages_core_core_z, DebugContext as ɵangular_packages_core_core_ba, createPlatform, assertPlatform, destroyPlatform, getPlatform, PlatformRef, ApplicationRef, createPlatformFactory, NgProbeToken, enableProdMode, isDevMode, APP_ID, PACKAGE_ROOT_URL, PLATFORM_INITIALIZER, PLATFORM_ID, APP_BOOTSTRAP_LISTENER, APP_INITIALIZER, ApplicationInitStatus, DebugElement, DebugEventListener, DebugNode, asNativeElements, getDebugNode, Testability, TestabilityRegistry, setTestabilityGetter, TRANSLATIONS$1 as TRANSLATIONS, TRANSLATIONS_FORMAT, LOCALE_ID, MissingTranslationStrategy, ApplicationModule, wtfCreateScope, wtfLeave, wtfStartTimeRange, wtfEndTimeRange, Type, EventEmitter, ErrorHandler, Sanitizer, SecurityContext, Attribute, ANALYZE_FOR_ENTRY_COMPONENTS, ContentChild, ContentChildren, Query, ViewChild, ViewChildren, Component, Directive, HostBinding, HostListener, Input, Output, Pipe, NgModule, CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA, ViewEncapsulation, Version, VERSION, InjectFlags, ɵɵdefineInjectable, defineInjectable, ɵɵdefineInjector, forwardRef, resolveForwardRef, Injectable, INJECTOR, Injector, ɵɵinject, inject, ReflectiveInjector, ResolvedReflectiveFactory, ReflectiveKey, InjectionToken, Inject, Optional, Self, SkipSelf, Host, NgZone, NoopNgZone as ɵNoopNgZone, RenderComponentType, Renderer, Renderer2, RendererFactory2, RendererStyleFlags2, RootRenderer, COMPILER_OPTIONS, Compiler, CompilerFactory, ModuleWithComponentFactories, ComponentFactory, ComponentFactory as ɵComponentFactory, ComponentRef, ComponentFactoryResolver, ElementRef, NgModuleFactory, NgModuleRef, NgModuleFactoryLoader, getModuleFactory, QueryList, SystemJsNgModuleLoader, SystemJsNgModuleLoaderConfig, TemplateRef, ViewContainerRef, EmbeddedViewRef, ViewRef$1 as ViewRef, ChangeDetectionStrategy, ChangeDetectorRef, DefaultIterableDiffer, IterableDiffers, KeyValueDiffers, SimpleChange, WrappedValue, platformCore, ALLOW_MULTIPLE_PLATFORMS as ɵALLOW_MULTIPLE_PLATFORMS, APP_ID_RANDOM_PROVIDER as ɵAPP_ID_RANDOM_PROVIDER, defaultIterableDiffers as ɵdefaultIterableDiffers, defaultKeyValueDiffers as ɵdefaultKeyValueDiffers, devModeEqual as ɵdevModeEqual, isListLikeIterable as ɵisListLikeIterable, ChangeDetectorStatus as ɵChangeDetectorStatus, isDefaultChangeDetectionStrategy as ɵisDefaultChangeDetectionStrategy, Console as ɵConsole, setCurrentInjector as ɵsetCurrentInjector, getInjectableDef as ɵgetInjectableDef, APP_ROOT as ɵAPP_ROOT, ivyEnabled as ɵivyEnabled, CodegenComponentFactoryResolver as ɵCodegenComponentFactoryResolver, clearResolutionOfComponentResourcesQueue as ɵclearResolutionOfComponentResourcesQueue, resolveComponentResources as ɵresolveComponentResources, ReflectionCapabilities as ɵReflectionCapabilities, RenderDebugInfo as ɵRenderDebugInfo, _sanitizeHtml as ɵ_sanitizeHtml, _sanitizeStyle as ɵ_sanitizeStyle, _sanitizeUrl as ɵ_sanitizeUrl, _global as ɵglobal, looseIdentical as ɵlooseIdentical, stringify as ɵstringify, makeDecorator as ɵmakeDecorator, isObservable as ɵisObservable, isPromise as ɵisPromise, clearOverrides as ɵclearOverrides, initServicesIfNeeded as ɵinitServicesIfNeeded, overrideComponentView as ɵoverrideComponentView, overrideProvider as ɵoverrideProvider, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR as ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, ɵɵdefineBase, ɵɵdefineComponent, ɵɵdefineDirective, ɵɵdefinePipe, ɵɵdefineNgModule, detectChanges as ɵdetectChanges, renderComponent as ɵrenderComponent, ComponentFactory$1 as ɵRender3ComponentFactory, ComponentRef$1 as ɵRender3ComponentRef, ɵɵdirectiveInject, ɵɵinjectAttribute, ɵɵgetFactoryOf, ɵɵgetInheritedFactory, ɵɵsetComponentScope, ɵɵsetNgModuleScope, ɵɵtemplateRefExtractor, ɵɵProvidersFeature, ɵɵInheritDefinitionFeature, ɵɵNgOnChangesFeature, LifecycleHooksFeature as ɵLifecycleHooksFeature, NgModuleRef$1 as ɵRender3NgModuleRef, markDirty as ɵmarkDirty, NgModuleFactory$1 as ɵNgModuleFactory, NO_CHANGE as ɵNO_CHANGE, ɵɵcontainer, ɵɵnextContext, ɵɵelementStart, ɵɵnamespaceHTML, ɵɵnamespaceMathML, ɵɵnamespaceSVG, ɵɵelement, ɵɵlistener, ɵɵtext, ɵɵembeddedViewStart, ɵɵprojection, ɵɵbind, ɵɵinterpolation1, ɵɵinterpolation2, ɵɵinterpolation3, ɵɵinterpolation4, ɵɵinterpolation5, ɵɵinterpolation6, ɵɵinterpolation7, ɵɵinterpolation8, ɵɵinterpolationV, ɵɵpipeBind1, ɵɵpipeBind2, ɵɵpipeBind3, ɵɵpipeBind4, ɵɵpipeBindV, ɵɵpureFunction0, ɵɵpureFunction1, ɵɵpureFunction2, ɵɵpureFunction3, ɵɵpureFunction4, ɵɵpureFunction5, ɵɵpureFunction6, ɵɵpureFunction7, ɵɵpureFunction8, ɵɵpureFunctionV, ɵɵgetCurrentView, getDirectives as ɵgetDirectives, getHostElement as ɵgetHostElement, ɵɵrestoreView, ɵɵcontainerRefreshStart, ɵɵcontainerRefreshEnd, ɵɵqueryRefresh, ɵɵviewQuery, ɵɵstaticViewQuery, ɵɵstaticContentQuery, ɵɵloadViewQuery, ɵɵcontentQuery, ɵɵloadContentQuery, ɵɵelementEnd, ɵɵelementProperty, ɵɵproperty, ɵɵpropertyInterpolate, ɵɵpropertyInterpolate1, ɵɵpropertyInterpolate2, ɵɵpropertyInterpolate3, ɵɵpropertyInterpolate4, ɵɵpropertyInterpolate5, ɵɵpropertyInterpolate6, ɵɵpropertyInterpolate7, ɵɵpropertyInterpolate8, ɵɵpropertyInterpolateV, ɵɵcomponentHostSyntheticProperty, ɵɵcomponentHostSyntheticListener, ɵɵprojectionDef, ɵɵreference, ɵɵenableBindings, ɵɵdisableBindings, ɵɵallocHostVars, ɵɵelementAttribute, ɵɵelementContainerStart, ɵɵelementContainerEnd, ɵɵelementStyling, ɵɵelementStylingMap, ɵɵelementStyleProp, ɵɵelementStylingApply, ɵɵelementClassProp, ɵɵelementHostAttrs, ɵɵelementHostStyling, ɵɵelementHostStylingMap, ɵɵelementHostStyleProp, ɵɵelementHostClassProp, ɵɵelementHostStylingApply, ɵɵselect, ɵɵtextBinding, ɵɵtemplate, ɵɵembeddedViewEnd, store as ɵstore, ɵɵload, ɵɵpipe, whenRendered as ɵwhenRendered, ɵɵi18n, ɵɵi18nAttributes, ɵɵi18nExp, ɵɵi18nStart, ɵɵi18nEnd, ɵɵi18nApply, ɵɵi18nPostprocess, i18nConfigureLocalize as ɵi18nConfigureLocalize, ɵɵi18nLocalize, setClassMetadata as ɵsetClassMetadata, ɵɵresolveWindow, ɵɵresolveDocument, ɵɵresolveBody, compileComponent as ɵcompileComponent, compileDirective as ɵcompileDirective, compileNgModule as ɵcompileNgModule, compileNgModuleDefs as ɵcompileNgModuleDefs, patchComponentDefWithScope as ɵpatchComponentDefWithScope, resetCompiledComponents as ɵresetCompiledComponents, flushModuleScopingQueueAsMuchAsPossible as ɵflushModuleScopingQueueAsMuchAsPossible, transitiveScopesFor as ɵtransitiveScopesFor, compilePipe as ɵcompilePipe, ɵɵsanitizeHtml, ɵɵsanitizeStyle, ɵɵdefaultStyleSanitizer, ɵɵsanitizeScript, ɵɵsanitizeUrl, ɵɵsanitizeResourceUrl, ɵɵsanitizeUrlOrResourceUrl, bypassSanitizationTrustHtml as ɵbypassSanitizationTrustHtml, bypassSanitizationTrustStyle as ɵbypassSanitizationTrustStyle, bypassSanitizationTrustScript as ɵbypassSanitizationTrustScript, bypassSanitizationTrustUrl as ɵbypassSanitizationTrustUrl, bypassSanitizationTrustResourceUrl as ɵbypassSanitizationTrustResourceUrl, getLContext as ɵgetLContext, NG_ELEMENT_ID as ɵNG_ELEMENT_ID, NG_COMPONENT_DEF as ɵNG_COMPONENT_DEF, NG_DIRECTIVE_DEF as ɵNG_DIRECTIVE_DEF, NG_PIPE_DEF as ɵNG_PIPE_DEF, NG_MODULE_DEF as ɵNG_MODULE_DEF, NG_BASE_DEF as ɵNG_BASE_DEF, NG_INJECTABLE_DEF as ɵNG_INJECTABLE_DEF, NG_INJECTOR_DEF as ɵNG_INJECTOR_DEF, bindPlayerFactory as ɵbindPlayerFactory, addPlayer as ɵaddPlayer, getPlayers as ɵgetPlayers, compileNgModuleFactory__POST_R3__ as ɵcompileNgModuleFactory__POST_R3__, isBoundToModule__POST_R3__ as ɵisBoundToModule__POST_R3__, SWITCH_COMPILE_COMPONENT__POST_R3__ as ɵSWITCH_COMPILE_COMPONENT__POST_R3__, SWITCH_COMPILE_DIRECTIVE__POST_R3__ as ɵSWITCH_COMPILE_DIRECTIVE__POST_R3__, SWITCH_COMPILE_PIPE__POST_R3__ as ɵSWITCH_COMPILE_PIPE__POST_R3__, SWITCH_COMPILE_NGMODULE__POST_R3__ as ɵSWITCH_COMPILE_NGMODULE__POST_R3__, getDebugNode__POST_R3__ as ɵgetDebugNode__POST_R3__, SWITCH_COMPILE_INJECTABLE__POST_R3__ as ɵSWITCH_COMPILE_INJECTABLE__POST_R3__, SWITCH_IVY_ENABLED__POST_R3__ as ɵSWITCH_IVY_ENABLED__POST_R3__, SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ as ɵSWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__, Compiler_compileModuleSync__POST_R3__ as ɵCompiler_compileModuleSync__POST_R3__, Compiler_compileModuleAsync__POST_R3__ as ɵCompiler_compileModuleAsync__POST_R3__, Compiler_compileModuleAndAllComponentsSync__POST_R3__ as ɵCompiler_compileModuleAndAllComponentsSync__POST_R3__, Compiler_compileModuleAndAllComponentsAsync__POST_R3__ as ɵCompiler_compileModuleAndAllComponentsAsync__POST_R3__, SWITCH_ELEMENT_REF_FACTORY__POST_R3__ as ɵSWITCH_ELEMENT_REF_FACTORY__POST_R3__, SWITCH_TEMPLATE_REF_FACTORY__POST_R3__ as ɵSWITCH_TEMPLATE_REF_FACTORY__POST_R3__, SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__ as ɵSWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__, SWITCH_RENDERER2_FACTORY__POST_R3__ as ɵSWITCH_RENDERER2_FACTORY__POST_R3__, getModuleFactory__POST_R3__ as ɵgetModuleFactory__POST_R3__, registerNgModuleType as ɵregisterNgModuleType, publishGlobalUtil as ɵpublishGlobalUtil, publishDefaultGlobalUtils as ɵpublishDefaultGlobalUtils, createInjector as ɵcreateInjector, registerModuleFactory as ɵregisterModuleFactory, EMPTY_ARRAY$3 as ɵEMPTY_ARRAY, EMPTY_MAP as ɵEMPTY_MAP, anchorDef as ɵand, createComponentFactory as ɵccf, createNgModuleFactory as ɵcmf, createRendererType2 as ɵcrt, directiveDef as ɵdid, elementDef as ɵeld, getComponentViewDefinitionFactory as ɵgetComponentViewDefinitionFactory, inlineInterpolate as ɵinlineInterpolate, interpolate as ɵinterpolate, moduleDef as ɵmod, moduleProvideDef as ɵmpd, ngContentDef as ɵncd, nodeValue as ɵnov, pipeDef as ɵpid, providerDef as ɵprd, pureArrayDef as ɵpad, pureObjectDef as ɵpod, purePipeDef as ɵppd, queryDef as ɵqud, textDef as ɵted, unwrapValue as ɵunv, viewDef as ɵvid };\n//# sourceMappingURL=core.js.map\n","/**\n * @license Angular v8.0.0\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { InjectionToken, EventEmitter, Injectable, Optional, Inject, LOCALE_ID, ɵisListLikeIterable, ɵstringify, IterableDiffers, KeyValueDiffers, ElementRef, Renderer2, ɵɵdefineDirective, Directive, Input, ɵɵelementHostStyling, ɵɵelementHostStylingMap, ɵɵelementHostStylingApply, NgModuleRef, ComponentFactoryResolver, ViewContainerRef, isDevMode, TemplateRef, Host, Attribute, Pipe, ɵlooseIdentical, WrappedValue, ɵisPromise, ɵisObservable, ChangeDetectorRef, NgModule, Version, ɵɵdefineInjectable, ɵɵinject, ErrorHandler } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This class should not be used directly by an application developer. Instead, use\n * {\\@link Location}.\n *\n * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform\n * agnostic.\n * This means that we can have different implementation of `PlatformLocation` for the different\n * platforms that angular supports. For example, `\\@angular/platform-browser` provides an\n * implementation specific to the browser environment, while `\\@angular/platform-webworker` provides\n * one suitable for use with web workers.\n *\n * The `PlatformLocation` class is used directly by all implementations of {\\@link LocationStrategy}\n * when they need to interact with the DOM apis like pushState, popState, etc...\n *\n * {\\@link LocationStrategy} in turn is used by the {\\@link Location} service which is used directly\n * by the {\\@link Router} in order to navigate between routes. Since all interactions between {\\@link\n * Router} /\n * {\\@link Location} / {\\@link LocationStrategy} and DOM apis flow through the `PlatformLocation`\n * class they are all platform independent.\n *\n * \\@publicApi\n * @abstract\n */\nclass PlatformLocation {\n}\n/**\n * \\@description\n * Indicates when a location is initialized.\n *\n * \\@publicApi\n * @type {?}\n */\nconst LOCATION_INITIALIZED = new InjectionToken('Location Initialized');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * `LocationStrategy` is responsible for representing and reading route state\n * from the browser's URL. Angular provides two strategies:\n * {\\@link HashLocationStrategy} and {\\@link PathLocationStrategy}.\n *\n * This is used under the hood of the {\\@link Location} service.\n *\n * Applications should use the {\\@link Router} or {\\@link Location} services to\n * interact with application route state.\n *\n * For instance, {\\@link HashLocationStrategy} produces URLs like\n * `http://example.com#/foo`, and {\\@link PathLocationStrategy} produces\n * `http://example.com/foo` as an equivalent URL.\n *\n * See these two classes for more.\n *\n * \\@publicApi\n * @abstract\n */\nclass LocationStrategy {\n}\n/**\n * A predefined [DI token](guide/glossary#di-token) for the base href\n * to be used with the `PathLocationStrategy`.\n * The base href is the URL prefix that should be preserved when generating\n * and recognizing URLs.\n *\n * \\@usageNotes\n *\n * The following example shows how to use this token to configure the root app injector\n * with a base href value, so that the DI framework can supply the dependency anywhere in the app.\n *\n * ```typescript\n * import {Component, NgModule} from '\\@angular/core';\n * import {APP_BASE_HREF} from '\\@angular/common';\n *\n * \\@NgModule({\n *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]\n * })\n * class AppModule {}\n * ```\n *\n * \\@publicApi\n * @type {?}\n */\nconst APP_BASE_HREF = new InjectionToken('appBaseHref');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n *\n * A service that applications can use to interact with a browser's URL.\n *\n * Depending on the {\\@link LocationStrategy} used, `Location` will either persist\n * to the URL's path or the URL's hash segment.\n *\n * \\@usageNotes\n *\n * It's better to use the {\\@link Router#navigate} service to trigger route changes. Use\n * `Location` only if you need to interact with or create normalized URLs outside of\n * routing.\n *\n * `Location` is responsible for normalizing the URL against the application's base href.\n * A normalized URL is absolute from the URL host, includes the application's base href, and has no\n * trailing slash:\n * - `/my/app/user/123` is normalized\n * - `my/app/user/123` **is not** normalized\n * - `/my/app/user/123/` **is not** normalized\n *\n * ### Example\n *\n * {\\@example common/location/ts/path_location_component.ts region='LocationComponent'}\n *\n * \\@publicApi\n */\nclass Location {\n    /**\n     * @param {?} platformStrategy\n     * @param {?} platformLocation\n     */\n    constructor(platformStrategy, platformLocation) {\n        /**\n         * \\@internal\n         */\n        this._subject = new EventEmitter();\n        /**\n         * \\@internal\n         */\n        this._urlChangeListeners = [];\n        this._platformStrategy = platformStrategy;\n        /** @type {?} */\n        const browserBaseHref = this._platformStrategy.getBaseHref();\n        this._platformLocation = platformLocation;\n        this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));\n        this._platformStrategy.onPopState((/**\n         * @param {?} ev\n         * @return {?}\n         */\n        (ev) => {\n            this._subject.emit({\n                'url': this.path(true),\n                'pop': true,\n                'state': ev.state,\n                'type': ev.type,\n            });\n        }));\n    }\n    /**\n     * Returns the normalized URL path.\n     *\n     * @param {?=} includeHash Whether path has an anchor fragment.\n     *\n     * @return {?} The normalized URL path.\n     */\n    // TODO: vsavkin. Remove the boolean flag and always include hash once the deprecated router is\n    // removed.\n    path(includeHash = false) {\n        return this.normalize(this._platformStrategy.path(includeHash));\n    }\n    /**\n     * Returns the current value of the history.state object.\n     * @return {?}\n     */\n    getState() { return this._platformLocation.getState(); }\n    /**\n     * Normalizes the given path and compares to the current normalized path.\n     *\n     * @param {?} path The given URL path\n     * @param {?=} query Query parameters\n     *\n     * @return {?} `true` if the given URL path is equal to the current normalized path, `false`\n     * otherwise.\n     */\n    isCurrentPathEqualTo(path, query = '') {\n        return this.path() == this.normalize(path + Location.normalizeQueryParams(query));\n    }\n    /**\n     * Given a string representing a URL, returns the URL path after stripping the\n     * trailing slashes.\n     *\n     * @param {?} url String representing a URL.\n     *\n     * @return {?} Normalized URL string.\n     */\n    normalize(url) {\n        return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));\n    }\n    /**\n     * Given a string representing a URL, returns the platform-specific external URL path.\n     * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one\n     * before normalizing. This method also adds a hash if `HashLocationStrategy` is\n     * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.\n     *\n     *\n     * @param {?} url String representing a URL.\n     *\n     * @return {?} A normalized platform-specific URL.\n     */\n    prepareExternalUrl(url) {\n        if (url && url[0] !== '/') {\n            url = '/' + url;\n        }\n        return this._platformStrategy.prepareExternalUrl(url);\n    }\n    // TODO: rename this method to pushState\n    /**\n     * Changes the browsers URL to a normalized version of the given URL, and pushes a\n     * new item onto the platform's history.\n     *\n     * @param {?} path  URL path to normalizze\n     * @param {?=} query Query parameters\n     * @param {?=} state Location history state\n     *\n     * @return {?}\n     */\n    go(path, query = '', state = null) {\n        this._platformStrategy.pushState(state, '', path, query);\n        this._notifyUrlChangeListeners(this.prepareExternalUrl(path + Location.normalizeQueryParams(query)), state);\n    }\n    /**\n     * Changes the browser's URL to a normalized version of the given URL, and replaces\n     * the top item on the platform's history stack.\n     *\n     * @param {?} path  URL path to normalizze\n     * @param {?=} query Query parameters\n     * @param {?=} state Location history state\n     * @return {?}\n     */\n    replaceState(path, query = '', state = null) {\n        this._platformStrategy.replaceState(state, '', path, query);\n        this._notifyUrlChangeListeners(this.prepareExternalUrl(path + Location.normalizeQueryParams(query)), state);\n    }\n    /**\n     * Navigates forward in the platform's history.\n     * @return {?}\n     */\n    forward() { this._platformStrategy.forward(); }\n    /**\n     * Navigates back in the platform's history.\n     * @return {?}\n     */\n    back() { this._platformStrategy.back(); }\n    /**\n     * Register URL change listeners. This API can be used to catch updates performed by the Angular\n     * framework. These are not detectible through \"popstate\" or \"hashchange\" events.\n     * @param {?} fn\n     * @return {?}\n     */\n    onUrlChange(fn) {\n        this._urlChangeListeners.push(fn);\n        this.subscribe((/**\n         * @param {?} v\n         * @return {?}\n         */\n        v => { this._notifyUrlChangeListeners(v.url, v.state); }));\n    }\n    /**\n     * \\@internal\n     * @param {?=} url\n     * @param {?=} state\n     * @return {?}\n     */\n    _notifyUrlChangeListeners(url = '', state) {\n        this._urlChangeListeners.forEach((/**\n         * @param {?} fn\n         * @return {?}\n         */\n        fn => fn(url, state)));\n    }\n    /**\n     * Subscribe to the platform's `popState` events.\n     *\n     * @param {?} onNext\n     * @param {?=} onThrow\n     * @param {?=} onReturn\n     * @return {?} Subscribed events.\n     */\n    subscribe(onNext, onThrow, onReturn) {\n        return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });\n    }\n    /**\n     * Given a string of url parameters, prepend with `?` if needed, otherwise return the\n     * parameters as is.\n     *\n     * @param {?} params String of URL parameters\n     *\n     * @return {?} URL parameters prepended with `?` or the parameters as is.\n     */\n    static normalizeQueryParams(params) {\n        return params && params[0] !== '?' ? '?' + params : params;\n    }\n    /**\n     * Given 2 parts of a URL, join them with a slash if needed.\n     *\n     * @param {?} start  URL string\n     * @param {?} end    URL string\n     *\n     *\n     * @return {?} Given URL strings joined with a slash, if needed.\n     */\n    static joinWithSlash(start, end) {\n        if (start.length == 0) {\n            return end;\n        }\n        if (end.length == 0) {\n            return start;\n        }\n        /** @type {?} */\n        let slashes = 0;\n        if (start.endsWith('/')) {\n            slashes++;\n        }\n        if (end.startsWith('/')) {\n            slashes++;\n        }\n        if (slashes == 2) {\n            return start + end.substring(1);\n        }\n        if (slashes == 1) {\n            return start + end;\n        }\n        return start + '/' + end;\n    }\n    /**\n     * If URL has a trailing slash, remove it, otherwise return the URL as is. The\n     * method looks for the first occurrence of either `#`, `?`, or the end of the\n     * line as `/` characters and removes the trailing slash if one exists.\n     *\n     * @param {?} url URL string\n     *\n     * @return {?} Returns a URL string after removing the trailing slash if one exists, otherwise\n     * returns the string as is.\n     */\n    static stripTrailingSlash(url) {\n        /** @type {?} */\n        const match = url.match(/#|\\?|$/);\n        /** @type {?} */\n        const pathEndIdx = match && match.index || url.length;\n        /** @type {?} */\n        const droppedSlashIdx = pathEndIdx - (url[pathEndIdx - 1] === '/' ? 1 : 0);\n        return url.slice(0, droppedSlashIdx) + url.slice(pathEndIdx);\n    }\n}\nLocation.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nLocation.ctorParameters = () => [\n    { type: LocationStrategy },\n    { type: PlatformLocation }\n];\n/**\n * @param {?} baseHref\n * @param {?} url\n * @return {?}\n */\nfunction _stripBaseHref(baseHref, url) {\n    return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;\n}\n/**\n * @param {?} url\n * @return {?}\n */\nfunction _stripIndexHtml(url) {\n    return url.replace(/\\/index.html$/, '');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n * A {\\@link LocationStrategy} used to configure the {\\@link Location} service to\n * represent its state in the\n * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)\n * of the browser's URL.\n *\n * For instance, if you call `location.go('/foo')`, the browser's URL will become\n * `example.com#/foo`.\n *\n * \\@usageNotes\n *\n * ### Example\n *\n * {\\@example common/location/ts/hash_location_component.ts region='LocationComponent'}\n *\n * \\@publicApi\n */\nclass HashLocationStrategy extends LocationStrategy {\n    /**\n     * @param {?} _platformLocation\n     * @param {?=} _baseHref\n     */\n    constructor(_platformLocation, _baseHref) {\n        super();\n        this._platformLocation = _platformLocation;\n        this._baseHref = '';\n        if (_baseHref != null) {\n            this._baseHref = _baseHref;\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onPopState(fn) {\n        this._platformLocation.onPopState(fn);\n        this._platformLocation.onHashChange(fn);\n    }\n    /**\n     * @return {?}\n     */\n    getBaseHref() { return this._baseHref; }\n    /**\n     * @param {?=} includeHash\n     * @return {?}\n     */\n    path(includeHash = false) {\n        // the hash value is always prefixed with a `#`\n        // and if it is empty then it will stay empty\n        /** @type {?} */\n        let path = this._platformLocation.hash;\n        if (path == null)\n            path = '#';\n        return path.length > 0 ? path.substring(1) : path;\n    }\n    /**\n     * @param {?} internal\n     * @return {?}\n     */\n    prepareExternalUrl(internal) {\n        /** @type {?} */\n        const url = Location.joinWithSlash(this._baseHref, internal);\n        return url.length > 0 ? ('#' + url) : url;\n    }\n    /**\n     * @param {?} state\n     * @param {?} title\n     * @param {?} path\n     * @param {?} queryParams\n     * @return {?}\n     */\n    pushState(state, title, path, queryParams) {\n        /** @type {?} */\n        let url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));\n        if (url.length == 0) {\n            url = this._platformLocation.pathname;\n        }\n        this._platformLocation.pushState(state, title, url);\n    }\n    /**\n     * @param {?} state\n     * @param {?} title\n     * @param {?} path\n     * @param {?} queryParams\n     * @return {?}\n     */\n    replaceState(state, title, path, queryParams) {\n        /** @type {?} */\n        let url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));\n        if (url.length == 0) {\n            url = this._platformLocation.pathname;\n        }\n        this._platformLocation.replaceState(state, title, url);\n    }\n    /**\n     * @return {?}\n     */\n    forward() { this._platformLocation.forward(); }\n    /**\n     * @return {?}\n     */\n    back() { this._platformLocation.back(); }\n}\nHashLocationStrategy.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHashLocationStrategy.ctorParameters = () => [\n    { type: PlatformLocation },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [APP_BASE_HREF,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n * A {\\@link LocationStrategy} used to configure the {\\@link Location} service to\n * represent its state in the\n * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the\n * browser's URL.\n *\n * If you're using `PathLocationStrategy`, you must provide a {\\@link APP_BASE_HREF}\n * or add a base element to the document. This URL prefix that will be preserved\n * when generating and recognizing URLs.\n *\n * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call\n * `location.go('/foo')`, the browser's URL will become\n * `example.com/my/app/foo`.\n *\n * Similarly, if you add `<base href='/my/app'/>` to the document and call\n * `location.go('/foo')`, the browser's URL will become\n * `example.com/my/app/foo`.\n *\n * \\@usageNotes\n *\n * ### Example\n *\n * {\\@example common/location/ts/path_location_component.ts region='LocationComponent'}\n *\n * \\@publicApi\n */\nclass PathLocationStrategy extends LocationStrategy {\n    /**\n     * @param {?} _platformLocation\n     * @param {?=} href\n     */\n    constructor(_platformLocation, href) {\n        super();\n        this._platformLocation = _platformLocation;\n        if (href == null) {\n            href = this._platformLocation.getBaseHrefFromDOM();\n        }\n        if (href == null) {\n            throw new Error(`No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.`);\n        }\n        this._baseHref = href;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onPopState(fn) {\n        this._platformLocation.onPopState(fn);\n        this._platformLocation.onHashChange(fn);\n    }\n    /**\n     * @return {?}\n     */\n    getBaseHref() { return this._baseHref; }\n    /**\n     * @param {?} internal\n     * @return {?}\n     */\n    prepareExternalUrl(internal) {\n        return Location.joinWithSlash(this._baseHref, internal);\n    }\n    /**\n     * @param {?=} includeHash\n     * @return {?}\n     */\n    path(includeHash = false) {\n        /** @type {?} */\n        const pathname = this._platformLocation.pathname +\n            Location.normalizeQueryParams(this._platformLocation.search);\n        /** @type {?} */\n        const hash = this._platformLocation.hash;\n        return hash && includeHash ? `${pathname}${hash}` : pathname;\n    }\n    /**\n     * @param {?} state\n     * @param {?} title\n     * @param {?} url\n     * @param {?} queryParams\n     * @return {?}\n     */\n    pushState(state, title, url, queryParams) {\n        /** @type {?} */\n        const externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));\n        this._platformLocation.pushState(state, title, externalUrl);\n    }\n    /**\n     * @param {?} state\n     * @param {?} title\n     * @param {?} url\n     * @param {?} queryParams\n     * @return {?}\n     */\n    replaceState(state, title, url, queryParams) {\n        /** @type {?} */\n        const externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));\n        this._platformLocation.replaceState(state, title, externalUrl);\n    }\n    /**\n     * @return {?}\n     */\n    forward() { this._platformLocation.forward(); }\n    /**\n     * @return {?}\n     */\n    back() { this._platformLocation.back(); }\n}\nPathLocationStrategy.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nPathLocationStrategy.ctorParameters = () => [\n    { type: PlatformLocation },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [APP_BASE_HREF,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// THIS CODE IS GENERATED - DO NOT MODIFY\n// See angular/tools/gulp-tasks/cldr/extract.js\n/** @type {?} */\nconst u = undefined;\n/**\n * @param {?} n\n * @return {?}\n */\nfunction plural(n) {\n    /** @type {?} */\n    let i = Math.floor(Math.abs(n));\n    /** @type {?} */\n    let v = n.toString().replace(/^[^.]*\\.?/, '').length;\n    if (i === 1 && v === 0)\n        return 1;\n    return 5;\n}\nvar localeEn = [\n    'en', [['a', 'p'], ['AM', 'PM'], u], [['AM', 'PM'], u, u],\n    [\n        ['S', 'M', 'T', 'W', 'T', 'F', 'S'], ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n        ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n        ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']\n    ],\n    u,\n    [\n        ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n        ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n        [\n            'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n            'October', 'November', 'December'\n        ]\n    ],\n    u, [['B', 'A'], ['BC', 'AD'], ['Before Christ', 'Anno Domini']], 0, [6, 0],\n    ['M/d/yy', 'MMM d, y', 'MMMM d, y', 'EEEE, MMMM d, y'],\n    ['h:mm a', 'h:mm:ss a', 'h:mm:ss a z', 'h:mm:ss a zzzz'], ['{1}, {0}', u, '{1} \\'at\\' {0}', u],\n    ['.', ',', ';', '%', '+', '-', 'E', '×', '‰', '∞', 'NaN', ':'],\n    ['#,##0.###', '#,##0%', '¤#,##0.00', '#E0'], '$', 'US Dollar', {}, plural\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@publicApi\n * @type {?}\n */\nconst LOCALE_DATA = {};\n/**\n * Register global data to be used internally by Angular. See the\n * [\"I18n guide\"](guide/i18n#i18n-pipes) to know how to import additional locale data.\n *\n * \\@publicApi\n * @param {?} data\n * @param {?=} localeId\n * @param {?=} extraData\n * @return {?}\n */\n// The signature registerLocaleData(data: any, extraData?: any) is deprecated since v5.1\nfunction registerLocaleData(data, localeId, extraData) {\n    if (typeof localeId !== 'string') {\n        extraData = localeId;\n        localeId = data[0 /* LocaleId */];\n    }\n    localeId = localeId.toLowerCase().replace(/_/g, '-');\n    LOCALE_DATA[localeId] = data;\n    if (extraData) {\n        LOCALE_DATA[localeId][19 /* ExtraData */] = extraData;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// THIS CODE IS GENERATED - DO NOT MODIFY\n// See angular/tools/gulp-tasks/cldr/extract.js\n/**\n * \\@internal\n * @type {?}\n */\nconst CURRENCIES_EN = {\n    'ADP': [undefined, undefined, 0],\n    'AFN': [undefined, undefined, 0],\n    'ALL': [undefined, undefined, 0],\n    'AMD': [undefined, undefined, 0],\n    'AOA': [undefined, 'Kz'],\n    'ARS': [undefined, '$'],\n    'AUD': ['A$', '$'],\n    'BAM': [undefined, 'KM'],\n    'BBD': [undefined, '$'],\n    'BDT': [undefined, '৳'],\n    'BHD': [undefined, undefined, 3],\n    'BIF': [undefined, undefined, 0],\n    'BMD': [undefined, '$'],\n    'BND': [undefined, '$'],\n    'BOB': [undefined, 'Bs'],\n    'BRL': ['R$'],\n    'BSD': [undefined, '$'],\n    'BWP': [undefined, 'P'],\n    'BYN': [undefined, 'р.', 2],\n    'BYR': [undefined, undefined, 0],\n    'BZD': [undefined, '$'],\n    'CAD': ['CA$', '$', 2],\n    'CHF': [undefined, undefined, 2],\n    'CLF': [undefined, undefined, 4],\n    'CLP': [undefined, '$', 0],\n    'CNY': ['CN¥', '¥'],\n    'COP': [undefined, '$', 0],\n    'CRC': [undefined, '₡', 2],\n    'CUC': [undefined, '$'],\n    'CUP': [undefined, '$'],\n    'CZK': [undefined, 'Kč', 2],\n    'DJF': [undefined, undefined, 0],\n    'DKK': [undefined, 'kr', 2],\n    'DOP': [undefined, '$'],\n    'EGP': [undefined, 'E£'],\n    'ESP': [undefined, '₧', 0],\n    'EUR': ['€'],\n    'FJD': [undefined, '$'],\n    'FKP': [undefined, '£'],\n    'GBP': ['£'],\n    'GEL': [undefined, '₾'],\n    'GIP': [undefined, '£'],\n    'GNF': [undefined, 'FG', 0],\n    'GTQ': [undefined, 'Q'],\n    'GYD': [undefined, '$', 0],\n    'HKD': ['HK$', '$'],\n    'HNL': [undefined, 'L'],\n    'HRK': [undefined, 'kn'],\n    'HUF': [undefined, 'Ft', 2],\n    'IDR': [undefined, 'Rp', 0],\n    'ILS': ['₪'],\n    'INR': ['₹'],\n    'IQD': [undefined, undefined, 0],\n    'IRR': [undefined, undefined, 0],\n    'ISK': [undefined, 'kr', 0],\n    'ITL': [undefined, undefined, 0],\n    'JMD': [undefined, '$'],\n    'JOD': [undefined, undefined, 3],\n    'JPY': ['¥', undefined, 0],\n    'KHR': [undefined, '៛'],\n    'KMF': [undefined, 'CF', 0],\n    'KPW': [undefined, '₩', 0],\n    'KRW': ['₩', undefined, 0],\n    'KWD': [undefined, undefined, 3],\n    'KYD': [undefined, '$'],\n    'KZT': [undefined, '₸'],\n    'LAK': [undefined, '₭', 0],\n    'LBP': [undefined, 'L£', 0],\n    'LKR': [undefined, 'Rs'],\n    'LRD': [undefined, '$'],\n    'LTL': [undefined, 'Lt'],\n    'LUF': [undefined, undefined, 0],\n    'LVL': [undefined, 'Ls'],\n    'LYD': [undefined, undefined, 3],\n    'MGA': [undefined, 'Ar', 0],\n    'MGF': [undefined, undefined, 0],\n    'MMK': [undefined, 'K', 0],\n    'MNT': [undefined, '₮', 0],\n    'MRO': [undefined, undefined, 0],\n    'MUR': [undefined, 'Rs', 0],\n    'MXN': ['MX$', '$'],\n    'MYR': [undefined, 'RM'],\n    'NAD': [undefined, '$'],\n    'NGN': [undefined, '₦'],\n    'NIO': [undefined, 'C$'],\n    'NOK': [undefined, 'kr', 2],\n    'NPR': [undefined, 'Rs'],\n    'NZD': ['NZ$', '$'],\n    'OMR': [undefined, undefined, 3],\n    'PHP': [undefined, '₱'],\n    'PKR': [undefined, 'Rs', 0],\n    'PLN': [undefined, 'zł'],\n    'PYG': [undefined, '₲', 0],\n    'RON': [undefined, 'lei'],\n    'RSD': [undefined, undefined, 0],\n    'RUB': [undefined, '₽'],\n    'RUR': [undefined, 'р.'],\n    'RWF': [undefined, 'RF', 0],\n    'SBD': [undefined, '$'],\n    'SEK': [undefined, 'kr', 2],\n    'SGD': [undefined, '$'],\n    'SHP': [undefined, '£'],\n    'SLL': [undefined, undefined, 0],\n    'SOS': [undefined, undefined, 0],\n    'SRD': [undefined, '$'],\n    'SSP': [undefined, '£'],\n    'STD': [undefined, undefined, 0],\n    'STN': [undefined, 'Db'],\n    'SYP': [undefined, '£', 0],\n    'THB': [undefined, '฿'],\n    'TMM': [undefined, undefined, 0],\n    'TND': [undefined, undefined, 3],\n    'TOP': [undefined, 'T$'],\n    'TRL': [undefined, undefined, 0],\n    'TRY': [undefined, '₺'],\n    'TTD': [undefined, '$'],\n    'TWD': ['NT$', '$', 2],\n    'TZS': [undefined, undefined, 0],\n    'UAH': [undefined, '₴'],\n    'UGX': [undefined, undefined, 0],\n    'USD': ['$'],\n    'UYI': [undefined, undefined, 0],\n    'UYU': [undefined, '$'],\n    'UZS': [undefined, undefined, 0],\n    'VEF': [undefined, 'Bs'],\n    'VND': ['₫', undefined, 0],\n    'VUV': [undefined, undefined, 0],\n    'XAF': ['FCFA', undefined, 0],\n    'XCD': ['EC$', '$'],\n    'XOF': ['CFA', undefined, 0],\n    'XPF': ['CFPF', undefined, 0],\n    'YER': [undefined, undefined, 0],\n    'ZAR': [undefined, 'R'],\n    'ZMK': [undefined, undefined, 0],\n    'ZMW': [undefined, 'ZK'],\n    'ZWD': [undefined, undefined, 0]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {number} */\nconst NumberFormatStyle = {\n    Decimal: 0,\n    Percent: 1,\n    Currency: 2,\n    Scientific: 3,\n};\nNumberFormatStyle[NumberFormatStyle.Decimal] = 'Decimal';\nNumberFormatStyle[NumberFormatStyle.Percent] = 'Percent';\nNumberFormatStyle[NumberFormatStyle.Currency] = 'Currency';\nNumberFormatStyle[NumberFormatStyle.Scientific] = 'Scientific';\n/** @enum {number} */\nconst Plural = {\n    Zero: 0,\n    One: 1,\n    Two: 2,\n    Few: 3,\n    Many: 4,\n    Other: 5,\n};\nPlural[Plural.Zero] = 'Zero';\nPlural[Plural.One] = 'One';\nPlural[Plural.Two] = 'Two';\nPlural[Plural.Few] = 'Few';\nPlural[Plural.Many] = 'Many';\nPlural[Plural.Other] = 'Other';\n/** @enum {number} */\nconst FormStyle = {\n    Format: 0,\n    Standalone: 1,\n};\nFormStyle[FormStyle.Format] = 'Format';\nFormStyle[FormStyle.Standalone] = 'Standalone';\n/** @enum {number} */\nconst TranslationWidth = {\n    /** 1 character for `en-US`. For example: 'S' */\n    Narrow: 0,\n    /** 3 characters for `en-US`. For example: 'Sun' */\n    Abbreviated: 1,\n    /** Full length for `en-US`. For example: \"Sunday\" */\n    Wide: 2,\n    /** 2 characters for `en-US`, For example: \"Su\" */\n    Short: 3,\n};\nTranslationWidth[TranslationWidth.Narrow] = 'Narrow';\nTranslationWidth[TranslationWidth.Abbreviated] = 'Abbreviated';\nTranslationWidth[TranslationWidth.Wide] = 'Wide';\nTranslationWidth[TranslationWidth.Short] = 'Short';\n/** @enum {number} */\nconst FormatWidth = {\n    /**\n     * For `en-US`, 'M/d/yy, h:mm a'`\n     * (Example: `6/15/15, 9:03 AM`)\n     */\n    Short: 0,\n    /**\n     * For `en-US`, `'MMM d, y, h:mm:ss a'`\n     * (Example: `Jun 15, 2015, 9:03:01 AM`)\n     */\n    Medium: 1,\n    /**\n     * For `en-US`, `'MMMM d, y, h:mm:ss a z'`\n     * (Example: `June 15, 2015 at 9:03:01 AM GMT+1`)\n     */\n    Long: 2,\n    /**\n     * For `en-US`, `'EEEE, MMMM d, y, h:mm:ss a zzzz'`\n     * (Example: `Monday, June 15, 2015 at 9:03:01 AM GMT+01:00`)\n     */\n    Full: 3,\n};\nFormatWidth[FormatWidth.Short] = 'Short';\nFormatWidth[FormatWidth.Medium] = 'Medium';\nFormatWidth[FormatWidth.Long] = 'Long';\nFormatWidth[FormatWidth.Full] = 'Full';\n/** @enum {number} */\nconst NumberSymbol = {\n    /**\n     * Decimal separator.\n     * For `en-US`, the dot character.\n     * Example : 2,345`.`67\n     */\n    Decimal: 0,\n    /**\n     * Grouping separator, typically for thousands.\n     * For `en-US`, the comma character.\n     * Example: 2`,`345.67\n     */\n    Group: 1,\n    /**\n     * List-item separator.\n     * Example: \"one, two, and three\"\n     */\n    List: 2,\n    /**\n     * Sign for percentage (out of 100).\n     * Example: 23.4%\n     */\n    PercentSign: 3,\n    /**\n     * Sign for positive numbers.\n     * Example: +23\n     */\n    PlusSign: 4,\n    /**\n     * Sign for negative numbers.\n     * Example: -23\n     */\n    MinusSign: 5,\n    /**\n     * Computer notation for exponential value (n times a power of 10).\n     * Example: 1.2E3\n     */\n    Exponential: 6,\n    /**\n     * Human-readable format of exponential.\n     * Example: 1.2x103\n     */\n    SuperscriptingExponent: 7,\n    /**\n     * Sign for permille (out of 1000).\n     * Example: 23.4‰\n     */\n    PerMille: 8,\n    /**\n     * Infinity, can be used with plus and minus.\n     * Example: ∞, +∞, -∞\n     */\n    Infinity: 9,\n    /**\n     * Not a number.\n     * Example: NaN\n     */\n    NaN: 10,\n    /**\n     * Symbol used between time units.\n     * Example: 10:52\n     */\n    TimeSeparator: 11,\n    /**\n     * Decimal separator for currency values (fallback to `Decimal`).\n     * Example: $2,345.67\n     */\n    CurrencyDecimal: 12,\n    /**\n     * Group separator for currency values (fallback to `Group`).\n     * Example: $2,345.67\n     */\n    CurrencyGroup: 13,\n};\nNumberSymbol[NumberSymbol.Decimal] = 'Decimal';\nNumberSymbol[NumberSymbol.Group] = 'Group';\nNumberSymbol[NumberSymbol.List] = 'List';\nNumberSymbol[NumberSymbol.PercentSign] = 'PercentSign';\nNumberSymbol[NumberSymbol.PlusSign] = 'PlusSign';\nNumberSymbol[NumberSymbol.MinusSign] = 'MinusSign';\nNumberSymbol[NumberSymbol.Exponential] = 'Exponential';\nNumberSymbol[NumberSymbol.SuperscriptingExponent] = 'SuperscriptingExponent';\nNumberSymbol[NumberSymbol.PerMille] = 'PerMille';\nNumberSymbol[NumberSymbol.Infinity] = 'Infinity';\nNumberSymbol[NumberSymbol.NaN] = 'NaN';\nNumberSymbol[NumberSymbol.TimeSeparator] = 'TimeSeparator';\nNumberSymbol[NumberSymbol.CurrencyDecimal] = 'CurrencyDecimal';\nNumberSymbol[NumberSymbol.CurrencyGroup] = 'CurrencyGroup';\n/** @enum {number} */\nconst WeekDay = {\n    Sunday: 0,\n    Monday: 1,\n    Tuesday: 2,\n    Wednesday: 3,\n    Thursday: 4,\n    Friday: 5,\n    Saturday: 6,\n};\nWeekDay[WeekDay.Sunday] = 'Sunday';\nWeekDay[WeekDay.Monday] = 'Monday';\nWeekDay[WeekDay.Tuesday] = 'Tuesday';\nWeekDay[WeekDay.Wednesday] = 'Wednesday';\nWeekDay[WeekDay.Thursday] = 'Thursday';\nWeekDay[WeekDay.Friday] = 'Friday';\nWeekDay[WeekDay.Saturday] = 'Saturday';\n/**\n * Retrieves the locale ID from the currently loaded locale.\n * The loaded locale could be, for example, a global one rather than a regional one.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} locale A locale code, such as `fr-FR`.\n * @return {?} The locale code. For example, `fr`.\n */\nfunction getLocaleId(locale) {\n    return findLocaleData(locale)[0 /* LocaleId */];\n}\n/**\n * Retrieves day period strings for the given locale.\n *\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} locale A locale code for the locale format rules to use.\n * @param {?} formStyle The required grammatical form.\n * @param {?} width The required character width.\n * @return {?} An array of localized period strings. For example, `[AM, PM]` for `en-US`.\n */\nfunction getLocaleDayPeriods(locale, formStyle, width) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    /** @type {?} */\n    const amPmData = (/** @type {?} */ ([data[1 /* DayPeriodsFormat */], data[2 /* DayPeriodsStandalone */]]));\n    /** @type {?} */\n    const amPm = getLastDefinedValue(amPmData, formStyle);\n    return getLastDefinedValue(amPm, width);\n}\n/**\n * Retrieves days of the week for the given locale, using the Gregorian calendar.\n *\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} locale A locale code for the locale format rules to use.\n * @param {?} formStyle The required grammatical form.\n * @param {?} width The required character width.\n * @return {?} An array of localized name strings.\n * For example,`[Sunday, Monday, ... Saturday]` for `en-US`.\n */\nfunction getLocaleDayNames(locale, formStyle, width) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    /** @type {?} */\n    const daysData = (/** @type {?} */ ([data[3 /* DaysFormat */], data[4 /* DaysStandalone */]]));\n    /** @type {?} */\n    const days = getLastDefinedValue(daysData, formStyle);\n    return getLastDefinedValue(days, width);\n}\n/**\n * Retrieves months of the year for the given locale, using the Gregorian calendar.\n *\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} locale A locale code for the locale format rules to use.\n * @param {?} formStyle The required grammatical form.\n * @param {?} width The required character width.\n * @return {?} An array of localized name strings.\n * For example,  `[January, February, ...]` for `en-US`.\n */\nfunction getLocaleMonthNames(locale, formStyle, width) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    /** @type {?} */\n    const monthsData = (/** @type {?} */ ([data[5 /* MonthsFormat */], data[6 /* MonthsStandalone */]]));\n    /** @type {?} */\n    const months = getLastDefinedValue(monthsData, formStyle);\n    return getLastDefinedValue(months, width);\n}\n/**\n * Retrieves Gregorian-calendar eras for the given locale.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} locale A locale code for the locale format rules to use.\n * @param {?} width The required character width.\n * @return {?} An array of localized era strings.\n * For example, `[AD, BC]` for `en-US`.\n */\nfunction getLocaleEraNames(locale, width) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    /** @type {?} */\n    const erasData = (/** @type {?} */ (data[7 /* Eras */]));\n    return getLastDefinedValue(erasData, width);\n}\n/**\n * Retrieves the first day of the week for the given locale.\n *\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} locale A locale code for the locale format rules to use.\n * @return {?} A day index number, using the 0-based week-day index for `en-US`\n * (Sunday = 0, Monday = 1, ...).\n * For example, for `fr-FR`, returns 1 to indicate that the first day is Monday.\n */\nfunction getLocaleFirstDayOfWeek(locale) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    return data[8 /* FirstDayOfWeek */];\n}\n/**\n * Range of week days that are considered the week-end for the given locale.\n *\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} locale A locale code for the locale format rules to use.\n * @return {?} The range of day values, `[startDay, endDay]`.\n */\nfunction getLocaleWeekEndRange(locale) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    return data[9 /* WeekendRange */];\n}\n/**\n * Retrieves a localized date-value formating string.\n *\n * @see `FormatWidth` / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} locale A locale code for the locale format rules to use.\n * @param {?} width The format type.\n * @return {?} The localized formating string.\n */\nfunction getLocaleDateFormat(locale, width) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    return getLastDefinedValue(data[10 /* DateFormat */], width);\n}\n/**\n * Retrieves a localized time-value formatting string.\n *\n * @see `FormatWidth` / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n * \\@publicApi\n * @param {?} locale A locale code for the locale format rules to use.\n * @param {?} width The format type.\n * @return {?} The localized formatting string.\n */\nfunction getLocaleTimeFormat(locale, width) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    return getLastDefinedValue(data[11 /* TimeFormat */], width);\n}\n/**\n * Retrieves a localized date-time formatting string.\n *\n * @see `FormatWidth` / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} locale A locale code for the locale format rules to use.\n * @param {?} width The format type.\n * @return {?} The localized formatting string.\n */\nfunction getLocaleDateTimeFormat(locale, width) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    /** @type {?} */\n    const dateTimeFormatData = (/** @type {?} */ (data[12 /* DateTimeFormat */]));\n    return getLastDefinedValue(dateTimeFormatData, width);\n}\n/**\n * Retrieves a localized number symbol that can be used to replace placeholders in number formats.\n * @see `NumberSymbol` / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} locale The locale code.\n * @param {?} symbol The symbol to localize.\n * @return {?} The character for the localized symbol.\n */\nfunction getLocaleNumberSymbol(locale, symbol) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    /** @type {?} */\n    const res = data[13 /* NumberSymbols */][symbol];\n    if (typeof res === 'undefined') {\n        if (symbol === NumberSymbol.CurrencyDecimal) {\n            return data[13 /* NumberSymbols */][NumberSymbol.Decimal];\n        }\n        else if (symbol === NumberSymbol.CurrencyGroup) {\n            return data[13 /* NumberSymbols */][NumberSymbol.Group];\n        }\n    }\n    return res;\n}\n/**\n * Retrieves a number format for a given locale.\n *\n * Numbers are formatted using patterns, like `#,###.00`. For example, the pattern `#,###.00`\n * when used to format the number 12345.678 could result in \"12'345,678\". That would happen if the\n * grouping separator for your language is an apostrophe, and the decimal separator is a comma.\n *\n * <b>Important:</b> The characters `.` `,` `0` `#` (and others below) are special placeholders\n * that stand for the decimal separator, and so on, and are NOT real characters.\n * You must NOT \"translate\" the placeholders. For example, don't change `.` to `,` even though in\n * your language the decimal point is written with a comma. The symbols should be replaced by the\n * local equivalents, using the appropriate `NumberSymbol` for your language.\n *\n * Here are the special characters used in number patterns:\n *\n * | Symbol | Meaning |\n * |--------|---------|\n * | . | Replaced automatically by the character used for the decimal point. |\n * | , | Replaced by the \"grouping\" (thousands) separator. |\n * | 0 | Replaced by a digit (or zero if there aren't enough digits). |\n * | # | Replaced by a digit (or nothing if there aren't enough). |\n * | ¤ | Replaced by a currency symbol, such as $ or USD. |\n * | % | Marks a percent format. The % symbol may change position, but must be retained. |\n * | E | Marks a scientific format. The E symbol may change position, but must be retained. |\n * | ' | Special characters used as literal characters are quoted with ASCII single quotes. |\n *\n * @see `NumberFormatStyle` / [CLDR website](http://cldr.unicode.org/translation/number-patterns) / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} locale A locale code for the locale format rules to use.\n * @param {?} type The type of numeric value to be formatted (such as `Decimal` or `Currency`.)\n * @return {?} The localized format string.\n */\nfunction getLocaleNumberFormat(locale, type) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    return data[14 /* NumberFormats */][type];\n}\n/**\n * Retrieves the symbol used to represent the currency for the main country\n * corresponding to a given locale. For example, '$' for `en-US`.\n *\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} locale A locale code for the locale format rules to use.\n * @return {?} The localized symbol character,\n * or `null` if the main country cannot be determined.\n */\nfunction getLocaleCurrencySymbol(locale) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    return data[15 /* CurrencySymbol */] || null;\n}\n/**\n * Retrieves the name of the currency for the main country corresponding\n * to a given locale. For example, 'US Dollar' for `en-US`.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} locale A locale code for the locale format rules to use.\n * @return {?} The currency name,\n * or `null` if the main country cannot be determined.\n */\nfunction getLocaleCurrencyName(locale) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    return data[16 /* CurrencyName */] || null;\n}\n/**\n * Retrieves the currency values for a given locale.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n * @param {?} locale A locale code for the locale format rules to use.\n * @return {?} The currency values.\n */\nfunction getLocaleCurrencies(locale) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    return data[17 /* Currencies */];\n}\n/**\n * Retrieves the plural function used by ICU expressions to determine the plural case to use\n * for a given locale.\n * @see `NgPlural` / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} locale A locale code for the locale format rules to use.\n * @return {?} The plural function for the locale.\n */\nfunction getLocalePluralCase(locale) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    return data[18 /* PluralCase */];\n}\n/**\n * @param {?} data\n * @return {?}\n */\nfunction checkFullData(data) {\n    if (!data[19 /* ExtraData */]) {\n        throw new Error(`Missing extra locale data for the locale \"${data[0 /* LocaleId */]}\". Use \"registerLocaleData\" to load new data. See the \"I18n guide\" on angular.io to know more.`);\n    }\n}\n/**\n * Retrieves locale-specific rules used to determine which day period to use\n * when more than one period is defined for a locale.\n *\n * There is a rule for each defined day period. The\n * first rule is applied to the first day period and so on.\n * Fall back to AM/PM when no rules are available.\n *\n * A rule can specify a period as time range, or as a single time value.\n *\n * This functionality is only available when you have loaded the full locale data.\n * See the [\"I18n guide\"](guide/i18n#i18n-pipes).\n *\n * @see `getLocaleExtraDayPeriods()` / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} locale A locale code for the locale format rules to use.\n * @return {?} The rules for the locale, a single time value or array of *from-time, to-time*,\n * or null if no periods are available.\n *\n */\nfunction getLocaleExtraDayPeriodRules(locale) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    checkFullData(data);\n    /** @type {?} */\n    const rules = data[19 /* ExtraData */][2 /* ExtraDayPeriodsRules */] || [];\n    return rules.map((/**\n     * @param {?} rule\n     * @return {?}\n     */\n    (rule) => {\n        if (typeof rule === 'string') {\n            return extractTime(rule);\n        }\n        return [extractTime(rule[0]), extractTime(rule[1])];\n    }));\n}\n/**\n * Retrieves locale-specific day periods, which indicate roughly how a day is broken up\n * in different languages.\n * For example, for `en-US`, periods are morning, noon, afternoon, evening, and midnight.\n *\n * This functionality is only available when you have loaded the full locale data.\n * See the [\"I18n guide\"](guide/i18n#i18n-pipes).\n *\n * @see `getLocaleExtraDayPeriodRules()` / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} locale A locale code for the locale format rules to use.\n * @param {?} formStyle The required grammatical form.\n * @param {?} width The required character width.\n * @return {?} The translated day-period strings.\n */\nfunction getLocaleExtraDayPeriods(locale, formStyle, width) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    checkFullData(data);\n    /** @type {?} */\n    const dayPeriodsData = (/** @type {?} */ ([\n        data[19 /* ExtraData */][0 /* ExtraDayPeriodFormats */],\n        data[19 /* ExtraData */][1 /* ExtraDayPeriodStandalone */]\n    ]));\n    /** @type {?} */\n    const dayPeriods = getLastDefinedValue(dayPeriodsData, formStyle) || [];\n    return getLastDefinedValue(dayPeriods, width) || [];\n}\n/**\n * Retrieves the first value that is defined in an array, going backwards from an index position.\n *\n * To avoid repeating the same data (as when the \"format\" and \"standalone\" forms are the same)\n * add the first value to the locale data arrays, and add other values only if they are different.\n *\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @template T\n * @param {?} data The data array to retrieve from.\n * @param {?} index A 0-based index into the array to start from.\n * @return {?} The value immediately before the given index position.\n */\nfunction getLastDefinedValue(data, index) {\n    for (let i = index; i > -1; i--) {\n        if (typeof data[i] !== 'undefined') {\n            return data[i];\n        }\n    }\n    throw new Error('Locale data API: locale data undefined');\n}\n/**\n * Extracts the hours and minutes from a string like \"15:45\"\n * @param {?} time\n * @return {?}\n */\nfunction extractTime(time) {\n    const [h, m] = time.split(':');\n    return { hours: +h, minutes: +m };\n}\n/**\n * Finds the locale data for a given locale.\n *\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} locale The locale code.\n * @return {?} The locale data.\n */\nfunction findLocaleData(locale) {\n    /** @type {?} */\n    const normalizedLocale = locale.toLowerCase().replace(/_/g, '-');\n    /** @type {?} */\n    let match = LOCALE_DATA[normalizedLocale];\n    if (match) {\n        return match;\n    }\n    // let's try to find a parent locale\n    /** @type {?} */\n    const parentLocale = normalizedLocale.split('-')[0];\n    match = LOCALE_DATA[parentLocale];\n    if (match) {\n        return match;\n    }\n    if (parentLocale === 'en') {\n        return localeEn;\n    }\n    throw new Error(`Missing locale data for the locale \"${locale}\".`);\n}\n/**\n * Retrieves the currency symbol for a given currency code.\n *\n * For example, for the default `en-US` locale, the code `USD` can\n * be represented by the narrow symbol `$` or the wide symbol `US$`.\n *\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} code The currency code.\n * @param {?} format The format, `wide` or `narrow`.\n * @param {?=} locale A locale code for the locale format rules to use.\n *\n * @return {?} The symbol, or the currency code if no symbol is available.0\n */\nfunction getCurrencySymbol(code, format, locale = 'en') {\n    /** @type {?} */\n    const currency = getLocaleCurrencies(locale)[code] || CURRENCIES_EN[code] || [];\n    /** @type {?} */\n    const symbolNarrow = currency[1 /* SymbolNarrow */];\n    if (format === 'narrow' && typeof symbolNarrow === 'string') {\n        return symbolNarrow;\n    }\n    return currency[0 /* Symbol */] || code;\n}\n// Most currencies have cents, that's why the default is 2\n/** @type {?} */\nconst DEFAULT_NB_OF_CURRENCY_DIGITS = 2;\n/**\n * Reports the number of decimal digits for a given currency.\n * The value depends upon the presence of cents in that particular currency.\n *\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} code The currency code.\n * @return {?} The number of decimal digits, typically 0 or 2.\n */\nfunction getNumberOfCurrencyDigits(code) {\n    /** @type {?} */\n    let digits;\n    /** @type {?} */\n    const currency = CURRENCIES_EN[code];\n    if (currency) {\n        digits = currency[2 /* NbOfDigits */];\n    }\n    return typeof digits === 'number' ? digits : DEFAULT_NB_OF_CURRENCY_DIGITS;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ISO8601_DATE_REGEX = /^(\\d{4})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d+))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d))?)?$/;\n//    1        2       3         4          5          6          7          8  9     10      11\n/** @type {?} */\nconst NAMED_FORMATS = {};\n/** @type {?} */\nconst DATE_FORMATS_SPLIT = /((?:[^GyMLwWdEabBhHmsSzZO']+)|(?:'(?:[^']|'')*')|(?:G{1,5}|y{1,4}|M{1,5}|L{1,5}|w{1,2}|W{1}|d{1,2}|E{1,6}|a{1,5}|b{1,5}|B{1,5}|h{1,2}|H{1,2}|m{1,2}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|O{1,4}))([\\s\\S]*)/;\n/** @enum {number} */\nconst ZoneWidth = {\n    Short: 0,\n    ShortGMT: 1,\n    Long: 2,\n    Extended: 3,\n};\nZoneWidth[ZoneWidth.Short] = 'Short';\nZoneWidth[ZoneWidth.ShortGMT] = 'ShortGMT';\nZoneWidth[ZoneWidth.Long] = 'Long';\nZoneWidth[ZoneWidth.Extended] = 'Extended';\n/** @enum {number} */\nconst DateType = {\n    FullYear: 0,\n    Month: 1,\n    Date: 2,\n    Hours: 3,\n    Minutes: 4,\n    Seconds: 5,\n    FractionalSeconds: 6,\n    Day: 7,\n};\nDateType[DateType.FullYear] = 'FullYear';\nDateType[DateType.Month] = 'Month';\nDateType[DateType.Date] = 'Date';\nDateType[DateType.Hours] = 'Hours';\nDateType[DateType.Minutes] = 'Minutes';\nDateType[DateType.Seconds] = 'Seconds';\nDateType[DateType.FractionalSeconds] = 'FractionalSeconds';\nDateType[DateType.Day] = 'Day';\n/** @enum {number} */\nconst TranslationType = {\n    DayPeriods: 0,\n    Days: 1,\n    Months: 2,\n    Eras: 3,\n};\nTranslationType[TranslationType.DayPeriods] = 'DayPeriods';\nTranslationType[TranslationType.Days] = 'Days';\nTranslationType[TranslationType.Months] = 'Months';\nTranslationType[TranslationType.Eras] = 'Eras';\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Formats a date according to locale rules.\n *\n * @see `DatePipe` / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} value The date to format, as a Date, or a number (milliseconds since UTC epoch)\n * or an [ISO date-time string](https://www.w3.org/TR/NOTE-datetime).\n * @param {?} format The date-time components to include. See `DatePipe` for details.\n * @param {?} locale A locale code for the locale format rules to use.\n * @param {?=} timezone The time zone. A time zone offset from GMT (such as `'+0430'`),\n * or a standard UTC/GMT or continental US time zone abbreviation.\n * If not specified, uses host system settings.\n *\n * @return {?} The formatted date string.\n *\n */\nfunction formatDate(value, format, locale, timezone) {\n    /** @type {?} */\n    let date = toDate(value);\n    /** @type {?} */\n    const namedFormat = getNamedFormat(locale, format);\n    format = namedFormat || format;\n    /** @type {?} */\n    let parts = [];\n    /** @type {?} */\n    let match;\n    while (format) {\n        match = DATE_FORMATS_SPLIT.exec(format);\n        if (match) {\n            parts = parts.concat(match.slice(1));\n            /** @type {?} */\n            const part = parts.pop();\n            if (!part) {\n                break;\n            }\n            format = part;\n        }\n        else {\n            parts.push(format);\n            break;\n        }\n    }\n    /** @type {?} */\n    let dateTimezoneOffset = date.getTimezoneOffset();\n    if (timezone) {\n        dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\n        date = convertTimezoneToLocal(date, timezone, true);\n    }\n    /** @type {?} */\n    let text = '';\n    parts.forEach((/**\n     * @param {?} value\n     * @return {?}\n     */\n    value => {\n        /** @type {?} */\n        const dateFormatter = getDateFormatter(value);\n        text += dateFormatter ?\n            dateFormatter(date, locale, dateTimezoneOffset) :\n            value === '\\'\\'' ? '\\'' : value.replace(/(^'|'$)/g, '').replace(/''/g, '\\'');\n    }));\n    return text;\n}\n/**\n * @param {?} locale\n * @param {?} format\n * @return {?}\n */\nfunction getNamedFormat(locale, format) {\n    /** @type {?} */\n    const localeId = getLocaleId(locale);\n    NAMED_FORMATS[localeId] = NAMED_FORMATS[localeId] || {};\n    if (NAMED_FORMATS[localeId][format]) {\n        return NAMED_FORMATS[localeId][format];\n    }\n    /** @type {?} */\n    let formatValue = '';\n    switch (format) {\n        case 'shortDate':\n            formatValue = getLocaleDateFormat(locale, FormatWidth.Short);\n            break;\n        case 'mediumDate':\n            formatValue = getLocaleDateFormat(locale, FormatWidth.Medium);\n            break;\n        case 'longDate':\n            formatValue = getLocaleDateFormat(locale, FormatWidth.Long);\n            break;\n        case 'fullDate':\n            formatValue = getLocaleDateFormat(locale, FormatWidth.Full);\n            break;\n        case 'shortTime':\n            formatValue = getLocaleTimeFormat(locale, FormatWidth.Short);\n            break;\n        case 'mediumTime':\n            formatValue = getLocaleTimeFormat(locale, FormatWidth.Medium);\n            break;\n        case 'longTime':\n            formatValue = getLocaleTimeFormat(locale, FormatWidth.Long);\n            break;\n        case 'fullTime':\n            formatValue = getLocaleTimeFormat(locale, FormatWidth.Full);\n            break;\n        case 'short':\n            /** @type {?} */\n            const shortTime = getNamedFormat(locale, 'shortTime');\n            /** @type {?} */\n            const shortDate = getNamedFormat(locale, 'shortDate');\n            formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Short), [shortTime, shortDate]);\n            break;\n        case 'medium':\n            /** @type {?} */\n            const mediumTime = getNamedFormat(locale, 'mediumTime');\n            /** @type {?} */\n            const mediumDate = getNamedFormat(locale, 'mediumDate');\n            formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Medium), [mediumTime, mediumDate]);\n            break;\n        case 'long':\n            /** @type {?} */\n            const longTime = getNamedFormat(locale, 'longTime');\n            /** @type {?} */\n            const longDate = getNamedFormat(locale, 'longDate');\n            formatValue =\n                formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Long), [longTime, longDate]);\n            break;\n        case 'full':\n            /** @type {?} */\n            const fullTime = getNamedFormat(locale, 'fullTime');\n            /** @type {?} */\n            const fullDate = getNamedFormat(locale, 'fullDate');\n            formatValue =\n                formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Full), [fullTime, fullDate]);\n            break;\n    }\n    if (formatValue) {\n        NAMED_FORMATS[localeId][format] = formatValue;\n    }\n    return formatValue;\n}\n/**\n * @param {?} str\n * @param {?} opt_values\n * @return {?}\n */\nfunction formatDateTime(str, opt_values) {\n    if (opt_values) {\n        str = str.replace(/\\{([^}]+)}/g, (/**\n         * @param {?} match\n         * @param {?} key\n         * @return {?}\n         */\n        function (match, key) {\n            return (opt_values != null && key in opt_values) ? opt_values[key] : match;\n        }));\n    }\n    return str;\n}\n/**\n * @param {?} num\n * @param {?} digits\n * @param {?=} minusSign\n * @param {?=} trim\n * @param {?=} negWrap\n * @return {?}\n */\nfunction padNumber(num, digits, minusSign = '-', trim, negWrap) {\n    /** @type {?} */\n    let neg = '';\n    if (num < 0 || (negWrap && num <= 0)) {\n        if (negWrap) {\n            num = -num + 1;\n        }\n        else {\n            num = -num;\n            neg = minusSign;\n        }\n    }\n    /** @type {?} */\n    let strNum = String(num);\n    while (strNum.length < digits) {\n        strNum = '0' + strNum;\n    }\n    if (trim) {\n        strNum = strNum.substr(strNum.length - digits);\n    }\n    return neg + strNum;\n}\n/**\n * @param {?} milliseconds\n * @param {?} digits\n * @return {?}\n */\nfunction formatFractionalSeconds(milliseconds, digits) {\n    /** @type {?} */\n    const strMs = padNumber(milliseconds, 3);\n    return strMs.substr(0, digits);\n}\n/**\n * Returns a date formatter that transforms a date into its locale digit representation\n * @param {?} name\n * @param {?} size\n * @param {?=} offset\n * @param {?=} trim\n * @param {?=} negWrap\n * @return {?}\n */\nfunction dateGetter(name, size, offset = 0, trim = false, negWrap = false) {\n    return (/**\n     * @param {?} date\n     * @param {?} locale\n     * @return {?}\n     */\n    function (date, locale) {\n        /** @type {?} */\n        let part = getDatePart(name, date);\n        if (offset > 0 || part > -offset) {\n            part += offset;\n        }\n        if (name === DateType.Hours) {\n            if (part === 0 && offset === -12) {\n                part = 12;\n            }\n        }\n        else if (name === DateType.FractionalSeconds) {\n            return formatFractionalSeconds(part, size);\n        }\n        /** @type {?} */\n        const localeMinus = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);\n        return padNumber(part, size, localeMinus, trim, negWrap);\n    });\n}\n/**\n * @param {?} part\n * @param {?} date\n * @return {?}\n */\nfunction getDatePart(part, date) {\n    switch (part) {\n        case DateType.FullYear:\n            return date.getFullYear();\n        case DateType.Month:\n            return date.getMonth();\n        case DateType.Date:\n            return date.getDate();\n        case DateType.Hours:\n            return date.getHours();\n        case DateType.Minutes:\n            return date.getMinutes();\n        case DateType.Seconds:\n            return date.getSeconds();\n        case DateType.FractionalSeconds:\n            return date.getMilliseconds();\n        case DateType.Day:\n            return date.getDay();\n        default:\n            throw new Error(`Unknown DateType value \"${part}\".`);\n    }\n}\n/**\n * Returns a date formatter that transforms a date into its locale string representation\n * @param {?} name\n * @param {?} width\n * @param {?=} form\n * @param {?=} extended\n * @return {?}\n */\nfunction dateStrGetter(name, width, form = FormStyle.Format, extended = false) {\n    return (/**\n     * @param {?} date\n     * @param {?} locale\n     * @return {?}\n     */\n    function (date, locale) {\n        return getDateTranslation(date, locale, name, width, form, extended);\n    });\n}\n/**\n * Returns the locale translation of a date for a given form, type and width\n * @param {?} date\n * @param {?} locale\n * @param {?} name\n * @param {?} width\n * @param {?} form\n * @param {?} extended\n * @return {?}\n */\nfunction getDateTranslation(date, locale, name, width, form, extended) {\n    switch (name) {\n        case TranslationType.Months:\n            return getLocaleMonthNames(locale, form, width)[date.getMonth()];\n        case TranslationType.Days:\n            return getLocaleDayNames(locale, form, width)[date.getDay()];\n        case TranslationType.DayPeriods:\n            /** @type {?} */\n            const currentHours = date.getHours();\n            /** @type {?} */\n            const currentMinutes = date.getMinutes();\n            if (extended) {\n                /** @type {?} */\n                const rules = getLocaleExtraDayPeriodRules(locale);\n                /** @type {?} */\n                const dayPeriods = getLocaleExtraDayPeriods(locale, form, width);\n                /** @type {?} */\n                let result;\n                rules.forEach((/**\n                 * @param {?} rule\n                 * @param {?} index\n                 * @return {?}\n                 */\n                (rule, index) => {\n                    if (Array.isArray(rule)) {\n                        // morning, afternoon, evening, night\n                        const { hours: hoursFrom, minutes: minutesFrom } = rule[0];\n                        const { hours: hoursTo, minutes: minutesTo } = rule[1];\n                        if (currentHours >= hoursFrom && currentMinutes >= minutesFrom &&\n                            (currentHours < hoursTo ||\n                                (currentHours === hoursTo && currentMinutes < minutesTo))) {\n                            result = dayPeriods[index];\n                        }\n                    }\n                    else { // noon or midnight\n                        // noon or midnight\n                        const { hours, minutes } = rule;\n                        if (hours === currentHours && minutes === currentMinutes) {\n                            result = dayPeriods[index];\n                        }\n                    }\n                }));\n                if (result) {\n                    return result;\n                }\n            }\n            // if no rules for the day periods, we use am/pm by default\n            return getLocaleDayPeriods(locale, form, (/** @type {?} */ (width)))[currentHours < 12 ? 0 : 1];\n        case TranslationType.Eras:\n            return getLocaleEraNames(locale, (/** @type {?} */ (width)))[date.getFullYear() <= 0 ? 0 : 1];\n        default:\n            // This default case is not needed by TypeScript compiler, as the switch is exhaustive.\n            // However Closure Compiler does not understand that and reports an error in typed mode.\n            // The `throw new Error` below works around the problem, and the unexpected: never variable\n            // makes sure tsc still checks this code is unreachable.\n            /** @type {?} */\n            const unexpected = name;\n            throw new Error(`unexpected translation type ${unexpected}`);\n    }\n}\n/**\n * Returns a date formatter that transforms a date and an offset into a timezone with ISO8601 or\n * GMT format depending on the width (eg: short = +0430, short:GMT = GMT+4, long = GMT+04:30,\n * extended = +04:30)\n * @param {?} width\n * @return {?}\n */\nfunction timeZoneGetter(width) {\n    return (/**\n     * @param {?} date\n     * @param {?} locale\n     * @param {?} offset\n     * @return {?}\n     */\n    function (date, locale, offset) {\n        /** @type {?} */\n        const zone = -1 * offset;\n        /** @type {?} */\n        const minusSign = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);\n        /** @type {?} */\n        const hours = zone > 0 ? Math.floor(zone / 60) : Math.ceil(zone / 60);\n        switch (width) {\n            case ZoneWidth.Short:\n                return ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) +\n                    padNumber(Math.abs(zone % 60), 2, minusSign);\n            case ZoneWidth.ShortGMT:\n                return 'GMT' + ((zone >= 0) ? '+' : '') + padNumber(hours, 1, minusSign);\n            case ZoneWidth.Long:\n                return 'GMT' + ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) + ':' +\n                    padNumber(Math.abs(zone % 60), 2, minusSign);\n            case ZoneWidth.Extended:\n                if (offset === 0) {\n                    return 'Z';\n                }\n                else {\n                    return ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) + ':' +\n                        padNumber(Math.abs(zone % 60), 2, minusSign);\n                }\n            default:\n                throw new Error(`Unknown zone width \"${width}\"`);\n        }\n    });\n}\n/** @type {?} */\nconst JANUARY = 0;\n/** @type {?} */\nconst THURSDAY = 4;\n/**\n * @param {?} year\n * @return {?}\n */\nfunction getFirstThursdayOfYear(year) {\n    /** @type {?} */\n    const firstDayOfYear = (new Date(year, JANUARY, 1)).getDay();\n    return new Date(year, 0, 1 + ((firstDayOfYear <= THURSDAY) ? THURSDAY : THURSDAY + 7) - firstDayOfYear);\n}\n/**\n * @param {?} datetime\n * @return {?}\n */\nfunction getThursdayThisWeek(datetime) {\n    return new Date(datetime.getFullYear(), datetime.getMonth(), datetime.getDate() + (THURSDAY - datetime.getDay()));\n}\n/**\n * @param {?} size\n * @param {?=} monthBased\n * @return {?}\n */\nfunction weekGetter(size, monthBased = false) {\n    return (/**\n     * @param {?} date\n     * @param {?} locale\n     * @return {?}\n     */\n    function (date, locale) {\n        /** @type {?} */\n        let result;\n        if (monthBased) {\n            /** @type {?} */\n            const nbDaysBefore1stDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1).getDay() - 1;\n            /** @type {?} */\n            const today = date.getDate();\n            result = 1 + Math.floor((today + nbDaysBefore1stDayOfMonth) / 7);\n        }\n        else {\n            /** @type {?} */\n            const firstThurs = getFirstThursdayOfYear(date.getFullYear());\n            /** @type {?} */\n            const thisThurs = getThursdayThisWeek(date);\n            /** @type {?} */\n            const diff = thisThurs.getTime() - firstThurs.getTime();\n            result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week\n        }\n        return padNumber(result, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n    });\n}\n/** @type {?} */\nconst DATE_FORMATS = {};\n// Based on CLDR formats:\n// See complete list: http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n// See also explanations: http://cldr.unicode.org/translation/date-time\n// TODO(ocombe): support all missing cldr formats: Y, U, Q, D, F, e, c, j, J, C, A, v, V, X, x\n/**\n * @param {?} format\n * @return {?}\n */\nfunction getDateFormatter(format) {\n    if (DATE_FORMATS[format]) {\n        return DATE_FORMATS[format];\n    }\n    /** @type {?} */\n    let formatter;\n    switch (format) {\n        // Era name (AD/BC)\n        case 'G':\n        case 'GG':\n        case 'GGG':\n            formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Abbreviated);\n            break;\n        case 'GGGG':\n            formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Wide);\n            break;\n        case 'GGGGG':\n            formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Narrow);\n            break;\n        // 1 digit representation of the year, e.g. (AD 1 => 1, AD 199 => 199)\n        case 'y':\n            formatter = dateGetter(DateType.FullYear, 1, 0, false, true);\n            break;\n        // 2 digit representation of the year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)\n        case 'yy':\n            formatter = dateGetter(DateType.FullYear, 2, 0, true, true);\n            break;\n        // 3 digit representation of the year, padded (000-999). (e.g. AD 2001 => 01, AD 2010 => 10)\n        case 'yyy':\n            formatter = dateGetter(DateType.FullYear, 3, 0, false, true);\n            break;\n        // 4 digit representation of the year (e.g. AD 1 => 0001, AD 2010 => 2010)\n        case 'yyyy':\n            formatter = dateGetter(DateType.FullYear, 4, 0, false, true);\n            break;\n        // Month of the year (1-12), numeric\n        case 'M':\n        case 'L':\n            formatter = dateGetter(DateType.Month, 1, 1);\n            break;\n        case 'MM':\n        case 'LL':\n            formatter = dateGetter(DateType.Month, 2, 1);\n            break;\n        // Month of the year (January, ...), string, format\n        case 'MMM':\n            formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated);\n            break;\n        case 'MMMM':\n            formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Wide);\n            break;\n        case 'MMMMM':\n            formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Narrow);\n            break;\n        // Month of the year (January, ...), string, standalone\n        case 'LLL':\n            formatter =\n                dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated, FormStyle.Standalone);\n            break;\n        case 'LLLL':\n            formatter =\n                dateStrGetter(TranslationType.Months, TranslationWidth.Wide, FormStyle.Standalone);\n            break;\n        case 'LLLLL':\n            formatter =\n                dateStrGetter(TranslationType.Months, TranslationWidth.Narrow, FormStyle.Standalone);\n            break;\n        // Week of the year (1, ... 52)\n        case 'w':\n            formatter = weekGetter(1);\n            break;\n        case 'ww':\n            formatter = weekGetter(2);\n            break;\n        // Week of the month (1, ...)\n        case 'W':\n            formatter = weekGetter(1, true);\n            break;\n        // Day of the month (1-31)\n        case 'd':\n            formatter = dateGetter(DateType.Date, 1);\n            break;\n        case 'dd':\n            formatter = dateGetter(DateType.Date, 2);\n            break;\n        // Day of the Week\n        case 'E':\n        case 'EE':\n        case 'EEE':\n            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Abbreviated);\n            break;\n        case 'EEEE':\n            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Wide);\n            break;\n        case 'EEEEE':\n            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Narrow);\n            break;\n        case 'EEEEEE':\n            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Short);\n            break;\n        // Generic period of the day (am-pm)\n        case 'a':\n        case 'aa':\n        case 'aaa':\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated);\n            break;\n        case 'aaaa':\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide);\n            break;\n        case 'aaaaa':\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow);\n            break;\n        // Extended period of the day (midnight, at night, ...), standalone\n        case 'b':\n        case 'bb':\n        case 'bbb':\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Standalone, true);\n            break;\n        case 'bbbb':\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Standalone, true);\n            break;\n        case 'bbbbb':\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Standalone, true);\n            break;\n        // Extended period of the day (midnight, night, ...), standalone\n        case 'B':\n        case 'BB':\n        case 'BBB':\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Format, true);\n            break;\n        case 'BBBB':\n            formatter =\n                dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Format, true);\n            break;\n        case 'BBBBB':\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Format, true);\n            break;\n        // Hour in AM/PM, (1-12)\n        case 'h':\n            formatter = dateGetter(DateType.Hours, 1, -12);\n            break;\n        case 'hh':\n            formatter = dateGetter(DateType.Hours, 2, -12);\n            break;\n        // Hour of the day (0-23)\n        case 'H':\n            formatter = dateGetter(DateType.Hours, 1);\n            break;\n        // Hour in day, padded (00-23)\n        case 'HH':\n            formatter = dateGetter(DateType.Hours, 2);\n            break;\n        // Minute of the hour (0-59)\n        case 'm':\n            formatter = dateGetter(DateType.Minutes, 1);\n            break;\n        case 'mm':\n            formatter = dateGetter(DateType.Minutes, 2);\n            break;\n        // Second of the minute (0-59)\n        case 's':\n            formatter = dateGetter(DateType.Seconds, 1);\n            break;\n        case 'ss':\n            formatter = dateGetter(DateType.Seconds, 2);\n            break;\n        // Fractional second\n        case 'S':\n            formatter = dateGetter(DateType.FractionalSeconds, 1);\n            break;\n        case 'SS':\n            formatter = dateGetter(DateType.FractionalSeconds, 2);\n            break;\n        case 'SSS':\n            formatter = dateGetter(DateType.FractionalSeconds, 3);\n            break;\n        // Timezone ISO8601 short format (-0430)\n        case 'Z':\n        case 'ZZ':\n        case 'ZZZ':\n            formatter = timeZoneGetter(ZoneWidth.Short);\n            break;\n        // Timezone ISO8601 extended format (-04:30)\n        case 'ZZZZZ':\n            formatter = timeZoneGetter(ZoneWidth.Extended);\n            break;\n        // Timezone GMT short format (GMT+4)\n        case 'O':\n        case 'OO':\n        case 'OOO':\n        // Should be location, but fallback to format O instead because we don't have the data yet\n        case 'z':\n        case 'zz':\n        case 'zzz':\n            formatter = timeZoneGetter(ZoneWidth.ShortGMT);\n            break;\n        // Timezone GMT long format (GMT+0430)\n        case 'OOOO':\n        case 'ZZZZ':\n        // Should be location, but fallback to format O instead because we don't have the data yet\n        case 'zzzz':\n            formatter = timeZoneGetter(ZoneWidth.Long);\n            break;\n        default:\n            return null;\n    }\n    DATE_FORMATS[format] = formatter;\n    return formatter;\n}\n/**\n * @param {?} timezone\n * @param {?} fallback\n * @return {?}\n */\nfunction timezoneToOffset(timezone, fallback) {\n    // Support: IE 9-11 only, Edge 13-15+\n    // IE/Edge do not \"understand\" colon (`:`) in timezone\n    timezone = timezone.replace(/:/g, '');\n    /** @type {?} */\n    const requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;\n    return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;\n}\n/**\n * @param {?} date\n * @param {?} minutes\n * @return {?}\n */\nfunction addDateMinutes(date, minutes) {\n    date = new Date(date.getTime());\n    date.setMinutes(date.getMinutes() + minutes);\n    return date;\n}\n/**\n * @param {?} date\n * @param {?} timezone\n * @param {?} reverse\n * @return {?}\n */\nfunction convertTimezoneToLocal(date, timezone, reverse) {\n    /** @type {?} */\n    const reverseValue = reverse ? -1 : 1;\n    /** @type {?} */\n    const dateTimezoneOffset = date.getTimezoneOffset();\n    /** @type {?} */\n    const timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\n    return addDateMinutes(date, reverseValue * (timezoneOffset - dateTimezoneOffset));\n}\n/**\n * Converts a value to date.\n *\n * Supported input formats:\n * - `Date`\n * - number: timestamp\n * - string: numeric (e.g. \"1234\"), ISO and date strings in a format supported by\n *   [Date.parse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).\n *   Note: ISO strings without time return a date without timeoffset.\n *\n * Throws if unable to convert to a date.\n * @param {?} value\n * @return {?}\n */\nfunction toDate(value) {\n    if (isDate(value)) {\n        return value;\n    }\n    if (typeof value === 'number' && !isNaN(value)) {\n        return new Date(value);\n    }\n    if (typeof value === 'string') {\n        value = value.trim();\n        /** @type {?} */\n        const parsedNb = parseFloat(value);\n        // any string that only contains numbers, like \"1234\" but not like \"1234hello\"\n        if (!isNaN((/** @type {?} */ (value)) - parsedNb)) {\n            return new Date(parsedNb);\n        }\n        if (/^(\\d{4}-\\d{1,2}-\\d{1,2})$/.test(value)) {\n            /* For ISO Strings without time the day, month and year must be extracted from the ISO String\n                  before Date creation to avoid time offset and errors in the new Date.\n                  If we only replace '-' with ',' in the ISO String (\"2015,01,01\"), and try to create a new\n                  date, some browsers (e.g. IE 9) will throw an invalid Date error.\n                  If we leave the '-' (\"2015-01-01\") and try to create a new Date(\"2015-01-01\") the timeoffset\n                  is applied.\n                  Note: ISO months are 0 for January, 1 for February, ... */\n            const [y, m, d] = value.split('-').map((/**\n             * @param {?} val\n             * @return {?}\n             */\n            (val) => +val));\n            return new Date(y, m - 1, d);\n        }\n        /** @type {?} */\n        let match;\n        if (match = value.match(ISO8601_DATE_REGEX)) {\n            return isoStringToDate(match);\n        }\n    }\n    /** @type {?} */\n    const date = new Date((/** @type {?} */ (value)));\n    if (!isDate(date)) {\n        throw new Error(`Unable to convert \"${value}\" into a date`);\n    }\n    return date;\n}\n/**\n * Converts a date in ISO8601 to a Date.\n * Used instead of `Date.parse` because of browser discrepancies.\n * @param {?} match\n * @return {?}\n */\nfunction isoStringToDate(match) {\n    /** @type {?} */\n    const date = new Date(0);\n    /** @type {?} */\n    let tzHour = 0;\n    /** @type {?} */\n    let tzMin = 0;\n    // match[8] means that the string contains \"Z\" (UTC) or a timezone like \"+01:00\" or \"+0100\"\n    /** @type {?} */\n    const dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;\n    /** @type {?} */\n    const timeSetter = match[8] ? date.setUTCHours : date.setHours;\n    // if there is a timezone defined like \"+01:00\" or \"+0100\"\n    if (match[9]) {\n        tzHour = Number(match[9] + match[10]);\n        tzMin = Number(match[9] + match[11]);\n    }\n    dateSetter.call(date, Number(match[1]), Number(match[2]) - 1, Number(match[3]));\n    /** @type {?} */\n    const h = Number(match[4] || 0) - tzHour;\n    /** @type {?} */\n    const m = Number(match[5] || 0) - tzMin;\n    /** @type {?} */\n    const s = Number(match[6] || 0);\n    /** @type {?} */\n    const ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);\n    timeSetter.call(date, h, m, s, ms);\n    return date;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isDate(value) {\n    return value instanceof Date && !isNaN(value.valueOf());\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst NUMBER_FORMAT_REGEXP = /^(\\d+)?\\.((\\d+)(-(\\d+))?)?$/;\n/** @type {?} */\nconst MAX_DIGITS = 22;\n/** @type {?} */\nconst DECIMAL_SEP = '.';\n/** @type {?} */\nconst ZERO_CHAR = '0';\n/** @type {?} */\nconst PATTERN_SEP = ';';\n/** @type {?} */\nconst GROUP_SEP = ',';\n/** @type {?} */\nconst DIGIT_CHAR = '#';\n/** @type {?} */\nconst CURRENCY_CHAR = '¤';\n/** @type {?} */\nconst PERCENT_CHAR = '%';\n/**\n * Transforms a number to a locale string based on a style and a format.\n * @param {?} value\n * @param {?} pattern\n * @param {?} locale\n * @param {?} groupSymbol\n * @param {?} decimalSymbol\n * @param {?=} digitsInfo\n * @param {?=} isPercent\n * @return {?}\n */\nfunction formatNumberToLocaleString(value, pattern, locale, groupSymbol, decimalSymbol, digitsInfo, isPercent = false) {\n    /** @type {?} */\n    let formattedText = '';\n    /** @type {?} */\n    let isZero = false;\n    if (!isFinite(value)) {\n        formattedText = getLocaleNumberSymbol(locale, NumberSymbol.Infinity);\n    }\n    else {\n        /** @type {?} */\n        let parsedNumber = parseNumber(value);\n        if (isPercent) {\n            parsedNumber = toPercent(parsedNumber);\n        }\n        /** @type {?} */\n        let minInt = pattern.minInt;\n        /** @type {?} */\n        let minFraction = pattern.minFrac;\n        /** @type {?} */\n        let maxFraction = pattern.maxFrac;\n        if (digitsInfo) {\n            /** @type {?} */\n            const parts = digitsInfo.match(NUMBER_FORMAT_REGEXP);\n            if (parts === null) {\n                throw new Error(`${digitsInfo} is not a valid digit info`);\n            }\n            /** @type {?} */\n            const minIntPart = parts[1];\n            /** @type {?} */\n            const minFractionPart = parts[3];\n            /** @type {?} */\n            const maxFractionPart = parts[5];\n            if (minIntPart != null) {\n                minInt = parseIntAutoRadix(minIntPart);\n            }\n            if (minFractionPart != null) {\n                minFraction = parseIntAutoRadix(minFractionPart);\n            }\n            if (maxFractionPart != null) {\n                maxFraction = parseIntAutoRadix(maxFractionPart);\n            }\n            else if (minFractionPart != null && minFraction > maxFraction) {\n                maxFraction = minFraction;\n            }\n        }\n        roundNumber(parsedNumber, minFraction, maxFraction);\n        /** @type {?} */\n        let digits = parsedNumber.digits;\n        /** @type {?} */\n        let integerLen = parsedNumber.integerLen;\n        /** @type {?} */\n        const exponent = parsedNumber.exponent;\n        /** @type {?} */\n        let decimals = [];\n        isZero = digits.every((/**\n         * @param {?} d\n         * @return {?}\n         */\n        d => !d));\n        // pad zeros for small numbers\n        for (; integerLen < minInt; integerLen++) {\n            digits.unshift(0);\n        }\n        // pad zeros for small numbers\n        for (; integerLen < 0; integerLen++) {\n            digits.unshift(0);\n        }\n        // extract decimals digits\n        if (integerLen > 0) {\n            decimals = digits.splice(integerLen, digits.length);\n        }\n        else {\n            decimals = digits;\n            digits = [0];\n        }\n        // format the integer digits with grouping separators\n        /** @type {?} */\n        const groups = [];\n        if (digits.length >= pattern.lgSize) {\n            groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(''));\n        }\n        while (digits.length > pattern.gSize) {\n            groups.unshift(digits.splice(-pattern.gSize, digits.length).join(''));\n        }\n        if (digits.length) {\n            groups.unshift(digits.join(''));\n        }\n        formattedText = groups.join(getLocaleNumberSymbol(locale, groupSymbol));\n        // append the decimal digits\n        if (decimals.length) {\n            formattedText += getLocaleNumberSymbol(locale, decimalSymbol) + decimals.join('');\n        }\n        if (exponent) {\n            formattedText += getLocaleNumberSymbol(locale, NumberSymbol.Exponential) + '+' + exponent;\n        }\n    }\n    if (value < 0 && !isZero) {\n        formattedText = pattern.negPre + formattedText + pattern.negSuf;\n    }\n    else {\n        formattedText = pattern.posPre + formattedText + pattern.posSuf;\n    }\n    return formattedText;\n}\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Formats a number as currency using locale rules.\n *\n * @see `formatNumber()` / `DecimalPipe` / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} value The number to format.\n * @param {?} locale A locale code for the locale format rules to use.\n * @param {?} currency A string containing the currency symbol or its name,\n * such as \"$\" or \"Canadian Dollar\". Used in output string, but does not affect the operation\n * of the function.\n * @param {?=} currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)\n * currency code to use in the result string, such as `USD` for the US dollar and `EUR` for the euro.\n * @param {?=} digitsInfo\n * @return {?} The formatted currency value.\n *\n */\nfunction formatCurrency(value, locale, currency, currencyCode, digitsInfo) {\n    /** @type {?} */\n    const format = getLocaleNumberFormat(locale, NumberFormatStyle.Currency);\n    /** @type {?} */\n    const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n    pattern.minFrac = getNumberOfCurrencyDigits((/** @type {?} */ (currencyCode)));\n    pattern.maxFrac = pattern.minFrac;\n    /** @type {?} */\n    const res = formatNumberToLocaleString(value, pattern, locale, NumberSymbol.CurrencyGroup, NumberSymbol.CurrencyDecimal, digitsInfo);\n    return res\n        .replace(CURRENCY_CHAR, currency)\n        // if we have 2 time the currency character, the second one is ignored\n        .replace(CURRENCY_CHAR, '');\n}\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Formats a number as a percentage according to locale rules.\n *\n * @see `formatNumber()` / `DecimalPipe` / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n * \\@publicApi\n *\n * @param {?} value The number to format.\n * @param {?} locale A locale code for the locale format rules to use.\n * @param {?=} digitsInfo\n * @return {?} The formatted percentage value.\n *\n */\nfunction formatPercent(value, locale, digitsInfo) {\n    /** @type {?} */\n    const format = getLocaleNumberFormat(locale, NumberFormatStyle.Percent);\n    /** @type {?} */\n    const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n    /** @type {?} */\n    const res = formatNumberToLocaleString(value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo, true);\n    return res.replace(new RegExp(PERCENT_CHAR, 'g'), getLocaleNumberSymbol(locale, NumberSymbol.PercentSign));\n}\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Formats a number as text, with group sizing, separator, and other\n * parameters based on the locale.\n *\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)\n *\n * \\@publicApi\n * @param {?} value The number to format.\n * @param {?} locale A locale code for the locale format rules to use.\n * @param {?=} digitsInfo\n * @return {?} The formatted text string.\n */\nfunction formatNumber(value, locale, digitsInfo) {\n    /** @type {?} */\n    const format = getLocaleNumberFormat(locale, NumberFormatStyle.Decimal);\n    /** @type {?} */\n    const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n    return formatNumberToLocaleString(value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo);\n}\n/**\n * @param {?} format\n * @param {?=} minusSign\n * @return {?}\n */\nfunction parseNumberFormat(format, minusSign = '-') {\n    /** @type {?} */\n    const p = {\n        minInt: 1,\n        minFrac: 0,\n        maxFrac: 0,\n        posPre: '',\n        posSuf: '',\n        negPre: '',\n        negSuf: '',\n        gSize: 0,\n        lgSize: 0\n    };\n    /** @type {?} */\n    const patternParts = format.split(PATTERN_SEP);\n    /** @type {?} */\n    const positive = patternParts[0];\n    /** @type {?} */\n    const negative = patternParts[1];\n    /** @type {?} */\n    const positiveParts = positive.indexOf(DECIMAL_SEP) !== -1 ?\n        positive.split(DECIMAL_SEP) :\n        [\n            positive.substring(0, positive.lastIndexOf(ZERO_CHAR) + 1),\n            positive.substring(positive.lastIndexOf(ZERO_CHAR) + 1)\n        ];\n    /** @type {?} */\n    const integer = positiveParts[0];\n    /** @type {?} */\n    const fraction = positiveParts[1] || '';\n    p.posPre = integer.substr(0, integer.indexOf(DIGIT_CHAR));\n    for (let i = 0; i < fraction.length; i++) {\n        /** @type {?} */\n        const ch = fraction.charAt(i);\n        if (ch === ZERO_CHAR) {\n            p.minFrac = p.maxFrac = i + 1;\n        }\n        else if (ch === DIGIT_CHAR) {\n            p.maxFrac = i + 1;\n        }\n        else {\n            p.posSuf += ch;\n        }\n    }\n    /** @type {?} */\n    const groups = integer.split(GROUP_SEP);\n    p.gSize = groups[1] ? groups[1].length : 0;\n    p.lgSize = (groups[2] || groups[1]) ? (groups[2] || groups[1]).length : 0;\n    if (negative) {\n        /** @type {?} */\n        const trunkLen = positive.length - p.posPre.length - p.posSuf.length;\n        /** @type {?} */\n        const pos = negative.indexOf(DIGIT_CHAR);\n        p.negPre = negative.substr(0, pos).replace(/'/g, '');\n        p.negSuf = negative.substr(pos + trunkLen).replace(/'/g, '');\n    }\n    else {\n        p.negPre = minusSign + p.posPre;\n        p.negSuf = p.posSuf;\n    }\n    return p;\n}\n// Transforms a parsed number into a percentage by multiplying it by 100\n/**\n * @param {?} parsedNumber\n * @return {?}\n */\nfunction toPercent(parsedNumber) {\n    // if the number is 0, don't do anything\n    if (parsedNumber.digits[0] === 0) {\n        return parsedNumber;\n    }\n    // Getting the current number of decimals\n    /** @type {?} */\n    const fractionLen = parsedNumber.digits.length - parsedNumber.integerLen;\n    if (parsedNumber.exponent) {\n        parsedNumber.exponent += 2;\n    }\n    else {\n        if (fractionLen === 0) {\n            parsedNumber.digits.push(0, 0);\n        }\n        else if (fractionLen === 1) {\n            parsedNumber.digits.push(0);\n        }\n        parsedNumber.integerLen += 2;\n    }\n    return parsedNumber;\n}\n/**\n * Parses a number.\n * Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/\n * @param {?} num\n * @return {?}\n */\nfunction parseNumber(num) {\n    /** @type {?} */\n    let numStr = Math.abs(num) + '';\n    /** @type {?} */\n    let exponent = 0;\n    /** @type {?} */\n    let digits;\n    /** @type {?} */\n    let integerLen;\n    /** @type {?} */\n    let i;\n    /** @type {?} */\n    let j;\n    /** @type {?} */\n    let zeros;\n    // Decimal point?\n    if ((integerLen = numStr.indexOf(DECIMAL_SEP)) > -1) {\n        numStr = numStr.replace(DECIMAL_SEP, '');\n    }\n    // Exponential form?\n    if ((i = numStr.search(/e/i)) > 0) {\n        // Work out the exponent.\n        if (integerLen < 0)\n            integerLen = i;\n        integerLen += +numStr.slice(i + 1);\n        numStr = numStr.substring(0, i);\n    }\n    else if (integerLen < 0) {\n        // There was no decimal point or exponent so it is an integer.\n        integerLen = numStr.length;\n    }\n    // Count the number of leading zeros.\n    for (i = 0; numStr.charAt(i) === ZERO_CHAR; i++) { /* empty */\n    }\n    if (i === (zeros = numStr.length)) {\n        // The digits are all zero.\n        digits = [0];\n        integerLen = 1;\n    }\n    else {\n        // Count the number of trailing zeros\n        zeros--;\n        while (numStr.charAt(zeros) === ZERO_CHAR)\n            zeros--;\n        // Trailing zeros are insignificant so ignore them\n        integerLen -= i;\n        digits = [];\n        // Convert string to array of digits without leading/trailing zeros.\n        for (j = 0; i <= zeros; i++, j++) {\n            digits[j] = Number(numStr.charAt(i));\n        }\n    }\n    // If the number overflows the maximum allowed digits then use an exponent.\n    if (integerLen > MAX_DIGITS) {\n        digits = digits.splice(0, MAX_DIGITS - 1);\n        exponent = integerLen - 1;\n        integerLen = 1;\n    }\n    return { digits, exponent, integerLen };\n}\n/**\n * Round the parsed number to the specified number of decimal places\n * This function changes the parsedNumber in-place\n * @param {?} parsedNumber\n * @param {?} minFrac\n * @param {?} maxFrac\n * @return {?}\n */\nfunction roundNumber(parsedNumber, minFrac, maxFrac) {\n    if (minFrac > maxFrac) {\n        throw new Error(`The minimum number of digits after fraction (${minFrac}) is higher than the maximum (${maxFrac}).`);\n    }\n    /** @type {?} */\n    let digits = parsedNumber.digits;\n    /** @type {?} */\n    let fractionLen = digits.length - parsedNumber.integerLen;\n    /** @type {?} */\n    const fractionSize = Math.min(Math.max(minFrac, fractionLen), maxFrac);\n    // The index of the digit to where rounding is to occur\n    /** @type {?} */\n    let roundAt = fractionSize + parsedNumber.integerLen;\n    /** @type {?} */\n    let digit = digits[roundAt];\n    if (roundAt > 0) {\n        // Drop fractional digits beyond `roundAt`\n        digits.splice(Math.max(parsedNumber.integerLen, roundAt));\n        // Set non-fractional digits beyond `roundAt` to 0\n        for (let j = roundAt; j < digits.length; j++) {\n            digits[j] = 0;\n        }\n    }\n    else {\n        // We rounded to zero so reset the parsedNumber\n        fractionLen = Math.max(0, fractionLen);\n        parsedNumber.integerLen = 1;\n        digits.length = Math.max(1, roundAt = fractionSize + 1);\n        digits[0] = 0;\n        for (let i = 1; i < roundAt; i++)\n            digits[i] = 0;\n    }\n    if (digit >= 5) {\n        if (roundAt - 1 < 0) {\n            for (let k = 0; k > roundAt; k--) {\n                digits.unshift(0);\n                parsedNumber.integerLen++;\n            }\n            digits.unshift(1);\n            parsedNumber.integerLen++;\n        }\n        else {\n            digits[roundAt - 1]++;\n        }\n    }\n    // Pad out with zeros to get the required fraction length\n    for (; fractionLen < Math.max(0, fractionSize); fractionLen++)\n        digits.push(0);\n    /** @type {?} */\n    let dropTrailingZeros = fractionSize !== 0;\n    // Minimal length = nb of decimals required + current nb of integers\n    // Any number besides that is optional and can be removed if it's a trailing 0\n    /** @type {?} */\n    const minLen = minFrac + parsedNumber.integerLen;\n    // Do any carrying, e.g. a digit was rounded up to 10\n    /** @type {?} */\n    const carry = digits.reduceRight((/**\n     * @param {?} carry\n     * @param {?} d\n     * @param {?} i\n     * @param {?} digits\n     * @return {?}\n     */\n    function (carry, d, i, digits) {\n        d = d + carry;\n        digits[i] = d < 10 ? d : d - 10; // d % 10\n        if (dropTrailingZeros) {\n            // Do not keep meaningless fractional trailing zeros (e.g. 15.52000 --> 15.52)\n            if (digits[i] === 0 && i >= minLen) {\n                digits.pop();\n            }\n            else {\n                dropTrailingZeros = false;\n            }\n        }\n        return d >= 10 ? 1 : 0; // Math.floor(d / 10);\n    }), 0);\n    if (carry) {\n        digits.unshift(carry);\n        parsedNumber.integerLen++;\n    }\n}\n/**\n * @param {?} text\n * @return {?}\n */\nfunction parseIntAutoRadix(text) {\n    /** @type {?} */\n    const result = parseInt(text);\n    if (isNaN(result)) {\n        throw new Error('Invalid integer literal when parsing ' + text);\n    }\n    return result;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @deprecated from v5\n * @type {?}\n */\nconst DEPRECATED_PLURAL_FN = new InjectionToken('UseV4Plurals');\n/**\n * \\@publicApi\n * @abstract\n */\nclass NgLocalization {\n}\n/**\n * Returns the plural category for a given value.\n * - \"=value\" when the case exists,\n * - the plural category otherwise\n * @param {?} value\n * @param {?} cases\n * @param {?} ngLocalization\n * @param {?=} locale\n * @return {?}\n */\nfunction getPluralCategory(value, cases, ngLocalization, locale) {\n    /** @type {?} */\n    let key = `=${value}`;\n    if (cases.indexOf(key) > -1) {\n        return key;\n    }\n    key = ngLocalization.getPluralCategory(value, locale);\n    if (cases.indexOf(key) > -1) {\n        return key;\n    }\n    if (cases.indexOf('other') > -1) {\n        return 'other';\n    }\n    throw new Error(`No plural message found for value \"${value}\"`);\n}\n/**\n * Returns the plural case based on the locale\n *\n * \\@publicApi\n */\nclass NgLocaleLocalization extends NgLocalization {\n    /**\n     * @param {?} locale\n     * @param {?=} deprecatedPluralFn\n     */\n    constructor(locale, deprecatedPluralFn) {\n        super();\n        this.locale = locale;\n        this.deprecatedPluralFn = deprecatedPluralFn;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} locale\n     * @return {?}\n     */\n    getPluralCategory(value, locale) {\n        /** @type {?} */\n        const plural = this.deprecatedPluralFn ? this.deprecatedPluralFn(locale || this.locale, value) :\n            getLocalePluralCase(locale || this.locale)(value);\n        switch (plural) {\n            case Plural.Zero:\n                return 'zero';\n            case Plural.One:\n                return 'one';\n            case Plural.Two:\n                return 'two';\n            case Plural.Few:\n                return 'few';\n            case Plural.Many:\n                return 'many';\n            default:\n                return 'other';\n        }\n    }\n}\nNgLocaleLocalization.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nNgLocaleLocalization.ctorParameters = () => [\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DEPRECATED_PLURAL_FN,] }] }\n];\n/**\n * Returns the plural case based on the locale\n *\n * @deprecated from v5 the plural case function is in locale data files common/locales/*.ts\n * \\@publicApi\n * @param {?} locale\n * @param {?} nLike\n * @return {?}\n */\nfunction getPluralCase(locale, nLike) {\n    // TODO(vicb): lazy compute\n    if (typeof nLike === 'string') {\n        nLike = parseInt((/** @type {?} */ (nLike)), 10);\n    }\n    /** @type {?} */\n    const n = (/** @type {?} */ (nLike));\n    /** @type {?} */\n    const nDecimal = n.toString().replace(/^[^.]*\\.?/, '');\n    /** @type {?} */\n    const i = Math.floor(Math.abs(n));\n    /** @type {?} */\n    const v = nDecimal.length;\n    /** @type {?} */\n    const f = parseInt(nDecimal, 10);\n    /** @type {?} */\n    const t = parseInt(n.toString().replace(/^[^.]*\\.?|0+$/g, ''), 10) || 0;\n    /** @type {?} */\n    const lang = locale.split('-')[0].toLowerCase();\n    switch (lang) {\n        case 'af':\n        case 'asa':\n        case 'az':\n        case 'bem':\n        case 'bez':\n        case 'bg':\n        case 'brx':\n        case 'ce':\n        case 'cgg':\n        case 'chr':\n        case 'ckb':\n        case 'ee':\n        case 'el':\n        case 'eo':\n        case 'es':\n        case 'eu':\n        case 'fo':\n        case 'fur':\n        case 'gsw':\n        case 'ha':\n        case 'haw':\n        case 'hu':\n        case 'jgo':\n        case 'jmc':\n        case 'ka':\n        case 'kk':\n        case 'kkj':\n        case 'kl':\n        case 'ks':\n        case 'ksb':\n        case 'ky':\n        case 'lb':\n        case 'lg':\n        case 'mas':\n        case 'mgo':\n        case 'ml':\n        case 'mn':\n        case 'nb':\n        case 'nd':\n        case 'ne':\n        case 'nn':\n        case 'nnh':\n        case 'nyn':\n        case 'om':\n        case 'or':\n        case 'os':\n        case 'ps':\n        case 'rm':\n        case 'rof':\n        case 'rwk':\n        case 'saq':\n        case 'seh':\n        case 'sn':\n        case 'so':\n        case 'sq':\n        case 'ta':\n        case 'te':\n        case 'teo':\n        case 'tk':\n        case 'tr':\n        case 'ug':\n        case 'uz':\n        case 'vo':\n        case 'vun':\n        case 'wae':\n        case 'xog':\n            if (n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'ak':\n        case 'ln':\n        case 'mg':\n        case 'pa':\n        case 'ti':\n            if (n === Math.floor(n) && n >= 0 && n <= 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'am':\n        case 'as':\n        case 'bn':\n        case 'fa':\n        case 'gu':\n        case 'hi':\n        case 'kn':\n        case 'mr':\n        case 'zu':\n            if (i === 0 || n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'ar':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)\n                return Plural.Few;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)\n                return Plural.Many;\n            return Plural.Other;\n        case 'ast':\n        case 'ca':\n        case 'de':\n        case 'en':\n        case 'et':\n        case 'fi':\n        case 'fy':\n        case 'gl':\n        case 'it':\n        case 'nl':\n        case 'sv':\n        case 'sw':\n        case 'ur':\n        case 'yi':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            return Plural.Other;\n        case 'be':\n            if (n % 10 === 1 && !(n % 100 === 11))\n                return Plural.One;\n            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&\n                !(n % 100 >= 12 && n % 100 <= 14))\n                return Plural.Few;\n            if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||\n                n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'br':\n            if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))\n                return Plural.One;\n            if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))\n                return Plural.Two;\n            if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&\n                !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||\n                    n % 100 >= 90 && n % 100 <= 99))\n                return Plural.Few;\n            if (!(n === 0) && n % 1e6 === 0)\n                return Plural.Many;\n            return Plural.Other;\n        case 'bs':\n        case 'hr':\n        case 'sr':\n            if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14) ||\n                f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&\n                    !(f % 100 >= 12 && f % 100 <= 14))\n                return Plural.Few;\n            return Plural.Other;\n        case 'cs':\n        case 'sk':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)\n                return Plural.Few;\n            if (!(v === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'cy':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n === 3)\n                return Plural.Few;\n            if (n === 6)\n                return Plural.Many;\n            return Plural.Other;\n        case 'da':\n            if (n === 1 || !(t === 0) && (i === 0 || i === 1))\n                return Plural.One;\n            return Plural.Other;\n        case 'dsb':\n        case 'hsb':\n            if (v === 0 && i % 100 === 1 || f % 100 === 1)\n                return Plural.One;\n            if (v === 0 && i % 100 === 2 || f % 100 === 2)\n                return Plural.Two;\n            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||\n                f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)\n                return Plural.Few;\n            return Plural.Other;\n        case 'ff':\n        case 'fr':\n        case 'hy':\n        case 'kab':\n            if (i === 0 || i === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'fil':\n            if (v === 0 && (i === 1 || i === 2 || i === 3) ||\n                v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||\n                !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))\n                return Plural.One;\n            return Plural.Other;\n        case 'ga':\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n === Math.floor(n) && n >= 3 && n <= 6)\n                return Plural.Few;\n            if (n === Math.floor(n) && n >= 7 && n <= 10)\n                return Plural.Many;\n            return Plural.Other;\n        case 'gd':\n            if (n === 1 || n === 11)\n                return Plural.One;\n            if (n === 2 || n === 12)\n                return Plural.Two;\n            if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))\n                return Plural.Few;\n            return Plural.Other;\n        case 'gv':\n            if (v === 0 && i % 10 === 1)\n                return Plural.One;\n            if (v === 0 && i % 10 === 2)\n                return Plural.Two;\n            if (v === 0 &&\n                (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))\n                return Plural.Few;\n            if (!(v === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'he':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (i === 2 && v === 0)\n                return Plural.Two;\n            if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)\n                return Plural.Many;\n            return Plural.Other;\n        case 'is':\n            if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))\n                return Plural.One;\n            return Plural.Other;\n        case 'ksh':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'kw':\n        case 'naq':\n        case 'se':\n        case 'smn':\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            return Plural.Other;\n        case 'lag':\n            if (n === 0)\n                return Plural.Zero;\n            if ((i === 0 || i === 1) && !(n === 0))\n                return Plural.One;\n            return Plural.Other;\n        case 'lt':\n            if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))\n                return Plural.One;\n            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&\n                !(n % 100 >= 11 && n % 100 <= 19))\n                return Plural.Few;\n            if (!(f === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'lv':\n        case 'prg':\n            if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||\n                v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)\n                return Plural.Zero;\n            if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||\n                !(v === 2) && f % 10 === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'mk':\n            if (v === 0 && i % 10 === 1 || f % 10 === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'mt':\n            if (n === 1)\n                return Plural.One;\n            if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)\n                return Plural.Few;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)\n                return Plural.Many;\n            return Plural.Other;\n        case 'pl':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14))\n                return Plural.Few;\n            if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||\n                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'pt':\n            if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))\n                return Plural.One;\n            return Plural.Other;\n        case 'ro':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (!(v === 0) || n === 0 ||\n                !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)\n                return Plural.Few;\n            return Plural.Other;\n        case 'ru':\n        case 'uk':\n            if (v === 0 && i % 10 === 1 && !(i % 100 === 11))\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14))\n                return Plural.Few;\n            if (v === 0 && i % 10 === 0 ||\n                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'shi':\n            if (i === 0 || n === 1)\n                return Plural.One;\n            if (n === Math.floor(n) && n >= 2 && n <= 10)\n                return Plural.Few;\n            return Plural.Other;\n        case 'si':\n            if (n === 0 || n === 1 || i === 0 && f === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'sl':\n            if (v === 0 && i % 100 === 1)\n                return Plural.One;\n            if (v === 0 && i % 100 === 2)\n                return Plural.Two;\n            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))\n                return Plural.Few;\n            return Plural.Other;\n        case 'tzm':\n            if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)\n                return Plural.One;\n            return Plural.Other;\n        // When there is no specification, the default is always \"other\"\n        // Spec: http://cldr.unicode.org/index/cldr-spec/plural-rules\n        // > other (required—general plural form — also used if the language only has a single form)\n        default:\n            return Plural.Other;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} cookieStr\n * @param {?} name\n * @return {?}\n */\nfunction parseCookieValue(cookieStr, name) {\n    name = encodeURIComponent(name);\n    for (const cookie of cookieStr.split(';')) {\n        /** @type {?} */\n        const eqIndex = cookie.indexOf('=');\n        const [cookieName, cookieValue] = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)];\n        if (cookieName.trim() === name) {\n            return decodeURIComponent(cookieValue);\n        }\n    }\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to diff and convert ngStyle/ngClass instructions into [style] and [class] bindings.\n *\n * ngStyle and ngClass both accept various forms of input and behave differently than that\n * of how [style] and [class] behave in Angular.\n *\n * The differences are:\n *  - ngStyle and ngClass both **watch** their binding values for changes each time CD runs\n *    while [style] and [class] bindings do not (they check for identity changes)\n *  - ngStyle allows for unit-based keys (e.g. `{'max-width.px':value}`) and [style] does not\n *  - ngClass supports arrays of class values and [class] only accepts map and string values\n *  - ngClass allows for multiple className keys (space-separated) within an array or map\n *     (as the * key) while [class] only accepts a simple key/value map object\n *\n * Having Angular understand and adapt to all the different forms of behavior is complicated\n * and unnecessary. Instead, ngClass and ngStyle should have their input values be converted\n * into something that the core-level [style] and [class] bindings understand.\n *\n * This [StylingDiffer] class handles this conversion by creating a new input value each time\n * the inner representation of the binding value have changed.\n *\n * ## Why do we care about ngStyle/ngClass?\n * The styling algorithm code (documented inside of `render3/interfaces/styling.ts`) needs to\n * respect and understand the styling values emitted through ngStyle and ngClass (when they\n * are present and used in a template).\n *\n * Instead of having these directives manage styling on their own, they should be included\n * into the Angular styling algorithm that exists for [style] and [class] bindings.\n *\n * Here's why:\n *\n * - If ngStyle/ngClass is used in combination with [style]/[class] bindings then the\n *   styles and classes would fall out of sync and be applied and updated at\n *   inconsistent times\n * - Both ngClass/ngStyle do not respect [class.name] and [style.prop] bindings\n *   (they will write over them given the right combination of events)\n *\n *   ```\n *   <!-- if `w1` is updated then it will always override `w2`\n *        if `w2` is updated then it will always override `w1`\n *        if both are updated at the same time then `w1` wins -->\n *   <div [ngStyle]=\"{width:w1}\" [style.width]=\"w2\">...</div>\n *\n *   <!-- if `w1` is updated then it will always lose to `w2`\n *        if `w2` is updated then it will always override `w1`\n *        if both are updated at the same time then `w2` wins -->\n *   <div [style]=\"{width:w1}\" [style.width]=\"w2\">...</div>\n *   ```\n * - ngClass/ngStyle were written as a directives and made use of maps, closures and other\n *   expensive data structures which were evaluated each time CD runs\n * @template T\n */\nclass StylingDiffer {\n    /**\n     * @param {?} _name\n     * @param {?} _options\n     */\n    constructor(_name, _options) {\n        this._name = _name;\n        this._options = _options;\n        this.value = null;\n        this._lastSetValue = null;\n        this._lastSetValueType = 0 /* Null */;\n        this._lastSetValueIdentityChange = false;\n    }\n    /**\n     * Sets (updates) the styling value within the differ.\n     *\n     * Only when `hasValueChanged` is called then this new value will be evaluted\n     * and checked against the previous value.\n     *\n     * @param {?} value the new styling value provided from the ngClass/ngStyle binding\n     * @return {?}\n     */\n    setValue(value) {\n        if (Array.isArray(value)) {\n            this._lastSetValueType = 4 /* Array */;\n        }\n        else if (value instanceof Set) {\n            this._lastSetValueType = 8 /* Set */;\n        }\n        else if (value && typeof value === 'string') {\n            if (!(this._options & 4 /* AllowStringValue */)) {\n                throw new Error(this._name + ' string values are not allowed');\n            }\n            this._lastSetValueType = 1 /* String */;\n        }\n        else {\n            this._lastSetValueType = value ? 2 /* Map */ : 0 /* Null */;\n        }\n        this._lastSetValueIdentityChange = true;\n        this._lastSetValue = value || null;\n    }\n    /**\n     * Determines whether or not the value has changed.\n     *\n     * This function can be called right after `setValue()` is called, but it can also be\n     * called incase the existing value (if it's a collection) changes internally. If the\n     * value is indeed a collection it will do the necessary diffing work and produce a\n     * new object value as assign that to `value`.\n     *\n     * @return {?} whether or not the value has changed in some way.\n     */\n    hasValueChanged() {\n        /** @type {?} */\n        let valueHasChanged = this._lastSetValueIdentityChange;\n        if (!valueHasChanged && !(this._lastSetValueType & 14 /* Collection */))\n            return false;\n        /** @type {?} */\n        let finalValue = null;\n        /** @type {?} */\n        const trimValues = (this._options & 1 /* TrimProperties */) ? true : false;\n        /** @type {?} */\n        const parseOutUnits = (this._options & 8 /* AllowUnits */) ? true : false;\n        /** @type {?} */\n        const allowSubKeys = (this._options & 2 /* AllowSubKeys */) ? true : false;\n        switch (this._lastSetValueType) {\n            // case 1: [input]=\"string\"\n            case 1 /* String */:\n                /** @type {?} */\n                const tokens = ((/** @type {?} */ (this._lastSetValue))).split(/\\s+/g);\n                if (this._options & 16 /* ForceAsMap */) {\n                    finalValue = {};\n                    tokens.forEach((/**\n                     * @param {?} token\n                     * @param {?} i\n                     * @return {?}\n                     */\n                    (token, i) => ((/** @type {?} */ (finalValue)))[token] = true));\n                }\n                else {\n                    finalValue = tokens.reduce((/**\n                     * @param {?} str\n                     * @param {?} token\n                     * @param {?} i\n                     * @return {?}\n                     */\n                    (str, token, i) => str + (i ? ' ' : '') + token));\n                }\n                break;\n            // case 2: [input]=\"{key:value}\"\n            case 2 /* Map */:\n                /** @type {?} */\n                const map = (/** @type {?} */ (this._lastSetValue));\n                /** @type {?} */\n                const keys = Object.keys(map);\n                if (!valueHasChanged) {\n                    if (this.value) {\n                        // we know that the classExp value exists and that it is\n                        // a map (otherwise an identity change would have occurred)\n                        valueHasChanged = mapHasChanged(keys, (/** @type {?} */ (this.value)), map);\n                    }\n                    else {\n                        valueHasChanged = true;\n                    }\n                }\n                if (valueHasChanged) {\n                    finalValue =\n                        bulidMapFromValues(this._name, trimValues, parseOutUnits, allowSubKeys, map, keys);\n                }\n                break;\n            // case 3a: [input]=\"[str1, str2, ...]\"\n            // case 3b: [input]=\"Set\"\n            case 4 /* Array */:\n            case 8 /* Set */:\n                /** @type {?} */\n                const values = Array.from((/** @type {?} */ (this._lastSetValue)));\n                if (!valueHasChanged) {\n                    /** @type {?} */\n                    const keys = Object.keys((/** @type {?} */ (this.value)));\n                    valueHasChanged = !arrayEqualsArray(keys, values);\n                }\n                if (valueHasChanged) {\n                    finalValue =\n                        bulidMapFromValues(this._name, trimValues, parseOutUnits, allowSubKeys, values);\n                }\n                break;\n            // case 4: [input]=\"null|undefined\"\n            default:\n                finalValue = null;\n                break;\n        }\n        if (valueHasChanged) {\n            ((/** @type {?} */ (this))).value = (/** @type {?} */ (finalValue));\n        }\n        return valueHasChanged;\n    }\n}\n/**\n * builds and returns a map based on the values input value\n *\n * If the `keys` param is provided then the `values` param is treated as a\n * string map. Otherwise `values` is treated as a string array.\n * @param {?} errorPrefix\n * @param {?} trim\n * @param {?} parseOutUnits\n * @param {?} allowSubKeys\n * @param {?} values\n * @param {?=} keys\n * @return {?}\n */\nfunction bulidMapFromValues(errorPrefix, trim, parseOutUnits, allowSubKeys, values, keys) {\n    /** @type {?} */\n    const map = {};\n    if (keys) {\n        // case 1: map\n        for (let i = 0; i < keys.length; i++) {\n            /** @type {?} */\n            let key = keys[i];\n            key = trim ? key.trim() : key;\n            /** @type {?} */\n            const value = ((/** @type {?} */ (values)))[key];\n            setMapValues(map, key, value, parseOutUnits, allowSubKeys);\n        }\n    }\n    else {\n        // case 2: array\n        for (let i = 0; i < values.length; i++) {\n            /** @type {?} */\n            let value = ((/** @type {?} */ (values)))[i];\n            assertValidValue(errorPrefix, value);\n            value = trim ? value.trim() : value;\n            setMapValues(map, value, true, false, allowSubKeys);\n        }\n    }\n    return map;\n}\n/**\n * @param {?} errorPrefix\n * @param {?} value\n * @return {?}\n */\nfunction assertValidValue(errorPrefix, value) {\n    if (typeof value !== 'string') {\n        throw new Error(`${errorPrefix} can only toggle CSS classes expressed as strings, got ${value}`);\n    }\n}\n/**\n * @param {?} map\n * @param {?} key\n * @param {?} value\n * @param {?} parseOutUnits\n * @param {?} allowSubKeys\n * @return {?}\n */\nfunction setMapValues(map, key, value, parseOutUnits, allowSubKeys) {\n    if (allowSubKeys && key.indexOf(' ') > 0) {\n        /** @type {?} */\n        const innerKeys = key.split(/\\s+/g);\n        for (let j = 0; j < innerKeys.length; j++) {\n            setIndividualMapValue(map, innerKeys[j], value, parseOutUnits);\n        }\n    }\n    else {\n        setIndividualMapValue(map, key, value, parseOutUnits);\n    }\n}\n/**\n * @param {?} map\n * @param {?} key\n * @param {?} value\n * @param {?} parseOutUnits\n * @return {?}\n */\nfunction setIndividualMapValue(map, key, value, parseOutUnits) {\n    if (parseOutUnits) {\n        /** @type {?} */\n        const values = normalizeStyleKeyAndValue(key, value);\n        value = values.value;\n        key = values.key;\n    }\n    map[key] = value;\n}\n/**\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\nfunction normalizeStyleKeyAndValue(key, value) {\n    /** @type {?} */\n    const index = key.indexOf('.');\n    if (index > 0) {\n        /** @type {?} */\n        const unit = key.substr(index + 1);\n        key = key.substring(0, index);\n        if (value != null) { // we should not convert null values to string\n            value += unit;\n        }\n    }\n    return { key, value };\n}\n/**\n * @param {?} keys\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction mapHasChanged(keys, a, b) {\n    /** @type {?} */\n    const oldKeys = Object.keys(a);\n    /** @type {?} */\n    const newKeys = keys;\n    // the keys are different which means the map changed\n    if (!arrayEqualsArray(oldKeys, newKeys)) {\n        return true;\n    }\n    for (let i = 0; i < newKeys.length; i++) {\n        /** @type {?} */\n        const key = newKeys[i];\n        if (a[key] !== b[key]) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction arrayEqualsArray(a, b) {\n    if (a && b) {\n        if (a.length !== b.length)\n            return false;\n        for (let i = 0; i < a.length; i++) {\n            if (b.indexOf(a[i]) === -1)\n                return false;\n        }\n        return true;\n    }\n    return false;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used as a token for an injected service within the NgClass directive.\n *\n * NgClass behaves differenly whether or not VE is being used or not. If\n * present then the legacy ngClass diffing algorithm will be used as an\n * injected service. Otherwise the new diffing algorithm (which delegates\n * to the `[class]` binding) will be used. This toggle behavior is done so\n * via the ivy_switch mechanism.\n * @abstract\n */\nclass NgClassImpl {\n}\nclass NgClassR2Impl {\n    /**\n     * @param {?} _iterableDiffers\n     * @param {?} _keyValueDiffers\n     * @param {?} _ngEl\n     * @param {?} _renderer\n     */\n    constructor(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {\n        this._iterableDiffers = _iterableDiffers;\n        this._keyValueDiffers = _keyValueDiffers;\n        this._ngEl = _ngEl;\n        this._renderer = _renderer;\n        this._initialClasses = [];\n    }\n    /**\n     * @return {?}\n     */\n    getValue() { return null; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    setClass(value) {\n        this._removeClasses(this._initialClasses);\n        this._initialClasses = typeof value === 'string' ? value.split(/\\s+/) : [];\n        this._applyClasses(this._initialClasses);\n        this._applyClasses(this._rawClass);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    setNgClass(value) {\n        this._removeClasses(this._rawClass);\n        this._applyClasses(this._initialClasses);\n        this._iterableDiffer = null;\n        this._keyValueDiffer = null;\n        this._rawClass = typeof value === 'string' ? value.split(/\\s+/) : value;\n        if (this._rawClass) {\n            if (ɵisListLikeIterable(this._rawClass)) {\n                this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create();\n            }\n            else {\n                this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    applyChanges() {\n        if (this._iterableDiffer) {\n            /** @type {?} */\n            const iterableChanges = this._iterableDiffer.diff((/** @type {?} */ (this._rawClass)));\n            if (iterableChanges) {\n                this._applyIterableChanges(iterableChanges);\n            }\n        }\n        else if (this._keyValueDiffer) {\n            /** @type {?} */\n            const keyValueChanges = this._keyValueDiffer.diff((/** @type {?} */ (this._rawClass)));\n            if (keyValueChanges) {\n                this._applyKeyValueChanges(keyValueChanges);\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    _applyKeyValueChanges(changes) {\n        changes.forEachAddedItem((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => this._toggleClass(record.key, record.currentValue)));\n        changes.forEachChangedItem((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => this._toggleClass(record.key, record.currentValue)));\n        changes.forEachRemovedItem((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => {\n            if (record.previousValue) {\n                this._toggleClass(record.key, false);\n            }\n        }));\n    }\n    /**\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    _applyIterableChanges(changes) {\n        changes.forEachAddedItem((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => {\n            if (typeof record.item === 'string') {\n                this._toggleClass(record.item, true);\n            }\n            else {\n                throw new Error(`NgClass can only toggle CSS classes expressed as strings, got ${ɵstringify(record.item)}`);\n            }\n        }));\n        changes.forEachRemovedItem((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => this._toggleClass(record.item, false)));\n    }\n    /**\n     * Applies a collection of CSS classes to the DOM element.\n     *\n     * For argument of type Set and Array CSS class names contained in those collections are always\n     * added.\n     * For argument of type Map CSS class name in the map's key is toggled based on the value (added\n     * for truthy and removed for falsy).\n     * @private\n     * @param {?} rawClassVal\n     * @return {?}\n     */\n    _applyClasses(rawClassVal) {\n        if (rawClassVal) {\n            if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {\n                ((/** @type {?} */ (rawClassVal))).forEach((/**\n                 * @param {?} klass\n                 * @return {?}\n                 */\n                (klass) => this._toggleClass(klass, true)));\n            }\n            else {\n                Object.keys(rawClassVal).forEach((/**\n                 * @param {?} klass\n                 * @return {?}\n                 */\n                klass => this._toggleClass(klass, !!rawClassVal[klass])));\n            }\n        }\n    }\n    /**\n     * Removes a collection of CSS classes from the DOM element. This is mostly useful for cleanup\n     * purposes.\n     * @private\n     * @param {?} rawClassVal\n     * @return {?}\n     */\n    _removeClasses(rawClassVal) {\n        if (rawClassVal) {\n            if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {\n                ((/** @type {?} */ (rawClassVal))).forEach((/**\n                 * @param {?} klass\n                 * @return {?}\n                 */\n                (klass) => this._toggleClass(klass, false)));\n            }\n            else {\n                Object.keys(rawClassVal).forEach((/**\n                 * @param {?} klass\n                 * @return {?}\n                 */\n                klass => this._toggleClass(klass, false)));\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} klass\n     * @param {?} enabled\n     * @return {?}\n     */\n    _toggleClass(klass, enabled) {\n        klass = klass.trim();\n        if (klass) {\n            klass.split(/\\s+/g).forEach((/**\n             * @param {?} klass\n             * @return {?}\n             */\n            klass => {\n                if (enabled) {\n                    this._renderer.addClass(this._ngEl.nativeElement, klass);\n                }\n                else {\n                    this._renderer.removeClass(this._ngEl.nativeElement, klass);\n                }\n            }));\n        }\n    }\n}\nNgClassR2Impl.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nNgClassR2Impl.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: KeyValueDiffers },\n    { type: ElementRef },\n    { type: Renderer2 }\n];\nclass NgClassR3Impl {\n    constructor() {\n        this._value = null;\n        this._ngClassDiffer = new StylingDiffer('NgClass', 1 /* TrimProperties */ |\n            2 /* AllowSubKeys */ |\n            4 /* AllowStringValue */ | 16 /* ForceAsMap */);\n        this._classStringDiffer = null;\n    }\n    /**\n     * @return {?}\n     */\n    getValue() { return this._value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    setClass(value) {\n        // early exit incase the binding gets emitted as an empty value which\n        // means there is no reason to instantiate and diff the values...\n        if (!value && !this._classStringDiffer)\n            return;\n        this._classStringDiffer = this._classStringDiffer ||\n            new StylingDiffer('class', 4 /* AllowStringValue */ | 16 /* ForceAsMap */);\n        this._classStringDiffer.setValue(value);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    setNgClass(value) {\n        this._ngClassDiffer.setValue(value);\n    }\n    /**\n     * @return {?}\n     */\n    applyChanges() {\n        /** @type {?} */\n        const classChanged = this._classStringDiffer ? this._classStringDiffer.hasValueChanged() : false;\n        /** @type {?} */\n        const ngClassChanged = this._ngClassDiffer.hasValueChanged();\n        if (classChanged || ngClassChanged) {\n            /** @type {?} */\n            let value = this._ngClassDiffer.value;\n            if (this._classStringDiffer) {\n                /** @type {?} */\n                let classValue = this._classStringDiffer.value;\n                if (classValue) {\n                    value = value ? Object.assign({}, classValue, value) : classValue;\n                }\n            }\n            this._value = value;\n        }\n    }\n}\nNgClassR3Impl.decorators = [\n    { type: Injectable }\n];\n// the implementation for both NgStyleR2Impl and NgStyleR3Impl are\n// not ivy_switch'd away, instead they are only hooked up into the\n// DI via NgStyle's directive's provider property.\n/** @type {?} */\nconst NgClassImplProvider__PRE_R3__ = {\n    provide: NgClassImpl,\n    useClass: NgClassR2Impl\n};\n/** @type {?} */\nconst NgClassImplProvider__POST_R3__ = {\n    provide: NgClassImpl,\n    useClass: NgClassR3Impl\n};\n/** @type {?} */\nconst NgClassImplProvider = NgClassImplProvider__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/*\n * NgClass (as well as NgStyle) behaves differently when loaded in the VE and when not.\n *\n * If the VE is present (which is for older versions of Angular) then NgClass will inject\n * the legacy diffing algorithm as a service and delegate all styling changes to that.\n *\n * If the VE is not present then NgStyle will normalize (through the injected service) and\n * then write all styling changes to the `[style]` binding directly (through a host binding).\n * Then Angular will notice the host binding change and treat the changes as styling\n * changes and apply them via the core styling instructions that exist within Angular.\n */\n// used when the VE is present\n/** @type {?} */\nconst ngClassDirectiveDef__PRE_R3__ = undefined;\n// used when the VE is not present (note the directive will\n// never be instantiated normally because it is apart of a\n// base class)\nconst ɵ0 = /**\n * @return {?}\n */\nfunction () { }, ɵ1 = /**\n * @return {?}\n */\n() => { }, ɵ2 = /**\n * @param {?} rf\n * @param {?} ctx\n * @param {?} elIndex\n * @return {?}\n */\nfunction (rf, ctx, elIndex) {\n    if (rf & 1 /* Create */) {\n        ɵɵelementHostStyling();\n    }\n    if (rf & 2 /* Update */) {\n        ɵɵelementHostStylingMap(ctx.getValue());\n        ɵɵelementHostStylingApply();\n    }\n};\n/** @type {?} */\nconst ngClassDirectiveDef__POST_R3__ = ɵɵdefineDirective({\n    type: (/** @type {?} */ ((ɵ0))),\n    selectors: (/** @type {?} */ (null)),\n    factory: (ɵ1),\n    hostBindings: (ɵ2)\n});\n/** @type {?} */\nconst ngClassDirectiveDef = ngClassDirectiveDef__PRE_R3__;\n/**\n * Serves as the base non-VE container for NgClass.\n *\n * While this is a base class that NgClass extends from, the\n * class itself acts as a container for non-VE code to setup\n * a link to the `[class]` host binding (via the static\n * `ngDirectiveDef` property on the class).\n *\n * Note that the `ngDirectiveDef` property's code is switched\n * depending if VE is present or not (this allows for the\n * binding code to be set only for newer versions of Angular).\n *\n * \\@publicApi\n */\nclass NgClassBase {\n    /**\n     * @param {?} _delegate\n     */\n    constructor(_delegate) {\n        this._delegate = _delegate;\n    }\n    /**\n     * @return {?}\n     */\n    getValue() { return this._delegate.getValue(); }\n}\n/** @nocollapse */ NgClassBase.ngDirectiveDef = ngClassDirectiveDef;\n/**\n * \\@ngModule CommonModule\n *\n * \\@usageNotes\n * ```\n *     <some-element [ngClass]=\"'first second'\">...</some-element>\n *\n *     <some-element [ngClass]=\"['first', 'second']\">...</some-element>\n *\n *     <some-element [ngClass]=\"{'first': true, 'second': true, 'third': false}\">...</some-element>\n *\n *     <some-element [ngClass]=\"stringExp|arrayExp|objExp\">...</some-element>\n *\n *     <some-element [ngClass]=\"{'class1 class2 class3' : true}\">...</some-element>\n * ```\n *\n * \\@description\n *\n * Adds and removes CSS classes on an HTML element.\n *\n * The CSS classes are updated as follows, depending on the type of the expression evaluation:\n * - `string` - the CSS classes listed in the string (space delimited) are added,\n * - `Array` - the CSS classes declared as Array elements are added,\n * - `Object` - keys are CSS classes that get added when the expression given in the value\n *              evaluates to a truthy value, otherwise they are removed.\n *\n * \\@publicApi\n */\nclass NgClass extends NgClassBase {\n    /**\n     * @param {?} delegate\n     */\n    constructor(delegate) { super(delegate); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set klass(value) { this._delegate.setClass(value); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set ngClass(value) {\n        this._delegate.setNgClass(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() { this._delegate.applyChanges(); }\n}\nNgClass.decorators = [\n    { type: Directive, args: [{ selector: '[ngClass]', providers: [NgClassImplProvider] },] }\n];\n/** @nocollapse */\nNgClass.ctorParameters = () => [\n    { type: NgClassImpl }\n];\nNgClass.propDecorators = {\n    klass: [{ type: Input, args: ['class',] }],\n    ngClass: [{ type: Input, args: ['ngClass',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Instantiates a single {\\@link Component} type and inserts its Host View into current View.\n * `NgComponentOutlet` provides a declarative approach for dynamic component creation.\n *\n * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and\n * any existing component will get destroyed.\n *\n * \\@usageNotes\n *\n * ### Fine tune control\n *\n * You can control the component creation process by using the following optional attributes:\n *\n * * `ngComponentOutletInjector`: Optional custom {\\@link Injector} that will be used as parent for\n * the Component. Defaults to the injector of the current view container.\n *\n * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content\n * section of the component, if exists.\n *\n * * `ngComponentOutletNgModuleFactory`: Optional module factory to allow dynamically loading other\n * module, then load a component from that module.\n *\n * ### Syntax\n *\n * Simple\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression\"></ng-container>\n * ```\n *\n * Customized injector/content\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   injector: injectorExpression;\n *                                   content: contentNodesExpression;\">\n * </ng-container>\n * ```\n *\n * Customized ngModuleFactory\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   ngModuleFactory: moduleFactory;\">\n * </ng-container>\n * ```\n *\n * ### A simple example\n *\n * {\\@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}\n *\n * A more complete example with additional options:\n *\n * {\\@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}\n *\n * \\@publicApi\n * \\@ngModule CommonModule\n */\nclass NgComponentOutlet {\n    /**\n     * @param {?} _viewContainerRef\n     */\n    constructor(_viewContainerRef) {\n        this._viewContainerRef = _viewContainerRef;\n        this._componentRef = null;\n        this._moduleRef = null;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        this._viewContainerRef.clear();\n        this._componentRef = null;\n        if (this.ngComponentOutlet) {\n            /** @type {?} */\n            const elInjector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;\n            if (changes['ngComponentOutletNgModuleFactory']) {\n                if (this._moduleRef)\n                    this._moduleRef.destroy();\n                if (this.ngComponentOutletNgModuleFactory) {\n                    /** @type {?} */\n                    const parentModule = elInjector.get(NgModuleRef);\n                    this._moduleRef = this.ngComponentOutletNgModuleFactory.create(parentModule.injector);\n                }\n                else {\n                    this._moduleRef = null;\n                }\n            }\n            /** @type {?} */\n            const componentFactoryResolver = this._moduleRef ? this._moduleRef.componentFactoryResolver :\n                elInjector.get(ComponentFactoryResolver);\n            /** @type {?} */\n            const componentFactory = componentFactoryResolver.resolveComponentFactory(this.ngComponentOutlet);\n            this._componentRef = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, elInjector, this.ngComponentOutletContent);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._moduleRef)\n            this._moduleRef.destroy();\n    }\n}\nNgComponentOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[ngComponentOutlet]' },] }\n];\n/** @nocollapse */\nNgComponentOutlet.ctorParameters = () => [\n    { type: ViewContainerRef }\n];\nNgComponentOutlet.propDecorators = {\n    ngComponentOutlet: [{ type: Input }],\n    ngComponentOutletInjector: [{ type: Input }],\n    ngComponentOutletContent: [{ type: Input }],\n    ngComponentOutletNgModuleFactory: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@publicApi\n * @template T\n */\nclass NgForOfContext {\n    /**\n     * @param {?} $implicit\n     * @param {?} ngForOf\n     * @param {?} index\n     * @param {?} count\n     */\n    constructor($implicit, ngForOf, index, count) {\n        this.$implicit = $implicit;\n        this.ngForOf = ngForOf;\n        this.index = index;\n        this.count = count;\n    }\n    /**\n     * @return {?}\n     */\n    get first() { return this.index === 0; }\n    /**\n     * @return {?}\n     */\n    get last() { return this.index === this.count - 1; }\n    /**\n     * @return {?}\n     */\n    get even() { return this.index % 2 === 0; }\n    /**\n     * @return {?}\n     */\n    get odd() { return !this.even; }\n}\n/**\n * A [structural directive](guide/structural-directives) that renders\n * a template for each item in a collection.\n * The directive is placed on an element, which becomes the parent\n * of the cloned templates.\n *\n * The `ngForOf` directive is generally used in the\n * [shorthand form](guide/structural-directives#the-asterisk--prefix) `*ngFor`.\n * In this form, the template to be rendered for each iteration is the content\n * of an anchor element containing the directive.\n *\n * The following example shows the shorthand syntax with some options,\n * contained in an `<li>` element.\n *\n * ```\n * <li *ngFor=\"let item of items; index as i; trackBy: trackByFn\">...</li>\n * ```\n *\n * The shorthand form expands into a long form that uses the `ngForOf` selector\n * on an `<ng-template>` element.\n * The content of the `<ng-template>` element is the `<li>` element that held the\n * short-form directive.\n *\n * Here is the expanded version of the short-form example.\n *\n * ```\n * <ng-template ngFor let-item [ngForOf]=\"items\" let-i=\"index\" [ngForTrackBy]=\"trackByFn\">\n *   <li>...</li>\n * </ng-template>\n * ```\n *\n * Angular automatically expands the shorthand syntax as it compiles the template.\n * The context for each embedded view is logically merged to the current component\n * context according to its lexical position.\n *\n * When using the shorthand syntax, Angular allows only [one structural directive\n * on an element](guide/structural-directives#one-structural-directive-per-host-element).\n * If you want to iterate conditionally, for example,\n * put the `*ngIf` on a container element that wraps the `*ngFor` element.\n * For futher discussion, see\n * [Structural Directives](guide/structural-directives#one-per-element).\n *\n * \\@usageNotes\n *\n * ### Local variables\n *\n * `NgForOf` provides exported values that can be aliased to local variables.\n * For example:\n *\n *  ```\n * <li *ngFor=\"let user of userObservable | async as users; index as i; first as isFirst\">\n *    {{i}}/{{users.length}}. {{user}} <span *ngIf=\"isFirst\">default</span>\n * </li>\n * ```\n *\n * The following exported values can be aliased to local variables:\n *\n * - `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).\n * - `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is\n * more complex then a property access, for example when using the async pipe (`userStreams |\n * async`).\n * - `index: number`: The index of the current item in the iterable.\n * - `first: boolean`: True when the item is the first item in the iterable.\n * - `last: boolean`: True when the item is the last item in the iterable.\n * - `even: boolean`: True when the item has an even index in the iterable.\n * - `odd: boolean`: True when the item has an odd index in the iterable.\n *\n * ### Change propagation\n *\n * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:\n *\n * * When an item is added, a new instance of the template is added to the DOM.\n * * When an item is removed, its template instance is removed from the DOM.\n * * When items are reordered, their respective templates are reordered in the DOM.\n *\n * Angular uses object identity to track insertions and deletions within the iterator and reproduce\n * those changes in the DOM. This has important implications for animations and any stateful\n * controls that are present, such as `<input>` elements that accept user input. Inserted rows can\n * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state\n * such as user input.\n * For more on animations, see [Transitions and Triggers](guide/transition-and-triggers).\n *\n * The identities of elements in the iterator can change while the data does not.\n * This can happen, for example, if the iterator is produced from an RPC to the server, and that\n * RPC is re-run. Even if the data hasn't changed, the second response produces objects with\n * different identities, and Angular must tear down the entire DOM and rebuild it (as if all old\n * elements were deleted and all new elements inserted).\n *\n * To avoid this expensive operation, you can customize the default tracking algorithm.\n * by supplying the `trackBy` option to `NgForOf`.\n * `trackBy` takes a function that has two arguments: `index` and `item`.\n * If `trackBy` is given, Angular tracks changes by the return value of the function.\n *\n * @see [Structural Directives](guide/structural-directives)\n * \\@ngModule CommonModule\n * \\@publicApi\n * @template T\n */\nclass NgForOf {\n    /**\n     * @param {?} _viewContainer\n     * @param {?} _template\n     * @param {?} _differs\n     */\n    constructor(_viewContainer, _template, _differs) {\n        this._viewContainer = _viewContainer;\n        this._template = _template;\n        this._differs = _differs;\n        this._ngForOfDirty = true;\n        this._differ = null;\n    }\n    /**\n     * The value of the iterable expression, which can be used as a\n     * [template input variable](guide/structural-directives#template-input-variable).\n     * @param {?} ngForOf\n     * @return {?}\n     */\n    set ngForOf(ngForOf) {\n        this._ngForOf = ngForOf;\n        this._ngForOfDirty = true;\n    }\n    /**\n     * A function that defines how to track changes for items in the iterable.\n     *\n     * When items are added, moved, or removed in the iterable,\n     * the directive must re-render the appropriate DOM nodes.\n     * To minimize churn in the DOM, only nodes that have changed\n     * are re-rendered.\n     *\n     * By default, the change detector assumes that\n     * the object instance identifies the node in the iterable.\n     * When this function is supplied, the directive uses\n     * the result of calling this function to identify the item node,\n     * rather than the identity of the object itself.\n     *\n     * The function receives two inputs,\n     * the iteration index and the node object ID.\n     * @param {?} fn\n     * @return {?}\n     */\n    set ngForTrackBy(fn) {\n        if (isDevMode() && fn != null && typeof fn !== 'function') {\n            // TODO(vicb): use a log service once there is a public one available\n            if ((/** @type {?} */ (console)) && (/** @type {?} */ (console.warn))) {\n                console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}. ` +\n                    `See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.`);\n            }\n        }\n        this._trackByFn = fn;\n    }\n    /**\n     * @return {?}\n     */\n    get ngForTrackBy() { return this._trackByFn; }\n    /**\n     * A reference to the template that is stamped out for each item in the iterable.\n     * @see [template reference variable](guide/template-syntax#template-reference-variables--var-)\n     * @param {?} value\n     * @return {?}\n     */\n    set ngForTemplate(value) {\n        // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1\n        // The current type is too restrictive; a template that just uses index, for example,\n        // should be acceptable.\n        if (value) {\n            this._template = value;\n        }\n    }\n    /**\n     * Applies the changes when needed.\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this._ngForOfDirty) {\n            this._ngForOfDirty = false;\n            // React on ngForOf changes only once all inputs have been initialized\n            /** @type {?} */\n            const value = this._ngForOf;\n            if (!this._differ && value) {\n                try {\n                    this._differ = this._differs.find(value).create(this.ngForTrackBy);\n                }\n                catch (_a) {\n                    throw new Error(`Cannot find a differ supporting object '${value}' of type '${getTypeName(value)}'. NgFor only supports binding to Iterables such as Arrays.`);\n                }\n            }\n        }\n        if (this._differ) {\n            /** @type {?} */\n            const changes = this._differ.diff(this._ngForOf);\n            if (changes)\n                this._applyChanges(changes);\n        }\n    }\n    /**\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    _applyChanges(changes) {\n        /** @type {?} */\n        const insertTuples = [];\n        changes.forEachOperation((/**\n         * @param {?} item\n         * @param {?} adjustedPreviousIndex\n         * @param {?} currentIndex\n         * @return {?}\n         */\n        (item, adjustedPreviousIndex, currentIndex) => {\n            if (item.previousIndex == null) {\n                /** @type {?} */\n                const view = this._viewContainer.createEmbeddedView(this._template, new NgForOfContext((/** @type {?} */ (null)), this._ngForOf, -1, -1), currentIndex);\n                /** @type {?} */\n                const tuple = new RecordViewTuple(item, view);\n                insertTuples.push(tuple);\n            }\n            else if (currentIndex == null) {\n                this._viewContainer.remove(adjustedPreviousIndex);\n            }\n            else {\n                /** @type {?} */\n                const view = (/** @type {?} */ (this._viewContainer.get(adjustedPreviousIndex)));\n                this._viewContainer.move(view, currentIndex);\n                /** @type {?} */\n                const tuple = new RecordViewTuple(item, (/** @type {?} */ (view)));\n                insertTuples.push(tuple);\n            }\n        }));\n        for (let i = 0; i < insertTuples.length; i++) {\n            this._perViewChange(insertTuples[i].view, insertTuples[i].record);\n        }\n        for (let i = 0, ilen = this._viewContainer.length; i < ilen; i++) {\n            /** @type {?} */\n            const viewRef = (/** @type {?} */ (this._viewContainer.get(i)));\n            viewRef.context.index = i;\n            viewRef.context.count = ilen;\n            viewRef.context.ngForOf = this._ngForOf;\n        }\n        changes.forEachIdentityChange((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => {\n            /** @type {?} */\n            const viewRef = (/** @type {?} */ (this._viewContainer.get(record.currentIndex)));\n            viewRef.context.$implicit = record.item;\n        }));\n    }\n    /**\n     * @private\n     * @param {?} view\n     * @param {?} record\n     * @return {?}\n     */\n    _perViewChange(view, record) {\n        view.context.$implicit = record.item;\n    }\n    /**\n     * Asserts the correct type of the context for the template that `NgForOf` will render.\n     *\n     * The presence of this method is a signal to the Ivy template type-check compiler that the\n     * `NgForOf` structural directive renders its template with a specific context type.\n     * @template T\n     * @param {?} dir\n     * @param {?} ctx\n     * @return {?}\n     */\n    static ngTemplateContextGuard(dir, ctx) {\n        return true;\n    }\n}\nNgForOf.decorators = [\n    { type: Directive, args: [{ selector: '[ngFor][ngForOf]' },] }\n];\n/** @nocollapse */\nNgForOf.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\nNgForOf.propDecorators = {\n    ngForOf: [{ type: Input }],\n    ngForTrackBy: [{ type: Input }],\n    ngForTemplate: [{ type: Input }]\n};\n/**\n * @template T\n */\nclass RecordViewTuple {\n    /**\n     * @param {?} record\n     * @param {?} view\n     */\n    constructor(record, view) {\n        this.record = record;\n        this.view = view;\n    }\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction getTypeName(type) {\n    return type['name'] || typeof type;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A structural directive that conditionally includes a template based on the value of\n * an expression coerced to Boolean.\n * When the expression evaluates to true, Angular renders the template\n * provided in a `then` clause, and when  false or null,\n * Angular renders the template provided in an optional `else` clause. The default\n * template for the `else` clause is blank.\n *\n * A [shorthand form](guide/structural-directives#the-asterisk--prefix) of the directive,\n * `*ngIf=\"condition\"`, is generally used, provided\n * as an attribute of the anchor element for the inserted template.\n * Angular expands this into a more explicit version, in which the anchor element\n * is contained in an `<ng-template>` element.\n *\n * Simple form with shorthand syntax:\n *\n * ```\n * <div *ngIf=\"condition\">Content to render when condition is true.</div>\n * ```\n *\n * Simple form with expanded syntax:\n *\n * ```\n * <ng-template [ngIf]=\"condition\"><div>Content to render when condition is\n * true.</div></ng-template>\n * ```\n *\n * Form with an \"else\" block:\n *\n * ```\n * <div *ngIf=\"condition; else elseBlock\">Content to render when condition is true.</div>\n * <ng-template #elseBlock>Content to render when condition is false.</ng-template>\n * ```\n *\n * Shorthand form with \"then\" and \"else\" blocks:\n *\n * ```\n * <div *ngIf=\"condition; then thenBlock else elseBlock\"></div>\n * <ng-template #thenBlock>Content to render when condition is true.</ng-template>\n * <ng-template #elseBlock>Content to render when condition is false.</ng-template>\n * ```\n *\n * Form with storing the value locally:\n *\n * ```\n * <div *ngIf=\"condition as value; else elseBlock\">{{value}}</div>\n * <ng-template #elseBlock>Content to render when value is null.</ng-template>\n * ```\n *\n * \\@usageNotes\n *\n * The `*ngIf` directive is most commonly used to conditionally show an inline template,\n * as seen in the following  example.\n * The default `else` template is blank.\n *\n * {\\@example common/ngIf/ts/module.ts region='NgIfSimple'}\n *\n * ### Showing an alternative template using `else`\n *\n * To display a template when `expression` evaluates to false, use an `else` template\n * binding as shown in the following example.\n * The `else` binding points to an `<ng-template>`  element labeled `#elseBlock`.\n * The template can be defined anywhere in the component view, but is typically placed right after\n * `ngIf` for readability.\n *\n * {\\@example common/ngIf/ts/module.ts region='NgIfElse'}\n *\n * ### Using an external `then` template\n *\n * In the previous example, the then-clause template is specified inline, as the content of the\n * tag that contains the `ngIf` directive. You can also specify a template that is defined\n * externally, by referencing a labeled `<ng-template>` element. When you do this, you can\n * change which template to use at runtime, as shown in the following example.\n *\n * {\\@example common/ngIf/ts/module.ts region='NgIfThenElse'}\n *\n * ### Storing a conditional result in a variable\n *\n * You might want to show a set of properties from the same object. If you are waiting\n * for asynchronous data, the object can be undefined.\n * In this case, you can use `ngIf` and store the result of the condition in a local\n * variable as shown in the the following example.\n *\n * {\\@example common/ngIf/ts/module.ts region='NgIfAs'}\n *\n * This code uses only one `AsyncPipe`, so only one subscription is created.\n * The conditional statement stores the result of `userStream|async` in the local variable `user`.\n * You can then bind the local `user` repeatedly.\n *\n * The conditional displays the data only if `userStream` returns a value,\n * so you don't need to use the\n * [safe-navigation-operator](guide/template-syntax#safe-navigation-operator) (`?.`)\n * to guard against null values when accessing properties.\n * You can display an alternative template while waiting for the data.\n *\n * ### Shorthand syntax\n *\n * The shorthand syntax `*ngIf` expands into two separate template specifications\n * for the \"then\" and \"else\" clauses. For example, consider the following shorthand statement,\n * that is meant to show a loading page while waiting for data to be loaded.\n *\n * ```\n * <div class=\"hero-list\" *ngIf=\"heroes else loading\">\n *  ...\n * </div>\n *\n * <ng-template #loading>\n *  <div>Loading...</div>\n * </ng-template>\n * ```\n *\n * You can see that the \"else\" clause references the `<ng-template>`\n * with the `#loading` label, and the template for the \"then\" clause\n * is provided as the content of the anchor element.\n *\n * However, when Angular expands the shorthand syntax, it creates\n * another `<ng-template>` tag, with `ngIf` and `ngIfElse` directives.\n * The anchor element containing the template for the \"then\" clause becomes\n * the content of this unlabeled `<ng-template>` tag.\n *\n * ```\n * <ng-template [ngIf]=\"hero-list\" [ngIfElse]=\"loading\">\n *  <div class=\"hero-list\">\n *   ...\n *  </div>\n * </ng-template>\n *\n * <ng-template #loading>\n *  <div>Loading...</div>\n * </ng-template>\n * ```\n *\n * The presence of the implicit template object has implications for the nesting of\n * structural directives. For more on this subject, see\n * [Structural Directives](https://angular.io/guide/structural-directives#one-per-element).\n *\n * \\@ngModule CommonModule\n * \\@publicApi\n */\nclass NgIf {\n    /**\n     * @param {?} _viewContainer\n     * @param {?} templateRef\n     */\n    constructor(_viewContainer, templateRef) {\n        this._viewContainer = _viewContainer;\n        this._context = new NgIfContext();\n        this._thenTemplateRef = null;\n        this._elseTemplateRef = null;\n        this._thenViewRef = null;\n        this._elseViewRef = null;\n        this._thenTemplateRef = templateRef;\n    }\n    /**\n     * The Boolean expression to evaluate as the condition for showing a template.\n     * @param {?} condition\n     * @return {?}\n     */\n    set ngIf(condition) {\n        this._context.$implicit = this._context.ngIf = condition;\n        this._updateView();\n    }\n    /**\n     * A template to show if the condition expression evaluates to true.\n     * @param {?} templateRef\n     * @return {?}\n     */\n    set ngIfThen(templateRef) {\n        assertTemplate('ngIfThen', templateRef);\n        this._thenTemplateRef = templateRef;\n        this._thenViewRef = null; // clear previous view if any.\n        this._updateView();\n    }\n    /**\n     * A template to show if the condition expression evaluates to false.\n     * @param {?} templateRef\n     * @return {?}\n     */\n    set ngIfElse(templateRef) {\n        assertTemplate('ngIfElse', templateRef);\n        this._elseTemplateRef = templateRef;\n        this._elseViewRef = null; // clear previous view if any.\n        this._updateView();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _updateView() {\n        if (this._context.$implicit) {\n            if (!this._thenViewRef) {\n                this._viewContainer.clear();\n                this._elseViewRef = null;\n                if (this._thenTemplateRef) {\n                    this._thenViewRef =\n                        this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);\n                }\n            }\n        }\n        else {\n            if (!this._elseViewRef) {\n                this._viewContainer.clear();\n                this._thenViewRef = null;\n                if (this._elseTemplateRef) {\n                    this._elseViewRef =\n                        this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);\n                }\n            }\n        }\n    }\n    /**\n     * Assert the correct type of the expression bound to the `ngIf` input within the template.\n     *\n     * The presence of this method is a signal to the Ivy template type check compiler that when the\n     * `NgIf` structural directive renders its template, the type of the expression bound to `ngIf`\n     * should be narrowed in some way. For `NgIf`, it is narrowed to be non-null, which allows the\n     * strictNullChecks feature of TypeScript to work with `NgIf`.\n     * @template E\n     * @param {?} dir\n     * @param {?} expr\n     * @return {?}\n     */\n    static ngTemplateGuard_ngIf(dir, expr) { return true; }\n}\nNgIf.decorators = [\n    { type: Directive, args: [{ selector: '[ngIf]' },] }\n];\n/** @nocollapse */\nNgIf.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: TemplateRef }\n];\nNgIf.propDecorators = {\n    ngIf: [{ type: Input }],\n    ngIfThen: [{ type: Input }],\n    ngIfElse: [{ type: Input }]\n};\n/**\n * \\@publicApi\n */\nclass NgIfContext {\n    constructor() {\n        this.$implicit = null;\n        this.ngIf = null;\n    }\n}\n/**\n * @param {?} property\n * @param {?} templateRef\n * @return {?}\n */\nfunction assertTemplate(property, templateRef) {\n    /** @type {?} */\n    const isTemplateRefOrNull = !!(!templateRef || templateRef.createEmbeddedView);\n    if (!isTemplateRefOrNull) {\n        throw new Error(`${property} must be a TemplateRef, but received '${ɵstringify(templateRef)}'.`);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass SwitchView {\n    /**\n     * @param {?} _viewContainerRef\n     * @param {?} _templateRef\n     */\n    constructor(_viewContainerRef, _templateRef) {\n        this._viewContainerRef = _viewContainerRef;\n        this._templateRef = _templateRef;\n        this._created = false;\n    }\n    /**\n     * @return {?}\n     */\n    create() {\n        this._created = true;\n        this._viewContainerRef.createEmbeddedView(this._templateRef);\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        this._created = false;\n        this._viewContainerRef.clear();\n    }\n    /**\n     * @param {?} created\n     * @return {?}\n     */\n    enforceState(created) {\n        if (created && !this._created) {\n            this.create();\n        }\n        else if (!created && this._created) {\n            this.destroy();\n        }\n    }\n}\n/**\n * \\@ngModule CommonModule\n *\n * \\@description A structural directive that adds or removes templates (displaying or hiding views)\n * when the next match expression matches the switch expression.\n *\n * The `[ngSwitch]` directive on a container specifies an expression to match against.\n * The expressions to match are provided by `ngSwitchCase` directives on views within the container.\n * - Every view that matches is rendered.\n * - If there are no matches, a view with the `ngSwitchDefault` directive is rendered.\n * - Elements within the `[NgSwitch]` statement but outside of any `NgSwitchCase`\n * or `ngSwitchDefault` directive are preserved at the location.\n *\n * \\@usageNotes\n * Define a container element for the directive, and specify the switch expression\n * to match against as an attribute:\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n * ```\n *\n * Within the container, `*ngSwitchCase` statements specify the match expressions\n * as attributes. Include `*ngSwitchDefault` as the final case.\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *    <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n * ...\n *    <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * ### Usage Examples\n *\n * The following example shows how to use more than one case to display the same view:\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <!-- the same view can be shown in more than one case -->\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *   <some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\n *   <some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\n *   <!--default case when there are no matches -->\n *   <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * The following example shows how cases can be nested:\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *       <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *       <some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\n *       <some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\n *       <ng-container *ngSwitchCase=\"match_expression_3\">\n *         <!-- use a ng-container to group multiple root nodes -->\n *         <inner-element></inner-element>\n *         <inner-other-element></inner-other-element>\n *       </ng-container>\n *       <some-element *ngSwitchDefault>...</some-element>\n *     </container-element>\n * ```\n *\n * \\@publicApi\n * @see `NgSwitchCase`\n * @see `NgSwitchDefault`\n * @see [Stuctural Directives](guide/structural-directives)\n *\n */\nclass NgSwitch {\n    constructor() {\n        this._defaultUsed = false;\n        this._caseCount = 0;\n        this._lastCaseCheckIndex = 0;\n        this._lastCasesMatched = false;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set ngSwitch(newValue) {\n        this._ngSwitch = newValue;\n        if (this._caseCount === 0) {\n            this._updateDefaultCases(true);\n        }\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _addCase() { return this._caseCount++; }\n    /**\n     * \\@internal\n     * @param {?} view\n     * @return {?}\n     */\n    _addDefault(view) {\n        if (!this._defaultViews) {\n            this._defaultViews = [];\n        }\n        this._defaultViews.push(view);\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _matchCase(value) {\n        /** @type {?} */\n        const matched = value == this._ngSwitch;\n        this._lastCasesMatched = this._lastCasesMatched || matched;\n        this._lastCaseCheckIndex++;\n        if (this._lastCaseCheckIndex === this._caseCount) {\n            this._updateDefaultCases(!this._lastCasesMatched);\n            this._lastCaseCheckIndex = 0;\n            this._lastCasesMatched = false;\n        }\n        return matched;\n    }\n    /**\n     * @private\n     * @param {?} useDefault\n     * @return {?}\n     */\n    _updateDefaultCases(useDefault) {\n        if (this._defaultViews && useDefault !== this._defaultUsed) {\n            this._defaultUsed = useDefault;\n            for (let i = 0; i < this._defaultViews.length; i++) {\n                /** @type {?} */\n                const defaultView = this._defaultViews[i];\n                defaultView.enforceState(useDefault);\n            }\n        }\n    }\n}\nNgSwitch.decorators = [\n    { type: Directive, args: [{ selector: '[ngSwitch]' },] }\n];\nNgSwitch.propDecorators = {\n    ngSwitch: [{ type: Input }]\n};\n/**\n * \\@ngModule CommonModule\n *\n * \\@description\n * Provides a switch case expression to match against an enclosing `ngSwitch` expression.\n * When the expressions match, the given `NgSwitchCase` template is rendered.\n * If multiple match expressions match the switch expression value, all of them are displayed.\n *\n * \\@usageNotes\n *\n * Within a switch container, `*ngSwitchCase` statements specify the match expressions\n * as attributes. Include `*ngSwitchDefault` as the final case.\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *   ...\n *   <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * Each switch-case statement contains an in-line HTML template or template reference\n * that defines the subtree to be selected if the value of the match expression\n * matches the value of the switch expression.\n *\n * Unlike JavaScript, which uses strict equality, Angular uses loose equality.\n * This means that the empty string, `\"\"` matches 0.\n *\n * \\@publicApi\n * @see `NgSwitch`\n * @see `NgSwitchDefault`\n *\n */\nclass NgSwitchCase {\n    /**\n     * @param {?} viewContainer\n     * @param {?} templateRef\n     * @param {?} ngSwitch\n     */\n    constructor(viewContainer, templateRef, ngSwitch) {\n        this.ngSwitch = ngSwitch;\n        ngSwitch._addCase();\n        this._view = new SwitchView(viewContainer, templateRef);\n    }\n    /**\n     * Performs case matching. For internal use only.\n     * @return {?}\n     */\n    ngDoCheck() { this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase)); }\n}\nNgSwitchCase.decorators = [\n    { type: Directive, args: [{ selector: '[ngSwitchCase]' },] }\n];\n/** @nocollapse */\nNgSwitchCase.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: TemplateRef },\n    { type: NgSwitch, decorators: [{ type: Host }] }\n];\nNgSwitchCase.propDecorators = {\n    ngSwitchCase: [{ type: Input }]\n};\n/**\n * \\@ngModule CommonModule\n *\n * \\@description\n *\n * Creates a view that is rendered when no `NgSwitchCase` expressions\n * match the `NgSwitch` expression.\n * This statement should be the final case in an `NgSwitch`.\n *\n * \\@publicApi\n * @see `NgSwitch`\n * @see `NgSwitchCase`\n *\n */\nclass NgSwitchDefault {\n    /**\n     * @param {?} viewContainer\n     * @param {?} templateRef\n     * @param {?} ngSwitch\n     */\n    constructor(viewContainer, templateRef, ngSwitch) {\n        ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));\n    }\n}\nNgSwitchDefault.decorators = [\n    { type: Directive, args: [{ selector: '[ngSwitchDefault]' },] }\n];\n/** @nocollapse */\nNgSwitchDefault.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: TemplateRef },\n    { type: NgSwitch, decorators: [{ type: Host }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@ngModule CommonModule\n *\n * \\@usageNotes\n * ```\n * <some-element [ngPlural]=\"value\">\n *   <ng-template ngPluralCase=\"=0\">there is nothing</ng-template>\n *   <ng-template ngPluralCase=\"=1\">there is one</ng-template>\n *   <ng-template ngPluralCase=\"few\">there are a few</ng-template>\n * </some-element>\n * ```\n *\n * \\@description\n *\n * Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.\n *\n * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees\n * that match the switch expression's pluralization category.\n *\n * To use this directive you must provide a container element that sets the `[ngPlural]` attribute\n * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their\n * expression:\n * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value\n *   matches the switch expression exactly,\n * - otherwise, the view will be treated as a \"category match\", and will only display if exact\n *   value matches aren't found and the value maps to its category for the defined locale.\n *\n * See http://cldr.unicode.org/index/cldr-spec/plural-rules\n *\n * \\@publicApi\n */\nclass NgPlural {\n    /**\n     * @param {?} _localization\n     */\n    constructor(_localization) {\n        this._localization = _localization;\n        this._caseViews = {};\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set ngPlural(value) {\n        this._switchValue = value;\n        this._updateView();\n    }\n    /**\n     * @param {?} value\n     * @param {?} switchView\n     * @return {?}\n     */\n    addCase(value, switchView) { this._caseViews[value] = switchView; }\n    /**\n     * @private\n     * @return {?}\n     */\n    _updateView() {\n        this._clearViews();\n        /** @type {?} */\n        const cases = Object.keys(this._caseViews);\n        /** @type {?} */\n        const key = getPluralCategory(this._switchValue, cases, this._localization);\n        this._activateView(this._caseViews[key]);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _clearViews() {\n        if (this._activeView)\n            this._activeView.destroy();\n    }\n    /**\n     * @private\n     * @param {?} view\n     * @return {?}\n     */\n    _activateView(view) {\n        if (view) {\n            this._activeView = view;\n            this._activeView.create();\n        }\n    }\n}\nNgPlural.decorators = [\n    { type: Directive, args: [{ selector: '[ngPlural]' },] }\n];\n/** @nocollapse */\nNgPlural.ctorParameters = () => [\n    { type: NgLocalization }\n];\nNgPlural.propDecorators = {\n    ngPlural: [{ type: Input }]\n};\n/**\n * \\@ngModule CommonModule\n *\n * \\@description\n *\n * Creates a view that will be added/removed from the parent {\\@link NgPlural} when the\n * given expression matches the plural expression according to CLDR rules.\n *\n * \\@usageNotes\n * ```\n * <some-element [ngPlural]=\"value\">\n *   <ng-template ngPluralCase=\"=0\">...</ng-template>\n *   <ng-template ngPluralCase=\"other\">...</ng-template>\n * </some-element>\n * ```\n *\n * See {\\@link NgPlural} for more details and example.\n *\n * \\@publicApi\n */\nclass NgPluralCase {\n    /**\n     * @param {?} value\n     * @param {?} template\n     * @param {?} viewContainer\n     * @param {?} ngPlural\n     */\n    constructor(value, template, viewContainer, ngPlural) {\n        this.value = value;\n        /** @type {?} */\n        const isANumber = !isNaN(Number(value));\n        ngPlural.addCase(isANumber ? `=${value}` : value, new SwitchView(viewContainer, template));\n    }\n}\nNgPluralCase.decorators = [\n    { type: Directive, args: [{ selector: '[ngPluralCase]' },] }\n];\n/** @nocollapse */\nNgPluralCase.ctorParameters = () => [\n    { type: String, decorators: [{ type: Attribute, args: ['ngPluralCase',] }] },\n    { type: TemplateRef },\n    { type: ViewContainerRef },\n    { type: NgPlural, decorators: [{ type: Host }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used as a token for an injected service within the NgStyle directive.\n *\n * NgStyle behaves differenly whether or not VE is being used or not. If\n * present then the legacy ngClass diffing algorithm will be used as an\n * injected service. Otherwise the new diffing algorithm (which delegates\n * to the `[style]` binding) will be used. This toggle behavior is done so\n * via the ivy_switch mechanism.\n * @abstract\n */\nclass NgStyleImpl {\n}\nclass NgStyleR2Impl {\n    /**\n     * @param {?} _ngEl\n     * @param {?} _differs\n     * @param {?} _renderer\n     */\n    constructor(_ngEl, _differs, _renderer) {\n        this._ngEl = _ngEl;\n        this._differs = _differs;\n        this._renderer = _renderer;\n    }\n    /**\n     * @return {?}\n     */\n    getValue() { return null; }\n    /**\n     * A map of style properties, specified as colon-separated\n     * key-value pairs.\n     * * The key is a style name, with an optional `.<unit>` suffix\n     *    (such as 'top.px', 'font-style.em').\n     * * The value is an expression to be evaluated.\n     * @param {?} values\n     * @return {?}\n     */\n    setNgStyle(values) {\n        this._ngStyle = values;\n        if (!this._differ && values) {\n            this._differ = this._differs.find(values).create();\n        }\n    }\n    /**\n     * Applies the new styles if needed.\n     * @return {?}\n     */\n    applyChanges() {\n        if (this._differ) {\n            /** @type {?} */\n            const changes = this._differ.diff(this._ngStyle);\n            if (changes) {\n                this._applyChanges(changes);\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    _applyChanges(changes) {\n        changes.forEachRemovedItem((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => this._setStyle(record.key, null)));\n        changes.forEachAddedItem((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => this._setStyle(record.key, record.currentValue)));\n        changes.forEachChangedItem((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => this._setStyle(record.key, record.currentValue)));\n    }\n    /**\n     * @private\n     * @param {?} nameAndUnit\n     * @param {?} value\n     * @return {?}\n     */\n    _setStyle(nameAndUnit, value) {\n        const [name, unit] = nameAndUnit.split('.');\n        value = value != null && unit ? `${value}${unit}` : value;\n        if (value != null) {\n            this._renderer.setStyle(this._ngEl.nativeElement, name, (/** @type {?} */ (value)));\n        }\n        else {\n            this._renderer.removeStyle(this._ngEl.nativeElement, name);\n        }\n    }\n}\nNgStyleR2Impl.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nNgStyleR2Impl.ctorParameters = () => [\n    { type: ElementRef },\n    { type: KeyValueDiffers },\n    { type: Renderer2 }\n];\nclass NgStyleR3Impl {\n    constructor() {\n        this._differ = new StylingDiffer('NgStyle', 8 /* AllowUnits */);\n        this._value = null;\n    }\n    /**\n     * @return {?}\n     */\n    getValue() { return this._value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    setNgStyle(value) { this._differ.setValue(value); }\n    /**\n     * @return {?}\n     */\n    applyChanges() {\n        if (this._differ.hasValueChanged()) {\n            this._value = this._differ.value;\n        }\n    }\n}\nNgStyleR3Impl.decorators = [\n    { type: Injectable }\n];\n// the implementation for both NgClassR2Impl and NgClassR3Impl are\n// not ivy_switch'd away, instead they are only hooked up into the\n// DI via NgStyle's directive's provider property.\n/** @type {?} */\nconst NgStyleImplProvider__PRE_R3__ = {\n    provide: NgStyleImpl,\n    useClass: NgStyleR2Impl\n};\n/** @type {?} */\nconst NgStyleImplProvider__POST_R3__ = {\n    provide: NgStyleImpl,\n    useClass: NgStyleR3Impl\n};\n/** @type {?} */\nconst NgStyleImplProvider = NgStyleImplProvider__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/*\n * NgStyle (as well as NgClass) behaves differently when loaded in the VE and when not.\n *\n * If the VE is present (which is for older versions of Angular) then NgStyle will inject\n * the legacy diffing algorithm as a service and delegate all styling changes to that.\n *\n * If the VE is not present then NgStyle will normalize (through the injected service) and\n * then write all styling changes to the `[style]` binding directly (through a host binding).\n * Then Angular will notice the host binding change and treat the changes as styling\n * changes and apply them via the core styling instructions that exist within Angular.\n */\n// used when the VE is present\n/** @type {?} */\nconst ngStyleDirectiveDef__PRE_R3__ = undefined;\n// used when the VE is not present (note the directive will\n// never be instantiated normally because it is apart of a\n// base class)\nconst ɵ0$1 = /**\n * @return {?}\n */\nfunction () { }, ɵ1$1 = /**\n * @return {?}\n */\n() => { }, ɵ2$1 = /**\n * @param {?} rf\n * @param {?} ctx\n * @param {?} elIndex\n * @return {?}\n */\nfunction (rf, ctx, elIndex) {\n    if (rf & 1 /* Create */) {\n        ɵɵelementHostStyling();\n    }\n    if (rf & 2 /* Update */) {\n        ɵɵelementHostStylingMap(null, ctx.getValue());\n        ɵɵelementHostStylingApply();\n    }\n};\n/** @type {?} */\nconst ngStyleDirectiveDef__POST_R3__ = ɵɵdefineDirective({\n    type: (/** @type {?} */ ((ɵ0$1))),\n    selectors: (/** @type {?} */ (null)),\n    factory: (ɵ1$1),\n    hostBindings: (ɵ2$1)\n});\n/** @type {?} */\nconst ngStyleDirectiveDef = ngStyleDirectiveDef__PRE_R3__;\n/**\n * Serves as the base non-VE container for NgStyle.\n *\n * While this is a base class that NgStyle extends from, the\n * class itself acts as a container for non-VE code to setup\n * a link to the `[style]` host binding (via the static\n * `ngDirectiveDef` property on the class).\n *\n * Note that the `ngDirectiveDef` property's code is switched\n * depending if VE is present or not (this allows for the\n * binding code to be set only for newer versions of Angular).\n *\n * \\@publicApi\n */\nclass NgStyleBase {\n    /**\n     * @param {?} _delegate\n     */\n    constructor(_delegate) {\n        this._delegate = _delegate;\n    }\n    /**\n     * @return {?}\n     */\n    getValue() { return this._delegate.getValue(); }\n}\n/** @nocollapse */ NgStyleBase.ngDirectiveDef = ngStyleDirectiveDef;\n/**\n * \\@ngModule CommonModule\n *\n * \\@usageNotes\n *\n * Set the font of the containing element to the result of an expression.\n *\n * ```\n * <some-element [ngStyle]=\"{'font-style': styleExp}\">...</some-element>\n * ```\n *\n * Set the width of the containing element to a pixel value returned by an expression.\n *\n * ```\n * <some-element [ngStyle]=\"{'max-width.px': widthExp}\">...</some-element>\n * ```\n *\n * Set a collection of style values using an expression that returns key-value pairs.\n *\n * ```\n * <some-element [ngStyle]=\"objExp\">...</some-element>\n * ```\n *\n * \\@description\n *\n * An attribute directive that updates styles for the containing HTML element.\n * Sets one or more style properties, specified as colon-separated key-value pairs.\n * The key is a style name, with an optional `.<unit>` suffix\n * (such as 'top.px', 'font-style.em').\n * The value is an expression to be evaluated.\n * The resulting non-null value, expressed in the given unit,\n * is assigned to the given style property.\n * If the result of evaluation is null, the corresponding style is removed.\n *\n * \\@publicApi\n */\nclass NgStyle extends NgStyleBase {\n    /**\n     * @param {?} delegate\n     */\n    constructor(delegate) { super(delegate); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set ngStyle(value) { this._delegate.setNgStyle(value); }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() { this._delegate.applyChanges(); }\n}\nNgStyle.decorators = [\n    { type: Directive, args: [{ selector: '[ngStyle]', providers: [NgStyleImplProvider] },] }\n];\n/** @nocollapse */\nNgStyle.ctorParameters = () => [\n    { type: NgStyleImpl }\n];\nNgStyle.propDecorators = {\n    ngStyle: [{ type: Input, args: ['ngStyle',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@ngModule CommonModule\n *\n * \\@description\n *\n * Inserts an embedded view from a prepared `TemplateRef`.\n *\n * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.\n * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding\n * by the local template `let` declarations.\n *\n * \\@usageNotes\n * ```\n * <ng-container *ngTemplateOutlet=\"templateRefExp; context: contextExp\"></ng-container>\n * ```\n *\n * Using the key `$implicit` in the context object will set its value as default.\n *\n * ### Example\n *\n * {\\@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}\n *\n * \\@publicApi\n */\nclass NgTemplateOutlet {\n    /**\n     * @param {?} _viewContainerRef\n     */\n    constructor(_viewContainerRef) {\n        this._viewContainerRef = _viewContainerRef;\n        this._viewRef = null;\n        /**\n         * A context object to attach to the {\\@link EmbeddedViewRef}. This should be an\n         * object, the object's keys will be available for binding by the local template `let`\n         * declarations.\n         * Using the key `$implicit` in the context object will set its value as default.\n         */\n        this.ngTemplateOutletContext = null;\n        /**\n         * A string defining the template reference and optionally the context object for the template.\n         */\n        this.ngTemplateOutlet = null;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const recreateView = this._shouldRecreateView(changes);\n        if (recreateView) {\n            if (this._viewRef) {\n                this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));\n            }\n            if (this.ngTemplateOutlet) {\n                this._viewRef = this._viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, this.ngTemplateOutletContext);\n            }\n        }\n        else {\n            if (this._viewRef && this.ngTemplateOutletContext) {\n                this._updateExistingContext(this.ngTemplateOutletContext);\n            }\n        }\n    }\n    /**\n     * We need to re-create existing embedded view if:\n     * - templateRef has changed\n     * - context has changes\n     *\n     * We mark context object as changed when the corresponding object\n     * shape changes (new properties are added or existing properties are removed).\n     * In other words we consider context with the same properties as \"the same\" even\n     * if object reference changes (see https://github.com/angular/angular/issues/13407).\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    _shouldRecreateView(changes) {\n        /** @type {?} */\n        const ctxChange = changes['ngTemplateOutletContext'];\n        return !!changes['ngTemplateOutlet'] || (ctxChange && this._hasContextShapeChanged(ctxChange));\n    }\n    /**\n     * @private\n     * @param {?} ctxChange\n     * @return {?}\n     */\n    _hasContextShapeChanged(ctxChange) {\n        /** @type {?} */\n        const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n        /** @type {?} */\n        const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n        if (prevCtxKeys.length === currCtxKeys.length) {\n            for (let propName of currCtxKeys) {\n                if (prevCtxKeys.indexOf(propName) === -1) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    /**\n     * @private\n     * @param {?} ctx\n     * @return {?}\n     */\n    _updateExistingContext(ctx) {\n        for (let propName of Object.keys(ctx)) {\n            ((/** @type {?} */ ((/** @type {?} */ (this._viewRef)).context)))[propName] = ((/** @type {?} */ (this.ngTemplateOutletContext)))[propName];\n        }\n    }\n}\nNgTemplateOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[ngTemplateOutlet]' },] }\n];\n/** @nocollapse */\nNgTemplateOutlet.ctorParameters = () => [\n    { type: ViewContainerRef }\n];\nNgTemplateOutlet.propDecorators = {\n    ngTemplateOutletContext: [{ type: Input }],\n    ngTemplateOutlet: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A collection of Angular directives that are likely to be used in each and every Angular\n * application.\n * @type {?}\n */\nconst COMMON_DIRECTIVES = [\n    NgClass,\n    NgComponentOutlet,\n    NgForOf,\n    NgIf,\n    NgTemplateOutlet,\n    NgStyle,\n    NgSwitch,\n    NgSwitchCase,\n    NgSwitchDefault,\n    NgPlural,\n    NgPluralCase,\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} type\n * @param {?} value\n * @return {?}\n */\nfunction invalidPipeArgumentError(type, value) {\n    return Error(`InvalidPipeArgument: '${value}' for pipe '${ɵstringify(type)}'`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NumberFormatter {\n    /**\n     * @param {?} num\n     * @param {?} locale\n     * @param {?} style\n     * @param {?=} opts\n     * @return {?}\n     */\n    static format(num, locale, style, opts = {}) {\n        const { minimumIntegerDigits, minimumFractionDigits, maximumFractionDigits, currency, currencyAsSymbol = false } = opts;\n        /** @type {?} */\n        const options = {\n            minimumIntegerDigits,\n            minimumFractionDigits,\n            maximumFractionDigits,\n            style: NumberFormatStyle[style].toLowerCase()\n        };\n        if (style == NumberFormatStyle.Currency) {\n            options.currency = typeof currency == 'string' ? currency : undefined;\n            options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';\n        }\n        return new Intl.NumberFormat(locale, options).format(num);\n    }\n}\n/** @type {?} */\nconst DATE_FORMATS_SPLIT$1 = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;\n/** @type {?} */\nconst PATTERN_ALIASES = {\n    // Keys are quoted so they do not get renamed during closure compilation.\n    'yMMMdjms': datePartGetterFactory(combine([\n        digitCondition('year', 1),\n        nameCondition('month', 3),\n        digitCondition('day', 1),\n        digitCondition('hour', 1),\n        digitCondition('minute', 1),\n        digitCondition('second', 1),\n    ])),\n    'yMdjm': datePartGetterFactory(combine([\n        digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1),\n        digitCondition('hour', 1), digitCondition('minute', 1)\n    ])),\n    'yMMMMEEEEd': datePartGetterFactory(combine([\n        digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4),\n        digitCondition('day', 1)\n    ])),\n    'yMMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),\n    'yMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),\n    'yMd': datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),\n    'jms': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),\n    'jm': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))\n};\n/** @type {?} */\nconst DATE_FORMATS$1 = {\n    // Keys are quoted so they do not get renamed.\n    'yyyy': datePartGetterFactory(digitCondition('year', 4)),\n    'yy': datePartGetterFactory(digitCondition('year', 2)),\n    'y': datePartGetterFactory(digitCondition('year', 1)),\n    'MMMM': datePartGetterFactory(nameCondition('month', 4)),\n    'MMM': datePartGetterFactory(nameCondition('month', 3)),\n    'MM': datePartGetterFactory(digitCondition('month', 2)),\n    'M': datePartGetterFactory(digitCondition('month', 1)),\n    'LLLL': datePartGetterFactory(nameCondition('month', 4)),\n    'L': datePartGetterFactory(nameCondition('month', 1)),\n    'dd': datePartGetterFactory(digitCondition('day', 2)),\n    'd': datePartGetterFactory(digitCondition('day', 1)),\n    'HH': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),\n    'H': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),\n    'hh': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),\n    'h': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),\n    'jj': datePartGetterFactory(digitCondition('hour', 2)),\n    'j': datePartGetterFactory(digitCondition('hour', 1)),\n    'mm': digitModifier(datePartGetterFactory(digitCondition('minute', 2))),\n    'm': datePartGetterFactory(digitCondition('minute', 1)),\n    'ss': digitModifier(datePartGetterFactory(digitCondition('second', 2))),\n    's': datePartGetterFactory(digitCondition('second', 1)),\n    // while ISO 8601 requires fractions to be prefixed with `.` or `,`\n    // we can be just safely rely on using `sss` since we currently don't support single or two digit\n    // fractions\n    'sss': datePartGetterFactory(digitCondition('second', 3)),\n    'EEEE': datePartGetterFactory(nameCondition('weekday', 4)),\n    'EEE': datePartGetterFactory(nameCondition('weekday', 3)),\n    'EE': datePartGetterFactory(nameCondition('weekday', 2)),\n    'E': datePartGetterFactory(nameCondition('weekday', 1)),\n    'a': hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),\n    'Z': timeZoneGetter$1('short'),\n    'z': timeZoneGetter$1('long'),\n    'ww': datePartGetterFactory({}),\n    // Week of year, padded (00-53). Week 01 is the week with the\n    // first Thursday of the year. not support ?\n    'w': datePartGetterFactory({}),\n    // Week of year (0-53). Week 1 is the week with the first Thursday\n    // of the year not support ?\n    'G': datePartGetterFactory(nameCondition('era', 1)),\n    'GG': datePartGetterFactory(nameCondition('era', 2)),\n    'GGG': datePartGetterFactory(nameCondition('era', 3)),\n    'GGGG': datePartGetterFactory(nameCondition('era', 4))\n};\n/**\n * @param {?} inner\n * @return {?}\n */\nfunction digitModifier(inner) {\n    return (/**\n     * @param {?} date\n     * @param {?} locale\n     * @return {?}\n     */\n    function (date, locale) {\n        /** @type {?} */\n        const result = inner(date, locale);\n        return result.length == 1 ? '0' + result : result;\n    });\n}\n/**\n * @param {?} inner\n * @return {?}\n */\nfunction hourClockExtractor(inner) {\n    return (/**\n     * @param {?} date\n     * @param {?} locale\n     * @return {?}\n     */\n    function (date, locale) { return inner(date, locale).split(' ')[1]; });\n}\n/**\n * @param {?} inner\n * @return {?}\n */\nfunction hourExtractor(inner) {\n    return (/**\n     * @param {?} date\n     * @param {?} locale\n     * @return {?}\n     */\n    function (date, locale) { return inner(date, locale).split(' ')[0]; });\n}\n/**\n * @param {?} date\n * @param {?} locale\n * @param {?} options\n * @return {?}\n */\nfunction intlDateFormat(date, locale, options) {\n    return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\\u200e\\u200f]/g, '');\n}\n/**\n * @param {?} timezone\n * @return {?}\n */\nfunction timeZoneGetter$1(timezone) {\n    // To workaround `Intl` API restriction for single timezone let format with 24 hours\n    /** @type {?} */\n    const options = { hour: '2-digit', hour12: false, timeZoneName: timezone };\n    return (/**\n     * @param {?} date\n     * @param {?} locale\n     * @return {?}\n     */\n    function (date, locale) {\n        /** @type {?} */\n        const result = intlDateFormat(date, locale, options);\n        // Then extract first 3 letters that related to hours\n        return result ? result.substring(3) : '';\n    });\n}\n/**\n * @param {?} options\n * @param {?} value\n * @return {?}\n */\nfunction hour12Modify(options, value) {\n    options.hour12 = value;\n    return options;\n}\n/**\n * @param {?} prop\n * @param {?} len\n * @return {?}\n */\nfunction digitCondition(prop, len) {\n    /** @type {?} */\n    const result = {};\n    result[prop] = len === 2 ? '2-digit' : 'numeric';\n    return result;\n}\n/**\n * @param {?} prop\n * @param {?} len\n * @return {?}\n */\nfunction nameCondition(prop, len) {\n    /** @type {?} */\n    const result = {};\n    if (len < 4) {\n        result[prop] = len > 1 ? 'short' : 'narrow';\n    }\n    else {\n        result[prop] = 'long';\n    }\n    return result;\n}\n/**\n * @param {?} options\n * @return {?}\n */\nfunction combine(options) {\n    return options.reduce((/**\n     * @param {?} merged\n     * @param {?} opt\n     * @return {?}\n     */\n    (merged, opt) => (Object.assign({}, merged, opt))), {});\n}\n/**\n * @param {?} ret\n * @return {?}\n */\nfunction datePartGetterFactory(ret) {\n    return (/**\n     * @param {?} date\n     * @param {?} locale\n     * @return {?}\n     */\n    (date, locale) => intlDateFormat(date, locale, ret));\n}\n/** @type {?} */\nconst DATE_FORMATTER_CACHE = new Map();\n/**\n * @param {?} format\n * @param {?} date\n * @param {?} locale\n * @return {?}\n */\nfunction dateFormatter(format, date, locale) {\n    /** @type {?} */\n    const fn = PATTERN_ALIASES[format];\n    if (fn)\n        return fn(date, locale);\n    /** @type {?} */\n    const cacheKey = format;\n    /** @type {?} */\n    let parts = DATE_FORMATTER_CACHE.get(cacheKey);\n    if (!parts) {\n        parts = [];\n        /** @type {?} */\n        let match;\n        DATE_FORMATS_SPLIT$1.exec(format);\n        /** @type {?} */\n        let _format = format;\n        while (_format) {\n            match = DATE_FORMATS_SPLIT$1.exec(_format);\n            if (match) {\n                parts = parts.concat(match.slice(1));\n                _format = (/** @type {?} */ (parts.pop()));\n            }\n            else {\n                parts.push(_format);\n                _format = null;\n            }\n        }\n        DATE_FORMATTER_CACHE.set(cacheKey, parts);\n    }\n    return parts.reduce((/**\n     * @param {?} text\n     * @param {?} part\n     * @return {?}\n     */\n    (text, part) => {\n        /** @type {?} */\n        const fn = DATE_FORMATS$1[part];\n        return text + (fn ? fn(date, locale) : partToTime(part));\n    }), '');\n}\n/**\n * @param {?} part\n * @return {?}\n */\nfunction partToTime(part) {\n    return part === '\\'\\'' ? '\\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\\'');\n}\nclass DateFormatter {\n    /**\n     * @param {?} date\n     * @param {?} locale\n     * @param {?} pattern\n     * @return {?}\n     */\n    static format(date, locale, pattern) {\n        return dateFormatter(pattern, date, locale);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Formats a date according to locale rules.\n *\n * Where:\n * - `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string\n * (https://www.w3.org/TR/NOTE-datetime).\n * - `format` indicates which date/time components to include. The format can be predefined as\n *   shown below or custom as shown in the table.\n *   - `'medium'`: equivalent to `'yMMMdjms'` (e.g. `Sep 3, 2010, 12:05:08 PM` for `en-US`)\n *   - `'short'`: equivalent to `'yMdjm'` (e.g. `9/3/2010, 12:05 PM` for `en-US`)\n *   - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. `Friday, September 3, 2010` for `en-US`)\n *   - `'longDate'`: equivalent to `'yMMMMd'` (e.g. `September 3, 2010` for `en-US`)\n *   - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. `Sep 3, 2010` for `en-US`)\n *   - `'shortDate'`: equivalent to `'yMd'` (e.g. `9/3/2010` for `en-US`)\n *   - `'mediumTime'`: equivalent to `'jms'` (e.g. `12:05:08 PM` for `en-US`)\n *   - `'shortTime'`: equivalent to `'jm'` (e.g. `12:05 PM` for `en-US`)\n *\n *\n *  | Component | Symbol | Narrow | Short Form   | Long Form         | Numeric   | 2-digit   |\n *  |-----------|:------:|--------|--------------|-------------------|-----------|-----------|\n *  | era       |   G    | G (A)  | GGG (AD)     | GGGG (Anno Domini)| -         | -         |\n *  | year      |   y    | -      | -            | -                 | y (2015)  | yy (15)   |\n *  | month     |   M    | L (S)  | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |\n *  | day       |   d    | -      | -            | -                 | d (3)     | dd (03)   |\n *  | weekday   |   E    | E (S)  | EEE (Sun)    | EEEE (Sunday)     | -         | -         |\n *  | hour      |   j    | -      | -            | -                 | j (13)    | jj (13)   |\n *  | hour12    |   h    | -      | -            | -                 | h (1 PM)  | hh (01 PM)|\n *  | hour24    |   H    | -      | -            | -                 | H (13)    | HH (13)   |\n *  | minute    |   m    | -      | -            | -                 | m (5)     | mm (05)   |\n *  | second    |   s    | -      | -            | -                 | s (9)     | ss (09)   |\n *  | timezone  |   z    | -      | -            | z (Pacific Standard Time)| -  | -         |\n *  | timezone  |   Z    | -      | Z (GMT-8:00) | -                 | -         | -         |\n *  | timezone  |   a    | -      | a (PM)       | -                 | -         | -         |\n *\n * In javascript, only the components specified will be respected (not the ordering,\n * punctuations, ...) and details of the formatting will be dependent on the locale.\n *\n * Timezone of the formatted text will be the local system timezone of the end-user's machine.\n *\n * When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not\n * applied and the formatted text will have the same day, month and year of the expression.\n *\n * WARNINGS:\n * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.\n *   Instead users should treat the date as an immutable object and change the reference when the\n *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run\n *   which would be an expensive operation).\n * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera\n *   browsers.\n *\n * \\@usageNotes\n *\n * ### Examples\n *\n * Assuming `dateObj` is (year: 2010, month: 9, day: 3, hour: 12 PM, minute: 05, second: 08)\n * in the _local_ time and locale is 'en-US':\n *\n * {\\@example common/pipes/ts/date_pipe.ts region='DeprecatedDatePipe'}\n *\n * \\@publicApi\n */\nclass DeprecatedDatePipe {\n    /**\n     * @param {?} _locale\n     */\n    constructor(_locale) {\n        this._locale = _locale;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} pattern\n     * @return {?}\n     */\n    transform(value, pattern = 'mediumDate') {\n        if (value == null || value === '' || value !== value)\n            return null;\n        /** @type {?} */\n        let date;\n        if (typeof value === 'string') {\n            value = value.trim();\n        }\n        if (isDate$1(value)) {\n            date = value;\n        }\n        else if (!isNaN(value - parseFloat(value))) {\n            date = new Date(parseFloat(value));\n        }\n        else if (typeof value === 'string' && /^(\\d{4}-\\d{1,2}-\\d{1,2})$/.test(value)) {\n            /**\n             * For ISO Strings without time the day, month and year must be extracted from the ISO String\n             * before Date creation to avoid time offset and errors in the new Date.\n             * If we only replace '-' with ',' in the ISO String (\"2015,01,01\"), and try to create a new\n             * date, some browsers (e.g. IE 9) will throw an invalid Date error\n             * If we leave the '-' (\"2015-01-01\") and try to create a new Date(\"2015-01-01\") the\n             * timeoffset\n             * is applied\n             * Note: ISO months are 0 for January, 1 for February, ...\n             */\n            const [y, m, d] = value.split('-').map((/**\n             * @param {?} val\n             * @return {?}\n             */\n            (val) => parseInt(val, 10)));\n            date = new Date(y, m - 1, d);\n        }\n        else {\n            date = new Date(value);\n        }\n        if (!isDate$1(date)) {\n            /** @type {?} */\n            let match;\n            if ((typeof value === 'string') && (match = value.match(ISO8601_DATE_REGEX))) {\n                date = isoStringToDate(match);\n            }\n            else {\n                throw invalidPipeArgumentError(DeprecatedDatePipe, value);\n            }\n        }\n        return DateFormatter.format(date, this._locale, DeprecatedDatePipe._ALIASES[pattern] || pattern);\n    }\n}\n/**\n * \\@internal\n */\nDeprecatedDatePipe._ALIASES = {\n    'medium': 'yMMMdjms',\n    'short': 'yMdjm',\n    'fullDate': 'yMMMMEEEEd',\n    'longDate': 'yMMMMd',\n    'mediumDate': 'yMMMd',\n    'shortDate': 'yMd',\n    'mediumTime': 'jms',\n    'shortTime': 'jm'\n};\nDeprecatedDatePipe.decorators = [\n    { type: Pipe, args: [{ name: 'date', pure: true },] }\n];\n/** @nocollapse */\nDeprecatedDatePipe.ctorParameters = () => [\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isDate$1(value) {\n    return value instanceof Date && !isNaN(value.valueOf());\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} pipe\n * @param {?} locale\n * @param {?} value\n * @param {?} style\n * @param {?=} digits\n * @param {?=} currency\n * @param {?=} currencyAsSymbol\n * @return {?}\n */\nfunction formatNumber$1(pipe, locale, value, style, digits, currency = null, currencyAsSymbol = false) {\n    if (value == null)\n        return null;\n    // Convert strings to numbers\n    value = typeof value === 'string' && !isNaN(+value - parseFloat(value)) ? +value : value;\n    if (typeof value !== 'number') {\n        throw invalidPipeArgumentError(pipe, value);\n    }\n    /** @type {?} */\n    let minInt;\n    /** @type {?} */\n    let minFraction;\n    /** @type {?} */\n    let maxFraction;\n    if (style !== NumberFormatStyle.Currency) {\n        // rely on Intl default for currency\n        minInt = 1;\n        minFraction = 0;\n        maxFraction = 3;\n    }\n    if (digits) {\n        /** @type {?} */\n        const parts = digits.match(NUMBER_FORMAT_REGEXP);\n        if (parts === null) {\n            throw new Error(`${digits} is not a valid digit info for number pipes`);\n        }\n        if (parts[1] != null) { // min integer digits\n            minInt = parseIntAutoRadix(parts[1]);\n        }\n        if (parts[3] != null) { // min fraction digits\n            minFraction = parseIntAutoRadix(parts[3]);\n        }\n        if (parts[5] != null) { // max fraction digits\n            maxFraction = parseIntAutoRadix(parts[5]);\n        }\n    }\n    return NumberFormatter.format((/** @type {?} */ (value)), locale, style, {\n        minimumIntegerDigits: minInt,\n        minimumFractionDigits: minFraction,\n        maximumFractionDigits: maxFraction,\n        currency: currency,\n        currencyAsSymbol: currencyAsSymbol,\n    });\n}\n/**\n * Formats a number as text. Group sizing and separator and other locale-specific\n * configurations are based on the active locale.\n *\n * where `expression` is a number:\n *  - `digitInfo` is a `string` which has a following format: <br>\n *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>\n *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.\n *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.\n *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.\n *\n * For more information on the acceptable range for each of these numbers and other\n * details see your native internationalization library.\n *\n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n *\n * \\@usageNotes\n *\n * ### Example\n *\n * {\\@example common/pipes/ts/number_pipe.ts region='DeprecatedNumberPipe'}\n *\n * \\@ngModule CommonModule\n * \\@publicApi\n */\nclass DeprecatedDecimalPipe {\n    /**\n     * @param {?} _locale\n     */\n    constructor(_locale) {\n        this._locale = _locale;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} digits\n     * @return {?}\n     */\n    transform(value, digits) {\n        return formatNumber$1(DeprecatedDecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);\n    }\n}\nDeprecatedDecimalPipe.decorators = [\n    { type: Pipe, args: [{ name: 'number' },] }\n];\n/** @nocollapse */\nDeprecatedDecimalPipe.ctorParameters = () => [\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\n/**\n * \\@ngModule CommonModule\n *\n * \\@description\n *\n * Formats a number as percentage according to locale rules.\n *\n * - `digitInfo` See {\\@link DecimalPipe} for detailed description.\n *\n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n *\n * \\@usageNotes\n *\n * ### Example\n *\n * {\\@example common/pipes/ts/percent_pipe.ts region='DeprecatedPercentPipe'}\n *\n * \\@publicApi\n */\nclass DeprecatedPercentPipe {\n    /**\n     * @param {?} _locale\n     */\n    constructor(_locale) {\n        this._locale = _locale;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} digits\n     * @return {?}\n     */\n    transform(value, digits) {\n        return formatNumber$1(DeprecatedPercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);\n    }\n}\nDeprecatedPercentPipe.decorators = [\n    { type: Pipe, args: [{ name: 'percent' },] }\n];\n/** @nocollapse */\nDeprecatedPercentPipe.ctorParameters = () => [\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Formats a number as currency using locale rules.\n *\n * Use `currency` to format a number as currency.\n *\n * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such\n *    as `USD` for the US dollar and `EUR` for the euro.\n * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.\n *   - `true`: use symbol (e.g. `$`).\n *   - `false`(default): use code (e.g. `USD`).\n * - `digitInfo` See {\\@link DecimalPipe} for detailed description.\n *\n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n *\n * \\@usageNotes\n *\n * ### Example\n *\n * {\\@example common/pipes/ts/currency_pipe.ts region='DeprecatedCurrencyPipe'}\n *\n * \\@publicApi\n */\nclass DeprecatedCurrencyPipe {\n    /**\n     * @param {?} _locale\n     */\n    constructor(_locale) {\n        this._locale = _locale;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} currencyCode\n     * @param {?=} symbolDisplay\n     * @param {?=} digits\n     * @return {?}\n     */\n    transform(value, currencyCode = 'USD', symbolDisplay = false, digits) {\n        return formatNumber$1(DeprecatedCurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);\n    }\n}\nDeprecatedCurrencyPipe.decorators = [\n    { type: Pipe, args: [{ name: 'currency' },] }\n];\n/** @nocollapse */\nDeprecatedCurrencyPipe.ctorParameters = () => [\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A collection of deprecated i18n pipes that require intl api\n *\n * @deprecated from v5\n * @type {?}\n */\nconst COMMON_DEPRECATED_I18N_PIPES = [DeprecatedDecimalPipe, DeprecatedPercentPipe, DeprecatedCurrencyPipe, DeprecatedDatePipe];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ObservableStrategy {\n    /**\n     * @param {?} async\n     * @param {?} updateLatestValue\n     * @return {?}\n     */\n    createSubscription(async, updateLatestValue) {\n        return async.subscribe({ next: updateLatestValue, error: (/**\n             * @param {?} e\n             * @return {?}\n             */\n            (e) => { throw e; }) });\n    }\n    /**\n     * @param {?} subscription\n     * @return {?}\n     */\n    dispose(subscription) { subscription.unsubscribe(); }\n    /**\n     * @param {?} subscription\n     * @return {?}\n     */\n    onDestroy(subscription) { subscription.unsubscribe(); }\n}\nclass PromiseStrategy {\n    /**\n     * @param {?} async\n     * @param {?} updateLatestValue\n     * @return {?}\n     */\n    createSubscription(async, updateLatestValue) {\n        return async.then(updateLatestValue, (/**\n         * @param {?} e\n         * @return {?}\n         */\n        e => { throw e; }));\n    }\n    /**\n     * @param {?} subscription\n     * @return {?}\n     */\n    dispose(subscription) { }\n    /**\n     * @param {?} subscription\n     * @return {?}\n     */\n    onDestroy(subscription) { }\n}\n/** @type {?} */\nconst _promiseStrategy = new PromiseStrategy();\n/** @type {?} */\nconst _observableStrategy = new ObservableStrategy();\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Unwraps a value from an asynchronous primitive.\n *\n * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has\n * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for\n * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid\n * potential memory leaks.\n *\n * \\@usageNotes\n *\n * ### Examples\n *\n * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the\n * promise.\n *\n * {\\@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}\n *\n * It's also possible to use `async` with Observables. The example below binds the `time` Observable\n * to the view. The Observable continuously updates the view with the current time.\n *\n * {\\@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}\n *\n * \\@publicApi\n */\nclass AsyncPipe {\n    /**\n     * @param {?} _ref\n     */\n    constructor(_ref) {\n        this._ref = _ref;\n        this._latestValue = null;\n        this._latestReturnedValue = null;\n        this._subscription = null;\n        this._obj = null;\n        this._strategy = (/** @type {?} */ (null));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._subscription) {\n            this._dispose();\n        }\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    transform(obj) {\n        if (!this._obj) {\n            if (obj) {\n                this._subscribe(obj);\n            }\n            this._latestReturnedValue = this._latestValue;\n            return this._latestValue;\n        }\n        if (obj !== this._obj) {\n            this._dispose();\n            return this.transform((/** @type {?} */ (obj)));\n        }\n        if (ɵlooseIdentical(this._latestValue, this._latestReturnedValue)) {\n            return this._latestReturnedValue;\n        }\n        this._latestReturnedValue = this._latestValue;\n        return WrappedValue.wrap(this._latestValue);\n    }\n    /**\n     * @private\n     * @param {?} obj\n     * @return {?}\n     */\n    _subscribe(obj) {\n        this._obj = obj;\n        this._strategy = this._selectStrategy(obj);\n        this._subscription = this._strategy.createSubscription(obj, (/**\n         * @param {?} value\n         * @return {?}\n         */\n        (value) => this._updateLatestValue(obj, value)));\n    }\n    /**\n     * @private\n     * @param {?} obj\n     * @return {?}\n     */\n    _selectStrategy(obj) {\n        if (ɵisPromise(obj)) {\n            return _promiseStrategy;\n        }\n        if (ɵisObservable(obj)) {\n            return _observableStrategy;\n        }\n        throw invalidPipeArgumentError(AsyncPipe, obj);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _dispose() {\n        this._strategy.dispose((/** @type {?} */ (this._subscription)));\n        this._latestValue = null;\n        this._latestReturnedValue = null;\n        this._subscription = null;\n        this._obj = null;\n    }\n    /**\n     * @private\n     * @param {?} async\n     * @param {?} value\n     * @return {?}\n     */\n    _updateLatestValue(async, value) {\n        if (async === this._obj) {\n            this._latestValue = value;\n            this._ref.markForCheck();\n        }\n    }\n}\nAsyncPipe.decorators = [\n    { type: Injectable },\n    { type: Pipe, args: [{ name: 'async', pure: false },] }\n];\n/** @nocollapse */\nAsyncPipe.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Transforms text to all lower case.\n *\n * @see `UpperCasePipe`\n * @see `TitleCasePipe`\n * \\@usageNotes\n *\n * The following example defines a view that allows the user to enter\n * text, and then uses the pipe to convert the input text to all lower case.\n *\n * <code-example path=\"common/pipes/ts/lowerupper_pipe.ts\" region='LowerUpperPipe'></code-example>\n *\n * \\@ngModule CommonModule\n * \\@publicApi\n */\nclass LowerCasePipe {\n    /**\n     * @param {?} value The string to transform to lower case.\n     * @return {?}\n     */\n    transform(value) {\n        if (!value)\n            return value;\n        if (typeof value !== 'string') {\n            throw invalidPipeArgumentError(LowerCasePipe, value);\n        }\n        return value.toLowerCase();\n    }\n}\nLowerCasePipe.decorators = [\n    { type: Injectable },\n    { type: Pipe, args: [{ name: 'lowercase' },] }\n];\n//\n// Regex below matches any Unicode word and compatible with ES5. In ES2018 the same result\n// can be achieved by using /\\p{L}\\S*/gu and also known as Unicode Property Escapes\n// (http://2ality.com/2017/07/regexp-unicode-property-escapes.html). Since there is no\n// transpilation of this functionality down to ES5 without external tool, the only solution is\n// to use already transpiled form. Example can be found here -\n// https://mothereff.in/regexpu#input=var+regex+%3D+/%5Cp%7BL%7D/u%3B&unicodePropertyEscape=1\n//\n/** @type {?} */\nconst unicodeWordMatch = /(?:[A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312E\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF40\\uDF42-\\uDF49\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE83\\uDE86-\\uDE89\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D])\\S*/g;\n/**\n * Transforms text to title case.\n * Capitalizes the first letter of each word, and transforms the\n * rest of the word to lower case.\n * Words are delimited by any whitespace character, such as a space, tab, or line-feed character.\n *\n * @see `LowerCasePipe`\n * @see `UpperCasePipe`\n *\n * \\@usageNotes\n * The following example shows the result of transforming various strings into title case.\n *\n * <code-example path=\"common/pipes/ts/titlecase_pipe.ts\" region='TitleCasePipe'></code-example>\n *\n * \\@ngModule CommonModule\n * \\@publicApi\n */\nclass TitleCasePipe {\n    /**\n     * @param {?} value The string to transform to title case.\n     * @return {?}\n     */\n    transform(value) {\n        if (!value)\n            return value;\n        if (typeof value !== 'string') {\n            throw invalidPipeArgumentError(TitleCasePipe, value);\n        }\n        return value.replace(unicodeWordMatch, ((/**\n         * @param {?} txt\n         * @return {?}\n         */\n        txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase())));\n    }\n}\nTitleCasePipe.decorators = [\n    { type: Injectable },\n    { type: Pipe, args: [{ name: 'titlecase' },] }\n];\n/**\n * Transforms text to all upper case.\n * @see `LowerCasePipe`\n * @see `TitleCasePipe`\n *\n * \\@ngModule CommonModule\n * \\@publicApi\n */\nclass UpperCasePipe {\n    /**\n     * @param {?} value The string to transform to upper case.\n     * @return {?}\n     */\n    transform(value) {\n        if (!value)\n            return value;\n        if (typeof value !== 'string') {\n            throw invalidPipeArgumentError(UpperCasePipe, value);\n        }\n        return value.toUpperCase();\n    }\n}\nUpperCasePipe.decorators = [\n    { type: Injectable },\n    { type: Pipe, args: [{ name: 'uppercase' },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// clang-format off\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Formats a date value according to locale rules.\n *\n * Only the `en-US` locale data comes with Angular. To localize dates\n * in another language, you must import the corresponding locale data.\n * See the [I18n guide](guide/i18n#i18n-pipes) for more information.\n *\n * @see `formatDate()`\n *\n *\n * \\@usageNotes\n *\n * The result of this pipe is not reevaluated when the input is mutated. To avoid the need to\n * reformat the date on every change-detection cycle, treat the date as an immutable object\n * and change the reference when the pipe needs to run again.\n *\n * ### Pre-defined format options\n *\n * Examples are given in `en-US` locale.\n *\n * - `'short'`: equivalent to `'M/d/yy, h:mm a'` (`6/15/15, 9:03 AM`).\n * - `'medium'`: equivalent to `'MMM d, y, h:mm:ss a'` (`Jun 15, 2015, 9:03:01 AM`).\n * - `'long'`: equivalent to `'MMMM d, y, h:mm:ss a z'` (`June 15, 2015 at 9:03:01 AM\n * GMT+1`).\n * - `'full'`: equivalent to `'EEEE, MMMM d, y, h:mm:ss a zzzz'` (`Monday, June 15, 2015 at\n * 9:03:01 AM GMT+01:00`).\n * - `'shortDate'`: equivalent to `'M/d/yy'` (`6/15/15`).\n * - `'mediumDate'`: equivalent to `'MMM d, y'` (`Jun 15, 2015`).\n * - `'longDate'`: equivalent to `'MMMM d, y'` (`June 15, 2015`).\n * - `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` (`Monday, June 15, 2015`).\n * - `'shortTime'`: equivalent to `'h:mm a'` (`9:03 AM`).\n * - `'mediumTime'`: equivalent to `'h:mm:ss a'` (`9:03:01 AM`).\n * - `'longTime'`: equivalent to `'h:mm:ss a z'` (`9:03:01 AM GMT+1`).\n * - `'fullTime'`: equivalent to `'h:mm:ss a zzzz'` (`9:03:01 AM GMT+01:00`).\n *\n * ### Custom format options\n *\n * You can construct a format string using symbols to specify the components\n * of a date-time value, as described in the following table.\n * Format details depend on the locale.\n * Fields marked with (*) are only available in the extra data set for the given locale.\n *\n *  | Field type         | Format      | Description                                                   | Example Value                                              |\n *  |--------------------|-------------|---------------------------------------------------------------|------------------------------------------------------------|\n *  | Era                | G, GG & GGG | Abbreviated                                                   | AD                                                         |\n *  |                    | GGGG        | Wide                                                          | Anno Domini                                                |\n *  |                    | GGGGG       | Narrow                                                        | A                                                          |\n *  | Year               | y           | Numeric: minimum digits                                       | 2, 20, 201, 2017, 20173                                    |\n *  |                    | yy          | Numeric: 2 digits + zero padded                               | 02, 20, 01, 17, 73                                         |\n *  |                    | yyy         | Numeric: 3 digits + zero padded                               | 002, 020, 201, 2017, 20173                                 |\n *  |                    | yyyy        | Numeric: 4 digits or more + zero padded                       | 0002, 0020, 0201, 2017, 20173                              |\n *  | Month              | M           | Numeric: 1 digit                                              | 9, 12                                                      |\n *  |                    | MM          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |\n *  |                    | MMM         | Abbreviated                                                   | Sep                                                        |\n *  |                    | MMMM        | Wide                                                          | September                                                  |\n *  |                    | MMMMM       | Narrow                                                        | S                                                          |\n *  | Month standalone   | L           | Numeric: 1 digit                                              | 9, 12                                                      |\n *  |                    | LL          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |\n *  |                    | LLL         | Abbreviated                                                   | Sep                                                        |\n *  |                    | LLLL        | Wide                                                          | September                                                  |\n *  |                    | LLLLL       | Narrow                                                        | S                                                          |\n *  | Week of year       | w           | Numeric: minimum digits                                       | 1... 53                                                    |\n *  |                    | ww          | Numeric: 2 digits + zero padded                               | 01... 53                                                   |\n *  | Week of month      | W           | Numeric: 1 digit                                              | 1... 5                                                     |\n *  | Day of month       | d           | Numeric: minimum digits                                       | 1                                                          |\n *  |                    | dd          | Numeric: 2 digits + zero padded                               | 01                                                          |\n *  | Week day           | E, EE & EEE | Abbreviated                                                   | Tue                                                        |\n *  |                    | EEEE        | Wide                                                          | Tuesday                                                    |\n *  |                    | EEEEE       | Narrow                                                        | T                                                          |\n *  |                    | EEEEEE      | Short                                                         | Tu                                                         |\n *  | Period             | a, aa & aaa | Abbreviated                                                   | am/pm or AM/PM                                             |\n *  |                    | aaaa        | Wide (fallback to `a` when missing)                           | ante meridiem/post meridiem                                |\n *  |                    | aaaaa       | Narrow                                                        | a/p                                                        |\n *  | Period*            | B, BB & BBB | Abbreviated                                                   | mid.                                                       |\n *  |                    | BBBB        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |\n *  |                    | BBBBB       | Narrow                                                        | md                                                         |\n *  | Period standalone* | b, bb & bbb | Abbreviated                                                   | mid.                                                       |\n *  |                    | bbbb        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |\n *  |                    | bbbbb       | Narrow                                                        | md                                                         |\n *  | Hour 1-12          | h           | Numeric: minimum digits                                       | 1, 12                                                      |\n *  |                    | hh          | Numeric: 2 digits + zero padded                               | 01, 12                                                     |\n *  | Hour 0-23          | H           | Numeric: minimum digits                                       | 0, 23                                                      |\n *  |                    | HH          | Numeric: 2 digits + zero padded                               | 00, 23                                                     |\n *  | Minute             | m           | Numeric: minimum digits                                       | 8, 59                                                      |\n *  |                    | mm          | Numeric: 2 digits + zero padded                               | 08, 59                                                     |\n *  | Second             | s           | Numeric: minimum digits                                       | 0... 59                                                    |\n *  |                    | ss          | Numeric: 2 digits + zero padded                               | 00... 59                                                   |\n *  | Fractional seconds | S           | Numeric: 1 digit                                              | 0... 9                                                     |\n *  |                    | SS          | Numeric: 2 digits + zero padded                               | 00... 99                                                   |\n *  |                    | SSS         | Numeric: 3 digits + zero padded (= milliseconds)              | 000... 999                                                 |\n *  | Zone               | z, zz & zzz | Short specific non location format (fallback to O)            | GMT-8                                                      |\n *  |                    | zzzz        | Long specific non location format (fallback to OOOO)          | GMT-08:00                                                  |\n *  |                    | Z, ZZ & ZZZ | ISO8601 basic format                                          | -0800                                                      |\n *  |                    | ZZZZ        | Long localized GMT format                                     | GMT-8:00                                                   |\n *  |                    | ZZZZZ       | ISO8601 extended format + Z indicator for offset 0 (= XXXXX)  | -08:00                                                     |\n *  |                    | O, OO & OOO | Short localized GMT format                                    | GMT-8                                                      |\n *  |                    | OOOO        | Long localized GMT format                                     | GMT-08:00                                                  |\n *\n * Note that timezone correction is not applied to an ISO string that has no time component, such as \"2016-09-19\"\n *\n * ### Format examples\n *\n * These examples transform a date into various formats,\n * assuming that `dateObj` is a JavaScript `Date` object for\n * year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11,\n * given in the local time for the `en-US` locale.\n *\n * ```\n * {{ dateObj | date }}               // output is 'Jun 15, 2015'\n * {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'\n * {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'\n * {{ dateObj | date:'mm:ss' }}       // output is '43:11'\n * ```\n *\n * ### Usage example\n *\n * The following component uses a date pipe to display the current date in different formats.\n *\n * ```\n * \\@Component({\n *  selector: 'date-pipe',\n *  template: `<div>\n *    <p>Today is {{today | date}}</p>\n *    <p>Or if you prefer, {{today | date:'fullDate'}}</p>\n *    <p>The time is {{today | date:'h:mm a z'}}</p>\n *  </div>`\n * })\n * // Get the current date and time as a date-time value.\n * export class DatePipeComponent {\n *   today: number = Date.now();\n * }\n * ```\n *\n * \\@publicApi\n */\n// clang-format on\nclass DatePipe {\n    /**\n     * @param {?} locale\n     */\n    constructor(locale) {\n        this.locale = locale;\n    }\n    /**\n     * @param {?} value The date expression: a `Date` object,  a number\n     * (milliseconds since UTC epoch), or an ISO string (https://www.w3.org/TR/NOTE-datetime).\n     * @param {?=} format The date/time components to include, using predefined options or a\n     * custom format string.\n     * @param {?=} timezone A timezone offset (such as `'+0430'`), or a standard\n     * UTC/GMT or continental US timezone abbreviation. Default is\n     * the local system timezone of the end-user's machine.\n     * @param {?=} locale A locale code for the locale format rules to use.\n     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n     * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).\n     * @return {?} A date string in the desired format.\n     */\n    transform(value, format = 'mediumDate', timezone, locale) {\n        if (value == null || value === '' || value !== value)\n            return null;\n        try {\n            return formatDate(value, format, locale || this.locale, timezone);\n        }\n        catch (error) {\n            throw invalidPipeArgumentError(DatePipe, error.message);\n        }\n    }\n}\nDatePipe.decorators = [\n    { type: Injectable },\n    { type: Pipe, args: [{ name: 'date', pure: true },] }\n];\n/** @nocollapse */\nDatePipe.ctorParameters = () => [\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst _INTERPOLATION_REGEXP = /#/g;\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Maps a value to a string that pluralizes the value according to locale rules.\n *\n * \\@usageNotes\n *\n * ### Example\n *\n * {\\@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}\n *\n * \\@publicApi\n */\nclass I18nPluralPipe {\n    /**\n     * @param {?} _localization\n     */\n    constructor(_localization) {\n        this._localization = _localization;\n    }\n    /**\n     * @param {?} value the number to be formatted\n     * @param {?} pluralMap an object that mimics the ICU format, see\n     * http://userguide.icu-project.org/formatparse/messages.\n     * @param {?=} locale a `string` defining the locale to use (uses the current {\\@link LOCALE_ID} by\n     * default).\n     * @return {?}\n     */\n    transform(value, pluralMap, locale) {\n        if (value == null)\n            return '';\n        if (typeof pluralMap !== 'object' || pluralMap === null) {\n            throw invalidPipeArgumentError(I18nPluralPipe, pluralMap);\n        }\n        /** @type {?} */\n        const key = getPluralCategory(value, Object.keys(pluralMap), this._localization, locale);\n        return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());\n    }\n}\nI18nPluralPipe.decorators = [\n    { type: Injectable },\n    { type: Pipe, args: [{ name: 'i18nPlural', pure: true },] }\n];\n/** @nocollapse */\nI18nPluralPipe.ctorParameters = () => [\n    { type: NgLocalization }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Generic selector that displays the string that matches the current value.\n *\n * If none of the keys of the `mapping` match the `value`, then the content\n * of the `other` key is returned when present, otherwise an empty string is returned.\n *\n * \\@usageNotes\n *\n * ### Example\n *\n * {\\@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}\n *\n * \\@publicApi\n */\nclass I18nSelectPipe {\n    /**\n     * @param {?} value a string to be internationalized.\n     * @param {?} mapping an object that indicates the text that should be displayed\n     * for different values of the provided `value`.\n     * @return {?}\n     */\n    transform(value, mapping) {\n        if (value == null)\n            return '';\n        if (typeof mapping !== 'object' || typeof value !== 'string') {\n            throw invalidPipeArgumentError(I18nSelectPipe, mapping);\n        }\n        if (mapping.hasOwnProperty(value)) {\n            return mapping[value];\n        }\n        if (mapping.hasOwnProperty('other')) {\n            return mapping['other'];\n        }\n        return '';\n    }\n}\nI18nSelectPipe.decorators = [\n    { type: Injectable },\n    { type: Pipe, args: [{ name: 'i18nSelect', pure: true },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Converts a value into its JSON-format representation.  Useful for debugging.\n *\n * \\@usageNotes\n *\n * The following component uses a JSON pipe to convert an object\n * to JSON format, and displays the string in both formats for comparison.\n *\n * {\\@example common/pipes/ts/json_pipe.ts region='JsonPipe'}\n *\n * \\@publicApi\n */\nclass JsonPipe {\n    /**\n     * @param {?} value A value of any type to convert into a JSON-format string.\n     * @return {?}\n     */\n    transform(value) { return JSON.stringify(value, null, 2); }\n}\nJsonPipe.decorators = [\n    { type: Injectable },\n    { type: Pipe, args: [{ name: 'json', pure: false },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template K, V\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\nfunction makeKeyValuePair(key, value) {\n    return { key: key, value: value };\n}\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Transforms Object or Map into an array of key value pairs.\n *\n * The output array will be ordered by keys.\n * By default the comparator will be by Unicode point value.\n * You can optionally pass a compareFn if your keys are complex types.\n *\n * \\@usageNotes\n * ### Examples\n *\n * This examples show how an Object or a Map can be iterated by ngFor with the use of this keyvalue\n * pipe.\n *\n * {\\@example common/pipes/ts/keyvalue_pipe.ts region='KeyValuePipe'}\n *\n * \\@publicApi\n */\nclass KeyValuePipe {\n    /**\n     * @param {?} differs\n     */\n    constructor(differs) {\n        this.differs = differs;\n        this.keyValues = [];\n    }\n    /**\n     * @template K, V\n     * @param {?} input\n     * @param {?=} compareFn\n     * @return {?}\n     */\n    transform(input, compareFn = defaultComparator) {\n        if (!input || (!(input instanceof Map) && typeof input !== 'object')) {\n            return null;\n        }\n        if (!this.differ) {\n            // make a differ for whatever type we've been passed in\n            this.differ = this.differs.find(input).create();\n        }\n        /** @type {?} */\n        const differChanges = this.differ.diff((/** @type {?} */ (input)));\n        if (differChanges) {\n            this.keyValues = [];\n            differChanges.forEachItem((/**\n             * @param {?} r\n             * @return {?}\n             */\n            (r) => {\n                this.keyValues.push(makeKeyValuePair(r.key, (/** @type {?} */ (r.currentValue))));\n            }));\n            this.keyValues.sort(compareFn);\n        }\n        return this.keyValues;\n    }\n}\nKeyValuePipe.decorators = [\n    { type: Injectable },\n    { type: Pipe, args: [{ name: 'keyvalue', pure: false },] }\n];\n/** @nocollapse */\nKeyValuePipe.ctorParameters = () => [\n    { type: KeyValueDiffers }\n];\n/**\n * @template K, V\n * @param {?} keyValueA\n * @param {?} keyValueB\n * @return {?}\n */\nfunction defaultComparator(keyValueA, keyValueB) {\n    /** @type {?} */\n    const a = keyValueA.key;\n    /** @type {?} */\n    const b = keyValueB.key;\n    // if same exit with 0;\n    if (a === b)\n        return 0;\n    // make sure that undefined are at the end of the sort.\n    if (a === undefined)\n        return 1;\n    if (b === undefined)\n        return -1;\n    // make sure that nulls are at the end of the sort.\n    if (a === null)\n        return 1;\n    if (b === null)\n        return -1;\n    if (typeof a == 'string' && typeof b == 'string') {\n        return a < b ? -1 : 1;\n    }\n    if (typeof a == 'number' && typeof b == 'number') {\n        return a - b;\n    }\n    if (typeof a == 'boolean' && typeof b == 'boolean') {\n        return a < b ? -1 : 1;\n    }\n    // `a` and `b` are of different types. Compare their string values.\n    /** @type {?} */\n    const aString = String(a);\n    /** @type {?} */\n    const bString = String(b);\n    return aString == bString ? 0 : aString < bString ? -1 : 1;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Transforms a number into a string,\n * formatted according to locale rules that determine group sizing and\n * separator, decimal-point character, and other locale-specific\n * configurations.\n *\n * If no parameters are specified, the function rounds off to the nearest value using this\n * [rounding method](https://en.wikibooks.org/wiki/Arithmetic/Rounding).\n * The behavior differs from that of the JavaScript ```Math.round()``` function.\n * In the following case for example, the pipe rounds down where\n * ```Math.round()``` rounds up:\n *\n * ```html\n * -2.5 | number:'1.0-0'\n * > -3\n * Math.round(-2.5)\n * > -2\n * ```\n *\n * @see `formatNumber()`\n *\n * \\@usageNotes\n * The following code shows how the pipe transforms numbers\n * into text strings, according to various format specifications,\n * where the caller's default locale is `en-US`.\n *\n * ### Example\n *\n * <code-example path=\"common/pipes/ts/number_pipe.ts\" region='NumberPipe'></code-example>\n *\n * \\@publicApi\n */\nclass DecimalPipe {\n    /**\n     * @param {?} _locale\n     */\n    constructor(_locale) {\n        this._locale = _locale;\n    }\n    /**\n     * @param {?} value The number to be formatted.\n     * @param {?=} digitsInfo Decimal representation options, specified by a string\n     * in the following format:<br>\n     * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.\n     *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.\n     * Default is `1`.\n     *   - `minFractionDigits`: The minimum number of digits after the decimal point.\n     * Default is `0`.\n     *   - `maxFractionDigits`: The maximum number of digits after the decimal point.\n     * Default is `3`.\n     * @param {?=} locale A locale code for the locale format rules to use.\n     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n     * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).\n     * @return {?}\n     */\n    transform(value, digitsInfo, locale) {\n        if (isEmpty(value))\n            return null;\n        locale = locale || this._locale;\n        try {\n            /** @type {?} */\n            const num = strToNumber(value);\n            return formatNumber(num, locale, digitsInfo);\n        }\n        catch (error) {\n            throw invalidPipeArgumentError(DecimalPipe, error.message);\n        }\n    }\n}\nDecimalPipe.decorators = [\n    { type: Injectable },\n    { type: Pipe, args: [{ name: 'number' },] }\n];\n/** @nocollapse */\nDecimalPipe.ctorParameters = () => [\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Transforms a number to a percentage\n * string, formatted according to locale rules that determine group sizing and\n * separator, decimal-point character, and other locale-specific\n * configurations.\n *\n * @see `formatPercent()`\n *\n * \\@usageNotes\n * The following code shows how the pipe transforms numbers\n * into text strings, according to various format specifications,\n * where the caller's default locale is `en-US`.\n *\n * <code-example path=\"common/pipes/ts/percent_pipe.ts\" region='PercentPipe'></code-example>\n *\n * \\@publicApi\n */\nclass PercentPipe {\n    /**\n     * @param {?} _locale\n     */\n    constructor(_locale) {\n        this._locale = _locale;\n    }\n    /**\n     *\n     * @param {?} value The number to be formatted as a percentage.\n     * @param {?=} digitsInfo Decimal representation options, specified by a string\n     * in the following format:<br>\n     * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.\n     *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.\n     * Default is `1`.\n     *   - `minFractionDigits`: The minimum number of digits after the decimal point.\n     * Default is `0`.\n     *   - `maxFractionDigits`: The maximum number of digits after the decimal point.\n     * Default is `0`.\n     * @param {?=} locale A locale code for the locale format rules to use.\n     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n     * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).\n     * @return {?}\n     */\n    transform(value, digitsInfo, locale) {\n        if (isEmpty(value))\n            return null;\n        locale = locale || this._locale;\n        try {\n            /** @type {?} */\n            const num = strToNumber(value);\n            return formatPercent(num, locale, digitsInfo);\n        }\n        catch (error) {\n            throw invalidPipeArgumentError(PercentPipe, error.message);\n        }\n    }\n}\nPercentPipe.decorators = [\n    { type: Injectable },\n    { type: Pipe, args: [{ name: 'percent' },] }\n];\n/** @nocollapse */\nPercentPipe.ctorParameters = () => [\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Transforms a number to a currency string, formatted according to locale rules\n * that determine group sizing and separator, decimal-point character,\n * and other locale-specific configurations.\n *\n * @see `getCurrencySymbol()`\n * @see `formatCurrency()`\n *\n * \\@usageNotes\n * The following code shows how the pipe transforms numbers\n * into text strings, according to various format specifications,\n * where the caller's default locale is `en-US`.\n *\n * <code-example path=\"common/pipes/ts/currency_pipe.ts\" region='CurrencyPipe'></code-example>\n *\n * \\@publicApi\n */\nclass CurrencyPipe {\n    /**\n     * @param {?} _locale\n     */\n    constructor(_locale) {\n        this._locale = _locale;\n    }\n    /**\n     *\n     * @param {?} value The number to be formatted as currency.\n     * @param {?=} currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code,\n     * such as `USD` for the US dollar and `EUR` for the euro.\n     * @param {?=} display The format for the currency indicator. One of the following:\n     *   - `code`: Show the code (such as `USD`).\n     *   - `symbol`(default): Show the symbol (such as `$`).\n     *   - `symbol-narrow`: Use the narrow symbol for locales that have two symbols for their\n     * currency.\n     * For example, the Canadian dollar CAD has the symbol `CA$` and the symbol-narrow `$`. If the\n     * locale has no narrow symbol, uses the standard symbol for the locale.\n     *   - String: Use the given string value instead of a code or a symbol.\n     * For example, an empty string will suppress the currency & symbol.\n     *   - Boolean (marked deprecated in v5): `true` for symbol and false for `code`.\n     *\n     * @param {?=} digitsInfo Decimal representation options, specified by a string\n     * in the following format:<br>\n     * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.\n     *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.\n     * Default is `1`.\n     *   - `minFractionDigits`: The minimum number of digits after the decimal point.\n     * Default is `2`.\n     *   - `maxFractionDigits`: The maximum number of digits after the decimal point.\n     * Default is `2`.\n     * If not provided, the number will be formatted with the proper amount of digits,\n     * depending on what the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) specifies.\n     * For example, the Canadian dollar has 2 digits, whereas the Chilean peso has none.\n     * @param {?=} locale A locale code for the locale format rules to use.\n     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n     * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).\n     * @return {?}\n     */\n    transform(value, currencyCode, display = 'symbol', digitsInfo, locale) {\n        if (isEmpty(value))\n            return null;\n        locale = locale || this._locale;\n        if (typeof display === 'boolean') {\n            if ((/** @type {?} */ (console)) && (/** @type {?} */ (console.warn))) {\n                console.warn(`Warning: the currency pipe has been changed in Angular v5. The symbolDisplay option (third parameter) is now a string instead of a boolean. The accepted values are \"code\", \"symbol\" or \"symbol-narrow\".`);\n            }\n            display = display ? 'symbol' : 'code';\n        }\n        /** @type {?} */\n        let currency = currencyCode || 'USD';\n        if (display !== 'code') {\n            if (display === 'symbol' || display === 'symbol-narrow') {\n                currency = getCurrencySymbol(currency, display === 'symbol' ? 'wide' : 'narrow', locale);\n            }\n            else {\n                currency = display;\n            }\n        }\n        try {\n            /** @type {?} */\n            const num = strToNumber(value);\n            return formatCurrency(num, locale, currency, currencyCode, digitsInfo);\n        }\n        catch (error) {\n            throw invalidPipeArgumentError(CurrencyPipe, error.message);\n        }\n    }\n}\nCurrencyPipe.decorators = [\n    { type: Injectable },\n    { type: Pipe, args: [{ name: 'currency' },] }\n];\n/** @nocollapse */\nCurrencyPipe.ctorParameters = () => [\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isEmpty(value) {\n    return value == null || value === '' || value !== value;\n}\n/**\n * Transforms a string into a number (if needed).\n * @param {?} value\n * @return {?}\n */\nfunction strToNumber(value) {\n    // Convert strings to numbers\n    if (typeof value === 'string' && !isNaN(Number(value) - parseFloat(value))) {\n        return Number(value);\n    }\n    if (typeof value !== 'number') {\n        throw new Error(`${value} is not a number`);\n    }\n    return value;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Creates a new `Array` or `String` containing a subset (slice) of the elements.\n *\n * \\@usageNotes\n *\n * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`\n * and `String.prototype.slice()`.\n *\n * When operating on an `Array`, the returned `Array` is always a copy even when all\n * the elements are being returned.\n *\n * When operating on a blank value, the pipe returns the blank value.\n *\n * ### List Example\n *\n * This `ngFor` example:\n *\n * {\\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}\n *\n * produces the following:\n *\n * ```html\n * <li>b</li>\n * <li>c</li>\n * ```\n *\n * ### String Examples\n *\n * {\\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}\n *\n * \\@publicApi\n */\nclass SlicePipe {\n    /**\n     * @param {?} value\n     * @param {?} start\n     * @param {?=} end\n     * @return {?}\n     */\n    transform(value, start, end) {\n        if (value == null)\n            return value;\n        if (!this.supports(value)) {\n            throw invalidPipeArgumentError(SlicePipe, value);\n        }\n        return value.slice(start, end);\n    }\n    /**\n     * @private\n     * @param {?} obj\n     * @return {?}\n     */\n    supports(obj) { return typeof obj === 'string' || Array.isArray(obj); }\n}\nSlicePipe.decorators = [\n    { type: Injectable },\n    { type: Pipe, args: [{ name: 'slice', pure: false },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A collection of Angular pipes that are likely to be used in each and every application.\n * @type {?}\n */\nconst COMMON_PIPES = [\n    AsyncPipe,\n    UpperCasePipe,\n    LowerCasePipe,\n    JsonPipe,\n    SlicePipe,\n    DecimalPipe,\n    PercentPipe,\n    TitleCasePipe,\n    CurrencyPipe,\n    DatePipe,\n    I18nPluralPipe,\n    I18nSelectPipe,\n    KeyValuePipe,\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Note: This does not contain the location providers,\n// as they need some platform specific implementations to work.\n/**\n * Exports all the basic Angular directives and pipes,\n * such as `NgIf`, `NgForOf`, `DecimalPipe`, and so on.\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command.\n *\n * * The `providers` options configure the NgModule's injector to provide\n * localization dependencies to members.\n * * The `exports` options make the declared directives and pipes available for import\n * by other NgModules.\n *\n * \\@publicApi\n */\nclass CommonModule {\n}\nCommonModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [COMMON_DIRECTIVES, COMMON_PIPES],\n                exports: [COMMON_DIRECTIVES, COMMON_PIPES],\n                providers: [\n                    { provide: NgLocalization, useClass: NgLocaleLocalization },\n                ],\n            },] }\n];\nconst ɵ0$2 = getPluralCase;\n/**\n * A module that contains the deprecated i18n pipes.\n *\n * @deprecated from v5\n * \\@publicApi\n */\nclass DeprecatedI18NPipesModule {\n}\nDeprecatedI18NPipesModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [COMMON_DEPRECATED_I18N_PIPES],\n                exports: [COMMON_DEPRECATED_I18N_PIPES],\n                providers: [{ provide: DEPRECATED_PLURAL_FN, useValue: ɵ0$2 }],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A DI Token representing the main rendering context. In a browser this is the DOM Document.\n *\n * Note: Document might not be available in the Application Context when Application and Rendering\n * Contexts are not the same (e.g. when running the application into a Web Worker).\n *\n * \\@publicApi\n * @type {?}\n */\nconst DOCUMENT = new InjectionToken('DocumentToken');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nconst PLATFORM_BROWSER_ID = 'browser';\n/** @type {?} */\nconst PLATFORM_SERVER_ID = 'server';\n/** @type {?} */\nconst PLATFORM_WORKER_APP_ID = 'browserWorkerApp';\n/** @type {?} */\nconst PLATFORM_WORKER_UI_ID = 'browserWorkerUi';\n/**\n * Returns whether a platform id represents a browser platform.\n * \\@publicApi\n * @param {?} platformId\n * @return {?}\n */\nfunction isPlatformBrowser(platformId) {\n    return platformId === PLATFORM_BROWSER_ID;\n}\n/**\n * Returns whether a platform id represents a server platform.\n * \\@publicApi\n * @param {?} platformId\n * @return {?}\n */\nfunction isPlatformServer(platformId) {\n    return platformId === PLATFORM_SERVER_ID;\n}\n/**\n * Returns whether a platform id represents a web worker app platform.\n * \\@publicApi\n * @param {?} platformId\n * @return {?}\n */\nfunction isPlatformWorkerApp(platformId) {\n    return platformId === PLATFORM_WORKER_APP_ID;\n}\n/**\n * Returns whether a platform id represents a web worker UI platform.\n * \\@publicApi\n * @param {?} platformId\n * @return {?}\n */\nfunction isPlatformWorkerUi(platformId) {\n    return platformId === PLATFORM_WORKER_UI_ID;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@publicApi\n * @type {?}\n */\nconst VERSION = new Version('8.0.0');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Defines a scroll position manager. Implemented by `BrowserViewportScroller`.\n *\n * \\@publicApi\n * @abstract\n */\nclass ViewportScroller {\n}\n// De-sugared tree-shakable injection\n// See #23917\n/** @nocollapse */\n/** @nocollapse */ ViewportScroller.ngInjectableDef = ɵɵdefineInjectable({\n    providedIn: 'root',\n    factory: (/**\n     * @nocollapse @return {?}\n     */\n    () => new BrowserViewportScroller(ɵɵinject(DOCUMENT), window, ɵɵinject(ErrorHandler)))\n});\n/**\n * Manages the scroll position for a browser window.\n */\nclass BrowserViewportScroller {\n    /**\n     * @param {?} document\n     * @param {?} window\n     * @param {?} errorHandler\n     */\n    constructor(document, window, errorHandler) {\n        this.document = document;\n        this.window = window;\n        this.errorHandler = errorHandler;\n        this.offset = (/**\n         * @return {?}\n         */\n        () => [0, 0]);\n    }\n    /**\n     * Configures the top offset used when scrolling to an anchor.\n     * @param {?} offset A position in screen coordinates (a tuple with x and y values)\n     * or a function that returns the top offset position.\n     *\n     * @return {?}\n     */\n    setOffset(offset) {\n        if (Array.isArray(offset)) {\n            this.offset = (/**\n             * @return {?}\n             */\n            () => offset);\n        }\n        else {\n            this.offset = offset;\n        }\n    }\n    /**\n     * Retrieves the current scroll position.\n     * @return {?} The position in screen coordinates.\n     */\n    getScrollPosition() {\n        if (this.supportScrollRestoration()) {\n            return [this.window.scrollX, this.window.scrollY];\n        }\n        else {\n            return [0, 0];\n        }\n    }\n    /**\n     * Sets the scroll position.\n     * @param {?} position The new position in screen coordinates.\n     * @return {?}\n     */\n    scrollToPosition(position) {\n        if (this.supportScrollRestoration()) {\n            this.window.scrollTo(position[0], position[1]);\n        }\n    }\n    /**\n     * Scrolls to an anchor element.\n     * @param {?} anchor The ID of the anchor element.\n     * @return {?}\n     */\n    scrollToAnchor(anchor) {\n        if (this.supportScrollRestoration()) {\n            // Escape anything passed to `querySelector` as it can throw errors and stop the application\n            // from working if invalid values are passed.\n            if (this.window.CSS && this.window.CSS.escape) {\n                anchor = this.window.CSS.escape(anchor);\n            }\n            else {\n                anchor = anchor.replace(/(\\\"|\\'\\ |:|\\.|\\[|\\]|,|=)/g, '\\\\$1');\n            }\n            try {\n                /** @type {?} */\n                const elSelectedById = this.document.querySelector(`#${anchor}`);\n                if (elSelectedById) {\n                    this.scrollToElement(elSelectedById);\n                    return;\n                }\n                /** @type {?} */\n                const elSelectedByName = this.document.querySelector(`[name='${anchor}']`);\n                if (elSelectedByName) {\n                    this.scrollToElement(elSelectedByName);\n                    return;\n                }\n            }\n            catch (e) {\n                this.errorHandler.handleError(e);\n            }\n        }\n    }\n    /**\n     * Disables automatic scroll restoration provided by the browser.\n     * @param {?} scrollRestoration\n     * @return {?}\n     */\n    setHistoryScrollRestoration(scrollRestoration) {\n        if (this.supportScrollRestoration()) {\n            /** @type {?} */\n            const history = this.window.history;\n            if (history && history.scrollRestoration) {\n                history.scrollRestoration = scrollRestoration;\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} el\n     * @return {?}\n     */\n    scrollToElement(el) {\n        /** @type {?} */\n        const rect = el.getBoundingClientRect();\n        /** @type {?} */\n        const left = rect.left + this.window.pageXOffset;\n        /** @type {?} */\n        const top = rect.top + this.window.pageYOffset;\n        /** @type {?} */\n        const offset = this.offset();\n        this.window.scrollTo(left - offset[0], top - offset[1]);\n    }\n    /**\n     * We only support scroll restoration when we can get a hold of window.\n     * This means that we do not support this behavior when running in a web worker.\n     *\n     * Lifting this restriction right now would require more changes in the dom adapter.\n     * Since webworkers aren't widely used, we will lift it once RouterScroller is\n     * battle-tested.\n     * @private\n     * @return {?}\n     */\n    supportScrollRestoration() {\n        try {\n            return !!this.window && !!this.window.scrollTo;\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n}\n/**\n * Provides an empty implementation of the viewport scroller. This will\n * live in \\@angular/common as it will be used by both platform-server and platform-webworker.\n */\nclass NullViewportScroller {\n    /**\n     * Empty implementation\n     * @param {?} offset\n     * @return {?}\n     */\n    setOffset(offset) { }\n    /**\n     * Empty implementation\n     * @return {?}\n     */\n    getScrollPosition() { return [0, 0]; }\n    /**\n     * Empty implementation\n     * @param {?} position\n     * @return {?}\n     */\n    scrollToPosition(position) { }\n    /**\n     * Empty implementation\n     * @param {?} anchor\n     * @return {?}\n     */\n    scrollToAnchor(anchor) { }\n    /**\n     * Empty implementation\n     * @param {?} scrollRestoration\n     * @return {?}\n     */\n    setHistoryScrollRestoration(scrollRestoration) { }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { COMMON_DIRECTIVES as ɵangular_packages_common_common_e, NgClassImplProvider as ɵangular_packages_common_common_j, NgClassImplProvider__PRE_R3__ as ɵangular_packages_common_common_i, NgClassR3Impl as ɵangular_packages_common_common_h, NgStyleImplProvider as ɵangular_packages_common_common_m, NgStyleImplProvider__PRE_R3__ as ɵangular_packages_common_common_l, NgStyleR3Impl as ɵangular_packages_common_common_k, findLocaleData as ɵangular_packages_common_common_d, DEPRECATED_PLURAL_FN as ɵangular_packages_common_common_a, getPluralCase as ɵangular_packages_common_common_b, COMMON_DEPRECATED_I18N_PIPES as ɵangular_packages_common_common_g, COMMON_PIPES as ɵangular_packages_common_common_f, registerLocaleData as ɵregisterLocaleData, registerLocaleData, formatDate, formatCurrency, formatNumber, formatPercent, NgLocaleLocalization, NgLocalization, Plural, NumberFormatStyle, FormStyle, TranslationWidth, FormatWidth, NumberSymbol, WeekDay, getNumberOfCurrencyDigits, getCurrencySymbol, getLocaleDayPeriods, getLocaleDayNames, getLocaleMonthNames, getLocaleId, getLocaleEraNames, getLocaleWeekEndRange, getLocaleFirstDayOfWeek, getLocaleDateFormat, getLocaleDateTimeFormat, getLocaleExtraDayPeriodRules, getLocaleExtraDayPeriods, getLocalePluralCase, getLocaleTimeFormat, getLocaleNumberSymbol, getLocaleNumberFormat, getLocaleCurrencyName, getLocaleCurrencySymbol, parseCookieValue as ɵparseCookieValue, CommonModule, DeprecatedI18NPipesModule, NgClass, NgClassBase, NgForOf, NgForOfContext, NgIf, NgIfContext, NgPlural, NgPluralCase, NgStyle, NgStyleBase, NgSwitch, NgSwitchCase, NgSwitchDefault, NgTemplateOutlet, NgComponentOutlet, DOCUMENT, AsyncPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, JsonPipe, LowerCasePipe, CurrencyPipe, DecimalPipe, PercentPipe, SlicePipe, UpperCasePipe, TitleCasePipe, KeyValuePipe, DeprecatedDatePipe, DeprecatedCurrencyPipe, DeprecatedDecimalPipe, DeprecatedPercentPipe, PLATFORM_BROWSER_ID as ɵPLATFORM_BROWSER_ID, PLATFORM_SERVER_ID as ɵPLATFORM_SERVER_ID, PLATFORM_WORKER_APP_ID as ɵPLATFORM_WORKER_APP_ID, PLATFORM_WORKER_UI_ID as ɵPLATFORM_WORKER_UI_ID, isPlatformBrowser, isPlatformServer, isPlatformWorkerApp, isPlatformWorkerUi, VERSION, ViewportScroller, NullViewportScroller as ɵNullViewportScroller, NgClassImplProvider__POST_R3__ as ɵNgClassImplProvider__POST_R3__, NgClassR2Impl as ɵNgClassR2Impl, NgClassImpl as ɵNgClassImpl, NgStyleImplProvider__POST_R3__ as ɵNgStyleImplProvider__POST_R3__, NgStyleR2Impl as ɵNgStyleR2Impl, NgStyleImpl as ɵNgStyleImpl, ngStyleDirectiveDef__POST_R3__ as ɵngStyleDirectiveDef__POST_R3__, ngClassDirectiveDef__POST_R3__ as ɵngClassDirectiveDef__POST_R3__, PlatformLocation, LOCATION_INITIALIZED, LocationStrategy, APP_BASE_HREF, HashLocationStrategy, PathLocationStrategy, Location };\n//# sourceMappingURL=common.js.map\n","/**\n * @license Angular v8.0.0\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { ɵparseCookieValue, PlatformLocation, DOCUMENT, isPlatformServer, CommonModule, ɵPLATFORM_BROWSER_ID } from '@angular/common';\nimport { ɵglobal, Injectable, Inject, InjectionToken, ApplicationInitStatus, APP_INITIALIZER, Injector, setTestabilityGetter, NgProbeToken, Optional, ApplicationRef, NgZone, getDebugNode, ViewEncapsulation, APP_ID, RendererStyleFlags2, PLATFORM_ID, ɵConsole, SecurityContext, ɵ_sanitizeHtml, ɵ_sanitizeStyle, ɵ_sanitizeUrl, PLATFORM_INITIALIZER, Sanitizer, createPlatformFactory, platformCore, ErrorHandler, ɵAPP_ROOT, RendererFactory2, Testability, NgModule, ApplicationModule, SkipSelf, ɵɵinject, ɵɵdefineInjectable, Version } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nlet _DOM = (/** @type {?} */ (null));\n/**\n * @return {?}\n */\nfunction getDOM() {\n    return _DOM;\n}\n/**\n * @param {?} adapter\n * @return {?}\n */\nfunction setRootDomAdapter(adapter) {\n    if (!_DOM) {\n        _DOM = adapter;\n    }\n}\n/* tslint:disable:requireParameterType */\n/**\n * Provides DOM operations in an environment-agnostic way.\n *\n * \\@security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n * @abstract\n */\nclass DomAdapter {\n    constructor() {\n        this.resourceLoaderType = (/** @type {?} */ (null));\n    }\n    /**\n     * Maps attribute names to their corresponding property names for cases\n     * where attribute name doesn't match property name.\n     * @return {?}\n     */\n    get attrToPropMap() { return this._attrToPropMap; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set attrToPropMap(value) { this._attrToPropMap = value; }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Provides DOM operations in any browser environment.\n *\n * \\@security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n * @abstract\n */\nclass GenericBrowserDomAdapter extends DomAdapter {\n    constructor() {\n        super();\n        this._animationPrefix = null;\n        this._transitionEnd = null;\n        try {\n            /** @type {?} */\n            const element = this.createElement('div', document);\n            if (this.getStyle(element, 'animationName') != null) {\n                this._animationPrefix = '';\n            }\n            else {\n                /** @type {?} */\n                const domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];\n                for (let i = 0; i < domPrefixes.length; i++) {\n                    if (this.getStyle(element, domPrefixes[i] + 'AnimationName') != null) {\n                        this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';\n                        break;\n                    }\n                }\n            }\n            /** @type {?} */\n            const transEndEventNames = {\n                WebkitTransition: 'webkitTransitionEnd',\n                MozTransition: 'transitionend',\n                OTransition: 'oTransitionEnd otransitionend',\n                transition: 'transitionend'\n            };\n            Object.keys(transEndEventNames).forEach((/**\n             * @param {?} key\n             * @return {?}\n             */\n            (key) => {\n                if (this.getStyle(element, key) != null) {\n                    this._transitionEnd = transEndEventNames[key];\n                }\n            }));\n        }\n        catch (_a) {\n            this._animationPrefix = null;\n            this._transitionEnd = null;\n        }\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getDistributedNodes(el) { return ((/** @type {?} */ (el))).getDistributedNodes(); }\n    /**\n     * @param {?} el\n     * @param {?} baseUrl\n     * @param {?} href\n     * @return {?}\n     */\n    resolveAndSetHref(el, baseUrl, href) {\n        el.href = href == null ? baseUrl : baseUrl + '/../' + href;\n    }\n    /**\n     * @return {?}\n     */\n    supportsDOMEvents() { return true; }\n    /**\n     * @return {?}\n     */\n    supportsNativeShadowDOM() {\n        return typeof ((/** @type {?} */ (document.body))).createShadowRoot === 'function';\n    }\n    /**\n     * @return {?}\n     */\n    getAnimationPrefix() { return this._animationPrefix ? this._animationPrefix : ''; }\n    /**\n     * @return {?}\n     */\n    getTransitionEnd() { return this._transitionEnd ? this._transitionEnd : ''; }\n    /**\n     * @return {?}\n     */\n    supportsAnimation() {\n        return this._animationPrefix != null && this._transitionEnd != null;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst _attrToPropMap = {\n    'class': 'className',\n    'innerHtml': 'innerHTML',\n    'readonly': 'readOnly',\n    'tabindex': 'tabIndex',\n};\n/** @type {?} */\nconst DOM_KEY_LOCATION_NUMPAD = 3;\n// Map to convert some key or keyIdentifier values to what will be returned by getEventKey\n/** @type {?} */\nconst _keyMap = {\n    // The following values are here for cross-browser compatibility and to match the W3C standard\n    // cf http://www.w3.org/TR/DOM-Level-3-Events-key/\n    '\\b': 'Backspace',\n    '\\t': 'Tab',\n    '\\x7F': 'Delete',\n    '\\x1B': 'Escape',\n    'Del': 'Delete',\n    'Esc': 'Escape',\n    'Left': 'ArrowLeft',\n    'Right': 'ArrowRight',\n    'Up': 'ArrowUp',\n    'Down': 'ArrowDown',\n    'Menu': 'ContextMenu',\n    'Scroll': 'ScrollLock',\n    'Win': 'OS'\n};\n// There is a bug in Chrome for numeric keypad keys:\n// https://code.google.com/p/chromium/issues/detail?id=155654\n// 1, 2, 3 ... are reported as A, B, C ...\n/** @type {?} */\nconst _chromeNumKeyPadMap = {\n    'A': '1',\n    'B': '2',\n    'C': '3',\n    'D': '4',\n    'E': '5',\n    'F': '6',\n    'G': '7',\n    'H': '8',\n    'I': '9',\n    'J': '*',\n    'K': '+',\n    'M': '-',\n    'N': '.',\n    'O': '/',\n    '\\x60': '0',\n    '\\x90': 'NumLock'\n};\nconst ɵ0 = /**\n * @return {?}\n */\n() => {\n    if (ɵglobal['Node']) {\n        return ɵglobal['Node'].prototype.contains || (/**\n         * @param {?} node\n         * @return {?}\n         */\n        function (node) {\n            return !!(this.compareDocumentPosition(node) & 16);\n        });\n    }\n    return (/** @type {?} */ (undefined));\n};\n/** @type {?} */\nconst nodeContains = ((ɵ0))();\n/**\n * A `DomAdapter` powered by full browser DOM APIs.\n *\n * \\@security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\n/* tslint:disable:requireParameterType no-console */\nclass BrowserDomAdapter extends GenericBrowserDomAdapter {\n    /**\n     * @param {?} templateHtml\n     * @return {?}\n     */\n    parse(templateHtml) { throw new Error('parse not implemented'); }\n    /**\n     * @return {?}\n     */\n    static makeCurrent() { setRootDomAdapter(new BrowserDomAdapter()); }\n    /**\n     * @param {?} element\n     * @param {?} name\n     * @return {?}\n     */\n    hasProperty(element, name) { return name in element; }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    setProperty(el, name, value) { ((/** @type {?} */ (el)))[name] = value; }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    getProperty(el, name) { return ((/** @type {?} */ (el)))[name]; }\n    /**\n     * @param {?} el\n     * @param {?} methodName\n     * @param {?} args\n     * @return {?}\n     */\n    invoke(el, methodName, args) { ((/** @type {?} */ (el)))[methodName](...args); }\n    // TODO(tbosch): move this into a separate environment class once we have it\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    logError(error) {\n        if (window.console) {\n            if (console.error) {\n                console.error(error);\n            }\n            else {\n                console.log(error);\n            }\n        }\n    }\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    log(error) {\n        if (window.console) {\n            window.console.log && window.console.log(error);\n        }\n    }\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    logGroup(error) {\n        if (window.console) {\n            window.console.group && window.console.group(error);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    logGroupEnd() {\n        if (window.console) {\n            window.console.groupEnd && window.console.groupEnd();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get attrToPropMap() { return _attrToPropMap; }\n    /**\n     * @param {?} nodeA\n     * @param {?} nodeB\n     * @return {?}\n     */\n    contains(nodeA, nodeB) { return nodeContains.call(nodeA, nodeB); }\n    /**\n     * @param {?} el\n     * @param {?} selector\n     * @return {?}\n     */\n    querySelector(el, selector) { return el.querySelector(selector); }\n    /**\n     * @param {?} el\n     * @param {?} selector\n     * @return {?}\n     */\n    querySelectorAll(el, selector) { return el.querySelectorAll(selector); }\n    /**\n     * @param {?} el\n     * @param {?} evt\n     * @param {?} listener\n     * @return {?}\n     */\n    on(el, evt, listener) { el.addEventListener(evt, listener, false); }\n    /**\n     * @param {?} el\n     * @param {?} evt\n     * @param {?} listener\n     * @return {?}\n     */\n    onAndCancel(el, evt, listener) {\n        el.addEventListener(evt, listener, false);\n        // Needed to follow Dart's subscription semantic, until fix of\n        // https://code.google.com/p/dart/issues/detail?id=17406\n        return (/**\n         * @return {?}\n         */\n        () => { el.removeEventListener(evt, listener, false); });\n    }\n    /**\n     * @param {?} el\n     * @param {?} evt\n     * @return {?}\n     */\n    dispatchEvent(el, evt) { el.dispatchEvent(evt); }\n    /**\n     * @param {?} eventType\n     * @return {?}\n     */\n    createMouseEvent(eventType) {\n        /** @type {?} */\n        const evt = this.getDefaultDocument().createEvent('MouseEvent');\n        evt.initEvent(eventType, true, true);\n        return evt;\n    }\n    /**\n     * @param {?} eventType\n     * @return {?}\n     */\n    createEvent(eventType) {\n        /** @type {?} */\n        const evt = this.getDefaultDocument().createEvent('Event');\n        evt.initEvent(eventType, true, true);\n        return evt;\n    }\n    /**\n     * @param {?} evt\n     * @return {?}\n     */\n    preventDefault(evt) {\n        evt.preventDefault();\n        evt.returnValue = false;\n    }\n    /**\n     * @param {?} evt\n     * @return {?}\n     */\n    isPrevented(evt) {\n        return evt.defaultPrevented || evt.returnValue != null && !evt.returnValue;\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getInnerHTML(el) { return el.innerHTML; }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getTemplateContent(el) {\n        return 'content' in el && this.isTemplateElement(el) ? ((/** @type {?} */ (el))).content : null;\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getOuterHTML(el) { return el.outerHTML; }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    nodeName(node) { return node.nodeName; }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    nodeValue(node) { return node.nodeValue; }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    type(node) { return node.type; }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    content(node) {\n        if (this.hasProperty(node, 'content')) {\n            return ((/** @type {?} */ (node))).content;\n        }\n        else {\n            return node;\n        }\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    firstChild(el) { return el.firstChild; }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    nextSibling(el) { return el.nextSibling; }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    parentElement(el) { return el.parentNode; }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    childNodes(el) { return el.childNodes; }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    childNodesAsList(el) {\n        /** @type {?} */\n        const childNodes = el.childNodes;\n        /** @type {?} */\n        const res = new Array(childNodes.length);\n        for (let i = 0; i < childNodes.length; i++) {\n            res[i] = childNodes[i];\n        }\n        return res;\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    clearNodes(el) {\n        while (el.firstChild) {\n            el.removeChild(el.firstChild);\n        }\n    }\n    /**\n     * @param {?} el\n     * @param {?} node\n     * @return {?}\n     */\n    appendChild(el, node) { el.appendChild(node); }\n    /**\n     * @param {?} el\n     * @param {?} node\n     * @return {?}\n     */\n    removeChild(el, node) { el.removeChild(node); }\n    /**\n     * @param {?} el\n     * @param {?} newChild\n     * @param {?} oldChild\n     * @return {?}\n     */\n    replaceChild(el, newChild, oldChild) { el.replaceChild(newChild, oldChild); }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    remove(node) {\n        if (node.parentNode) {\n            node.parentNode.removeChild(node);\n        }\n        return node;\n    }\n    /**\n     * @param {?} parent\n     * @param {?} ref\n     * @param {?} node\n     * @return {?}\n     */\n    insertBefore(parent, ref, node) { parent.insertBefore(node, ref); }\n    /**\n     * @param {?} parent\n     * @param {?} ref\n     * @param {?} nodes\n     * @return {?}\n     */\n    insertAllBefore(parent, ref, nodes) {\n        nodes.forEach((/**\n         * @param {?} n\n         * @return {?}\n         */\n        (n) => parent.insertBefore(n, ref)));\n    }\n    /**\n     * @param {?} parent\n     * @param {?} ref\n     * @param {?} node\n     * @return {?}\n     */\n    insertAfter(parent, ref, node) { parent.insertBefore(node, ref.nextSibling); }\n    /**\n     * @param {?} el\n     * @param {?} value\n     * @return {?}\n     */\n    setInnerHTML(el, value) { el.innerHTML = value; }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getText(el) { return el.textContent; }\n    /**\n     * @param {?} el\n     * @param {?} value\n     * @return {?}\n     */\n    setText(el, value) { el.textContent = value; }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getValue(el) { return el.value; }\n    /**\n     * @param {?} el\n     * @param {?} value\n     * @return {?}\n     */\n    setValue(el, value) { el.value = value; }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getChecked(el) { return el.checked; }\n    /**\n     * @param {?} el\n     * @param {?} value\n     * @return {?}\n     */\n    setChecked(el, value) { el.checked = value; }\n    /**\n     * @param {?} text\n     * @return {?}\n     */\n    createComment(text) { return this.getDefaultDocument().createComment(text); }\n    /**\n     * @param {?} html\n     * @return {?}\n     */\n    createTemplate(html) {\n        /** @type {?} */\n        const t = this.getDefaultDocument().createElement('template');\n        t.innerHTML = html;\n        return t;\n    }\n    /**\n     * @param {?} tagName\n     * @param {?=} doc\n     * @return {?}\n     */\n    createElement(tagName, doc) {\n        doc = doc || this.getDefaultDocument();\n        return doc.createElement(tagName);\n    }\n    /**\n     * @param {?} ns\n     * @param {?} tagName\n     * @param {?=} doc\n     * @return {?}\n     */\n    createElementNS(ns, tagName, doc) {\n        doc = doc || this.getDefaultDocument();\n        return doc.createElementNS(ns, tagName);\n    }\n    /**\n     * @param {?} text\n     * @param {?=} doc\n     * @return {?}\n     */\n    createTextNode(text, doc) {\n        doc = doc || this.getDefaultDocument();\n        return doc.createTextNode(text);\n    }\n    /**\n     * @param {?} attrName\n     * @param {?} attrValue\n     * @param {?=} doc\n     * @return {?}\n     */\n    createScriptTag(attrName, attrValue, doc) {\n        doc = doc || this.getDefaultDocument();\n        /** @type {?} */\n        const el = (/** @type {?} */ (doc.createElement('SCRIPT')));\n        el.setAttribute(attrName, attrValue);\n        return el;\n    }\n    /**\n     * @param {?} css\n     * @param {?=} doc\n     * @return {?}\n     */\n    createStyleElement(css, doc) {\n        doc = doc || this.getDefaultDocument();\n        /** @type {?} */\n        const style = (/** @type {?} */ (doc.createElement('style')));\n        this.appendChild(style, this.createTextNode(css, doc));\n        return style;\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    createShadowRoot(el) { return ((/** @type {?} */ (el))).createShadowRoot(); }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getShadowRoot(el) { return ((/** @type {?} */ (el))).shadowRoot; }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getHost(el) { return ((/** @type {?} */ (el))).host; }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    clone(node) { return node.cloneNode(true); }\n    /**\n     * @param {?} element\n     * @param {?} name\n     * @return {?}\n     */\n    getElementsByClassName(element, name) {\n        return element.getElementsByClassName(name);\n    }\n    /**\n     * @param {?} element\n     * @param {?} name\n     * @return {?}\n     */\n    getElementsByTagName(element, name) {\n        return element.getElementsByTagName(name);\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    classList(element) { return Array.prototype.slice.call(element.classList, 0); }\n    /**\n     * @param {?} element\n     * @param {?} className\n     * @return {?}\n     */\n    addClass(element, className) { element.classList.add(className); }\n    /**\n     * @param {?} element\n     * @param {?} className\n     * @return {?}\n     */\n    removeClass(element, className) { element.classList.remove(className); }\n    /**\n     * @param {?} element\n     * @param {?} className\n     * @return {?}\n     */\n    hasClass(element, className) {\n        return element.classList.contains(className);\n    }\n    /**\n     * @param {?} element\n     * @param {?} styleName\n     * @param {?} styleValue\n     * @return {?}\n     */\n    setStyle(element, styleName, styleValue) {\n        element.style[styleName] = styleValue;\n    }\n    /**\n     * @param {?} element\n     * @param {?} stylename\n     * @return {?}\n     */\n    removeStyle(element, stylename) {\n        // IE requires '' instead of null\n        // see https://github.com/angular/angular/issues/7916\n        element.style[stylename] = '';\n    }\n    /**\n     * @param {?} element\n     * @param {?} stylename\n     * @return {?}\n     */\n    getStyle(element, stylename) { return element.style[stylename]; }\n    /**\n     * @param {?} element\n     * @param {?} styleName\n     * @param {?=} styleValue\n     * @return {?}\n     */\n    hasStyle(element, styleName, styleValue) {\n        /** @type {?} */\n        const value = this.getStyle(element, styleName) || '';\n        return styleValue ? value == styleValue : value.length > 0;\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    tagName(element) { return element.tagName; }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    attributeMap(element) {\n        /** @type {?} */\n        const res = new Map();\n        /** @type {?} */\n        const elAttrs = element.attributes;\n        for (let i = 0; i < elAttrs.length; i++) {\n            /** @type {?} */\n            const attrib = elAttrs.item(i);\n            res.set(attrib.name, attrib.value);\n        }\n        return res;\n    }\n    /**\n     * @param {?} element\n     * @param {?} attribute\n     * @return {?}\n     */\n    hasAttribute(element, attribute) {\n        return element.hasAttribute(attribute);\n    }\n    /**\n     * @param {?} element\n     * @param {?} ns\n     * @param {?} attribute\n     * @return {?}\n     */\n    hasAttributeNS(element, ns, attribute) {\n        return element.hasAttributeNS(ns, attribute);\n    }\n    /**\n     * @param {?} element\n     * @param {?} attribute\n     * @return {?}\n     */\n    getAttribute(element, attribute) {\n        return element.getAttribute(attribute);\n    }\n    /**\n     * @param {?} element\n     * @param {?} ns\n     * @param {?} name\n     * @return {?}\n     */\n    getAttributeNS(element, ns, name) {\n        return element.getAttributeNS(ns, name);\n    }\n    /**\n     * @param {?} element\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    setAttribute(element, name, value) { element.setAttribute(name, value); }\n    /**\n     * @param {?} element\n     * @param {?} ns\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    setAttributeNS(element, ns, name, value) {\n        element.setAttributeNS(ns, name, value);\n    }\n    /**\n     * @param {?} element\n     * @param {?} attribute\n     * @return {?}\n     */\n    removeAttribute(element, attribute) { element.removeAttribute(attribute); }\n    /**\n     * @param {?} element\n     * @param {?} ns\n     * @param {?} name\n     * @return {?}\n     */\n    removeAttributeNS(element, ns, name) {\n        element.removeAttributeNS(ns, name);\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    templateAwareRoot(el) { return this.isTemplateElement(el) ? this.content(el) : el; }\n    /**\n     * @return {?}\n     */\n    createHtmlDocument() {\n        return document.implementation.createHTMLDocument('fakeTitle');\n    }\n    /**\n     * @return {?}\n     */\n    getDefaultDocument() { return document; }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getBoundingClientRect(el) {\n        try {\n            return el.getBoundingClientRect();\n        }\n        catch (_a) {\n            return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };\n        }\n    }\n    /**\n     * @param {?} doc\n     * @return {?}\n     */\n    getTitle(doc) { return doc.title; }\n    /**\n     * @param {?} doc\n     * @param {?} newTitle\n     * @return {?}\n     */\n    setTitle(doc, newTitle) { doc.title = newTitle || ''; }\n    /**\n     * @param {?} n\n     * @param {?} selector\n     * @return {?}\n     */\n    elementMatches(n, selector) {\n        if (this.isElementNode(n)) {\n            return n.matches && n.matches(selector) ||\n                n.msMatchesSelector && n.msMatchesSelector(selector) ||\n                n.webkitMatchesSelector && n.webkitMatchesSelector(selector);\n        }\n        return false;\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    isTemplateElement(el) {\n        return this.isElementNode(el) && el.nodeName === 'TEMPLATE';\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    isTextNode(node) { return node.nodeType === Node.TEXT_NODE; }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    isCommentNode(node) { return node.nodeType === Node.COMMENT_NODE; }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    isElementNode(node) { return node.nodeType === Node.ELEMENT_NODE; }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    hasShadowRoot(node) {\n        return node.shadowRoot != null && node instanceof HTMLElement;\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    isShadowRoot(node) { return node instanceof DocumentFragment; }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    importIntoDoc(node) { return document.importNode(this.templateAwareRoot(node), true); }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    adoptNode(node) { return document.adoptNode(node); }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getHref(el) { return (/** @type {?} */ (el.getAttribute('href'))); }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    getEventKey(event) {\n        /** @type {?} */\n        let key = event.key;\n        if (key == null) {\n            key = event.keyIdentifier;\n            // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and\n            // Safari cf\n            // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces\n            if (key == null) {\n                return 'Unidentified';\n            }\n            if (key.startsWith('U+')) {\n                key = String.fromCharCode(parseInt(key.substring(2), 16));\n                if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {\n                    // There is a bug in Chrome for numeric keypad keys:\n                    // https://code.google.com/p/chromium/issues/detail?id=155654\n                    // 1, 2, 3 ... are reported as A, B, C ...\n                    key = ((/** @type {?} */ (_chromeNumKeyPadMap)))[key];\n                }\n            }\n        }\n        return _keyMap[key] || key;\n    }\n    /**\n     * @param {?} doc\n     * @param {?} target\n     * @return {?}\n     */\n    getGlobalEventTarget(doc, target) {\n        if (target === 'window') {\n            return window;\n        }\n        if (target === 'document') {\n            return doc;\n        }\n        if (target === 'body') {\n            return doc.body;\n        }\n        return null;\n    }\n    /**\n     * @return {?}\n     */\n    getHistory() { return window.history; }\n    /**\n     * @return {?}\n     */\n    getLocation() { return window.location; }\n    /**\n     * @param {?} doc\n     * @return {?}\n     */\n    getBaseHref(doc) {\n        /** @type {?} */\n        const href = getBaseElementHref();\n        return href == null ? null : relativePath(href);\n    }\n    /**\n     * @return {?}\n     */\n    resetBaseElement() { baseElement = null; }\n    /**\n     * @return {?}\n     */\n    getUserAgent() { return window.navigator.userAgent; }\n    /**\n     * @param {?} element\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    setData(element, name, value) {\n        this.setAttribute(element, 'data-' + name, value);\n    }\n    /**\n     * @param {?} element\n     * @param {?} name\n     * @return {?}\n     */\n    getData(element, name) {\n        return this.getAttribute(element, 'data-' + name);\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    getComputedStyle(element) { return getComputedStyle(element); }\n    // TODO(tbosch): move this into a separate environment class once we have it\n    /**\n     * @return {?}\n     */\n    supportsWebAnimation() {\n        return typeof ((/** @type {?} */ (Element))).prototype['animate'] === 'function';\n    }\n    /**\n     * @return {?}\n     */\n    performanceNow() {\n        // performance.now() is not available in all browsers, see\n        // http://caniuse.com/#search=performance.now\n        return window.performance && window.performance.now ? window.performance.now() :\n            new Date().getTime();\n    }\n    /**\n     * @return {?}\n     */\n    supportsCookies() { return true; }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    getCookie(name) { return ɵparseCookieValue(document.cookie, name); }\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    setCookie(name, value) {\n        // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does\n        // not clear other cookies.\n        document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);\n    }\n}\n/** @type {?} */\nlet baseElement = null;\n/**\n * @return {?}\n */\nfunction getBaseElementHref() {\n    if (!baseElement) {\n        baseElement = (/** @type {?} */ (document.querySelector('base')));\n        if (!baseElement) {\n            return null;\n        }\n    }\n    return baseElement.getAttribute('href');\n}\n// based on urlUtils.js in AngularJS 1\n/** @type {?} */\nlet urlParsingNode;\n/**\n * @param {?} url\n * @return {?}\n */\nfunction relativePath(url) {\n    if (!urlParsingNode) {\n        urlParsingNode = document.createElement('a');\n    }\n    urlParsingNode.setAttribute('href', url);\n    return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :\n        '/' + urlParsingNode.pathname;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @return {?}\n */\nfunction supportsState() {\n    return !!window.history.pushState;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * `PlatformLocation` encapsulates all of the direct calls to platform APIs.\n * This class should not be used directly by an application developer. Instead, use\n * {\\@link Location}.\n */\nclass BrowserPlatformLocation extends PlatformLocation {\n    /**\n     * @param {?} _doc\n     */\n    constructor(_doc) {\n        super();\n        this._doc = _doc;\n        this._init();\n    }\n    // This is moved to its own method so that `MockPlatformLocationStrategy` can overwrite it\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _init() {\n        ((/** @type {?} */ (this))).location = getDOM().getLocation();\n        this._history = getDOM().getHistory();\n    }\n    /**\n     * @return {?}\n     */\n    getBaseHrefFromDOM() { return (/** @type {?} */ (getDOM().getBaseHref(this._doc))); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onPopState(fn) {\n        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onHashChange(fn) {\n        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);\n    }\n    /**\n     * @return {?}\n     */\n    get href() { return this.location.href; }\n    /**\n     * @return {?}\n     */\n    get protocol() { return this.location.protocol; }\n    /**\n     * @return {?}\n     */\n    get hostname() { return this.location.hostname; }\n    /**\n     * @return {?}\n     */\n    get port() { return this.location.port; }\n    /**\n     * @return {?}\n     */\n    get pathname() { return this.location.pathname; }\n    /**\n     * @return {?}\n     */\n    get search() { return this.location.search; }\n    /**\n     * @return {?}\n     */\n    get hash() { return this.location.hash; }\n    /**\n     * @param {?} newPath\n     * @return {?}\n     */\n    set pathname(newPath) { this.location.pathname = newPath; }\n    /**\n     * @param {?} state\n     * @param {?} title\n     * @param {?} url\n     * @return {?}\n     */\n    pushState(state, title, url) {\n        if (supportsState()) {\n            this._history.pushState(state, title, url);\n        }\n        else {\n            this.location.hash = url;\n        }\n    }\n    /**\n     * @param {?} state\n     * @param {?} title\n     * @param {?} url\n     * @return {?}\n     */\n    replaceState(state, title, url) {\n        if (supportsState()) {\n            this._history.replaceState(state, title, url);\n        }\n        else {\n            this.location.hash = url;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    forward() { this._history.forward(); }\n    /**\n     * @return {?}\n     */\n    back() { this._history.back(); }\n    /**\n     * @return {?}\n     */\n    getState() { return this._history.state; }\n}\nBrowserPlatformLocation.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nBrowserPlatformLocation.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An id that identifies a particular application being bootstrapped, that should\n * match across the client/server boundary.\n * @type {?}\n */\nconst TRANSITION_ID = new InjectionToken('TRANSITION_ID');\n/**\n * @param {?} transitionId\n * @param {?} document\n * @param {?} injector\n * @return {?}\n */\nfunction appInitializerFactory(transitionId, document, injector) {\n    return (/**\n     * @return {?}\n     */\n    () => {\n        // Wait for all application initializers to be completed before removing the styles set by\n        // the server.\n        injector.get(ApplicationInitStatus).donePromise.then((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const dom = getDOM();\n            /** @type {?} */\n            const styles = Array.prototype.slice.apply(dom.querySelectorAll(document, `style[ng-transition]`));\n            styles.filter((/**\n             * @param {?} el\n             * @return {?}\n             */\n            el => dom.getAttribute(el, 'ng-transition') === transitionId))\n                .forEach((/**\n             * @param {?} el\n             * @return {?}\n             */\n            el => dom.remove(el)));\n        }));\n    });\n}\n/** @type {?} */\nconst SERVER_TRANSITION_PROVIDERS = [\n    {\n        provide: APP_INITIALIZER,\n        useFactory: appInitializerFactory,\n        deps: [TRANSITION_ID, DOCUMENT, Injector],\n        multi: true\n    },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BrowserGetTestability {\n    /**\n     * @return {?}\n     */\n    static init() { setTestabilityGetter(new BrowserGetTestability()); }\n    /**\n     * @param {?} registry\n     * @return {?}\n     */\n    addToWindow(registry) {\n        ɵglobal['getAngularTestability'] = (/**\n         * @param {?} elem\n         * @param {?=} findInAncestors\n         * @return {?}\n         */\n        (elem, findInAncestors = true) => {\n            /** @type {?} */\n            const testability = registry.findTestabilityInTree(elem, findInAncestors);\n            if (testability == null) {\n                throw new Error('Could not find testability for element.');\n            }\n            return testability;\n        });\n        ɵglobal['getAllAngularTestabilities'] = (/**\n         * @return {?}\n         */\n        () => registry.getAllTestabilities());\n        ɵglobal['getAllAngularRootElements'] = (/**\n         * @return {?}\n         */\n        () => registry.getAllRootElements());\n        /** @type {?} */\n        const whenAllStable = (/**\n         * @param {?} callback\n         * @return {?}\n         */\n        (callback /** TODO #9100 */) => {\n            /** @type {?} */\n            const testabilities = ɵglobal['getAllAngularTestabilities']();\n            /** @type {?} */\n            let count = testabilities.length;\n            /** @type {?} */\n            let didWork = false;\n            /** @type {?} */\n            const decrement = (/**\n             * @param {?} didWork_\n             * @return {?}\n             */\n            function (didWork_ /** TODO #9100 */) {\n                didWork = didWork || didWork_;\n                count--;\n                if (count == 0) {\n                    callback(didWork);\n                }\n            });\n            testabilities.forEach((/**\n             * @param {?} testability\n             * @return {?}\n             */\n            function (testability /** TODO #9100 */) {\n                testability.whenStable(decrement);\n            }));\n        });\n        if (!ɵglobal['frameworkStabilizers']) {\n            ɵglobal['frameworkStabilizers'] = [];\n        }\n        ɵglobal['frameworkStabilizers'].push(whenAllStable);\n    }\n    /**\n     * @param {?} registry\n     * @param {?} elem\n     * @param {?} findInAncestors\n     * @return {?}\n     */\n    findTestabilityInTree(registry, elem, findInAncestors) {\n        if (elem == null) {\n            return null;\n        }\n        /** @type {?} */\n        const t = registry.getTestability(elem);\n        if (t != null) {\n            return t;\n        }\n        else if (!findInAncestors) {\n            return null;\n        }\n        if (getDOM().isShadowRoot(elem)) {\n            return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);\n        }\n        return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if\n * `name` is `'probe'`.\n * @param {?} name Name under which it will be exported. Keep in mind this will be a property of the\n * global `ng` object.\n * @param {?} value The value to export.\n * @return {?}\n */\nfunction exportNgVar(name, value) {\n    if (typeof COMPILED === 'undefined' || !COMPILED) {\n        // Note: we can't export `ng` when using closure enhanced optimization as:\n        // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n        // - we can't declare a closure extern as the namespace `ng` is already used within Google\n        //   for typings for angularJS (via `goog.provide('ng....')`).\n        /** @type {?} */\n        const ng = ɵglobal['ng'] = ((/** @type {?} */ (ɵglobal['ng']))) || {};\n        ng[name] = value;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst ɵ0$1 = /**\n * @return {?}\n */\n() => ({\n    'ApplicationRef': ApplicationRef,\n    'NgZone': NgZone,\n});\n/** @type {?} */\nconst CORE_TOKENS = ((ɵ0$1))();\n/** @type {?} */\nconst INSPECT_GLOBAL_NAME = 'probe';\n/** @type {?} */\nconst CORE_TOKENS_GLOBAL_NAME = 'coreTokens';\n/**\n * Returns a {\\@link DebugElement} for the given native DOM element, or\n * null if the given native element does not have an Angular view associated\n * with it.\n * @param {?} element\n * @return {?}\n */\nfunction inspectNativeElement(element) {\n    return getDebugNode(element);\n}\n/**\n * @param {?} coreTokens\n * @return {?}\n */\nfunction _createNgProbe(coreTokens) {\n    exportNgVar(INSPECT_GLOBAL_NAME, inspectNativeElement);\n    exportNgVar(CORE_TOKENS_GLOBAL_NAME, Object.assign({}, CORE_TOKENS, _ngProbeTokensToMap(coreTokens || [])));\n    return (/**\n     * @return {?}\n     */\n    () => inspectNativeElement);\n}\n/**\n * @param {?} tokens\n * @return {?}\n */\nfunction _ngProbeTokensToMap(tokens) {\n    return tokens.reduce((/**\n     * @param {?} prev\n     * @param {?} t\n     * @return {?}\n     */\n    (prev, t) => (prev[t.name] = t.token, prev)), {});\n}\n/**\n * In Ivy, we don't support NgProbe because we have our own set of testing utilities\n * with more robust functionality.\n *\n * We shouldn't bring in NgProbe because it prevents DebugNode and friends from\n * tree-shaking properly.\n * @type {?}\n */\nconst ELEMENT_PROBE_PROVIDERS__POST_R3__ = [];\n/**\n * Providers which support debugging Angular applications (e.g. via `ng.probe`).\n * @type {?}\n */\nconst ELEMENT_PROBE_PROVIDERS__PRE_R3__ = [\n    {\n        provide: APP_INITIALIZER,\n        useFactory: _createNgProbe,\n        deps: [\n            [NgProbeToken, new Optional()],\n        ],\n        multi: true,\n    },\n];\n/** @type {?} */\nconst ELEMENT_PROBE_PROVIDERS = ELEMENT_PROBE_PROVIDERS__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The injection token for the event-manager plug-in service.\n *\n * \\@publicApi\n * @type {?}\n */\nconst EVENT_MANAGER_PLUGINS = new InjectionToken('EventManagerPlugins');\n/**\n * An injectable service that provides event management for Angular\n * through a browser plug-in.\n *\n * \\@publicApi\n */\nclass EventManager {\n    /**\n     * Initializes an instance of the event-manager service.\n     * @param {?} plugins\n     * @param {?} _zone\n     */\n    constructor(plugins, _zone) {\n        this._zone = _zone;\n        this._eventNameToPlugin = new Map();\n        plugins.forEach((/**\n         * @template THIS\n         * @this {THIS}\n         * @param {?} p\n         * @return {THIS}\n         */\n        p => p.manager = this));\n        this._plugins = plugins.slice().reverse();\n    }\n    /**\n     * Registers a handler for a specific element and event.\n     *\n     * @param {?} element The HTML element to receive event notifications.\n     * @param {?} eventName The name of the event to listen for.\n     * @param {?} handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @return {?} A callback function that can be used to remove the handler.\n     */\n    addEventListener(element, eventName, handler) {\n        /** @type {?} */\n        const plugin = this._findPluginFor(eventName);\n        return plugin.addEventListener(element, eventName, handler);\n    }\n    /**\n     * Registers a global handler for an event in a target view.\n     *\n     * @param {?} target A target for global event notifications. One of \"window\", \"document\", or \"body\".\n     * @param {?} eventName The name of the event to listen for.\n     * @param {?} handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @return {?} A callback function that can be used to remove the handler.\n     */\n    addGlobalEventListener(target, eventName, handler) {\n        /** @type {?} */\n        const plugin = this._findPluginFor(eventName);\n        return plugin.addGlobalEventListener(target, eventName, handler);\n    }\n    /**\n     * Retrieves the compilation zone in which event listeners are registered.\n     * @return {?}\n     */\n    getZone() { return this._zone; }\n    /**\n     * \\@internal\n     * @param {?} eventName\n     * @return {?}\n     */\n    _findPluginFor(eventName) {\n        /** @type {?} */\n        const plugin = this._eventNameToPlugin.get(eventName);\n        if (plugin) {\n            return plugin;\n        }\n        /** @type {?} */\n        const plugins = this._plugins;\n        for (let i = 0; i < plugins.length; i++) {\n            /** @type {?} */\n            const plugin = plugins[i];\n            if (plugin.supports(eventName)) {\n                this._eventNameToPlugin.set(eventName, plugin);\n                return plugin;\n            }\n        }\n        throw new Error(`No event manager plugin found for event ${eventName}`);\n    }\n}\nEventManager.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nEventManager.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Inject, args: [EVENT_MANAGER_PLUGINS,] }] },\n    { type: NgZone }\n];\n/**\n * @abstract\n */\nclass EventManagerPlugin {\n    /**\n     * @param {?} _doc\n     */\n    constructor(_doc) {\n        this._doc = _doc;\n    }\n    /**\n     * @param {?} element\n     * @param {?} eventName\n     * @param {?} handler\n     * @return {?}\n     */\n    addGlobalEventListener(element, eventName, handler) {\n        /** @type {?} */\n        const target = getDOM().getGlobalEventTarget(this._doc, element);\n        if (!target) {\n            throw new Error(`Unsupported event target ${target} for event ${eventName}`);\n        }\n        return this.addEventListener(target, eventName, handler);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass SharedStylesHost {\n    constructor() {\n        /**\n         * \\@internal\n         */\n        this._stylesSet = new Set();\n    }\n    /**\n     * @param {?} styles\n     * @return {?}\n     */\n    addStyles(styles) {\n        /** @type {?} */\n        const additions = new Set();\n        styles.forEach((/**\n         * @param {?} style\n         * @return {?}\n         */\n        style => {\n            if (!this._stylesSet.has(style)) {\n                this._stylesSet.add(style);\n                additions.add(style);\n            }\n        }));\n        this.onStylesAdded(additions);\n    }\n    /**\n     * @param {?} additions\n     * @return {?}\n     */\n    onStylesAdded(additions) { }\n    /**\n     * @return {?}\n     */\n    getAllStyles() { return Array.from(this._stylesSet); }\n}\nSharedStylesHost.decorators = [\n    { type: Injectable }\n];\nclass DomSharedStylesHost extends SharedStylesHost {\n    /**\n     * @param {?} _doc\n     */\n    constructor(_doc) {\n        super();\n        this._doc = _doc;\n        this._hostNodes = new Set();\n        this._styleNodes = new Set();\n        this._hostNodes.add(_doc.head);\n    }\n    /**\n     * @private\n     * @param {?} styles\n     * @param {?} host\n     * @return {?}\n     */\n    _addStylesToHost(styles, host) {\n        styles.forEach((/**\n         * @param {?} style\n         * @return {?}\n         */\n        (style) => {\n            /** @type {?} */\n            const styleEl = this._doc.createElement('style');\n            styleEl.textContent = style;\n            this._styleNodes.add(host.appendChild(styleEl));\n        }));\n    }\n    /**\n     * @param {?} hostNode\n     * @return {?}\n     */\n    addHost(hostNode) {\n        this._addStylesToHost(this._stylesSet, hostNode);\n        this._hostNodes.add(hostNode);\n    }\n    /**\n     * @param {?} hostNode\n     * @return {?}\n     */\n    removeHost(hostNode) { this._hostNodes.delete(hostNode); }\n    /**\n     * @param {?} additions\n     * @return {?}\n     */\n    onStylesAdded(additions) {\n        this._hostNodes.forEach((/**\n         * @param {?} hostNode\n         * @return {?}\n         */\n        hostNode => this._addStylesToHost(additions, hostNode)));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() { this._styleNodes.forEach((/**\n     * @param {?} styleNode\n     * @return {?}\n     */\n    styleNode => getDOM().remove(styleNode))); }\n}\nDomSharedStylesHost.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nDomSharedStylesHost.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst NAMESPACE_URIS = {\n    'svg': 'http://www.w3.org/2000/svg',\n    'xhtml': 'http://www.w3.org/1999/xhtml',\n    'xlink': 'http://www.w3.org/1999/xlink',\n    'xml': 'http://www.w3.org/XML/1998/namespace',\n    'xmlns': 'http://www.w3.org/2000/xmlns/',\n};\n/** @type {?} */\nconst COMPONENT_REGEX = /%COMP%/g;\n/** @type {?} */\nconst COMPONENT_VARIABLE = '%COMP%';\n/** @type {?} */\nconst HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\n/** @type {?} */\nconst CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\n/**\n * @param {?} componentShortId\n * @return {?}\n */\nfunction shimContentAttribute(componentShortId) {\n    return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n/**\n * @param {?} componentShortId\n * @return {?}\n */\nfunction shimHostAttribute(componentShortId) {\n    return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n/**\n * @param {?} compId\n * @param {?} styles\n * @param {?} target\n * @return {?}\n */\nfunction flattenStyles(compId, styles, target) {\n    for (let i = 0; i < styles.length; i++) {\n        /** @type {?} */\n        let style = styles[i];\n        if (Array.isArray(style)) {\n            flattenStyles(compId, style, target);\n        }\n        else {\n            style = style.replace(COMPONENT_REGEX, compId);\n            target.push(style);\n        }\n    }\n    return target;\n}\n/**\n * @param {?} eventHandler\n * @return {?}\n */\nfunction decoratePreventDefault(eventHandler) {\n    return (/**\n     * @param {?} event\n     * @return {?}\n     */\n    (event) => {\n        /** @type {?} */\n        const allowDefaultBehavior = eventHandler(event);\n        if (allowDefaultBehavior === false) {\n            // TODO(tbosch): move preventDefault into event plugins...\n            event.preventDefault();\n            event.returnValue = false;\n        }\n    });\n}\nclass DomRendererFactory2 {\n    /**\n     * @param {?} eventManager\n     * @param {?} sharedStylesHost\n     * @param {?} appId\n     */\n    constructor(eventManager, sharedStylesHost, appId) {\n        this.eventManager = eventManager;\n        this.sharedStylesHost = sharedStylesHost;\n        this.appId = appId;\n        this.rendererByCompId = new Map();\n        this.defaultRenderer = new DefaultDomRenderer2(eventManager);\n    }\n    /**\n     * @param {?} element\n     * @param {?} type\n     * @return {?}\n     */\n    createRenderer(element, type) {\n        if (!element || !type) {\n            return this.defaultRenderer;\n        }\n        switch (type.encapsulation) {\n            case ViewEncapsulation.Emulated: {\n                /** @type {?} */\n                let renderer = this.rendererByCompId.get(type.id);\n                if (!renderer) {\n                    renderer = new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type, this.appId);\n                    this.rendererByCompId.set(type.id, renderer);\n                }\n                ((/** @type {?} */ (renderer))).applyToHost(element);\n                return renderer;\n            }\n            case ViewEncapsulation.Native:\n            case ViewEncapsulation.ShadowDom:\n                return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);\n            default: {\n                if (!this.rendererByCompId.has(type.id)) {\n                    /** @type {?} */\n                    const styles = flattenStyles(type.id, type.styles, []);\n                    this.sharedStylesHost.addStyles(styles);\n                    this.rendererByCompId.set(type.id, this.defaultRenderer);\n                }\n                return this.defaultRenderer;\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    begin() { }\n    /**\n     * @return {?}\n     */\n    end() { }\n}\nDomRendererFactory2.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nDomRendererFactory2.ctorParameters = () => [\n    { type: EventManager },\n    { type: DomSharedStylesHost },\n    { type: String, decorators: [{ type: Inject, args: [APP_ID,] }] }\n];\nclass DefaultDomRenderer2 {\n    /**\n     * @param {?} eventManager\n     */\n    constructor(eventManager) {\n        this.eventManager = eventManager;\n        this.data = Object.create(null);\n    }\n    /**\n     * @return {?}\n     */\n    destroy() { }\n    /**\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    createElement(name, namespace) {\n        if (namespace) {\n            // In cases where Ivy (not ViewEngine) is giving us the actual namespace, the look up by key\n            // will result in undefined, so we just return the namespace here.\n            return document.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);\n        }\n        return document.createElement(name);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    createComment(value) { return document.createComment(value); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    createText(value) { return document.createTextNode(value); }\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    appendChild(parent, newChild) { parent.appendChild(newChild); }\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    insertBefore(parent, newChild, refChild) {\n        if (parent) {\n            parent.insertBefore(newChild, refChild);\n        }\n    }\n    /**\n     * @param {?} parent\n     * @param {?} oldChild\n     * @return {?}\n     */\n    removeChild(parent, oldChild) {\n        if (parent) {\n            parent.removeChild(oldChild);\n        }\n    }\n    /**\n     * @param {?} selectorOrNode\n     * @param {?=} preserveContent\n     * @return {?}\n     */\n    selectRootElement(selectorOrNode, preserveContent) {\n        /** @type {?} */\n        let el = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) :\n            selectorOrNode;\n        if (!el) {\n            throw new Error(`The selector \"${selectorOrNode}\" did not match any elements`);\n        }\n        if (!preserveContent) {\n            el.textContent = '';\n        }\n        return el;\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    parentNode(node) { return node.parentNode; }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    nextSibling(node) { return node.nextSibling; }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} namespace\n     * @return {?}\n     */\n    setAttribute(el, name, value, namespace) {\n        if (namespace) {\n            name = `${namespace}:${name}`;\n            // TODO(benlesh): Ivy may cause issues here because it's passing around\n            // full URIs for namespaces, therefore this lookup will fail.\n            /** @type {?} */\n            const namespaceUri = NAMESPACE_URIS[namespace];\n            if (namespaceUri) {\n                el.setAttributeNS(namespaceUri, name, value);\n            }\n            else {\n                el.setAttribute(name, value);\n            }\n        }\n        else {\n            el.setAttribute(name, value);\n        }\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    removeAttribute(el, name, namespace) {\n        if (namespace) {\n            // TODO(benlesh): Ivy may cause issues here because it's passing around\n            // full URIs for namespaces, therefore this lookup will fail.\n            /** @type {?} */\n            const namespaceUri = NAMESPACE_URIS[namespace];\n            if (namespaceUri) {\n                el.removeAttributeNS(namespaceUri, name);\n            }\n            else {\n                // TODO(benlesh): Since ivy is passing around full URIs for namespaces\n                // this could result in properties like `http://www.w3.org/2000/svg:cx=\"123\"`,\n                // which is wrong.\n                el.removeAttribute(`${namespace}:${name}`);\n            }\n        }\n        else {\n            el.removeAttribute(name);\n        }\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    addClass(el, name) { el.classList.add(name); }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    removeClass(el, name) { el.classList.remove(name); }\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} value\n     * @param {?} flags\n     * @return {?}\n     */\n    setStyle(el, style, value, flags) {\n        if (flags & RendererStyleFlags2.DashCase) {\n            el.style.setProperty(style, value, !!(flags & RendererStyleFlags2.Important) ? 'important' : '');\n        }\n        else {\n            el.style[style] = value;\n        }\n    }\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} flags\n     * @return {?}\n     */\n    removeStyle(el, style, flags) {\n        if (flags & RendererStyleFlags2.DashCase) {\n            el.style.removeProperty(style);\n        }\n        else {\n            // IE requires '' instead of null\n            // see https://github.com/angular/angular/issues/7916\n            el.style[style] = '';\n        }\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    setProperty(el, name, value) {\n        checkNoSyntheticProp(name, 'property');\n        el[name] = value;\n    }\n    /**\n     * @param {?} node\n     * @param {?} value\n     * @return {?}\n     */\n    setValue(node, value) { node.nodeValue = value; }\n    /**\n     * @param {?} target\n     * @param {?} event\n     * @param {?} callback\n     * @return {?}\n     */\n    listen(target, event, callback) {\n        checkNoSyntheticProp(event, 'listener');\n        if (typeof target === 'string') {\n            return (/** @type {?} */ (this.eventManager.addGlobalEventListener(target, event, decoratePreventDefault(callback))));\n        }\n        return (/** @type {?} */ ((/** @type {?} */ (this.eventManager.addEventListener(target, event, decoratePreventDefault(callback))))));\n    }\n}\nconst ɵ0$2 = /**\n * @return {?}\n */\n() => '@'.charCodeAt(0);\n/** @type {?} */\nconst AT_CHARCODE = ((ɵ0$2))();\n/**\n * @param {?} name\n * @param {?} nameKind\n * @return {?}\n */\nfunction checkNoSyntheticProp(name, nameKind) {\n    if (name.charCodeAt(0) === AT_CHARCODE) {\n        throw new Error(`Found the synthetic ${nameKind} ${name}. Please include either \"BrowserAnimationsModule\" or \"NoopAnimationsModule\" in your application.`);\n    }\n}\nclass EmulatedEncapsulationDomRenderer2 extends DefaultDomRenderer2 {\n    /**\n     * @param {?} eventManager\n     * @param {?} sharedStylesHost\n     * @param {?} component\n     * @param {?} appId\n     */\n    constructor(eventManager, sharedStylesHost, component, appId) {\n        super(eventManager);\n        this.component = component;\n        /** @type {?} */\n        const styles = flattenStyles(appId + '-' + component.id, component.styles, []);\n        sharedStylesHost.addStyles(styles);\n        this.contentAttr = shimContentAttribute(appId + '-' + component.id);\n        this.hostAttr = shimHostAttribute(appId + '-' + component.id);\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    applyToHost(element) { super.setAttribute(element, this.hostAttr, ''); }\n    /**\n     * @param {?} parent\n     * @param {?} name\n     * @return {?}\n     */\n    createElement(parent, name) {\n        /** @type {?} */\n        const el = super.createElement(parent, name);\n        super.setAttribute(el, this.contentAttr, '');\n        return el;\n    }\n}\nclass ShadowDomRenderer extends DefaultDomRenderer2 {\n    /**\n     * @param {?} eventManager\n     * @param {?} sharedStylesHost\n     * @param {?} hostEl\n     * @param {?} component\n     */\n    constructor(eventManager, sharedStylesHost, hostEl, component) {\n        super(eventManager);\n        this.sharedStylesHost = sharedStylesHost;\n        this.hostEl = hostEl;\n        this.component = component;\n        if (component.encapsulation === ViewEncapsulation.ShadowDom) {\n            this.shadowRoot = ((/** @type {?} */ (hostEl))).attachShadow({ mode: 'open' });\n        }\n        else {\n            this.shadowRoot = ((/** @type {?} */ (hostEl))).createShadowRoot();\n        }\n        this.sharedStylesHost.addHost(this.shadowRoot);\n        /** @type {?} */\n        const styles = flattenStyles(component.id, component.styles, []);\n        for (let i = 0; i < styles.length; i++) {\n            /** @type {?} */\n            const styleEl = document.createElement('style');\n            styleEl.textContent = styles[i];\n            this.shadowRoot.appendChild(styleEl);\n        }\n    }\n    /**\n     * @private\n     * @param {?} node\n     * @return {?}\n     */\n    nodeOrShadowRoot(node) { return node === this.hostEl ? this.shadowRoot : node; }\n    /**\n     * @return {?}\n     */\n    destroy() { this.sharedStylesHost.removeHost(this.shadowRoot); }\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    appendChild(parent, newChild) {\n        return super.appendChild(this.nodeOrShadowRoot(parent), newChild);\n    }\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    insertBefore(parent, newChild, refChild) {\n        return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);\n    }\n    /**\n     * @param {?} parent\n     * @param {?} oldChild\n     * @return {?}\n     */\n    removeChild(parent, oldChild) {\n        return super.removeChild(this.nodeOrShadowRoot(parent), oldChild);\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    parentNode(node) {\n        return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst ɵ0$3 = /**\n * @return {?}\n */\n() => (typeof Zone !== 'undefined') && ((/** @type {?} */ (Zone)))['__symbol__'] ||\n    (/**\n     * @param {?} v\n     * @return {?}\n     */\n    function (v) { return '__zone_symbol__' + v; });\n/**\n * Detect if Zone is present. If it is then use simple zone aware 'addEventListener'\n * since Angular can do much more\n * efficient bookkeeping than Zone can, because we have additional information. This speeds up\n * addEventListener by 3x.\n * @type {?}\n */\nconst __symbol__ = ((ɵ0$3))();\n/** @type {?} */\nconst ADD_EVENT_LISTENER = __symbol__('addEventListener');\n/** @type {?} */\nconst REMOVE_EVENT_LISTENER = __symbol__('removeEventListener');\n/** @type {?} */\nconst symbolNames = {};\n/** @type {?} */\nconst FALSE = 'FALSE';\n/** @type {?} */\nconst ANGULAR = 'ANGULAR';\n/** @type {?} */\nconst NATIVE_ADD_LISTENER = 'addEventListener';\n/** @type {?} */\nconst NATIVE_REMOVE_LISTENER = 'removeEventListener';\n// use the same symbol string which is used in zone.js\n/** @type {?} */\nconst stopSymbol = '__zone_symbol__propagationStopped';\n/** @type {?} */\nconst stopMethodSymbol = '__zone_symbol__stopImmediatePropagation';\nconst ɵ1 = /**\n * @return {?}\n */\n() => {\n    /** @type {?} */\n    const blackListedEvents = (typeof Zone !== 'undefined') && ((/** @type {?} */ (Zone)))[__symbol__('BLACK_LISTED_EVENTS')];\n    if (blackListedEvents) {\n        /** @type {?} */\n        const res = {};\n        blackListedEvents.forEach((/**\n         * @param {?} eventName\n         * @return {?}\n         */\n        eventName => { res[eventName] = eventName; }));\n        return res;\n    }\n    return undefined;\n};\n/** @type {?} */\nconst blackListedMap = ((ɵ1))();\n/** @type {?} */\nconst isBlackListedEvent = (/**\n * @param {?} eventName\n * @return {?}\n */\nfunction (eventName) {\n    if (!blackListedMap) {\n        return false;\n    }\n    return blackListedMap.hasOwnProperty(eventName);\n});\n// a global listener to handle all dom event,\n// so we do not need to create a closure every time\n/** @type {?} */\nconst globalListener = (/**\n * @param {?} event\n * @return {?}\n */\nfunction (event) {\n    /** @type {?} */\n    const symbolName = symbolNames[event.type];\n    if (!symbolName) {\n        return;\n    }\n    /** @type {?} */\n    const taskDatas = this[symbolName];\n    if (!taskDatas) {\n        return;\n    }\n    /** @type {?} */\n    const args = [event];\n    if (taskDatas.length === 1) {\n        // if taskDatas only have one element, just invoke it\n        /** @type {?} */\n        const taskData = taskDatas[0];\n        if (taskData.zone !== Zone.current) {\n            // only use Zone.run when Zone.current not equals to stored zone\n            return taskData.zone.run(taskData.handler, this, args);\n        }\n        else {\n            return taskData.handler.apply(this, args);\n        }\n    }\n    else {\n        // copy tasks as a snapshot to avoid event handlers remove\n        // itself or others\n        /** @type {?} */\n        const copiedTasks = taskDatas.slice();\n        for (let i = 0; i < copiedTasks.length; i++) {\n            // if other listener call event.stopImmediatePropagation\n            // just break\n            if (((/** @type {?} */ (event)))[stopSymbol] === true) {\n                break;\n            }\n            /** @type {?} */\n            const taskData = copiedTasks[i];\n            if (taskData.zone !== Zone.current) {\n                // only use Zone.run when Zone.current not equals to stored zone\n                taskData.zone.run(taskData.handler, this, args);\n            }\n            else {\n                taskData.handler.apply(this, args);\n            }\n        }\n    }\n});\nclass DomEventsPlugin extends EventManagerPlugin {\n    /**\n     * @param {?} doc\n     * @param {?} ngZone\n     * @param {?} platformId\n     */\n    constructor(doc, ngZone, platformId) {\n        super(doc);\n        this.ngZone = ngZone;\n        if (!platformId || !isPlatformServer(platformId)) {\n            this.patchEvent();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    patchEvent() {\n        if (typeof Event === 'undefined' || !Event || !Event.prototype) {\n            return;\n        }\n        if (((/** @type {?} */ (Event.prototype)))[stopMethodSymbol]) {\n            // already patched by zone.js\n            return;\n        }\n        /** @type {?} */\n        const delegate = ((/** @type {?} */ (Event.prototype)))[stopMethodSymbol] =\n            Event.prototype.stopImmediatePropagation;\n        Event.prototype.stopImmediatePropagation = (/**\n         * @return {?}\n         */\n        function () {\n            if (this) {\n                this[stopSymbol] = true;\n            }\n            // should call native delegate in case\n            // in some environment part of the application\n            // will not use the patched Event\n            delegate && delegate.apply(this, arguments);\n        });\n    }\n    // This plugin should come last in the list of plugins, because it accepts all\n    // events.\n    /**\n     * @param {?} eventName\n     * @return {?}\n     */\n    supports(eventName) { return true; }\n    /**\n     * @param {?} element\n     * @param {?} eventName\n     * @param {?} handler\n     * @return {?}\n     */\n    addEventListener(element, eventName, handler) {\n        /** @type {?} */\n        const zoneJsLoaded = element[ADD_EVENT_LISTENER];\n        /** @type {?} */\n        let callback = (/** @type {?} */ (handler));\n        // if zonejs is loaded and current zone is not ngZone\n        // we keep Zone.current on target for later restoration.\n        if (zoneJsLoaded && (!NgZone.isInAngularZone() || isBlackListedEvent(eventName))) {\n            /** @type {?} */\n            let symbolName = symbolNames[eventName];\n            if (!symbolName) {\n                symbolName = symbolNames[eventName] = __symbol__(ANGULAR + eventName + FALSE);\n            }\n            /** @type {?} */\n            let taskDatas = ((/** @type {?} */ (element)))[symbolName];\n            /** @type {?} */\n            const globalListenerRegistered = taskDatas && taskDatas.length > 0;\n            if (!taskDatas) {\n                taskDatas = ((/** @type {?} */ (element)))[symbolName] = [];\n            }\n            /** @type {?} */\n            const zone = isBlackListedEvent(eventName) ? Zone.root : Zone.current;\n            if (taskDatas.length === 0) {\n                taskDatas.push({ zone: zone, handler: callback });\n            }\n            else {\n                /** @type {?} */\n                let callbackRegistered = false;\n                for (let i = 0; i < taskDatas.length; i++) {\n                    if (taskDatas[i].handler === callback) {\n                        callbackRegistered = true;\n                        break;\n                    }\n                }\n                if (!callbackRegistered) {\n                    taskDatas.push({ zone: zone, handler: callback });\n                }\n            }\n            if (!globalListenerRegistered) {\n                element[ADD_EVENT_LISTENER](eventName, globalListener, false);\n            }\n        }\n        else {\n            element[NATIVE_ADD_LISTENER](eventName, callback, false);\n        }\n        return (/**\n         * @return {?}\n         */\n        () => this.removeEventListener(element, eventName, callback));\n    }\n    /**\n     * @param {?} target\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    removeEventListener(target, eventName, callback) {\n        /** @type {?} */\n        let underlyingRemove = target[REMOVE_EVENT_LISTENER];\n        // zone.js not loaded, use native removeEventListener\n        if (!underlyingRemove) {\n            return target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\n        }\n        /** @type {?} */\n        let symbolName = symbolNames[eventName];\n        /** @type {?} */\n        let taskDatas = symbolName && target[symbolName];\n        if (!taskDatas) {\n            // addEventListener not using patched version\n            // just call native removeEventListener\n            return target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\n        }\n        // fix issue 20532, should be able to remove\n        // listener which was added inside of ngZone\n        /** @type {?} */\n        let found = false;\n        for (let i = 0; i < taskDatas.length; i++) {\n            // remove listener from taskDatas if the callback equals\n            if (taskDatas[i].handler === callback) {\n                found = true;\n                taskDatas.splice(i, 1);\n                break;\n            }\n        }\n        if (found) {\n            if (taskDatas.length === 0) {\n                // all listeners are removed, we can remove the globalListener from target\n                underlyingRemove.apply(target, [eventName, globalListener, false]);\n            }\n        }\n        else {\n            // not found in taskDatas, the callback may be added inside of ngZone\n            // use native remove listener to remove the callback\n            target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\n        }\n    }\n}\nDomEventsPlugin.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nDomEventsPlugin.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [PLATFORM_ID,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Supported HammerJS recognizer event names.\n * @type {?}\n */\nconst EVENT_NAMES = {\n    // pan\n    'pan': true,\n    'panstart': true,\n    'panmove': true,\n    'panend': true,\n    'pancancel': true,\n    'panleft': true,\n    'panright': true,\n    'panup': true,\n    'pandown': true,\n    // pinch\n    'pinch': true,\n    'pinchstart': true,\n    'pinchmove': true,\n    'pinchend': true,\n    'pinchcancel': true,\n    'pinchin': true,\n    'pinchout': true,\n    // press\n    'press': true,\n    'pressup': true,\n    // rotate\n    'rotate': true,\n    'rotatestart': true,\n    'rotatemove': true,\n    'rotateend': true,\n    'rotatecancel': true,\n    // swipe\n    'swipe': true,\n    'swipeleft': true,\n    'swiperight': true,\n    'swipeup': true,\n    'swipedown': true,\n    // tap\n    'tap': true,\n};\n/**\n * DI token for providing [HammerJS](http://hammerjs.github.io/) support to Angular.\n * @see `HammerGestureConfig`\n *\n * \\@publicApi\n * @type {?}\n */\nconst HAMMER_GESTURE_CONFIG = new InjectionToken('HammerGestureConfig');\n/**\n * Injection token used to provide a {\\@link HammerLoader} to Angular.\n *\n * \\@publicApi\n * @type {?}\n */\nconst HAMMER_LOADER = new InjectionToken('HammerLoader');\n/**\n * An injectable [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\n * for gesture recognition. Configures specific event recognition.\n * \\@publicApi\n */\nclass HammerGestureConfig {\n    constructor() {\n        /**\n         * A set of supported event names for gestures to be used in Angular.\n         * Angular supports all built-in recognizers, as listed in\n         * [HammerJS documentation](http://hammerjs.github.io/).\n         */\n        this.events = [];\n        /**\n         * Maps gesture event names to a set of configuration options\n         * that specify overrides to the default values for specific properties.\n         *\n         * The key is a supported event name to be configured,\n         * and the options object contains a set of properties, with override values\n         * to be applied to the named recognizer event.\n         * For example, to disable recognition of the rotate event, specify\n         *  `{\"rotate\": {\"enable\": false}}`.\n         *\n         * Properties that are not present take the HammerJS default values.\n         * For information about which properties are supported for which events,\n         * and their allowed and default values, see\n         * [HammerJS documentation](http://hammerjs.github.io/).\n         *\n         */\n        this.overrides = {};\n    }\n    /**\n     * Creates a [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\n     * and attaches it to a given HTML element.\n     * @param {?} element The element that will recognize gestures.\n     * @return {?} A HammerJS event-manager object.\n     */\n    buildHammer(element) {\n        /** @type {?} */\n        const mc = new (/** @type {?} */ (Hammer))(element, this.options);\n        mc.get('pinch').set({ enable: true });\n        mc.get('rotate').set({ enable: true });\n        for (const eventName in this.overrides) {\n            mc.get(eventName).set(this.overrides[eventName]);\n        }\n        return mc;\n    }\n}\nHammerGestureConfig.decorators = [\n    { type: Injectable }\n];\nclass HammerGesturesPlugin extends EventManagerPlugin {\n    /**\n     * @param {?} doc\n     * @param {?} _config\n     * @param {?} console\n     * @param {?=} loader\n     */\n    constructor(doc, _config, console, loader) {\n        super(doc);\n        this._config = _config;\n        this.console = console;\n        this.loader = loader;\n    }\n    /**\n     * @param {?} eventName\n     * @return {?}\n     */\n    supports(eventName) {\n        if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\n            return false;\n        }\n        if (!((/** @type {?} */ (window))).Hammer && !this.loader) {\n            this.console.warn(`The \"${eventName}\" event cannot be bound because Hammer.JS is not ` +\n                `loaded and no custom loader has been specified.`);\n            return false;\n        }\n        return true;\n    }\n    /**\n     * @param {?} element\n     * @param {?} eventName\n     * @param {?} handler\n     * @return {?}\n     */\n    addEventListener(element, eventName, handler) {\n        /** @type {?} */\n        const zone = this.manager.getZone();\n        eventName = eventName.toLowerCase();\n        // If Hammer is not present but a loader is specified, we defer adding the event listener\n        // until Hammer is loaded.\n        if (!((/** @type {?} */ (window))).Hammer && this.loader) {\n            // This `addEventListener` method returns a function to remove the added listener.\n            // Until Hammer is loaded, the returned function needs to *cancel* the registration rather\n            // than remove anything.\n            /** @type {?} */\n            let cancelRegistration = false;\n            /** @type {?} */\n            let deregister = (/**\n             * @return {?}\n             */\n            () => { cancelRegistration = true; });\n            this.loader()\n                .then((/**\n             * @return {?}\n             */\n            () => {\n                // If Hammer isn't actually loaded when the custom loader resolves, give up.\n                if (!((/** @type {?} */ (window))).Hammer) {\n                    this.console.warn(`The custom HAMMER_LOADER completed, but Hammer.JS is not present.`);\n                    deregister = (/**\n                     * @return {?}\n                     */\n                    () => { });\n                    return;\n                }\n                if (!cancelRegistration) {\n                    // Now that Hammer is loaded and the listener is being loaded for real,\n                    // the deregistration function changes from canceling registration to removal.\n                    deregister = this.addEventListener(element, eventName, handler);\n                }\n            }))\n                .catch((/**\n             * @return {?}\n             */\n            () => {\n                this.console.warn(`The \"${eventName}\" event cannot be bound because the custom ` +\n                    `Hammer.JS loader failed.`);\n                deregister = (/**\n                 * @return {?}\n                 */\n                () => { });\n            }));\n            // Return a function that *executes* `deregister` (and not `deregister` itself) so that we\n            // can change the behavior of `deregister` once the listener is added. Using a closure in\n            // this way allows us to avoid any additional data structures to track listener removal.\n            return (/**\n             * @return {?}\n             */\n            () => { deregister(); });\n        }\n        return zone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            // Creating the manager bind events, must be done outside of angular\n            /** @type {?} */\n            const mc = this._config.buildHammer(element);\n            /** @type {?} */\n            const callback = (/**\n             * @param {?} eventObj\n             * @return {?}\n             */\n            function (eventObj) {\n                zone.runGuarded((/**\n                 * @return {?}\n                 */\n                function () { handler(eventObj); }));\n            });\n            mc.on(eventName, callback);\n            return (/**\n             * @return {?}\n             */\n            () => {\n                mc.off(eventName, callback);\n                // destroy mc to prevent memory leak\n                if (typeof mc.destroy === 'function') {\n                    mc.destroy();\n                }\n            });\n        }));\n    }\n    /**\n     * @param {?} eventName\n     * @return {?}\n     */\n    isCustomEvent(eventName) { return this._config.events.indexOf(eventName) > -1; }\n}\nHammerGesturesPlugin.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHammerGesturesPlugin.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: HammerGestureConfig, decorators: [{ type: Inject, args: [HAMMER_GESTURE_CONFIG,] }] },\n    { type: ɵConsole },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [HAMMER_LOADER,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Defines supported modifiers for key events.\n * @type {?}\n */\nconst MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\nconst ɵ0$4 = /**\n * @param {?} event\n * @return {?}\n */\n(event) => event.altKey, ɵ1$1 = /**\n * @param {?} event\n * @return {?}\n */\n(event) => event.ctrlKey, ɵ2 = /**\n * @param {?} event\n * @return {?}\n */\n(event) => event.metaKey, ɵ3 = /**\n * @param {?} event\n * @return {?}\n */\n(event) => event.shiftKey;\n/**\n * Retrieves modifiers from key-event objects.\n * @type {?}\n */\nconst MODIFIER_KEY_GETTERS = {\n    'alt': (ɵ0$4),\n    'control': (ɵ1$1),\n    'meta': (ɵ2),\n    'shift': (ɵ3)\n};\n/**\n * \\@publicApi\n * A browser plug-in that provides support for handling of key events in Angular.\n */\nclass KeyEventsPlugin extends EventManagerPlugin {\n    /**\n     * Initializes an instance of the browser plug-in.\n     * @param {?} doc The document in which key events will be detected.\n     */\n    constructor(doc) { super(doc); }\n    /**\n     * Reports whether a named key event is supported.\n     * @param {?} eventName The event name to query.\n     * @return {?} True if the named key event is supported.\n     */\n    supports(eventName) { return KeyEventsPlugin.parseEventName(eventName) != null; }\n    /**\n     * Registers a handler for a specific element and key event.\n     * @param {?} element The HTML element to receive event notifications.\n     * @param {?} eventName The name of the key event to listen for.\n     * @param {?} handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @return {?} The key event that was registered.\n     */\n    addEventListener(element, eventName, handler) {\n        /** @type {?} */\n        const parsedEvent = (/** @type {?} */ (KeyEventsPlugin.parseEventName(eventName)));\n        /** @type {?} */\n        const outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\n        return this.manager.getZone().runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\n        }));\n    }\n    /**\n     * @param {?} eventName\n     * @return {?}\n     */\n    static parseEventName(eventName) {\n        /** @type {?} */\n        const parts = eventName.toLowerCase().split('.');\n        /** @type {?} */\n        const domEventName = parts.shift();\n        if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n            return null;\n        }\n        /** @type {?} */\n        const key = KeyEventsPlugin._normalizeKey((/** @type {?} */ (parts.pop())));\n        /** @type {?} */\n        let fullKey = '';\n        MODIFIER_KEYS.forEach((/**\n         * @param {?} modifierName\n         * @return {?}\n         */\n        modifierName => {\n            /** @type {?} */\n            const index = parts.indexOf(modifierName);\n            if (index > -1) {\n                parts.splice(index, 1);\n                fullKey += modifierName + '.';\n            }\n        }));\n        fullKey += key;\n        if (parts.length != 0 || key.length === 0) {\n            // returning null instead of throwing to let another plugin process the event\n            return null;\n        }\n        /** @type {?} */\n        const result = {};\n        result['domEventName'] = domEventName;\n        result['fullKey'] = fullKey;\n        return result;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    static getEventFullKey(event) {\n        /** @type {?} */\n        let fullKey = '';\n        /** @type {?} */\n        let key = getDOM().getEventKey(event);\n        key = key.toLowerCase();\n        if (key === ' ') {\n            key = 'space'; // for readability\n        }\n        else if (key === '.') {\n            key = 'dot'; // because '.' is used as a separator in event names\n        }\n        MODIFIER_KEYS.forEach((/**\n         * @param {?} modifierName\n         * @return {?}\n         */\n        modifierName => {\n            if (modifierName != key) {\n                /** @type {?} */\n                const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n                if (modifierGetter(event)) {\n                    fullKey += modifierName + '.';\n                }\n            }\n        }));\n        fullKey += key;\n        return fullKey;\n    }\n    /**\n     * Configures a handler callback for a key event.\n     * @param {?} fullKey The event name that combines all simultaneous keystrokes.\n     * @param {?} handler The function that responds to the key event.\n     * @param {?} zone The zone in which the event occurred.\n     * @return {?} A callback function.\n     */\n    static eventCallback(fullKey, handler, zone) {\n        return (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event /** TODO #9100 */) => {\n            if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {\n                zone.runGuarded((/**\n                 * @return {?}\n                 */\n                () => handler(event)));\n            }\n        });\n    }\n    /**\n     * \\@internal\n     * @param {?} keyName\n     * @return {?}\n     */\n    static _normalizeKey(keyName) {\n        // TODO: switch to a Map if the mapping grows too much\n        switch (keyName) {\n            case 'esc':\n                return 'escape';\n            default:\n                return keyName;\n        }\n    }\n}\nKeyEventsPlugin.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nKeyEventsPlugin.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * \\@security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](http://g.co/ng/security).\n *\n * \\@publicApi\n * @abstract\n */\nclass DomSanitizer {\n}\nclass DomSanitizerImpl extends DomSanitizer {\n    /**\n     * @param {?} _doc\n     */\n    constructor(_doc) {\n        super();\n        this._doc = _doc;\n    }\n    /**\n     * @param {?} ctx\n     * @param {?} value\n     * @return {?}\n     */\n    sanitize(ctx, value) {\n        if (value == null)\n            return null;\n        switch (ctx) {\n            case SecurityContext.NONE:\n                return (/** @type {?} */ (value));\n            case SecurityContext.HTML:\n                if (value instanceof SafeHtmlImpl)\n                    return value.changingThisBreaksApplicationSecurity;\n                this.checkNotSafeValue(value, 'HTML');\n                return ɵ_sanitizeHtml(this._doc, String(value));\n            case SecurityContext.STYLE:\n                if (value instanceof SafeStyleImpl)\n                    return value.changingThisBreaksApplicationSecurity;\n                this.checkNotSafeValue(value, 'Style');\n                return ɵ_sanitizeStyle((/** @type {?} */ (value)));\n            case SecurityContext.SCRIPT:\n                if (value instanceof SafeScriptImpl)\n                    return value.changingThisBreaksApplicationSecurity;\n                this.checkNotSafeValue(value, 'Script');\n                throw new Error('unsafe value used in a script context');\n            case SecurityContext.URL:\n                if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {\n                    // Allow resource URLs in URL contexts, they are strictly more trusted.\n                    return value.changingThisBreaksApplicationSecurity;\n                }\n                this.checkNotSafeValue(value, 'URL');\n                return ɵ_sanitizeUrl(String(value));\n            case SecurityContext.RESOURCE_URL:\n                if (value instanceof SafeResourceUrlImpl) {\n                    return value.changingThisBreaksApplicationSecurity;\n                }\n                this.checkNotSafeValue(value, 'ResourceURL');\n                throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n            default:\n                throw new Error(`Unexpected SecurityContext ${ctx} (see http://g.co/ng/security#xss)`);\n        }\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @param {?} expectedType\n     * @return {?}\n     */\n    checkNotSafeValue(value, expectedType) {\n        if (value instanceof SafeValueImpl) {\n            throw new Error(`Required a safe ${expectedType}, got a ${value.getTypeName()} ` +\n                `(see http://g.co/ng/security#xss)`);\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    bypassSecurityTrustHtml(value) { return new SafeHtmlImpl(value); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    bypassSecurityTrustStyle(value) { return new SafeStyleImpl(value); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    bypassSecurityTrustScript(value) { return new SafeScriptImpl(value); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    bypassSecurityTrustUrl(value) { return new SafeUrlImpl(value); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    bypassSecurityTrustResourceUrl(value) {\n        return new SafeResourceUrlImpl(value);\n    }\n}\nDomSanitizerImpl.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nDomSanitizerImpl.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/**\n * @abstract\n */\nclass SafeValueImpl {\n    /**\n     * @param {?} changingThisBreaksApplicationSecurity\n     */\n    constructor(changingThisBreaksApplicationSecurity) {\n        this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;\n        // empty\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` +\n            ` (see http://g.co/ng/security#xss)`;\n    }\n}\nclass SafeHtmlImpl extends SafeValueImpl {\n    /**\n     * @return {?}\n     */\n    getTypeName() { return 'HTML'; }\n}\nclass SafeStyleImpl extends SafeValueImpl {\n    /**\n     * @return {?}\n     */\n    getTypeName() { return 'Style'; }\n}\nclass SafeScriptImpl extends SafeValueImpl {\n    /**\n     * @return {?}\n     */\n    getTypeName() { return 'Script'; }\n}\nclass SafeUrlImpl extends SafeValueImpl {\n    /**\n     * @return {?}\n     */\n    getTypeName() { return 'URL'; }\n}\nclass SafeResourceUrlImpl extends SafeValueImpl {\n    /**\n     * @return {?}\n     */\n    getTypeName() { return 'ResourceURL'; }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst ɵ0$5 = ɵPLATFORM_BROWSER_ID;\n/** @type {?} */\nconst INTERNAL_BROWSER_PLATFORM_PROVIDERS = [\n    { provide: PLATFORM_ID, useValue: ɵ0$5 },\n    { provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true },\n    { provide: PlatformLocation, useClass: BrowserPlatformLocation, deps: [DOCUMENT] },\n    { provide: DOCUMENT, useFactory: _document, deps: [] },\n];\n/**\n * \\@security Replacing built-in sanitization providers exposes the application to XSS risks.\n * Attacker-controlled data introduced by an unsanitized provider could expose your\n * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).\n * \\@publicApi\n * @type {?}\n */\nconst BROWSER_SANITIZATION_PROVIDERS = [\n    { provide: Sanitizer, useExisting: DomSanitizer },\n    { provide: DomSanitizer, useClass: DomSanitizerImpl, deps: [DOCUMENT] },\n];\n/**\n * \\@publicApi\n * @type {?}\n */\nconst platformBrowser = createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\n/**\n * @return {?}\n */\nfunction initDomAdapter() {\n    BrowserDomAdapter.makeCurrent();\n    BrowserGetTestability.init();\n}\n/**\n * @return {?}\n */\nfunction errorHandler() {\n    return new ErrorHandler();\n}\n/**\n * @return {?}\n */\nfunction _document() {\n    return document;\n}\n/** @type {?} */\nconst BROWSER_MODULE_PROVIDERS = [\n    BROWSER_SANITIZATION_PROVIDERS,\n    { provide: ɵAPP_ROOT, useValue: true },\n    { provide: ErrorHandler, useFactory: errorHandler, deps: [] },\n    {\n        provide: EVENT_MANAGER_PLUGINS,\n        useClass: DomEventsPlugin,\n        multi: true,\n        deps: [DOCUMENT, NgZone, PLATFORM_ID]\n    },\n    { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true, deps: [DOCUMENT] },\n    {\n        provide: EVENT_MANAGER_PLUGINS,\n        useClass: HammerGesturesPlugin,\n        multi: true,\n        deps: [DOCUMENT, HAMMER_GESTURE_CONFIG, ɵConsole, [new Optional(), HAMMER_LOADER]]\n    },\n    { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig, deps: [] },\n    {\n        provide: DomRendererFactory2,\n        useClass: DomRendererFactory2,\n        deps: [EventManager, DomSharedStylesHost, APP_ID]\n    },\n    { provide: RendererFactory2, useExisting: DomRendererFactory2 },\n    { provide: SharedStylesHost, useExisting: DomSharedStylesHost },\n    { provide: DomSharedStylesHost, useClass: DomSharedStylesHost, deps: [DOCUMENT] },\n    { provide: Testability, useClass: Testability, deps: [NgZone] },\n    { provide: EventManager, useClass: EventManager, deps: [EVENT_MANAGER_PLUGINS, NgZone] },\n    ELEMENT_PROBE_PROVIDERS,\n];\n/**\n * Exports required infrastructure for all Angular apps.\n * Included by default in all Angular apps created with the CLI\n * `new` command.\n * Re-exports `CommonModule` and `ApplicationModule`, making their\n * exports and providers available to all apps.\n *\n * \\@publicApi\n */\nclass BrowserModule {\n    /**\n     * @param {?} parentModule\n     */\n    constructor(parentModule) {\n        if (parentModule) {\n            throw new Error(`BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.`);\n        }\n    }\n    /**\n     * Configures a browser-based app to transition from a server-rendered app, if\n     * one is present on the page.\n     *\n     * @param {?} params An object containing an identifier for the app to transition.\n     * The ID must match between the client and server versions of the app.\n     * @return {?} The reconfigured `BrowserModule` to import into the app's root `AppModule`.\n     */\n    static withServerTransition(params) {\n        return {\n            ngModule: BrowserModule,\n            providers: [\n                { provide: APP_ID, useValue: params.appId },\n                { provide: TRANSITION_ID, useExisting: APP_ID },\n                SERVER_TRANSITION_PROVIDERS,\n            ],\n        };\n    }\n}\nBrowserModule.decorators = [\n    { type: NgModule, args: [{ providers: BROWSER_MODULE_PROVIDERS, exports: [CommonModule, ApplicationModule] },] }\n];\n/** @nocollapse */\nBrowserModule.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [BrowserModule,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Factory to create Meta service.\n * @return {?}\n */\nfunction createMeta() {\n    return new Meta(ɵɵinject(DOCUMENT));\n}\n/**\n * A service that can be used to get and add meta tags.\n *\n * \\@publicApi\n */\nclass Meta {\n    /**\n     * @param {?} _doc\n     */\n    constructor(_doc) {\n        this._doc = _doc;\n        this._dom = getDOM();\n    }\n    /**\n     * @param {?} tag\n     * @param {?=} forceCreation\n     * @return {?}\n     */\n    addTag(tag, forceCreation = false) {\n        if (!tag)\n            return null;\n        return this._getOrCreateElement(tag, forceCreation);\n    }\n    /**\n     * @param {?} tags\n     * @param {?=} forceCreation\n     * @return {?}\n     */\n    addTags(tags, forceCreation = false) {\n        if (!tags)\n            return [];\n        return tags.reduce((/**\n         * @param {?} result\n         * @param {?} tag\n         * @return {?}\n         */\n        (result, tag) => {\n            if (tag) {\n                result.push(this._getOrCreateElement(tag, forceCreation));\n            }\n            return result;\n        }), []);\n    }\n    /**\n     * @param {?} attrSelector\n     * @return {?}\n     */\n    getTag(attrSelector) {\n        if (!attrSelector)\n            return null;\n        return this._dom.querySelector(this._doc, `meta[${attrSelector}]`) || null;\n    }\n    /**\n     * @param {?} attrSelector\n     * @return {?}\n     */\n    getTags(attrSelector) {\n        if (!attrSelector)\n            return [];\n        /** @type {?} */\n        const list /*NodeList*/ = this._dom.querySelectorAll(this._doc, `meta[${attrSelector}]`);\n        return list ? [].slice.call(list) : [];\n    }\n    /**\n     * @param {?} tag\n     * @param {?=} selector\n     * @return {?}\n     */\n    updateTag(tag, selector) {\n        if (!tag)\n            return null;\n        selector = selector || this._parseSelector(tag);\n        /** @type {?} */\n        const meta = (/** @type {?} */ (this.getTag(selector)));\n        if (meta) {\n            return this._setMetaElementAttributes(tag, meta);\n        }\n        return this._getOrCreateElement(tag, true);\n    }\n    /**\n     * @param {?} attrSelector\n     * @return {?}\n     */\n    removeTag(attrSelector) { this.removeTagElement((/** @type {?} */ (this.getTag(attrSelector)))); }\n    /**\n     * @param {?} meta\n     * @return {?}\n     */\n    removeTagElement(meta) {\n        if (meta) {\n            this._dom.remove(meta);\n        }\n    }\n    /**\n     * @private\n     * @param {?} meta\n     * @param {?=} forceCreation\n     * @return {?}\n     */\n    _getOrCreateElement(meta, forceCreation = false) {\n        if (!forceCreation) {\n            /** @type {?} */\n            const selector = this._parseSelector(meta);\n            /** @type {?} */\n            const elem = (/** @type {?} */ (this.getTag(selector)));\n            // It's allowed to have multiple elements with the same name so it's not enough to\n            // just check that element with the same name already present on the page. We also need to\n            // check if element has tag attributes\n            if (elem && this._containsAttributes(meta, elem))\n                return elem;\n        }\n        /** @type {?} */\n        const element = (/** @type {?} */ (this._dom.createElement('meta')));\n        this._setMetaElementAttributes(meta, element);\n        /** @type {?} */\n        const head = this._dom.getElementsByTagName(this._doc, 'head')[0];\n        this._dom.appendChild(head, element);\n        return element;\n    }\n    /**\n     * @private\n     * @param {?} tag\n     * @param {?} el\n     * @return {?}\n     */\n    _setMetaElementAttributes(tag, el) {\n        Object.keys(tag).forEach((/**\n         * @param {?} prop\n         * @return {?}\n         */\n        (prop) => this._dom.setAttribute(el, prop, tag[prop])));\n        return el;\n    }\n    /**\n     * @private\n     * @param {?} tag\n     * @return {?}\n     */\n    _parseSelector(tag) {\n        /** @type {?} */\n        const attr = tag.name ? 'name' : 'property';\n        return `${attr}=\"${tag[attr]}\"`;\n    }\n    /**\n     * @private\n     * @param {?} tag\n     * @param {?} elem\n     * @return {?}\n     */\n    _containsAttributes(tag, elem) {\n        return Object.keys(tag).every((/**\n         * @param {?} key\n         * @return {?}\n         */\n        (key) => this._dom.getAttribute(elem, key) === tag[key]));\n    }\n}\nMeta.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root', useFactory: createMeta, deps: [] },] }\n];\n/** @nocollapse */\nMeta.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ Meta.ngInjectableDef = ɵɵdefineInjectable({ factory: createMeta, token: Meta, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Factory to create Title service.\n * @return {?}\n */\nfunction createTitle() {\n    return new Title(ɵɵinject(DOCUMENT));\n}\n/**\n * A service that can be used to get and set the title of a current HTML document.\n *\n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\n * title value.\n *\n * \\@publicApi\n */\nclass Title {\n    /**\n     * @param {?} _doc\n     */\n    constructor(_doc) {\n        this._doc = _doc;\n    }\n    /**\n     * Get the title of the current HTML document.\n     * @return {?}\n     */\n    getTitle() { return getDOM().getTitle(this._doc); }\n    /**\n     * Set the title of the current HTML document.\n     * @param {?} newTitle\n     * @return {?}\n     */\n    setTitle(newTitle) { getDOM().setTitle(this._doc, newTitle); }\n}\nTitle.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root', useFactory: createTitle, deps: [] },] }\n];\n/** @nocollapse */\nTitle.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ Title.ngInjectableDef = ɵɵdefineInjectable({ factory: createTitle, token: Title, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nconst win = typeof window !== 'undefined' && window || (/** @type {?} */ ({}));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ChangeDetectionPerfRecord {\n    /**\n     * @param {?} msPerTick\n     * @param {?} numTicks\n     */\n    constructor(msPerTick, numTicks) {\n        this.msPerTick = msPerTick;\n        this.numTicks = numTicks;\n    }\n}\n/**\n * Entry point for all Angular profiling-related debug tools. This object\n * corresponds to the `ng.profiler` in the dev console.\n */\nclass AngularProfiler {\n    /**\n     * @param {?} ref\n     */\n    constructor(ref) { this.appRef = ref.injector.get(ApplicationRef); }\n    // tslint:disable:no-console\n    /**\n     * Exercises change detection in a loop and then prints the average amount of\n     * time in milliseconds how long a single round of change detection takes for\n     * the current state of the UI. It runs a minimum of 5 rounds for a minimum\n     * of 500 milliseconds.\n     *\n     * Optionally, a user may pass a `config` parameter containing a map of\n     * options. Supported options are:\n     *\n     * `record` (boolean) - causes the profiler to record a CPU profile while\n     * it exercises the change detector. Example:\n     *\n     * ```\n     * ng.profiler.timeChangeDetection({record: true})\n     * ```\n     * @param {?} config\n     * @return {?}\n     */\n    timeChangeDetection(config) {\n        /** @type {?} */\n        const record = config && config['record'];\n        /** @type {?} */\n        const profileName = 'Change Detection';\n        // Profiler is not available in Android browsers, nor in IE 9 without dev tools opened\n        /** @type {?} */\n        const isProfilerAvailable = win.console.profile != null;\n        if (record && isProfilerAvailable) {\n            win.console.profile(profileName);\n        }\n        /** @type {?} */\n        const start = getDOM().performanceNow();\n        /** @type {?} */\n        let numTicks = 0;\n        while (numTicks < 5 || (getDOM().performanceNow() - start) < 500) {\n            this.appRef.tick();\n            numTicks++;\n        }\n        /** @type {?} */\n        const end = getDOM().performanceNow();\n        if (record && isProfilerAvailable) {\n            win.console.profileEnd(profileName);\n        }\n        /** @type {?} */\n        const msPerTick = (end - start) / numTicks;\n        win.console.log(`ran ${numTicks} change detection cycles`);\n        win.console.log(`${msPerTick.toFixed(2)} ms per check`);\n        return new ChangeDetectionPerfRecord(msPerTick, numTicks);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst PROFILER_GLOBAL_NAME = 'profiler';\n/**\n * Enabled Angular debug tools that are accessible via your browser's\n * developer console.\n *\n * Usage:\n *\n * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)\n * 1. Type `ng.` (usually the console will show auto-complete suggestion)\n * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`\n *    then hit Enter.\n *\n * \\@publicApi\n * @template T\n * @param {?} ref\n * @return {?}\n */\nfunction enableDebugTools(ref) {\n    exportNgVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));\n    return ref;\n}\n/**\n * Disables Angular tools.\n *\n * \\@publicApi\n * @return {?}\n */\nfunction disableDebugTools() {\n    exportNgVar(PROFILER_GLOBAL_NAME, null);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} text\n * @return {?}\n */\nfunction escapeHtml(text) {\n    /** @type {?} */\n    const escapedText = {\n        '&': '&a;',\n        '\"': '&q;',\n        '\\'': '&s;',\n        '<': '&l;',\n        '>': '&g;',\n    };\n    return text.replace(/[&\"'<>]/g, (/**\n     * @param {?} s\n     * @return {?}\n     */\n    s => escapedText[s]));\n}\n/**\n * @param {?} text\n * @return {?}\n */\nfunction unescapeHtml(text) {\n    /** @type {?} */\n    const unescapedText = {\n        '&a;': '&',\n        '&q;': '\"',\n        '&s;': '\\'',\n        '&l;': '<',\n        '&g;': '>',\n    };\n    return text.replace(/&[^;]+;/g, (/**\n     * @param {?} s\n     * @return {?}\n     */\n    s => unescapedText[s]));\n}\n/**\n * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * \\@publicApi\n * @template T\n * @param {?} key\n * @return {?}\n */\nfunction makeStateKey(key) {\n    return (/** @type {?} */ (key));\n}\n/**\n * A key value store that is transferred from the application on the server side to the application\n * on the client side.\n *\n * `TransferState` will be available as an injectable token. To use it import\n * `ServerTransferStateModule` on the server and `BrowserTransferStateModule` on the client.\n *\n * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only\n * boolean, number, string, null and non-class objects will be serialized and deserialzied in a\n * non-lossy manner.\n *\n * \\@publicApi\n */\nclass TransferState {\n    constructor() {\n        this.store = {};\n        this.onSerializeCallbacks = {};\n    }\n    /**\n     * \\@internal\n     * @param {?} initState\n     * @return {?}\n     */\n    static init(initState) {\n        /** @type {?} */\n        const transferState = new TransferState();\n        transferState.store = initState;\n        return transferState;\n    }\n    /**\n     * Get the value corresponding to a key. Return `defaultValue` if key is not found.\n     * @template T\n     * @param {?} key\n     * @param {?} defaultValue\n     * @return {?}\n     */\n    get(key, defaultValue) {\n        return this.store[key] !== undefined ? (/** @type {?} */ (this.store[key])) : defaultValue;\n    }\n    /**\n     * Set the value corresponding to a key.\n     * @template T\n     * @param {?} key\n     * @param {?} value\n     * @return {?}\n     */\n    set(key, value) { this.store[key] = value; }\n    /**\n     * Remove a key from the store.\n     * @template T\n     * @param {?} key\n     * @return {?}\n     */\n    remove(key) { delete this.store[key]; }\n    /**\n     * Test whether a key exists in the store.\n     * @template T\n     * @param {?} key\n     * @return {?}\n     */\n    hasKey(key) { return this.store.hasOwnProperty(key); }\n    /**\n     * Register a callback to provide the value for a key when `toJson` is called.\n     * @template T\n     * @param {?} key\n     * @param {?} callback\n     * @return {?}\n     */\n    onSerialize(key, callback) {\n        this.onSerializeCallbacks[key] = callback;\n    }\n    /**\n     * Serialize the current state of the store to JSON.\n     * @return {?}\n     */\n    toJson() {\n        // Call the onSerialize callbacks and put those values into the store.\n        for (const key in this.onSerializeCallbacks) {\n            if (this.onSerializeCallbacks.hasOwnProperty(key)) {\n                try {\n                    this.store[key] = this.onSerializeCallbacks[key]();\n                }\n                catch (e) {\n                    console.warn('Exception in onSerialize callback: ', e);\n                }\n            }\n        }\n        return JSON.stringify(this.store);\n    }\n}\nTransferState.decorators = [\n    { type: Injectable }\n];\n/**\n * @param {?} doc\n * @param {?} appId\n * @return {?}\n */\nfunction initTransferState(doc, appId) {\n    // Locate the script tag with the JSON data transferred from the server.\n    // The id of the script tag is set to the Angular appId + 'state'.\n    /** @type {?} */\n    const script = doc.getElementById(appId + '-state');\n    /** @type {?} */\n    let initialState = {};\n    if (script && script.textContent) {\n        try {\n            initialState = JSON.parse(unescapeHtml(script.textContent));\n        }\n        catch (e) {\n            console.warn('Exception while restoring TransferState for app ' + appId, e);\n        }\n    }\n    return TransferState.init(initialState);\n}\n/**\n * NgModule to install on the client side while using the `TransferState` to transfer state from\n * server to client.\n *\n * \\@publicApi\n */\nclass BrowserTransferStateModule {\n}\nBrowserTransferStateModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [{ provide: TransferState, useFactory: initTransferState, deps: [DOCUMENT, APP_ID] }],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Predicates for use with {\\@link DebugElement}'s query functions.\n *\n * \\@publicApi\n */\nclass By {\n    /**\n     * Match all elements.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * {\\@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\n     * @return {?}\n     */\n    static all() { return (/**\n     * @param {?} debugElement\n     * @return {?}\n     */\n    (debugElement) => true); }\n    /**\n     * Match elements by the given CSS selector.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * {\\@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\n     * @param {?} selector\n     * @return {?}\n     */\n    static css(selector) {\n        return (/**\n         * @param {?} debugElement\n         * @return {?}\n         */\n        (debugElement) => {\n            return debugElement.nativeElement != null ?\n                getDOM().elementMatches(debugElement.nativeElement, selector) :\n                false;\n        });\n    }\n    /**\n     * Match elements that have the given directive present.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * {\\@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\n     * @param {?} type\n     * @return {?}\n     */\n    static directive(type) {\n        return (/**\n         * @param {?} debugElement\n         * @return {?}\n         */\n        (debugElement) => (/** @type {?} */ (debugElement.providerTokens)).indexOf(type) !== -1);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@publicApi\n * @type {?}\n */\nconst VERSION = new Version('8.0.0');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BROWSER_MODULE_PROVIDERS as ɵangular_packages_platform_browser_platform_browser_c, _document as ɵangular_packages_platform_browser_platform_browser_b, errorHandler as ɵangular_packages_platform_browser_platform_browser_a, GenericBrowserDomAdapter as ɵangular_packages_platform_browser_platform_browser_l, createMeta as ɵangular_packages_platform_browser_platform_browser_d, SERVER_TRANSITION_PROVIDERS as ɵangular_packages_platform_browser_platform_browser_i, appInitializerFactory as ɵangular_packages_platform_browser_platform_browser_h, createTitle as ɵangular_packages_platform_browser_platform_browser_e, initTransferState as ɵangular_packages_platform_browser_platform_browser_f, ELEMENT_PROBE_PROVIDERS__PRE_R3__ as ɵangular_packages_platform_browser_platform_browser_k, _createNgProbe as ɵangular_packages_platform_browser_platform_browser_j, EventManagerPlugin as ɵangular_packages_platform_browser_platform_browser_g, BrowserModule, platformBrowser, Meta, Title, disableDebugTools, enableDebugTools, BrowserTransferStateModule, TransferState, makeStateKey, By, EVENT_MANAGER_PLUGINS, EventManager, HAMMER_GESTURE_CONFIG, HAMMER_LOADER, HammerGestureConfig, DomSanitizer, VERSION, ELEMENT_PROBE_PROVIDERS__POST_R3__ as ɵELEMENT_PROBE_PROVIDERS__POST_R3__, BROWSER_SANITIZATION_PROVIDERS as ɵBROWSER_SANITIZATION_PROVIDERS, INTERNAL_BROWSER_PLATFORM_PROVIDERS as ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS, initDomAdapter as ɵinitDomAdapter, BrowserDomAdapter as ɵBrowserDomAdapter, BrowserPlatformLocation as ɵBrowserPlatformLocation, TRANSITION_ID as ɵTRANSITION_ID, BrowserGetTestability as ɵBrowserGetTestability, escapeHtml as ɵescapeHtml, ELEMENT_PROBE_PROVIDERS as ɵELEMENT_PROBE_PROVIDERS, DomAdapter as ɵDomAdapter, getDOM as ɵgetDOM, setRootDomAdapter as ɵsetRootDomAdapter, DomRendererFactory2 as ɵDomRendererFactory2, NAMESPACE_URIS as ɵNAMESPACE_URIS, flattenStyles as ɵflattenStyles, shimContentAttribute as ɵshimContentAttribute, shimHostAttribute as ɵshimHostAttribute, DomEventsPlugin as ɵDomEventsPlugin, HammerGesturesPlugin as ɵHammerGesturesPlugin, KeyEventsPlugin as ɵKeyEventsPlugin, DomSharedStylesHost as ɵDomSharedStylesHost, SharedStylesHost as ɵSharedStylesHost, DomSanitizerImpl as ɵDomSanitizerImpl };\n//# sourceMappingURL=platform-browser.js.map\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license Angular v8.0.0\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar TagContentType;\n(function (TagContentType) {\n    TagContentType[TagContentType[\"RAW_TEXT\"] = 0] = \"RAW_TEXT\";\n    TagContentType[TagContentType[\"ESCAPABLE_RAW_TEXT\"] = 1] = \"ESCAPABLE_RAW_TEXT\";\n    TagContentType[TagContentType[\"PARSABLE_DATA\"] = 2] = \"PARSABLE_DATA\";\n})(TagContentType || (TagContentType = {}));\nfunction splitNsName(elementName) {\n    if (elementName[0] != ':') {\n        return [null, elementName];\n    }\n    const colonIndex = elementName.indexOf(':', 1);\n    if (colonIndex == -1) {\n        throw new Error(`Unsupported format \"${elementName}\" expecting \":namespace:name\"`);\n    }\n    return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];\n}\n// `<ng-container>` tags work the same regardless the namespace\nfunction isNgContainer(tagName) {\n    return splitNsName(tagName)[1] === 'ng-container';\n}\n// `<ng-content>` tags work the same regardless the namespace\nfunction isNgContent(tagName) {\n    return splitNsName(tagName)[1] === 'ng-content';\n}\n// `<ng-template>` tags work the same regardless the namespace\nfunction isNgTemplate(tagName) {\n    return splitNsName(tagName)[1] === 'ng-template';\n}\nfunction getNsPrefix(fullName) {\n    return fullName === null ? null : splitNsName(fullName)[0];\n}\nfunction mergeNsAndName(prefix, localName) {\n    return prefix ? `:${prefix}:${localName}` : localName;\n}\n// see http://www.w3.org/TR/html51/syntax.html#named-character-references\n// see https://html.spec.whatwg.org/multipage/entities.json\n// This list is not exhaustive to keep the compiler footprint low.\n// The `&#123;` / `&#x1ab;` syntax should be used when the named character reference does not\n// exist.\nconst NAMED_ENTITIES = {\n    'Aacute': '\\u00C1',\n    'aacute': '\\u00E1',\n    'Acirc': '\\u00C2',\n    'acirc': '\\u00E2',\n    'acute': '\\u00B4',\n    'AElig': '\\u00C6',\n    'aelig': '\\u00E6',\n    'Agrave': '\\u00C0',\n    'agrave': '\\u00E0',\n    'alefsym': '\\u2135',\n    'Alpha': '\\u0391',\n    'alpha': '\\u03B1',\n    'amp': '&',\n    'and': '\\u2227',\n    'ang': '\\u2220',\n    'apos': '\\u0027',\n    'Aring': '\\u00C5',\n    'aring': '\\u00E5',\n    'asymp': '\\u2248',\n    'Atilde': '\\u00C3',\n    'atilde': '\\u00E3',\n    'Auml': '\\u00C4',\n    'auml': '\\u00E4',\n    'bdquo': '\\u201E',\n    'Beta': '\\u0392',\n    'beta': '\\u03B2',\n    'brvbar': '\\u00A6',\n    'bull': '\\u2022',\n    'cap': '\\u2229',\n    'Ccedil': '\\u00C7',\n    'ccedil': '\\u00E7',\n    'cedil': '\\u00B8',\n    'cent': '\\u00A2',\n    'Chi': '\\u03A7',\n    'chi': '\\u03C7',\n    'circ': '\\u02C6',\n    'clubs': '\\u2663',\n    'cong': '\\u2245',\n    'copy': '\\u00A9',\n    'crarr': '\\u21B5',\n    'cup': '\\u222A',\n    'curren': '\\u00A4',\n    'dagger': '\\u2020',\n    'Dagger': '\\u2021',\n    'darr': '\\u2193',\n    'dArr': '\\u21D3',\n    'deg': '\\u00B0',\n    'Delta': '\\u0394',\n    'delta': '\\u03B4',\n    'diams': '\\u2666',\n    'divide': '\\u00F7',\n    'Eacute': '\\u00C9',\n    'eacute': '\\u00E9',\n    'Ecirc': '\\u00CA',\n    'ecirc': '\\u00EA',\n    'Egrave': '\\u00C8',\n    'egrave': '\\u00E8',\n    'empty': '\\u2205',\n    'emsp': '\\u2003',\n    'ensp': '\\u2002',\n    'Epsilon': '\\u0395',\n    'epsilon': '\\u03B5',\n    'equiv': '\\u2261',\n    'Eta': '\\u0397',\n    'eta': '\\u03B7',\n    'ETH': '\\u00D0',\n    'eth': '\\u00F0',\n    'Euml': '\\u00CB',\n    'euml': '\\u00EB',\n    'euro': '\\u20AC',\n    'exist': '\\u2203',\n    'fnof': '\\u0192',\n    'forall': '\\u2200',\n    'frac12': '\\u00BD',\n    'frac14': '\\u00BC',\n    'frac34': '\\u00BE',\n    'frasl': '\\u2044',\n    'Gamma': '\\u0393',\n    'gamma': '\\u03B3',\n    'ge': '\\u2265',\n    'gt': '>',\n    'harr': '\\u2194',\n    'hArr': '\\u21D4',\n    'hearts': '\\u2665',\n    'hellip': '\\u2026',\n    'Iacute': '\\u00CD',\n    'iacute': '\\u00ED',\n    'Icirc': '\\u00CE',\n    'icirc': '\\u00EE',\n    'iexcl': '\\u00A1',\n    'Igrave': '\\u00CC',\n    'igrave': '\\u00EC',\n    'image': '\\u2111',\n    'infin': '\\u221E',\n    'int': '\\u222B',\n    'Iota': '\\u0399',\n    'iota': '\\u03B9',\n    'iquest': '\\u00BF',\n    'isin': '\\u2208',\n    'Iuml': '\\u00CF',\n    'iuml': '\\u00EF',\n    'Kappa': '\\u039A',\n    'kappa': '\\u03BA',\n    'Lambda': '\\u039B',\n    'lambda': '\\u03BB',\n    'lang': '\\u27E8',\n    'laquo': '\\u00AB',\n    'larr': '\\u2190',\n    'lArr': '\\u21D0',\n    'lceil': '\\u2308',\n    'ldquo': '\\u201C',\n    'le': '\\u2264',\n    'lfloor': '\\u230A',\n    'lowast': '\\u2217',\n    'loz': '\\u25CA',\n    'lrm': '\\u200E',\n    'lsaquo': '\\u2039',\n    'lsquo': '\\u2018',\n    'lt': '<',\n    'macr': '\\u00AF',\n    'mdash': '\\u2014',\n    'micro': '\\u00B5',\n    'middot': '\\u00B7',\n    'minus': '\\u2212',\n    'Mu': '\\u039C',\n    'mu': '\\u03BC',\n    'nabla': '\\u2207',\n    'nbsp': '\\u00A0',\n    'ndash': '\\u2013',\n    'ne': '\\u2260',\n    'ni': '\\u220B',\n    'not': '\\u00AC',\n    'notin': '\\u2209',\n    'nsub': '\\u2284',\n    'Ntilde': '\\u00D1',\n    'ntilde': '\\u00F1',\n    'Nu': '\\u039D',\n    'nu': '\\u03BD',\n    'Oacute': '\\u00D3',\n    'oacute': '\\u00F3',\n    'Ocirc': '\\u00D4',\n    'ocirc': '\\u00F4',\n    'OElig': '\\u0152',\n    'oelig': '\\u0153',\n    'Ograve': '\\u00D2',\n    'ograve': '\\u00F2',\n    'oline': '\\u203E',\n    'Omega': '\\u03A9',\n    'omega': '\\u03C9',\n    'Omicron': '\\u039F',\n    'omicron': '\\u03BF',\n    'oplus': '\\u2295',\n    'or': '\\u2228',\n    'ordf': '\\u00AA',\n    'ordm': '\\u00BA',\n    'Oslash': '\\u00D8',\n    'oslash': '\\u00F8',\n    'Otilde': '\\u00D5',\n    'otilde': '\\u00F5',\n    'otimes': '\\u2297',\n    'Ouml': '\\u00D6',\n    'ouml': '\\u00F6',\n    'para': '\\u00B6',\n    'permil': '\\u2030',\n    'perp': '\\u22A5',\n    'Phi': '\\u03A6',\n    'phi': '\\u03C6',\n    'Pi': '\\u03A0',\n    'pi': '\\u03C0',\n    'piv': '\\u03D6',\n    'plusmn': '\\u00B1',\n    'pound': '\\u00A3',\n    'prime': '\\u2032',\n    'Prime': '\\u2033',\n    'prod': '\\u220F',\n    'prop': '\\u221D',\n    'Psi': '\\u03A8',\n    'psi': '\\u03C8',\n    'quot': '\\u0022',\n    'radic': '\\u221A',\n    'rang': '\\u27E9',\n    'raquo': '\\u00BB',\n    'rarr': '\\u2192',\n    'rArr': '\\u21D2',\n    'rceil': '\\u2309',\n    'rdquo': '\\u201D',\n    'real': '\\u211C',\n    'reg': '\\u00AE',\n    'rfloor': '\\u230B',\n    'Rho': '\\u03A1',\n    'rho': '\\u03C1',\n    'rlm': '\\u200F',\n    'rsaquo': '\\u203A',\n    'rsquo': '\\u2019',\n    'sbquo': '\\u201A',\n    'Scaron': '\\u0160',\n    'scaron': '\\u0161',\n    'sdot': '\\u22C5',\n    'sect': '\\u00A7',\n    'shy': '\\u00AD',\n    'Sigma': '\\u03A3',\n    'sigma': '\\u03C3',\n    'sigmaf': '\\u03C2',\n    'sim': '\\u223C',\n    'spades': '\\u2660',\n    'sub': '\\u2282',\n    'sube': '\\u2286',\n    'sum': '\\u2211',\n    'sup': '\\u2283',\n    'sup1': '\\u00B9',\n    'sup2': '\\u00B2',\n    'sup3': '\\u00B3',\n    'supe': '\\u2287',\n    'szlig': '\\u00DF',\n    'Tau': '\\u03A4',\n    'tau': '\\u03C4',\n    'there4': '\\u2234',\n    'Theta': '\\u0398',\n    'theta': '\\u03B8',\n    'thetasym': '\\u03D1',\n    'thinsp': '\\u2009',\n    'THORN': '\\u00DE',\n    'thorn': '\\u00FE',\n    'tilde': '\\u02DC',\n    'times': '\\u00D7',\n    'trade': '\\u2122',\n    'Uacute': '\\u00DA',\n    'uacute': '\\u00FA',\n    'uarr': '\\u2191',\n    'uArr': '\\u21D1',\n    'Ucirc': '\\u00DB',\n    'ucirc': '\\u00FB',\n    'Ugrave': '\\u00D9',\n    'ugrave': '\\u00F9',\n    'uml': '\\u00A8',\n    'upsih': '\\u03D2',\n    'Upsilon': '\\u03A5',\n    'upsilon': '\\u03C5',\n    'Uuml': '\\u00DC',\n    'uuml': '\\u00FC',\n    'weierp': '\\u2118',\n    'Xi': '\\u039E',\n    'xi': '\\u03BE',\n    'Yacute': '\\u00DD',\n    'yacute': '\\u00FD',\n    'yen': '\\u00A5',\n    'yuml': '\\u00FF',\n    'Yuml': '\\u0178',\n    'Zeta': '\\u0396',\n    'zeta': '\\u03B6',\n    'zwj': '\\u200D',\n    'zwnj': '\\u200C',\n};\n// The &ngsp; pseudo-entity is denoting a space. see:\n// https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart\nconst NGSP_UNICODE = '\\uE500';\nNAMED_ENTITIES['ngsp'] = NGSP_UNICODE;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass HtmlTagDefinition {\n    constructor({ closedByChildren, implicitNamespacePrefix, contentType = TagContentType.PARSABLE_DATA, closedByParent = false, isVoid = false, ignoreFirstLf = false } = {}) {\n        this.closedByChildren = {};\n        this.closedByParent = false;\n        this.canSelfClose = false;\n        if (closedByChildren && closedByChildren.length > 0) {\n            closedByChildren.forEach(tagName => this.closedByChildren[tagName] = true);\n        }\n        this.isVoid = isVoid;\n        this.closedByParent = closedByParent || isVoid;\n        this.implicitNamespacePrefix = implicitNamespacePrefix || null;\n        this.contentType = contentType;\n        this.ignoreFirstLf = ignoreFirstLf;\n    }\n    isClosedByChild(name) {\n        return this.isVoid || name.toLowerCase() in this.closedByChildren;\n    }\n}\nlet _DEFAULT_TAG_DEFINITION;\n// see http://www.w3.org/TR/html51/syntax.html#optional-tags\n// This implementation does not fully conform to the HTML5 spec.\nlet TAG_DEFINITIONS;\nfunction getHtmlTagDefinition(tagName) {\n    if (!TAG_DEFINITIONS) {\n        _DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();\n        TAG_DEFINITIONS = {\n            'base': new HtmlTagDefinition({ isVoid: true }),\n            'meta': new HtmlTagDefinition({ isVoid: true }),\n            'area': new HtmlTagDefinition({ isVoid: true }),\n            'embed': new HtmlTagDefinition({ isVoid: true }),\n            'link': new HtmlTagDefinition({ isVoid: true }),\n            'img': new HtmlTagDefinition({ isVoid: true }),\n            'input': new HtmlTagDefinition({ isVoid: true }),\n            'param': new HtmlTagDefinition({ isVoid: true }),\n            'hr': new HtmlTagDefinition({ isVoid: true }),\n            'br': new HtmlTagDefinition({ isVoid: true }),\n            'source': new HtmlTagDefinition({ isVoid: true }),\n            'track': new HtmlTagDefinition({ isVoid: true }),\n            'wbr': new HtmlTagDefinition({ isVoid: true }),\n            'p': new HtmlTagDefinition({\n                closedByChildren: [\n                    'address', 'article', 'aside', 'blockquote', 'div', 'dl', 'fieldset',\n                    'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5',\n                    'h6', 'header', 'hgroup', 'hr', 'main', 'nav', 'ol',\n                    'p', 'pre', 'section', 'table', 'ul'\n                ],\n                closedByParent: true\n            }),\n            'thead': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'] }),\n            'tbody': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'], closedByParent: true }),\n            'tfoot': new HtmlTagDefinition({ closedByChildren: ['tbody'], closedByParent: true }),\n            'tr': new HtmlTagDefinition({ closedByChildren: ['tr'], closedByParent: true }),\n            'td': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),\n            'th': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),\n            'col': new HtmlTagDefinition({ isVoid: true }),\n            'svg': new HtmlTagDefinition({ implicitNamespacePrefix: 'svg' }),\n            'math': new HtmlTagDefinition({ implicitNamespacePrefix: 'math' }),\n            'li': new HtmlTagDefinition({ closedByChildren: ['li'], closedByParent: true }),\n            'dt': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'] }),\n            'dd': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'], closedByParent: true }),\n            'rb': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),\n            'rt': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),\n            'rtc': new HtmlTagDefinition({ closedByChildren: ['rb', 'rtc', 'rp'], closedByParent: true }),\n            'rp': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),\n            'optgroup': new HtmlTagDefinition({ closedByChildren: ['optgroup'], closedByParent: true }),\n            'option': new HtmlTagDefinition({ closedByChildren: ['option', 'optgroup'], closedByParent: true }),\n            'pre': new HtmlTagDefinition({ ignoreFirstLf: true }),\n            'listing': new HtmlTagDefinition({ ignoreFirstLf: true }),\n            'style': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),\n            'script': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),\n            'title': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT }),\n            'textarea': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT, ignoreFirstLf: true }),\n        };\n    }\n    return TAG_DEFINITIONS[tagName.toLowerCase()] || _DEFAULT_TAG_DEFINITION;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst _SELECTOR_REGEXP = new RegExp('(\\\\:not\\\\()|' + //\":not(\"\n    '([-\\\\w]+)|' + // \"tag\"\n    '(?:\\\\.([-\\\\w]+))|' + // \".class\"\n    // \"-\" should appear first in the regexp below as FF31 parses \"[.-\\w]\" as a range\n    '(?:\\\\[([-.\\\\w*]+)(?:=([\\\"\\']?)([^\\\\]\\\"\\']*)\\\\5)?\\\\])|' + // \"[name]\", \"[name=value]\",\n    // \"[name=\"value\"]\",\n    // \"[name='value']\"\n    '(\\\\))|' + // \")\"\n    '(\\\\s*,\\\\s*)', // \",\"\n'g');\n/**\n * A css selector contains an element name,\n * css classes and attribute/value pairs with the purpose\n * of selecting subsets out of them.\n */\nclass CssSelector {\n    constructor() {\n        this.element = null;\n        this.classNames = [];\n        /**\n         * The selectors are encoded in pairs where:\n         * - even locations are attribute names\n         * - odd locations are attribute values.\n         *\n         * Example:\n         * Selector: `[key1=value1][key2]` would parse to:\n         * ```\n         * ['key1', 'value1', 'key2', '']\n         * ```\n         */\n        this.attrs = [];\n        this.notSelectors = [];\n    }\n    static parse(selector) {\n        const results = [];\n        const _addResult = (res, cssSel) => {\n            if (cssSel.notSelectors.length > 0 && !cssSel.element && cssSel.classNames.length == 0 &&\n                cssSel.attrs.length == 0) {\n                cssSel.element = '*';\n            }\n            res.push(cssSel);\n        };\n        let cssSelector = new CssSelector();\n        let match;\n        let current = cssSelector;\n        let inNot = false;\n        _SELECTOR_REGEXP.lastIndex = 0;\n        while (match = _SELECTOR_REGEXP.exec(selector)) {\n            if (match[1]) {\n                if (inNot) {\n                    throw new Error('Nesting :not is not allowed in a selector');\n                }\n                inNot = true;\n                current = new CssSelector();\n                cssSelector.notSelectors.push(current);\n            }\n            if (match[2]) {\n                current.setElement(match[2]);\n            }\n            if (match[3]) {\n                current.addClassName(match[3]);\n            }\n            if (match[4]) {\n                current.addAttribute(match[4], match[6]);\n            }\n            if (match[7]) {\n                inNot = false;\n                current = cssSelector;\n            }\n            if (match[8]) {\n                if (inNot) {\n                    throw new Error('Multiple selectors in :not are not supported');\n                }\n                _addResult(results, cssSelector);\n                cssSelector = current = new CssSelector();\n            }\n        }\n        _addResult(results, cssSelector);\n        return results;\n    }\n    isElementSelector() {\n        return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 &&\n            this.notSelectors.length === 0;\n    }\n    hasElementSelector() { return !!this.element; }\n    setElement(element = null) { this.element = element; }\n    /** Gets a template string for an element that matches the selector. */\n    getMatchingElementTemplate() {\n        const tagName = this.element || 'div';\n        const classAttr = this.classNames.length > 0 ? ` class=\"${this.classNames.join(' ')}\"` : '';\n        let attrs = '';\n        for (let i = 0; i < this.attrs.length; i += 2) {\n            const attrName = this.attrs[i];\n            const attrValue = this.attrs[i + 1] !== '' ? `=\"${this.attrs[i + 1]}\"` : '';\n            attrs += ` ${attrName}${attrValue}`;\n        }\n        return getHtmlTagDefinition(tagName).isVoid ? `<${tagName}${classAttr}${attrs}/>` :\n            `<${tagName}${classAttr}${attrs}></${tagName}>`;\n    }\n    getAttrs() {\n        const result = [];\n        if (this.classNames.length > 0) {\n            result.push('class', this.classNames.join(' '));\n        }\n        return result.concat(this.attrs);\n    }\n    addAttribute(name, value = '') {\n        this.attrs.push(name, value && value.toLowerCase() || '');\n    }\n    addClassName(name) { this.classNames.push(name.toLowerCase()); }\n    toString() {\n        let res = this.element || '';\n        if (this.classNames) {\n            this.classNames.forEach(klass => res += `.${klass}`);\n        }\n        if (this.attrs) {\n            for (let i = 0; i < this.attrs.length; i += 2) {\n                const name = this.attrs[i];\n                const value = this.attrs[i + 1];\n                res += `[${name}${value ? '=' + value : ''}]`;\n            }\n        }\n        this.notSelectors.forEach(notSelector => res += `:not(${notSelector})`);\n        return res;\n    }\n}\n/**\n * Reads a list of CssSelectors and allows to calculate which ones\n * are contained in a given CssSelector.\n */\nclass SelectorMatcher {\n    constructor() {\n        this._elementMap = new Map();\n        this._elementPartialMap = new Map();\n        this._classMap = new Map();\n        this._classPartialMap = new Map();\n        this._attrValueMap = new Map();\n        this._attrValuePartialMap = new Map();\n        this._listContexts = [];\n    }\n    static createNotMatcher(notSelectors) {\n        const notMatcher = new SelectorMatcher();\n        notMatcher.addSelectables(notSelectors, null);\n        return notMatcher;\n    }\n    addSelectables(cssSelectors, callbackCtxt) {\n        let listContext = null;\n        if (cssSelectors.length > 1) {\n            listContext = new SelectorListContext(cssSelectors);\n            this._listContexts.push(listContext);\n        }\n        for (let i = 0; i < cssSelectors.length; i++) {\n            this._addSelectable(cssSelectors[i], callbackCtxt, listContext);\n        }\n    }\n    /**\n     * Add an object that can be found later on by calling `match`.\n     * @param cssSelector A css selector\n     * @param callbackCtxt An opaque object that will be given to the callback of the `match` function\n     */\n    _addSelectable(cssSelector, callbackCtxt, listContext) {\n        let matcher = this;\n        const element = cssSelector.element;\n        const classNames = cssSelector.classNames;\n        const attrs = cssSelector.attrs;\n        const selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);\n        if (element) {\n            const isTerminal = attrs.length === 0 && classNames.length === 0;\n            if (isTerminal) {\n                this._addTerminal(matcher._elementMap, element, selectable);\n            }\n            else {\n                matcher = this._addPartial(matcher._elementPartialMap, element);\n            }\n        }\n        if (classNames) {\n            for (let i = 0; i < classNames.length; i++) {\n                const isTerminal = attrs.length === 0 && i === classNames.length - 1;\n                const className = classNames[i];\n                if (isTerminal) {\n                    this._addTerminal(matcher._classMap, className, selectable);\n                }\n                else {\n                    matcher = this._addPartial(matcher._classPartialMap, className);\n                }\n            }\n        }\n        if (attrs) {\n            for (let i = 0; i < attrs.length; i += 2) {\n                const isTerminal = i === attrs.length - 2;\n                const name = attrs[i];\n                const value = attrs[i + 1];\n                if (isTerminal) {\n                    const terminalMap = matcher._attrValueMap;\n                    let terminalValuesMap = terminalMap.get(name);\n                    if (!terminalValuesMap) {\n                        terminalValuesMap = new Map();\n                        terminalMap.set(name, terminalValuesMap);\n                    }\n                    this._addTerminal(terminalValuesMap, value, selectable);\n                }\n                else {\n                    const partialMap = matcher._attrValuePartialMap;\n                    let partialValuesMap = partialMap.get(name);\n                    if (!partialValuesMap) {\n                        partialValuesMap = new Map();\n                        partialMap.set(name, partialValuesMap);\n                    }\n                    matcher = this._addPartial(partialValuesMap, value);\n                }\n            }\n        }\n    }\n    _addTerminal(map, name, selectable) {\n        let terminalList = map.get(name);\n        if (!terminalList) {\n            terminalList = [];\n            map.set(name, terminalList);\n        }\n        terminalList.push(selectable);\n    }\n    _addPartial(map, name) {\n        let matcher = map.get(name);\n        if (!matcher) {\n            matcher = new SelectorMatcher();\n            map.set(name, matcher);\n        }\n        return matcher;\n    }\n    /**\n     * Find the objects that have been added via `addSelectable`\n     * whose css selector is contained in the given css selector.\n     * @param cssSelector A css selector\n     * @param matchedCallback This callback will be called with the object handed into `addSelectable`\n     * @return boolean true if a match was found\n    */\n    match(cssSelector, matchedCallback) {\n        let result = false;\n        const element = cssSelector.element;\n        const classNames = cssSelector.classNames;\n        const attrs = cssSelector.attrs;\n        for (let i = 0; i < this._listContexts.length; i++) {\n            this._listContexts[i].alreadyMatched = false;\n        }\n        result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;\n        result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) ||\n            result;\n        if (classNames) {\n            for (let i = 0; i < classNames.length; i++) {\n                const className = classNames[i];\n                result =\n                    this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;\n                result =\n                    this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) ||\n                        result;\n            }\n        }\n        if (attrs) {\n            for (let i = 0; i < attrs.length; i += 2) {\n                const name = attrs[i];\n                const value = attrs[i + 1];\n                const terminalValuesMap = this._attrValueMap.get(name);\n                if (value) {\n                    result =\n                        this._matchTerminal(terminalValuesMap, '', cssSelector, matchedCallback) || result;\n                }\n                result =\n                    this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;\n                const partialValuesMap = this._attrValuePartialMap.get(name);\n                if (value) {\n                    result = this._matchPartial(partialValuesMap, '', cssSelector, matchedCallback) || result;\n                }\n                result =\n                    this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;\n            }\n        }\n        return result;\n    }\n    /** @internal */\n    _matchTerminal(map, name, cssSelector, matchedCallback) {\n        if (!map || typeof name !== 'string') {\n            return false;\n        }\n        let selectables = map.get(name) || [];\n        const starSelectables = map.get('*');\n        if (starSelectables) {\n            selectables = selectables.concat(starSelectables);\n        }\n        if (selectables.length === 0) {\n            return false;\n        }\n        let selectable;\n        let result = false;\n        for (let i = 0; i < selectables.length; i++) {\n            selectable = selectables[i];\n            result = selectable.finalize(cssSelector, matchedCallback) || result;\n        }\n        return result;\n    }\n    /** @internal */\n    _matchPartial(map, name, cssSelector, matchedCallback) {\n        if (!map || typeof name !== 'string') {\n            return false;\n        }\n        const nestedSelector = map.get(name);\n        if (!nestedSelector) {\n            return false;\n        }\n        // TODO(perf): get rid of recursion and measure again\n        // TODO(perf): don't pass the whole selector into the recursion,\n        // but only the not processed parts\n        return nestedSelector.match(cssSelector, matchedCallback);\n    }\n}\nclass SelectorListContext {\n    constructor(selectors) {\n        this.selectors = selectors;\n        this.alreadyMatched = false;\n    }\n}\n// Store context to pass back selector and context when a selector is matched\nclass SelectorContext {\n    constructor(selector, cbContext, listContext) {\n        this.selector = selector;\n        this.cbContext = cbContext;\n        this.listContext = listContext;\n        this.notSelectors = selector.notSelectors;\n    }\n    finalize(cssSelector, callback) {\n        let result = true;\n        if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {\n            const notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);\n            result = !notMatcher.match(cssSelector, null);\n        }\n        if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {\n            if (this.listContext) {\n                this.listContext.alreadyMatched = true;\n            }\n            callback(this.selector, this.cbContext);\n        }\n        return result;\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst createInject = makeMetadataFactory('Inject', (token) => ({ token }));\nconst createInjectionToken = makeMetadataFactory('InjectionToken', (desc) => ({ _desc: desc, ngInjectableDef: undefined }));\nconst createAttribute = makeMetadataFactory('Attribute', (attributeName) => ({ attributeName }));\nconst createContentChildren = makeMetadataFactory('ContentChildren', (selector, data = {}) => (Object.assign({ selector, first: false, isViewQuery: false, descendants: false }, data)));\nconst createContentChild = makeMetadataFactory('ContentChild', (selector, data = {}) => (Object.assign({ selector, first: true, isViewQuery: false, descendants: true }, data)));\nconst createViewChildren = makeMetadataFactory('ViewChildren', (selector, data = {}) => (Object.assign({ selector, first: false, isViewQuery: true, descendants: true }, data)));\nconst createViewChild = makeMetadataFactory('ViewChild', (selector, data) => (Object.assign({ selector, first: true, isViewQuery: true, descendants: true }, data)));\nconst createDirective = makeMetadataFactory('Directive', (dir = {}) => dir);\nvar ViewEncapsulation;\n(function (ViewEncapsulation) {\n    ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\";\n    ViewEncapsulation[ViewEncapsulation[\"Native\"] = 1] = \"Native\";\n    ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\n    ViewEncapsulation[ViewEncapsulation[\"ShadowDom\"] = 3] = \"ShadowDom\";\n})(ViewEncapsulation || (ViewEncapsulation = {}));\nvar ChangeDetectionStrategy;\n(function (ChangeDetectionStrategy) {\n    ChangeDetectionStrategy[ChangeDetectionStrategy[\"OnPush\"] = 0] = \"OnPush\";\n    ChangeDetectionStrategy[ChangeDetectionStrategy[\"Default\"] = 1] = \"Default\";\n})(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));\nconst createComponent = makeMetadataFactory('Component', (c = {}) => (Object.assign({ changeDetection: ChangeDetectionStrategy.Default }, c)));\nconst createPipe = makeMetadataFactory('Pipe', (p) => (Object.assign({ pure: true }, p)));\nconst createInput = makeMetadataFactory('Input', (bindingPropertyName) => ({ bindingPropertyName }));\nconst createOutput = makeMetadataFactory('Output', (bindingPropertyName) => ({ bindingPropertyName }));\nconst createHostBinding = makeMetadataFactory('HostBinding', (hostPropertyName) => ({ hostPropertyName }));\nconst createHostListener = makeMetadataFactory('HostListener', (eventName, args) => ({ eventName, args }));\nconst createNgModule = makeMetadataFactory('NgModule', (ngModule) => ngModule);\nconst createInjectable = makeMetadataFactory('Injectable', (injectable = {}) => injectable);\nconst CUSTOM_ELEMENTS_SCHEMA = {\n    name: 'custom-elements'\n};\nconst NO_ERRORS_SCHEMA = {\n    name: 'no-errors-schema'\n};\nconst createOptional = makeMetadataFactory('Optional');\nconst createSelf = makeMetadataFactory('Self');\nconst createSkipSelf = makeMetadataFactory('SkipSelf');\nconst createHost = makeMetadataFactory('Host');\nconst Type = Function;\nvar SecurityContext;\n(function (SecurityContext) {\n    SecurityContext[SecurityContext[\"NONE\"] = 0] = \"NONE\";\n    SecurityContext[SecurityContext[\"HTML\"] = 1] = \"HTML\";\n    SecurityContext[SecurityContext[\"STYLE\"] = 2] = \"STYLE\";\n    SecurityContext[SecurityContext[\"SCRIPT\"] = 3] = \"SCRIPT\";\n    SecurityContext[SecurityContext[\"URL\"] = 4] = \"URL\";\n    SecurityContext[SecurityContext[\"RESOURCE_URL\"] = 5] = \"RESOURCE_URL\";\n})(SecurityContext || (SecurityContext = {}));\nvar MissingTranslationStrategy;\n(function (MissingTranslationStrategy) {\n    MissingTranslationStrategy[MissingTranslationStrategy[\"Error\"] = 0] = \"Error\";\n    MissingTranslationStrategy[MissingTranslationStrategy[\"Warning\"] = 1] = \"Warning\";\n    MissingTranslationStrategy[MissingTranslationStrategy[\"Ignore\"] = 2] = \"Ignore\";\n})(MissingTranslationStrategy || (MissingTranslationStrategy = {}));\nfunction makeMetadataFactory(name, props) {\n    // This must be declared as a function, not a fat arrow, so that ES2015 devmode produces code\n    // that works with the static_reflector.ts in the ViewEngine compiler.\n    // In particular, `_registerDecoratorOrConstructor` assumes that the value returned here can be\n    // new'ed.\n    function factory(...args) {\n        const values = props ? props(...args) : {};\n        return Object.assign({ ngMetadataName: name }, values);\n    }\n    factory.isTypeOf = (obj) => obj && obj.ngMetadataName === name;\n    factory.ngMetadataName = name;\n    return factory;\n}\nfunction parserSelectorToSimpleSelector(selector) {\n    const classes = selector.classNames && selector.classNames.length ?\n        [8 /* CLASS */, ...selector.classNames] :\n        [];\n    const elementName = selector.element && selector.element !== '*' ? selector.element : '';\n    return [elementName, ...selector.attrs, ...classes];\n}\nfunction parserSelectorToNegativeSelector(selector) {\n    const classes = selector.classNames && selector.classNames.length ?\n        [8 /* CLASS */, ...selector.classNames] :\n        [];\n    if (selector.element) {\n        return [\n            1 /* NOT */ | 4 /* ELEMENT */, selector.element, ...selector.attrs, ...classes\n        ];\n    }\n    else if (selector.attrs.length) {\n        return [1 /* NOT */ | 2 /* ATTRIBUTE */, ...selector.attrs, ...classes];\n    }\n    else {\n        return selector.classNames && selector.classNames.length ?\n            [1 /* NOT */ | 8 /* CLASS */, ...selector.classNames] :\n            [];\n    }\n}\nfunction parserSelectorToR3Selector(selector) {\n    const positive = parserSelectorToSimpleSelector(selector);\n    const negative = selector.notSelectors && selector.notSelectors.length ?\n        selector.notSelectors.map(notSelector => parserSelectorToNegativeSelector(notSelector)) :\n        [];\n    return positive.concat(...negative);\n}\nfunction parseSelectorToR3Selector(selector) {\n    return selector ? CssSelector.parse(selector).map(parserSelectorToR3Selector) : [];\n}\n\nvar core = /*#__PURE__*/Object.freeze({\n    createInject: createInject,\n    createInjectionToken: createInjectionToken,\n    createAttribute: createAttribute,\n    createContentChildren: createContentChildren,\n    createContentChild: createContentChild,\n    createViewChildren: createViewChildren,\n    createViewChild: createViewChild,\n    createDirective: createDirective,\n    get ViewEncapsulation () { return ViewEncapsulation; },\n    get ChangeDetectionStrategy () { return ChangeDetectionStrategy; },\n    createComponent: createComponent,\n    createPipe: createPipe,\n    createInput: createInput,\n    createOutput: createOutput,\n    createHostBinding: createHostBinding,\n    createHostListener: createHostListener,\n    createNgModule: createNgModule,\n    createInjectable: createInjectable,\n    CUSTOM_ELEMENTS_SCHEMA: CUSTOM_ELEMENTS_SCHEMA,\n    NO_ERRORS_SCHEMA: NO_ERRORS_SCHEMA,\n    createOptional: createOptional,\n    createSelf: createSelf,\n    createSkipSelf: createSkipSelf,\n    createHost: createHost,\n    Type: Type,\n    get SecurityContext () { return SecurityContext; },\n    get MissingTranslationStrategy () { return MissingTranslationStrategy; },\n    parseSelectorToR3Selector: parseSelectorToR3Selector\n});\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n//// Types\nvar TypeModifier;\n(function (TypeModifier) {\n    TypeModifier[TypeModifier[\"Const\"] = 0] = \"Const\";\n})(TypeModifier || (TypeModifier = {}));\nclass Type$1 {\n    constructor(modifiers = null) {\n        this.modifiers = modifiers;\n        if (!modifiers) {\n            this.modifiers = [];\n        }\n    }\n    hasModifier(modifier) { return this.modifiers.indexOf(modifier) !== -1; }\n}\nvar BuiltinTypeName;\n(function (BuiltinTypeName) {\n    BuiltinTypeName[BuiltinTypeName[\"Dynamic\"] = 0] = \"Dynamic\";\n    BuiltinTypeName[BuiltinTypeName[\"Bool\"] = 1] = \"Bool\";\n    BuiltinTypeName[BuiltinTypeName[\"String\"] = 2] = \"String\";\n    BuiltinTypeName[BuiltinTypeName[\"Int\"] = 3] = \"Int\";\n    BuiltinTypeName[BuiltinTypeName[\"Number\"] = 4] = \"Number\";\n    BuiltinTypeName[BuiltinTypeName[\"Function\"] = 5] = \"Function\";\n    BuiltinTypeName[BuiltinTypeName[\"Inferred\"] = 6] = \"Inferred\";\n    BuiltinTypeName[BuiltinTypeName[\"None\"] = 7] = \"None\";\n})(BuiltinTypeName || (BuiltinTypeName = {}));\nclass BuiltinType extends Type$1 {\n    constructor(name, modifiers = null) {\n        super(modifiers);\n        this.name = name;\n    }\n    visitType(visitor, context) {\n        return visitor.visitBuiltinType(this, context);\n    }\n}\nclass ExpressionType extends Type$1 {\n    constructor(value, modifiers = null, typeParams = null) {\n        super(modifiers);\n        this.value = value;\n        this.typeParams = typeParams;\n    }\n    visitType(visitor, context) {\n        return visitor.visitExpressionType(this, context);\n    }\n}\nclass ArrayType extends Type$1 {\n    constructor(of, modifiers = null) {\n        super(modifiers);\n        this.of = of;\n    }\n    visitType(visitor, context) {\n        return visitor.visitArrayType(this, context);\n    }\n}\nclass MapType extends Type$1 {\n    constructor(valueType, modifiers = null) {\n        super(modifiers);\n        this.valueType = valueType || null;\n    }\n    visitType(visitor, context) { return visitor.visitMapType(this, context); }\n}\nconst DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);\nconst INFERRED_TYPE = new BuiltinType(BuiltinTypeName.Inferred);\nconst BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);\nconst INT_TYPE = new BuiltinType(BuiltinTypeName.Int);\nconst NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);\nconst STRING_TYPE = new BuiltinType(BuiltinTypeName.String);\nconst FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);\nconst NONE_TYPE = new BuiltinType(BuiltinTypeName.None);\n///// Expressions\nvar BinaryOperator;\n(function (BinaryOperator) {\n    BinaryOperator[BinaryOperator[\"Equals\"] = 0] = \"Equals\";\n    BinaryOperator[BinaryOperator[\"NotEquals\"] = 1] = \"NotEquals\";\n    BinaryOperator[BinaryOperator[\"Identical\"] = 2] = \"Identical\";\n    BinaryOperator[BinaryOperator[\"NotIdentical\"] = 3] = \"NotIdentical\";\n    BinaryOperator[BinaryOperator[\"Minus\"] = 4] = \"Minus\";\n    BinaryOperator[BinaryOperator[\"Plus\"] = 5] = \"Plus\";\n    BinaryOperator[BinaryOperator[\"Divide\"] = 6] = \"Divide\";\n    BinaryOperator[BinaryOperator[\"Multiply\"] = 7] = \"Multiply\";\n    BinaryOperator[BinaryOperator[\"Modulo\"] = 8] = \"Modulo\";\n    BinaryOperator[BinaryOperator[\"And\"] = 9] = \"And\";\n    BinaryOperator[BinaryOperator[\"Or\"] = 10] = \"Or\";\n    BinaryOperator[BinaryOperator[\"BitwiseAnd\"] = 11] = \"BitwiseAnd\";\n    BinaryOperator[BinaryOperator[\"Lower\"] = 12] = \"Lower\";\n    BinaryOperator[BinaryOperator[\"LowerEquals\"] = 13] = \"LowerEquals\";\n    BinaryOperator[BinaryOperator[\"Bigger\"] = 14] = \"Bigger\";\n    BinaryOperator[BinaryOperator[\"BiggerEquals\"] = 15] = \"BiggerEquals\";\n})(BinaryOperator || (BinaryOperator = {}));\nfunction nullSafeIsEquivalent(base, other) {\n    if (base == null || other == null) {\n        return base == other;\n    }\n    return base.isEquivalent(other);\n}\nfunction areAllEquivalent(base, other) {\n    const len = base.length;\n    if (len !== other.length) {\n        return false;\n    }\n    for (let i = 0; i < len; i++) {\n        if (!base[i].isEquivalent(other[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nclass Expression {\n    constructor(type, sourceSpan) {\n        this.type = type || null;\n        this.sourceSpan = sourceSpan || null;\n    }\n    prop(name, sourceSpan) {\n        return new ReadPropExpr(this, name, null, sourceSpan);\n    }\n    key(index, type, sourceSpan) {\n        return new ReadKeyExpr(this, index, type, sourceSpan);\n    }\n    callMethod(name, params, sourceSpan) {\n        return new InvokeMethodExpr(this, name, params, null, sourceSpan);\n    }\n    callFn(params, sourceSpan) {\n        return new InvokeFunctionExpr(this, params, null, sourceSpan);\n    }\n    instantiate(params, type, sourceSpan) {\n        return new InstantiateExpr(this, params, type, sourceSpan);\n    }\n    conditional(trueCase, falseCase = null, sourceSpan) {\n        return new ConditionalExpr(this, trueCase, falseCase, null, sourceSpan);\n    }\n    equals(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs, null, sourceSpan);\n    }\n    notEquals(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs, null, sourceSpan);\n    }\n    identical(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs, null, sourceSpan);\n    }\n    notIdentical(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs, null, sourceSpan);\n    }\n    minus(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs, null, sourceSpan);\n    }\n    plus(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs, null, sourceSpan);\n    }\n    divide(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs, null, sourceSpan);\n    }\n    multiply(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs, null, sourceSpan);\n    }\n    modulo(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs, null, sourceSpan);\n    }\n    and(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.And, this, rhs, null, sourceSpan);\n    }\n    bitwiseAnd(rhs, sourceSpan, parens = true) {\n        return new BinaryOperatorExpr(BinaryOperator.BitwiseAnd, this, rhs, null, sourceSpan, parens);\n    }\n    or(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs, null, sourceSpan);\n    }\n    lower(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs, null, sourceSpan);\n    }\n    lowerEquals(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs, null, sourceSpan);\n    }\n    bigger(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs, null, sourceSpan);\n    }\n    biggerEquals(rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs, null, sourceSpan);\n    }\n    isBlank(sourceSpan) {\n        // Note: We use equals by purpose here to compare to null and undefined in JS.\n        // We use the typed null to allow strictNullChecks to narrow types.\n        return this.equals(TYPED_NULL_EXPR, sourceSpan);\n    }\n    cast(type, sourceSpan) {\n        return new CastExpr(this, type, sourceSpan);\n    }\n    toStmt() { return new ExpressionStatement(this, null); }\n}\nvar BuiltinVar;\n(function (BuiltinVar) {\n    BuiltinVar[BuiltinVar[\"This\"] = 0] = \"This\";\n    BuiltinVar[BuiltinVar[\"Super\"] = 1] = \"Super\";\n    BuiltinVar[BuiltinVar[\"CatchError\"] = 2] = \"CatchError\";\n    BuiltinVar[BuiltinVar[\"CatchStack\"] = 3] = \"CatchStack\";\n})(BuiltinVar || (BuiltinVar = {}));\nclass ReadVarExpr extends Expression {\n    constructor(name, type, sourceSpan) {\n        super(type, sourceSpan);\n        if (typeof name === 'string') {\n            this.name = name;\n            this.builtin = null;\n        }\n        else {\n            this.name = null;\n            this.builtin = name;\n        }\n    }\n    isEquivalent(e) {\n        return e instanceof ReadVarExpr && this.name === e.name && this.builtin === e.builtin;\n    }\n    isConstant() { return false; }\n    visitExpression(visitor, context) {\n        return visitor.visitReadVarExpr(this, context);\n    }\n    set(value) {\n        if (!this.name) {\n            throw new Error(`Built in variable ${this.builtin} can not be assigned to.`);\n        }\n        return new WriteVarExpr(this.name, value, null, this.sourceSpan);\n    }\n}\nclass TypeofExpr extends Expression {\n    constructor(expr, type, sourceSpan) {\n        super(type, sourceSpan);\n        this.expr = expr;\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitTypeofExpr(this, context);\n    }\n    isEquivalent(e) {\n        return e instanceof TypeofExpr && e.expr.isEquivalent(this.expr);\n    }\n    isConstant() { return this.expr.isConstant(); }\n}\nclass WrappedNodeExpr extends Expression {\n    constructor(node, type, sourceSpan) {\n        super(type, sourceSpan);\n        this.node = node;\n    }\n    isEquivalent(e) {\n        return e instanceof WrappedNodeExpr && this.node === e.node;\n    }\n    isConstant() { return false; }\n    visitExpression(visitor, context) {\n        return visitor.visitWrappedNodeExpr(this, context);\n    }\n}\nclass WriteVarExpr extends Expression {\n    constructor(name, value, type, sourceSpan) {\n        super(type || value.type, sourceSpan);\n        this.name = name;\n        this.value = value;\n    }\n    isEquivalent(e) {\n        return e instanceof WriteVarExpr && this.name === e.name && this.value.isEquivalent(e.value);\n    }\n    isConstant() { return false; }\n    visitExpression(visitor, context) {\n        return visitor.visitWriteVarExpr(this, context);\n    }\n    toDeclStmt(type, modifiers) {\n        return new DeclareVarStmt(this.name, this.value, type, modifiers, this.sourceSpan);\n    }\n    toConstDecl() { return this.toDeclStmt(INFERRED_TYPE, [StmtModifier.Final]); }\n}\nclass WriteKeyExpr extends Expression {\n    constructor(receiver, index, value, type, sourceSpan) {\n        super(type || value.type, sourceSpan);\n        this.receiver = receiver;\n        this.index = index;\n        this.value = value;\n    }\n    isEquivalent(e) {\n        return e instanceof WriteKeyExpr && this.receiver.isEquivalent(e.receiver) &&\n            this.index.isEquivalent(e.index) && this.value.isEquivalent(e.value);\n    }\n    isConstant() { return false; }\n    visitExpression(visitor, context) {\n        return visitor.visitWriteKeyExpr(this, context);\n    }\n}\nclass WritePropExpr extends Expression {\n    constructor(receiver, name, value, type, sourceSpan) {\n        super(type || value.type, sourceSpan);\n        this.receiver = receiver;\n        this.name = name;\n        this.value = value;\n    }\n    isEquivalent(e) {\n        return e instanceof WritePropExpr && this.receiver.isEquivalent(e.receiver) &&\n            this.name === e.name && this.value.isEquivalent(e.value);\n    }\n    isConstant() { return false; }\n    visitExpression(visitor, context) {\n        return visitor.visitWritePropExpr(this, context);\n    }\n}\nvar BuiltinMethod;\n(function (BuiltinMethod) {\n    BuiltinMethod[BuiltinMethod[\"ConcatArray\"] = 0] = \"ConcatArray\";\n    BuiltinMethod[BuiltinMethod[\"SubscribeObservable\"] = 1] = \"SubscribeObservable\";\n    BuiltinMethod[BuiltinMethod[\"Bind\"] = 2] = \"Bind\";\n})(BuiltinMethod || (BuiltinMethod = {}));\nclass InvokeMethodExpr extends Expression {\n    constructor(receiver, method, args, type, sourceSpan) {\n        super(type, sourceSpan);\n        this.receiver = receiver;\n        this.args = args;\n        if (typeof method === 'string') {\n            this.name = method;\n            this.builtin = null;\n        }\n        else {\n            this.name = null;\n            this.builtin = method;\n        }\n    }\n    isEquivalent(e) {\n        return e instanceof InvokeMethodExpr && this.receiver.isEquivalent(e.receiver) &&\n            this.name === e.name && this.builtin === e.builtin && areAllEquivalent(this.args, e.args);\n    }\n    isConstant() { return false; }\n    visitExpression(visitor, context) {\n        return visitor.visitInvokeMethodExpr(this, context);\n    }\n}\nclass InvokeFunctionExpr extends Expression {\n    constructor(fn, args, type, sourceSpan, pure = false) {\n        super(type, sourceSpan);\n        this.fn = fn;\n        this.args = args;\n        this.pure = pure;\n    }\n    isEquivalent(e) {\n        return e instanceof InvokeFunctionExpr && this.fn.isEquivalent(e.fn) &&\n            areAllEquivalent(this.args, e.args) && this.pure === e.pure;\n    }\n    isConstant() { return false; }\n    visitExpression(visitor, context) {\n        return visitor.visitInvokeFunctionExpr(this, context);\n    }\n}\nclass InstantiateExpr extends Expression {\n    constructor(classExpr, args, type, sourceSpan) {\n        super(type, sourceSpan);\n        this.classExpr = classExpr;\n        this.args = args;\n    }\n    isEquivalent(e) {\n        return e instanceof InstantiateExpr && this.classExpr.isEquivalent(e.classExpr) &&\n            areAllEquivalent(this.args, e.args);\n    }\n    isConstant() { return false; }\n    visitExpression(visitor, context) {\n        return visitor.visitInstantiateExpr(this, context);\n    }\n}\nclass LiteralExpr extends Expression {\n    constructor(value, type, sourceSpan) {\n        super(type, sourceSpan);\n        this.value = value;\n    }\n    isEquivalent(e) {\n        return e instanceof LiteralExpr && this.value === e.value;\n    }\n    isConstant() { return true; }\n    visitExpression(visitor, context) {\n        return visitor.visitLiteralExpr(this, context);\n    }\n}\nclass ExternalExpr extends Expression {\n    constructor(value, type, typeParams = null, sourceSpan) {\n        super(type, sourceSpan);\n        this.value = value;\n        this.typeParams = typeParams;\n    }\n    isEquivalent(e) {\n        return e instanceof ExternalExpr && this.value.name === e.value.name &&\n            this.value.moduleName === e.value.moduleName && this.value.runtime === e.value.runtime;\n    }\n    isConstant() { return false; }\n    visitExpression(visitor, context) {\n        return visitor.visitExternalExpr(this, context);\n    }\n}\nclass ExternalReference {\n    constructor(moduleName, name, runtime) {\n        this.moduleName = moduleName;\n        this.name = name;\n        this.runtime = runtime;\n    }\n}\nclass ConditionalExpr extends Expression {\n    constructor(condition, trueCase, falseCase = null, type, sourceSpan) {\n        super(type || trueCase.type, sourceSpan);\n        this.condition = condition;\n        this.falseCase = falseCase;\n        this.trueCase = trueCase;\n    }\n    isEquivalent(e) {\n        return e instanceof ConditionalExpr && this.condition.isEquivalent(e.condition) &&\n            this.trueCase.isEquivalent(e.trueCase) && nullSafeIsEquivalent(this.falseCase, e.falseCase);\n    }\n    isConstant() { return false; }\n    visitExpression(visitor, context) {\n        return visitor.visitConditionalExpr(this, context);\n    }\n}\nclass NotExpr extends Expression {\n    constructor(condition, sourceSpan) {\n        super(BOOL_TYPE, sourceSpan);\n        this.condition = condition;\n    }\n    isEquivalent(e) {\n        return e instanceof NotExpr && this.condition.isEquivalent(e.condition);\n    }\n    isConstant() { return false; }\n    visitExpression(visitor, context) {\n        return visitor.visitNotExpr(this, context);\n    }\n}\nclass AssertNotNull extends Expression {\n    constructor(condition, sourceSpan) {\n        super(condition.type, sourceSpan);\n        this.condition = condition;\n    }\n    isEquivalent(e) {\n        return e instanceof AssertNotNull && this.condition.isEquivalent(e.condition);\n    }\n    isConstant() { return false; }\n    visitExpression(visitor, context) {\n        return visitor.visitAssertNotNullExpr(this, context);\n    }\n}\nclass CastExpr extends Expression {\n    constructor(value, type, sourceSpan) {\n        super(type, sourceSpan);\n        this.value = value;\n    }\n    isEquivalent(e) {\n        return e instanceof CastExpr && this.value.isEquivalent(e.value);\n    }\n    isConstant() { return false; }\n    visitExpression(visitor, context) {\n        return visitor.visitCastExpr(this, context);\n    }\n}\nclass FnParam {\n    constructor(name, type = null) {\n        this.name = name;\n        this.type = type;\n    }\n    isEquivalent(param) { return this.name === param.name; }\n}\nclass FunctionExpr extends Expression {\n    constructor(params, statements, type, sourceSpan, name) {\n        super(type, sourceSpan);\n        this.params = params;\n        this.statements = statements;\n        this.name = name;\n    }\n    isEquivalent(e) {\n        return e instanceof FunctionExpr && areAllEquivalent(this.params, e.params) &&\n            areAllEquivalent(this.statements, e.statements);\n    }\n    isConstant() { return false; }\n    visitExpression(visitor, context) {\n        return visitor.visitFunctionExpr(this, context);\n    }\n    toDeclStmt(name, modifiers = null) {\n        return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers, this.sourceSpan);\n    }\n}\nclass BinaryOperatorExpr extends Expression {\n    constructor(operator, lhs, rhs, type, sourceSpan, parens = true) {\n        super(type || lhs.type, sourceSpan);\n        this.operator = operator;\n        this.rhs = rhs;\n        this.parens = parens;\n        this.lhs = lhs;\n    }\n    isEquivalent(e) {\n        return e instanceof BinaryOperatorExpr && this.operator === e.operator &&\n            this.lhs.isEquivalent(e.lhs) && this.rhs.isEquivalent(e.rhs);\n    }\n    isConstant() { return false; }\n    visitExpression(visitor, context) {\n        return visitor.visitBinaryOperatorExpr(this, context);\n    }\n}\nclass ReadPropExpr extends Expression {\n    constructor(receiver, name, type, sourceSpan) {\n        super(type, sourceSpan);\n        this.receiver = receiver;\n        this.name = name;\n    }\n    isEquivalent(e) {\n        return e instanceof ReadPropExpr && this.receiver.isEquivalent(e.receiver) &&\n            this.name === e.name;\n    }\n    isConstant() { return false; }\n    visitExpression(visitor, context) {\n        return visitor.visitReadPropExpr(this, context);\n    }\n    set(value) {\n        return new WritePropExpr(this.receiver, this.name, value, null, this.sourceSpan);\n    }\n}\nclass ReadKeyExpr extends Expression {\n    constructor(receiver, index, type, sourceSpan) {\n        super(type, sourceSpan);\n        this.receiver = receiver;\n        this.index = index;\n    }\n    isEquivalent(e) {\n        return e instanceof ReadKeyExpr && this.receiver.isEquivalent(e.receiver) &&\n            this.index.isEquivalent(e.index);\n    }\n    isConstant() { return false; }\n    visitExpression(visitor, context) {\n        return visitor.visitReadKeyExpr(this, context);\n    }\n    set(value) {\n        return new WriteKeyExpr(this.receiver, this.index, value, null, this.sourceSpan);\n    }\n}\nclass LiteralArrayExpr extends Expression {\n    constructor(entries, type, sourceSpan) {\n        super(type, sourceSpan);\n        this.entries = entries;\n    }\n    isConstant() { return this.entries.every(e => e.isConstant()); }\n    isEquivalent(e) {\n        return e instanceof LiteralArrayExpr && areAllEquivalent(this.entries, e.entries);\n    }\n    visitExpression(visitor, context) {\n        return visitor.visitLiteralArrayExpr(this, context);\n    }\n}\nclass LiteralMapEntry {\n    constructor(key, value, quoted) {\n        this.key = key;\n        this.value = value;\n        this.quoted = quoted;\n    }\n    isEquivalent(e) {\n        return this.key === e.key && this.value.isEquivalent(e.value);\n    }\n}\nclass LiteralMapExpr extends Expression {\n    constructor(entries, type, sourceSpan) {\n        super(type, sourceSpan);\n        this.entries = entries;\n        this.valueType = null;\n        if (type) {\n            this.valueType = type.valueType;\n        }\n    }\n    isEquivalent(e) {\n        return e instanceof LiteralMapExpr && areAllEquivalent(this.entries, e.entries);\n    }\n    isConstant() { return this.entries.every(e => e.value.isConstant()); }\n    visitExpression(visitor, context) {\n        return visitor.visitLiteralMapExpr(this, context);\n    }\n}\nclass CommaExpr extends Expression {\n    constructor(parts, sourceSpan) {\n        super(parts[parts.length - 1].type, sourceSpan);\n        this.parts = parts;\n    }\n    isEquivalent(e) {\n        return e instanceof CommaExpr && areAllEquivalent(this.parts, e.parts);\n    }\n    isConstant() { return false; }\n    visitExpression(visitor, context) {\n        return visitor.visitCommaExpr(this, context);\n    }\n}\nconst THIS_EXPR = new ReadVarExpr(BuiltinVar.This, null, null);\nconst SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super, null, null);\nconst CATCH_ERROR_VAR = new ReadVarExpr(BuiltinVar.CatchError, null, null);\nconst CATCH_STACK_VAR = new ReadVarExpr(BuiltinVar.CatchStack, null, null);\nconst NULL_EXPR = new LiteralExpr(null, null, null);\nconst TYPED_NULL_EXPR = new LiteralExpr(null, INFERRED_TYPE, null);\n//// Statements\nvar StmtModifier;\n(function (StmtModifier) {\n    StmtModifier[StmtModifier[\"Final\"] = 0] = \"Final\";\n    StmtModifier[StmtModifier[\"Private\"] = 1] = \"Private\";\n    StmtModifier[StmtModifier[\"Exported\"] = 2] = \"Exported\";\n    StmtModifier[StmtModifier[\"Static\"] = 3] = \"Static\";\n})(StmtModifier || (StmtModifier = {}));\nclass Statement {\n    constructor(modifiers, sourceSpan) {\n        this.modifiers = modifiers || [];\n        this.sourceSpan = sourceSpan || null;\n    }\n    hasModifier(modifier) { return this.modifiers.indexOf(modifier) !== -1; }\n}\nclass DeclareVarStmt extends Statement {\n    constructor(name, value, type, modifiers = null, sourceSpan) {\n        super(modifiers, sourceSpan);\n        this.name = name;\n        this.value = value;\n        this.type = type || (value && value.type) || null;\n    }\n    isEquivalent(stmt) {\n        return stmt instanceof DeclareVarStmt && this.name === stmt.name &&\n            (this.value ? !!stmt.value && this.value.isEquivalent(stmt.value) : !stmt.value);\n    }\n    visitStatement(visitor, context) {\n        return visitor.visitDeclareVarStmt(this, context);\n    }\n}\nclass DeclareFunctionStmt extends Statement {\n    constructor(name, params, statements, type, modifiers = null, sourceSpan) {\n        super(modifiers, sourceSpan);\n        this.name = name;\n        this.params = params;\n        this.statements = statements;\n        this.type = type || null;\n    }\n    isEquivalent(stmt) {\n        return stmt instanceof DeclareFunctionStmt && areAllEquivalent(this.params, stmt.params) &&\n            areAllEquivalent(this.statements, stmt.statements);\n    }\n    visitStatement(visitor, context) {\n        return visitor.visitDeclareFunctionStmt(this, context);\n    }\n}\nclass ExpressionStatement extends Statement {\n    constructor(expr, sourceSpan) {\n        super(null, sourceSpan);\n        this.expr = expr;\n    }\n    isEquivalent(stmt) {\n        return stmt instanceof ExpressionStatement && this.expr.isEquivalent(stmt.expr);\n    }\n    visitStatement(visitor, context) {\n        return visitor.visitExpressionStmt(this, context);\n    }\n}\nclass ReturnStatement extends Statement {\n    constructor(value, sourceSpan) {\n        super(null, sourceSpan);\n        this.value = value;\n    }\n    isEquivalent(stmt) {\n        return stmt instanceof ReturnStatement && this.value.isEquivalent(stmt.value);\n    }\n    visitStatement(visitor, context) {\n        return visitor.visitReturnStmt(this, context);\n    }\n}\nclass AbstractClassPart {\n    constructor(type, modifiers) {\n        this.modifiers = modifiers;\n        if (!modifiers) {\n            this.modifiers = [];\n        }\n        this.type = type || null;\n    }\n    hasModifier(modifier) { return this.modifiers.indexOf(modifier) !== -1; }\n}\nclass ClassField extends AbstractClassPart {\n    constructor(name, type, modifiers = null, initializer) {\n        super(type, modifiers);\n        this.name = name;\n        this.initializer = initializer;\n    }\n    isEquivalent(f) { return this.name === f.name; }\n}\nclass ClassMethod extends AbstractClassPart {\n    constructor(name, params, body, type, modifiers = null) {\n        super(type, modifiers);\n        this.name = name;\n        this.params = params;\n        this.body = body;\n    }\n    isEquivalent(m) {\n        return this.name === m.name && areAllEquivalent(this.body, m.body);\n    }\n}\nclass ClassGetter extends AbstractClassPart {\n    constructor(name, body, type, modifiers = null) {\n        super(type, modifiers);\n        this.name = name;\n        this.body = body;\n    }\n    isEquivalent(m) {\n        return this.name === m.name && areAllEquivalent(this.body, m.body);\n    }\n}\nclass ClassStmt extends Statement {\n    constructor(name, parent, fields, getters, constructorMethod, methods, modifiers = null, sourceSpan) {\n        super(modifiers, sourceSpan);\n        this.name = name;\n        this.parent = parent;\n        this.fields = fields;\n        this.getters = getters;\n        this.constructorMethod = constructorMethod;\n        this.methods = methods;\n    }\n    isEquivalent(stmt) {\n        return stmt instanceof ClassStmt && this.name === stmt.name &&\n            nullSafeIsEquivalent(this.parent, stmt.parent) &&\n            areAllEquivalent(this.fields, stmt.fields) &&\n            areAllEquivalent(this.getters, stmt.getters) &&\n            this.constructorMethod.isEquivalent(stmt.constructorMethod) &&\n            areAllEquivalent(this.methods, stmt.methods);\n    }\n    visitStatement(visitor, context) {\n        return visitor.visitDeclareClassStmt(this, context);\n    }\n}\nclass IfStmt extends Statement {\n    constructor(condition, trueCase, falseCase = [], sourceSpan) {\n        super(null, sourceSpan);\n        this.condition = condition;\n        this.trueCase = trueCase;\n        this.falseCase = falseCase;\n    }\n    isEquivalent(stmt) {\n        return stmt instanceof IfStmt && this.condition.isEquivalent(stmt.condition) &&\n            areAllEquivalent(this.trueCase, stmt.trueCase) &&\n            areAllEquivalent(this.falseCase, stmt.falseCase);\n    }\n    visitStatement(visitor, context) {\n        return visitor.visitIfStmt(this, context);\n    }\n}\nclass CommentStmt extends Statement {\n    constructor(comment, multiline = false, sourceSpan) {\n        super(null, sourceSpan);\n        this.comment = comment;\n        this.multiline = multiline;\n    }\n    isEquivalent(stmt) { return stmt instanceof CommentStmt; }\n    visitStatement(visitor, context) {\n        return visitor.visitCommentStmt(this, context);\n    }\n}\nclass JSDocCommentStmt extends Statement {\n    constructor(tags = [], sourceSpan) {\n        super(null, sourceSpan);\n        this.tags = tags;\n    }\n    isEquivalent(stmt) {\n        return stmt instanceof JSDocCommentStmt && this.toString() === stmt.toString();\n    }\n    visitStatement(visitor, context) {\n        return visitor.visitJSDocCommentStmt(this, context);\n    }\n    toString() { return serializeTags(this.tags); }\n}\nclass TryCatchStmt extends Statement {\n    constructor(bodyStmts, catchStmts, sourceSpan) {\n        super(null, sourceSpan);\n        this.bodyStmts = bodyStmts;\n        this.catchStmts = catchStmts;\n    }\n    isEquivalent(stmt) {\n        return stmt instanceof TryCatchStmt && areAllEquivalent(this.bodyStmts, stmt.bodyStmts) &&\n            areAllEquivalent(this.catchStmts, stmt.catchStmts);\n    }\n    visitStatement(visitor, context) {\n        return visitor.visitTryCatchStmt(this, context);\n    }\n}\nclass ThrowStmt extends Statement {\n    constructor(error, sourceSpan) {\n        super(null, sourceSpan);\n        this.error = error;\n    }\n    isEquivalent(stmt) {\n        return stmt instanceof TryCatchStmt && this.error.isEquivalent(stmt.error);\n    }\n    visitStatement(visitor, context) {\n        return visitor.visitThrowStmt(this, context);\n    }\n}\nclass AstTransformer {\n    transformExpr(expr, context) { return expr; }\n    transformStmt(stmt, context) { return stmt; }\n    visitReadVarExpr(ast, context) { return this.transformExpr(ast, context); }\n    visitWrappedNodeExpr(ast, context) {\n        return this.transformExpr(ast, context);\n    }\n    visitTypeofExpr(expr, context) {\n        return this.transformExpr(new TypeofExpr(expr.expr.visitExpression(this, context), expr.type, expr.sourceSpan), context);\n    }\n    visitWriteVarExpr(expr, context) {\n        return this.transformExpr(new WriteVarExpr(expr.name, expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);\n    }\n    visitWriteKeyExpr(expr, context) {\n        return this.transformExpr(new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);\n    }\n    visitWritePropExpr(expr, context) {\n        return this.transformExpr(new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);\n    }\n    visitInvokeMethodExpr(ast, context) {\n        const method = ast.builtin || ast.name;\n        return this.transformExpr(new InvokeMethodExpr(ast.receiver.visitExpression(this, context), method, this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);\n    }\n    visitInvokeFunctionExpr(ast, context) {\n        return this.transformExpr(new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);\n    }\n    visitInstantiateExpr(ast, context) {\n        return this.transformExpr(new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);\n    }\n    visitLiteralExpr(ast, context) { return this.transformExpr(ast, context); }\n    visitExternalExpr(ast, context) {\n        return this.transformExpr(ast, context);\n    }\n    visitConditionalExpr(ast, context) {\n        return this.transformExpr(new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context), ast.type, ast.sourceSpan), context);\n    }\n    visitNotExpr(ast, context) {\n        return this.transformExpr(new NotExpr(ast.condition.visitExpression(this, context), ast.sourceSpan), context);\n    }\n    visitAssertNotNullExpr(ast, context) {\n        return this.transformExpr(new AssertNotNull(ast.condition.visitExpression(this, context), ast.sourceSpan), context);\n    }\n    visitCastExpr(ast, context) {\n        return this.transformExpr(new CastExpr(ast.value.visitExpression(this, context), ast.type, ast.sourceSpan), context);\n    }\n    visitFunctionExpr(ast, context) {\n        return this.transformExpr(new FunctionExpr(ast.params, this.visitAllStatements(ast.statements, context), ast.type, ast.sourceSpan), context);\n    }\n    visitBinaryOperatorExpr(ast, context) {\n        return this.transformExpr(new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type, ast.sourceSpan), context);\n    }\n    visitReadPropExpr(ast, context) {\n        return this.transformExpr(new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type, ast.sourceSpan), context);\n    }\n    visitReadKeyExpr(ast, context) {\n        return this.transformExpr(new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type, ast.sourceSpan), context);\n    }\n    visitLiteralArrayExpr(ast, context) {\n        return this.transformExpr(new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context), ast.type, ast.sourceSpan), context);\n    }\n    visitLiteralMapExpr(ast, context) {\n        const entries = ast.entries.map((entry) => new LiteralMapEntry(entry.key, entry.value.visitExpression(this, context), entry.quoted));\n        const mapType = new MapType(ast.valueType, null);\n        return this.transformExpr(new LiteralMapExpr(entries, mapType, ast.sourceSpan), context);\n    }\n    visitCommaExpr(ast, context) {\n        return this.transformExpr(new CommaExpr(this.visitAllExpressions(ast.parts, context), ast.sourceSpan), context);\n    }\n    visitAllExpressions(exprs, context) {\n        return exprs.map(expr => expr.visitExpression(this, context));\n    }\n    visitDeclareVarStmt(stmt, context) {\n        const value = stmt.value && stmt.value.visitExpression(this, context);\n        return this.transformStmt(new DeclareVarStmt(stmt.name, value, stmt.type, stmt.modifiers, stmt.sourceSpan), context);\n    }\n    visitDeclareFunctionStmt(stmt, context) {\n        return this.transformStmt(new DeclareFunctionStmt(stmt.name, stmt.params, this.visitAllStatements(stmt.statements, context), stmt.type, stmt.modifiers, stmt.sourceSpan), context);\n    }\n    visitExpressionStmt(stmt, context) {\n        return this.transformStmt(new ExpressionStatement(stmt.expr.visitExpression(this, context), stmt.sourceSpan), context);\n    }\n    visitReturnStmt(stmt, context) {\n        return this.transformStmt(new ReturnStatement(stmt.value.visitExpression(this, context), stmt.sourceSpan), context);\n    }\n    visitDeclareClassStmt(stmt, context) {\n        const parent = stmt.parent.visitExpression(this, context);\n        const getters = stmt.getters.map(getter => new ClassGetter(getter.name, this.visitAllStatements(getter.body, context), getter.type, getter.modifiers));\n        const ctorMethod = stmt.constructorMethod &&\n            new ClassMethod(stmt.constructorMethod.name, stmt.constructorMethod.params, this.visitAllStatements(stmt.constructorMethod.body, context), stmt.constructorMethod.type, stmt.constructorMethod.modifiers);\n        const methods = stmt.methods.map(method => new ClassMethod(method.name, method.params, this.visitAllStatements(method.body, context), method.type, method.modifiers));\n        return this.transformStmt(new ClassStmt(stmt.name, parent, stmt.fields, getters, ctorMethod, methods, stmt.modifiers, stmt.sourceSpan), context);\n    }\n    visitIfStmt(stmt, context) {\n        return this.transformStmt(new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context), stmt.sourceSpan), context);\n    }\n    visitTryCatchStmt(stmt, context) {\n        return this.transformStmt(new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context), stmt.sourceSpan), context);\n    }\n    visitThrowStmt(stmt, context) {\n        return this.transformStmt(new ThrowStmt(stmt.error.visitExpression(this, context), stmt.sourceSpan), context);\n    }\n    visitCommentStmt(stmt, context) {\n        return this.transformStmt(stmt, context);\n    }\n    visitJSDocCommentStmt(stmt, context) {\n        return this.transformStmt(stmt, context);\n    }\n    visitAllStatements(stmts, context) {\n        return stmts.map(stmt => stmt.visitStatement(this, context));\n    }\n}\nclass RecursiveAstVisitor {\n    visitType(ast, context) { return ast; }\n    visitExpression(ast, context) {\n        if (ast.type) {\n            ast.type.visitType(this, context);\n        }\n        return ast;\n    }\n    visitBuiltinType(type, context) { return this.visitType(type, context); }\n    visitExpressionType(type, context) {\n        type.value.visitExpression(this, context);\n        if (type.typeParams !== null) {\n            type.typeParams.forEach(param => this.visitType(param, context));\n        }\n        return this.visitType(type, context);\n    }\n    visitArrayType(type, context) { return this.visitType(type, context); }\n    visitMapType(type, context) { return this.visitType(type, context); }\n    visitWrappedNodeExpr(ast, context) { return ast; }\n    visitTypeofExpr(ast, context) { return this.visitExpression(ast, context); }\n    visitReadVarExpr(ast, context) {\n        return this.visitExpression(ast, context);\n    }\n    visitWriteVarExpr(ast, context) {\n        ast.value.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    }\n    visitWriteKeyExpr(ast, context) {\n        ast.receiver.visitExpression(this, context);\n        ast.index.visitExpression(this, context);\n        ast.value.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    }\n    visitWritePropExpr(ast, context) {\n        ast.receiver.visitExpression(this, context);\n        ast.value.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    }\n    visitInvokeMethodExpr(ast, context) {\n        ast.receiver.visitExpression(this, context);\n        this.visitAllExpressions(ast.args, context);\n        return this.visitExpression(ast, context);\n    }\n    visitInvokeFunctionExpr(ast, context) {\n        ast.fn.visitExpression(this, context);\n        this.visitAllExpressions(ast.args, context);\n        return this.visitExpression(ast, context);\n    }\n    visitInstantiateExpr(ast, context) {\n        ast.classExpr.visitExpression(this, context);\n        this.visitAllExpressions(ast.args, context);\n        return this.visitExpression(ast, context);\n    }\n    visitLiteralExpr(ast, context) {\n        return this.visitExpression(ast, context);\n    }\n    visitExternalExpr(ast, context) {\n        if (ast.typeParams) {\n            ast.typeParams.forEach(type => type.visitType(this, context));\n        }\n        return this.visitExpression(ast, context);\n    }\n    visitConditionalExpr(ast, context) {\n        ast.condition.visitExpression(this, context);\n        ast.trueCase.visitExpression(this, context);\n        ast.falseCase.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    }\n    visitNotExpr(ast, context) {\n        ast.condition.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    }\n    visitAssertNotNullExpr(ast, context) {\n        ast.condition.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    }\n    visitCastExpr(ast, context) {\n        ast.value.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    }\n    visitFunctionExpr(ast, context) {\n        this.visitAllStatements(ast.statements, context);\n        return this.visitExpression(ast, context);\n    }\n    visitBinaryOperatorExpr(ast, context) {\n        ast.lhs.visitExpression(this, context);\n        ast.rhs.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    }\n    visitReadPropExpr(ast, context) {\n        ast.receiver.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    }\n    visitReadKeyExpr(ast, context) {\n        ast.receiver.visitExpression(this, context);\n        ast.index.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    }\n    visitLiteralArrayExpr(ast, context) {\n        this.visitAllExpressions(ast.entries, context);\n        return this.visitExpression(ast, context);\n    }\n    visitLiteralMapExpr(ast, context) {\n        ast.entries.forEach((entry) => entry.value.visitExpression(this, context));\n        return this.visitExpression(ast, context);\n    }\n    visitCommaExpr(ast, context) {\n        this.visitAllExpressions(ast.parts, context);\n        return this.visitExpression(ast, context);\n    }\n    visitAllExpressions(exprs, context) {\n        exprs.forEach(expr => expr.visitExpression(this, context));\n    }\n    visitDeclareVarStmt(stmt, context) {\n        if (stmt.value) {\n            stmt.value.visitExpression(this, context);\n        }\n        if (stmt.type) {\n            stmt.type.visitType(this, context);\n        }\n        return stmt;\n    }\n    visitDeclareFunctionStmt(stmt, context) {\n        this.visitAllStatements(stmt.statements, context);\n        if (stmt.type) {\n            stmt.type.visitType(this, context);\n        }\n        return stmt;\n    }\n    visitExpressionStmt(stmt, context) {\n        stmt.expr.visitExpression(this, context);\n        return stmt;\n    }\n    visitReturnStmt(stmt, context) {\n        stmt.value.visitExpression(this, context);\n        return stmt;\n    }\n    visitDeclareClassStmt(stmt, context) {\n        stmt.parent.visitExpression(this, context);\n        stmt.getters.forEach(getter => this.visitAllStatements(getter.body, context));\n        if (stmt.constructorMethod) {\n            this.visitAllStatements(stmt.constructorMethod.body, context);\n        }\n        stmt.methods.forEach(method => this.visitAllStatements(method.body, context));\n        return stmt;\n    }\n    visitIfStmt(stmt, context) {\n        stmt.condition.visitExpression(this, context);\n        this.visitAllStatements(stmt.trueCase, context);\n        this.visitAllStatements(stmt.falseCase, context);\n        return stmt;\n    }\n    visitTryCatchStmt(stmt, context) {\n        this.visitAllStatements(stmt.bodyStmts, context);\n        this.visitAllStatements(stmt.catchStmts, context);\n        return stmt;\n    }\n    visitThrowStmt(stmt, context) {\n        stmt.error.visitExpression(this, context);\n        return stmt;\n    }\n    visitCommentStmt(stmt, context) { return stmt; }\n    visitJSDocCommentStmt(stmt, context) { return stmt; }\n    visitAllStatements(stmts, context) {\n        stmts.forEach(stmt => stmt.visitStatement(this, context));\n    }\n}\nfunction findReadVarNames(stmts) {\n    const visitor = new _ReadVarVisitor();\n    visitor.visitAllStatements(stmts, null);\n    return visitor.varNames;\n}\nclass _ReadVarVisitor extends RecursiveAstVisitor {\n    constructor() {\n        super(...arguments);\n        this.varNames = new Set();\n    }\n    visitDeclareFunctionStmt(stmt, context) {\n        // Don't descend into nested functions\n        return stmt;\n    }\n    visitDeclareClassStmt(stmt, context) {\n        // Don't descend into nested classes\n        return stmt;\n    }\n    visitReadVarExpr(ast, context) {\n        if (ast.name) {\n            this.varNames.add(ast.name);\n        }\n        return null;\n    }\n}\nfunction collectExternalReferences(stmts) {\n    const visitor = new _FindExternalReferencesVisitor();\n    visitor.visitAllStatements(stmts, null);\n    return visitor.externalReferences;\n}\nclass _FindExternalReferencesVisitor extends RecursiveAstVisitor {\n    constructor() {\n        super(...arguments);\n        this.externalReferences = [];\n    }\n    visitExternalExpr(e, context) {\n        this.externalReferences.push(e.value);\n        return super.visitExternalExpr(e, context);\n    }\n}\nfunction applySourceSpanToStatementIfNeeded(stmt, sourceSpan) {\n    if (!sourceSpan) {\n        return stmt;\n    }\n    const transformer = new _ApplySourceSpanTransformer(sourceSpan);\n    return stmt.visitStatement(transformer, null);\n}\nfunction applySourceSpanToExpressionIfNeeded(expr, sourceSpan) {\n    if (!sourceSpan) {\n        return expr;\n    }\n    const transformer = new _ApplySourceSpanTransformer(sourceSpan);\n    return expr.visitExpression(transformer, null);\n}\nclass _ApplySourceSpanTransformer extends AstTransformer {\n    constructor(sourceSpan) {\n        super();\n        this.sourceSpan = sourceSpan;\n    }\n    _clone(obj) {\n        const clone = Object.create(obj.constructor.prototype);\n        for (let prop in obj) {\n            clone[prop] = obj[prop];\n        }\n        return clone;\n    }\n    transformExpr(expr, context) {\n        if (!expr.sourceSpan) {\n            expr = this._clone(expr);\n            expr.sourceSpan = this.sourceSpan;\n        }\n        return expr;\n    }\n    transformStmt(stmt, context) {\n        if (!stmt.sourceSpan) {\n            stmt = this._clone(stmt);\n            stmt.sourceSpan = this.sourceSpan;\n        }\n        return stmt;\n    }\n}\nfunction variable(name, type, sourceSpan) {\n    return new ReadVarExpr(name, type, sourceSpan);\n}\nfunction importExpr(id, typeParams = null, sourceSpan) {\n    return new ExternalExpr(id, null, typeParams, sourceSpan);\n}\nfunction importType(id, typeParams = null, typeModifiers = null) {\n    return id != null ? expressionType(importExpr(id, typeParams, null), typeModifiers) : null;\n}\nfunction expressionType(expr, typeModifiers = null, typeParams = null) {\n    return new ExpressionType(expr, typeModifiers, typeParams);\n}\nfunction typeofExpr(expr) {\n    return new TypeofExpr(expr);\n}\nfunction literalArr(values, type, sourceSpan) {\n    return new LiteralArrayExpr(values, type, sourceSpan);\n}\nfunction literalMap(values, type = null) {\n    return new LiteralMapExpr(values.map(e => new LiteralMapEntry(e.key, e.value, e.quoted)), type, null);\n}\nfunction not(expr, sourceSpan) {\n    return new NotExpr(expr, sourceSpan);\n}\nfunction assertNotNull(expr, sourceSpan) {\n    return new AssertNotNull(expr, sourceSpan);\n}\nfunction fn(params, body, type, sourceSpan, name) {\n    return new FunctionExpr(params, body, type, sourceSpan, name);\n}\nfunction ifStmt(condition, thenClause, elseClause) {\n    return new IfStmt(condition, thenClause, elseClause);\n}\nfunction literal(value, type, sourceSpan) {\n    return new LiteralExpr(value, type, sourceSpan);\n}\nfunction isNull(exp) {\n    return exp instanceof LiteralExpr && exp.value === null;\n}\n/*\n * Serializes a `Tag` into a string.\n * Returns a string like \" @foo {bar} baz\" (note the leading whitespace before `@foo`).\n */\nfunction tagToString(tag) {\n    let out = '';\n    if (tag.tagName) {\n        out += ` @${tag.tagName}`;\n    }\n    if (tag.text) {\n        if (tag.text.match(/\\/\\*|\\*\\//)) {\n            throw new Error('JSDoc text cannot contain \"/*\" and \"*/\"');\n        }\n        out += ' ' + tag.text.replace(/@/g, '\\\\@');\n    }\n    return out;\n}\nfunction serializeTags(tags) {\n    if (tags.length === 0)\n        return '';\n    let out = '*\\n';\n    for (const tag of tags) {\n        out += ' *';\n        // If the tagToString is multi-line, insert \" * \" prefixes on subsequent lines.\n        out += tagToString(tag).replace(/\\n/g, '\\n * ');\n        out += '\\n';\n    }\n    out += ' ';\n    return out;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst DASH_CASE_REGEXP = /-+([a-z0-9])/g;\nfunction dashCaseToCamelCase(input) {\n    return input.replace(DASH_CASE_REGEXP, (...m) => m[1].toUpperCase());\n}\nfunction splitAtColon(input, defaultValues) {\n    return _splitAt(input, ':', defaultValues);\n}\nfunction splitAtPeriod(input, defaultValues) {\n    return _splitAt(input, '.', defaultValues);\n}\nfunction _splitAt(input, character, defaultValues) {\n    const characterIndex = input.indexOf(character);\n    if (characterIndex == -1)\n        return defaultValues;\n    return [input.slice(0, characterIndex).trim(), input.slice(characterIndex + 1).trim()];\n}\nfunction visitValue(value, visitor, context) {\n    if (Array.isArray(value)) {\n        return visitor.visitArray(value, context);\n    }\n    if (isStrictStringMap(value)) {\n        return visitor.visitStringMap(value, context);\n    }\n    if (value == null || typeof value == 'string' || typeof value == 'number' ||\n        typeof value == 'boolean') {\n        return visitor.visitPrimitive(value, context);\n    }\n    return visitor.visitOther(value, context);\n}\nfunction isDefined(val) {\n    return val !== null && val !== undefined;\n}\nfunction noUndefined(val) {\n    return val === undefined ? null : val;\n}\nclass ValueTransformer {\n    visitArray(arr, context) {\n        return arr.map(value => visitValue(value, this, context));\n    }\n    visitStringMap(map, context) {\n        const result = {};\n        Object.keys(map).forEach(key => { result[key] = visitValue(map[key], this, context); });\n        return result;\n    }\n    visitPrimitive(value, context) { return value; }\n    visitOther(value, context) { return value; }\n}\nconst SyncAsync = {\n    assertSync: (value) => {\n        if (isPromise(value)) {\n            throw new Error(`Illegal state: value cannot be a promise`);\n        }\n        return value;\n    },\n    then: (value, cb) => { return isPromise(value) ? value.then(cb) : cb(value); },\n    all: (syncAsyncValues) => {\n        return syncAsyncValues.some(isPromise) ? Promise.all(syncAsyncValues) : syncAsyncValues;\n    }\n};\nfunction error(msg) {\n    throw new Error(`Internal Error: ${msg}`);\n}\nfunction syntaxError(msg, parseErrors) {\n    const error = Error(msg);\n    error[ERROR_SYNTAX_ERROR] = true;\n    if (parseErrors)\n        error[ERROR_PARSE_ERRORS] = parseErrors;\n    return error;\n}\nconst ERROR_SYNTAX_ERROR = 'ngSyntaxError';\nconst ERROR_PARSE_ERRORS = 'ngParseErrors';\nfunction isSyntaxError(error) {\n    return error[ERROR_SYNTAX_ERROR];\n}\nfunction getParseErrors(error) {\n    return error[ERROR_PARSE_ERRORS] || [];\n}\n// Escape characters that have a special meaning in Regular Expressions\nfunction escapeRegExp(s) {\n    return s.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');\n}\nconst STRING_MAP_PROTO = Object.getPrototypeOf({});\nfunction isStrictStringMap(obj) {\n    return typeof obj === 'object' && obj !== null && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;\n}\nfunction utf8Encode(str) {\n    let encoded = '';\n    for (let index = 0; index < str.length; index++) {\n        let codePoint = str.charCodeAt(index);\n        // decode surrogate\n        // see https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n        if (codePoint >= 0xd800 && codePoint <= 0xdbff && str.length > (index + 1)) {\n            const low = str.charCodeAt(index + 1);\n            if (low >= 0xdc00 && low <= 0xdfff) {\n                index++;\n                codePoint = ((codePoint - 0xd800) << 10) + low - 0xdc00 + 0x10000;\n            }\n        }\n        if (codePoint <= 0x7f) {\n            encoded += String.fromCharCode(codePoint);\n        }\n        else if (codePoint <= 0x7ff) {\n            encoded += String.fromCharCode(((codePoint >> 6) & 0x1F) | 0xc0, (codePoint & 0x3f) | 0x80);\n        }\n        else if (codePoint <= 0xffff) {\n            encoded += String.fromCharCode((codePoint >> 12) | 0xe0, ((codePoint >> 6) & 0x3f) | 0x80, (codePoint & 0x3f) | 0x80);\n        }\n        else if (codePoint <= 0x1fffff) {\n            encoded += String.fromCharCode(((codePoint >> 18) & 0x07) | 0xf0, ((codePoint >> 12) & 0x3f) | 0x80, ((codePoint >> 6) & 0x3f) | 0x80, (codePoint & 0x3f) | 0x80);\n        }\n    }\n    return encoded;\n}\nfunction stringify(token) {\n    if (typeof token === 'string') {\n        return token;\n    }\n    if (token instanceof Array) {\n        return '[' + token.map(stringify).join(', ') + ']';\n    }\n    if (token == null) {\n        return '' + token;\n    }\n    if (token.overriddenName) {\n        return `${token.overriddenName}`;\n    }\n    if (token.name) {\n        return `${token.name}`;\n    }\n    // WARNING: do not try to `JSON.stringify(token)` here\n    // see https://github.com/angular/angular/issues/23440\n    const res = token.toString();\n    if (res == null) {\n        return '' + res;\n    }\n    const newLineIndex = res.indexOf('\\n');\n    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n/**\n * Lazily retrieves the reference value from a forwardRef.\n */\nfunction resolveForwardRef(type) {\n    if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__')) {\n        return type();\n    }\n    else {\n        return type;\n    }\n}\n/**\n * Determine if the argument is shaped like a Promise\n */\nfunction isPromise(obj) {\n    // allow any Promise/A+ compliant thenable.\n    // It's up to the caller to ensure that obj.then conforms to the spec\n    return !!obj && typeof obj.then === 'function';\n}\nclass Version {\n    constructor(full) {\n        this.full = full;\n        const splits = full.split('.');\n        this.major = splits[0];\n        this.minor = splits[1];\n        this.patch = splits.slice(2).join('.');\n    }\n}\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\n// Check __global first, because in Node tests both __global and __window may be defined and _global\n// should be __global in that case.\nconst _global = __global || __window || __self;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst CONSTANT_PREFIX = '_c';\n/**\n * Context to use when producing a key.\n *\n * This ensures we see the constant not the reference variable when producing\n * a key.\n */\nconst KEY_CONTEXT = {};\n/**\n * A node that is a place-holder that allows the node to be replaced when the actual\n * node is known.\n *\n * This allows the constant pool to change an expression from a direct reference to\n * a constant to a shared constant. It returns a fix-up node that is later allowed to\n * change the referenced expression.\n */\nclass FixupExpression extends Expression {\n    constructor(resolved) {\n        super(resolved.type);\n        this.resolved = resolved;\n        this.original = resolved;\n    }\n    visitExpression(visitor, context) {\n        if (context === KEY_CONTEXT) {\n            // When producing a key we want to traverse the constant not the\n            // variable used to refer to it.\n            return this.original.visitExpression(visitor, context);\n        }\n        else {\n            return this.resolved.visitExpression(visitor, context);\n        }\n    }\n    isEquivalent(e) {\n        return e instanceof FixupExpression && this.resolved.isEquivalent(e.resolved);\n    }\n    isConstant() { return true; }\n    fixup(expression) {\n        this.resolved = expression;\n        this.shared = true;\n    }\n}\n/**\n * A constant pool allows a code emitter to share constant in an output context.\n *\n * The constant pool also supports sharing access to ivy definitions references.\n */\nclass ConstantPool {\n    constructor() {\n        this.statements = [];\n        this.literals = new Map();\n        this.literalFactories = new Map();\n        this.injectorDefinitions = new Map();\n        this.directiveDefinitions = new Map();\n        this.componentDefinitions = new Map();\n        this.pipeDefinitions = new Map();\n        this.nextNameIndex = 0;\n    }\n    getConstLiteral(literal, forceShared) {\n        if (literal instanceof LiteralExpr || literal instanceof FixupExpression) {\n            // Do no put simple literals into the constant pool or try to produce a constant for a\n            // reference to a constant.\n            return literal;\n        }\n        const key = this.keyOf(literal);\n        let fixup = this.literals.get(key);\n        let newValue = false;\n        if (!fixup) {\n            fixup = new FixupExpression(literal);\n            this.literals.set(key, fixup);\n            newValue = true;\n        }\n        if ((!newValue && !fixup.shared) || (newValue && forceShared)) {\n            // Replace the expression with a variable\n            const name = this.freshName();\n            this.statements.push(variable(name).set(literal).toDeclStmt(INFERRED_TYPE, [StmtModifier.Final]));\n            fixup.fixup(variable(name));\n        }\n        return fixup;\n    }\n    getDefinition(type, kind, ctx, forceShared = false) {\n        const definitions = this.definitionsOf(kind);\n        let fixup = definitions.get(type);\n        let newValue = false;\n        if (!fixup) {\n            const property = this.propertyNameOf(kind);\n            fixup = new FixupExpression(ctx.importExpr(type).prop(property));\n            definitions.set(type, fixup);\n            newValue = true;\n        }\n        if ((!newValue && !fixup.shared) || (newValue && forceShared)) {\n            const name = this.freshName();\n            this.statements.push(variable(name).set(fixup.resolved).toDeclStmt(INFERRED_TYPE, [StmtModifier.Final]));\n            fixup.fixup(variable(name));\n        }\n        return fixup;\n    }\n    getLiteralFactory(literal$1) {\n        // Create a pure function that builds an array of a mix of constant  and variable expressions\n        if (literal$1 instanceof LiteralArrayExpr) {\n            const argumentsForKey = literal$1.entries.map(e => e.isConstant() ? e : literal(null));\n            const key = this.keyOf(literalArr(argumentsForKey));\n            return this._getLiteralFactory(key, literal$1.entries, entries => literalArr(entries));\n        }\n        else {\n            const expressionForKey = literalMap(literal$1.entries.map(e => ({\n                key: e.key,\n                value: e.value.isConstant() ? e.value : literal(null),\n                quoted: e.quoted\n            })));\n            const key = this.keyOf(expressionForKey);\n            return this._getLiteralFactory(key, literal$1.entries.map(e => e.value), entries => literalMap(entries.map((value, index) => ({\n                key: literal$1.entries[index].key,\n                value,\n                quoted: literal$1.entries[index].quoted\n            }))));\n        }\n    }\n    _getLiteralFactory(key, values, resultMap) {\n        let literalFactory = this.literalFactories.get(key);\n        const literalFactoryArguments = values.filter((e => !e.isConstant()));\n        if (!literalFactory) {\n            const resultExpressions = values.map((e, index) => e.isConstant() ? this.getConstLiteral(e, true) : variable(`a${index}`));\n            const parameters = resultExpressions.filter(isVariable).map(e => new FnParam(e.name, DYNAMIC_TYPE));\n            const pureFunctionDeclaration = fn(parameters, [new ReturnStatement(resultMap(resultExpressions))], INFERRED_TYPE);\n            const name = this.freshName();\n            this.statements.push(variable(name).set(pureFunctionDeclaration).toDeclStmt(INFERRED_TYPE, [\n                StmtModifier.Final\n            ]));\n            literalFactory = variable(name);\n            this.literalFactories.set(key, literalFactory);\n        }\n        return { literalFactory, literalFactoryArguments };\n    }\n    /**\n     * Produce a unique name.\n     *\n     * The name might be unique among different prefixes if any of the prefixes end in\n     * a digit so the prefix should be a constant string (not based on user input) and\n     * must not end in a digit.\n     */\n    uniqueName(prefix) { return `${prefix}${this.nextNameIndex++}`; }\n    definitionsOf(kind) {\n        switch (kind) {\n            case 2 /* Component */:\n                return this.componentDefinitions;\n            case 1 /* Directive */:\n                return this.directiveDefinitions;\n            case 0 /* Injector */:\n                return this.injectorDefinitions;\n            case 3 /* Pipe */:\n                return this.pipeDefinitions;\n        }\n        error(`Unknown definition kind ${kind}`);\n        return this.componentDefinitions;\n    }\n    propertyNameOf(kind) {\n        switch (kind) {\n            case 2 /* Component */:\n                return 'ngComponentDef';\n            case 1 /* Directive */:\n                return 'ngDirectiveDef';\n            case 0 /* Injector */:\n                return 'ngInjectorDef';\n            case 3 /* Pipe */:\n                return 'ngPipeDef';\n        }\n        error(`Unknown definition kind ${kind}`);\n        return '<unknown>';\n    }\n    freshName() { return this.uniqueName(CONSTANT_PREFIX); }\n    keyOf(expression) {\n        return expression.visitExpression(new KeyVisitor(), KEY_CONTEXT);\n    }\n}\n/**\n * Visitor used to determine if 2 expressions are equivalent and can be shared in the\n * `ConstantPool`.\n *\n * When the id (string) generated by the visitor is equal, expressions are considered equivalent.\n */\nclass KeyVisitor {\n    constructor() {\n        this.visitWrappedNodeExpr = invalid;\n        this.visitWriteVarExpr = invalid;\n        this.visitWriteKeyExpr = invalid;\n        this.visitWritePropExpr = invalid;\n        this.visitInvokeMethodExpr = invalid;\n        this.visitInvokeFunctionExpr = invalid;\n        this.visitInstantiateExpr = invalid;\n        this.visitConditionalExpr = invalid;\n        this.visitNotExpr = invalid;\n        this.visitAssertNotNullExpr = invalid;\n        this.visitCastExpr = invalid;\n        this.visitFunctionExpr = invalid;\n        this.visitBinaryOperatorExpr = invalid;\n        this.visitReadPropExpr = invalid;\n        this.visitReadKeyExpr = invalid;\n        this.visitCommaExpr = invalid;\n    }\n    visitLiteralExpr(ast) {\n        return `${typeof ast.value === 'string' ? '\"' + ast.value + '\"' : ast.value}`;\n    }\n    visitLiteralArrayExpr(ast, context) {\n        return `[${ast.entries.map(entry => entry.visitExpression(this, context)).join(',')}]`;\n    }\n    visitLiteralMapExpr(ast, context) {\n        const mapKey = (entry) => {\n            const quote = entry.quoted ? '\"' : '';\n            return `${quote}${entry.key}${quote}`;\n        };\n        const mapEntry = (entry) => `${mapKey(entry)}:${entry.value.visitExpression(this, context)}`;\n        return `{${ast.entries.map(mapEntry).join(',')}`;\n    }\n    visitExternalExpr(ast) {\n        return ast.value.moduleName ? `EX:${ast.value.moduleName}:${ast.value.name}` :\n            `EX:${ast.value.runtime.name}`;\n    }\n    visitReadVarExpr(node) { return `VAR:${node.name}`; }\n    visitTypeofExpr(node, context) {\n        return `TYPEOF:${node.expr.visitExpression(this, context)}`;\n    }\n}\nfunction invalid(arg) {\n    throw new Error(`Invalid state: Visitor ${this.constructor.name} doesn't handle ${arg.constructor.name}`);\n}\nfunction isVariable(e) {\n    return e instanceof ReadVarExpr;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst CORE = '@angular/core';\nclass Identifiers {\n}\nIdentifiers.ANALYZE_FOR_ENTRY_COMPONENTS = {\n    name: 'ANALYZE_FOR_ENTRY_COMPONENTS',\n    moduleName: CORE,\n};\nIdentifiers.ElementRef = { name: 'ElementRef', moduleName: CORE };\nIdentifiers.NgModuleRef = { name: 'NgModuleRef', moduleName: CORE };\nIdentifiers.ViewContainerRef = { name: 'ViewContainerRef', moduleName: CORE };\nIdentifiers.ChangeDetectorRef = {\n    name: 'ChangeDetectorRef',\n    moduleName: CORE,\n};\nIdentifiers.QueryList = { name: 'QueryList', moduleName: CORE };\nIdentifiers.TemplateRef = { name: 'TemplateRef', moduleName: CORE };\nIdentifiers.Renderer2 = { name: 'Renderer2', moduleName: CORE };\nIdentifiers.CodegenComponentFactoryResolver = {\n    name: 'ɵCodegenComponentFactoryResolver',\n    moduleName: CORE,\n};\nIdentifiers.ComponentFactoryResolver = {\n    name: 'ComponentFactoryResolver',\n    moduleName: CORE,\n};\nIdentifiers.ComponentFactory = { name: 'ComponentFactory', moduleName: CORE };\nIdentifiers.ComponentRef = { name: 'ComponentRef', moduleName: CORE };\nIdentifiers.NgModuleFactory = { name: 'NgModuleFactory', moduleName: CORE };\nIdentifiers.createModuleFactory = {\n    name: 'ɵcmf',\n    moduleName: CORE,\n};\nIdentifiers.moduleDef = {\n    name: 'ɵmod',\n    moduleName: CORE,\n};\nIdentifiers.moduleProviderDef = {\n    name: 'ɵmpd',\n    moduleName: CORE,\n};\nIdentifiers.RegisterModuleFactoryFn = {\n    name: 'ɵregisterModuleFactory',\n    moduleName: CORE,\n};\nIdentifiers.inject = { name: 'ɵɵinject', moduleName: CORE };\nIdentifiers.INJECTOR = { name: 'INJECTOR', moduleName: CORE };\nIdentifiers.Injector = { name: 'Injector', moduleName: CORE };\nIdentifiers.ɵɵdefineInjectable = { name: 'ɵɵdefineInjectable', moduleName: CORE };\nIdentifiers.InjectableDef = { name: 'ɵɵInjectableDef', moduleName: CORE };\nIdentifiers.ViewEncapsulation = {\n    name: 'ViewEncapsulation',\n    moduleName: CORE,\n};\nIdentifiers.ChangeDetectionStrategy = {\n    name: 'ChangeDetectionStrategy',\n    moduleName: CORE,\n};\nIdentifiers.SecurityContext = {\n    name: 'SecurityContext',\n    moduleName: CORE,\n};\nIdentifiers.LOCALE_ID = { name: 'LOCALE_ID', moduleName: CORE };\nIdentifiers.TRANSLATIONS_FORMAT = {\n    name: 'TRANSLATIONS_FORMAT',\n    moduleName: CORE,\n};\nIdentifiers.inlineInterpolate = {\n    name: 'ɵinlineInterpolate',\n    moduleName: CORE,\n};\nIdentifiers.interpolate = { name: 'ɵinterpolate', moduleName: CORE };\nIdentifiers.EMPTY_ARRAY = { name: 'ɵEMPTY_ARRAY', moduleName: CORE };\nIdentifiers.EMPTY_MAP = { name: 'ɵEMPTY_MAP', moduleName: CORE };\nIdentifiers.Renderer = { name: 'Renderer', moduleName: CORE };\nIdentifiers.viewDef = { name: 'ɵvid', moduleName: CORE };\nIdentifiers.elementDef = { name: 'ɵeld', moduleName: CORE };\nIdentifiers.anchorDef = { name: 'ɵand', moduleName: CORE };\nIdentifiers.textDef = { name: 'ɵted', moduleName: CORE };\nIdentifiers.directiveDef = { name: 'ɵdid', moduleName: CORE };\nIdentifiers.providerDef = { name: 'ɵprd', moduleName: CORE };\nIdentifiers.queryDef = { name: 'ɵqud', moduleName: CORE };\nIdentifiers.pureArrayDef = { name: 'ɵpad', moduleName: CORE };\nIdentifiers.pureObjectDef = { name: 'ɵpod', moduleName: CORE };\nIdentifiers.purePipeDef = { name: 'ɵppd', moduleName: CORE };\nIdentifiers.pipeDef = { name: 'ɵpid', moduleName: CORE };\nIdentifiers.nodeValue = { name: 'ɵnov', moduleName: CORE };\nIdentifiers.ngContentDef = { name: 'ɵncd', moduleName: CORE };\nIdentifiers.unwrapValue = { name: 'ɵunv', moduleName: CORE };\nIdentifiers.createRendererType2 = { name: 'ɵcrt', moduleName: CORE };\n// type only\nIdentifiers.RendererType2 = {\n    name: 'RendererType2',\n    moduleName: CORE,\n};\n// type only\nIdentifiers.ViewDefinition = {\n    name: 'ɵViewDefinition',\n    moduleName: CORE,\n};\nIdentifiers.createComponentFactory = { name: 'ɵccf', moduleName: CORE };\nIdentifiers.setClassMetadata = { name: 'ɵsetClassMetadata', moduleName: CORE };\nfunction createTokenForReference(reference) {\n    return { identifier: { reference: reference } };\n}\nfunction createTokenForExternalReference(reflector, reference) {\n    return createTokenForReference(reflector.resolveExternalReference(reference));\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A token representing the a reference to a static type.\n *\n * This token is unique for a filePath and name and can be used as a hash table key.\n */\nclass StaticSymbol {\n    constructor(filePath, name, members) {\n        this.filePath = filePath;\n        this.name = name;\n        this.members = members;\n    }\n    assertNoMembers() {\n        if (this.members.length) {\n            throw new Error(`Illegal state: symbol without members expected, but got ${JSON.stringify(this)}.`);\n        }\n    }\n}\n/**\n * A cache of static symbol used by the StaticReflector to return the same symbol for the\n * same symbol values.\n */\nclass StaticSymbolCache {\n    constructor() {\n        this.cache = new Map();\n    }\n    get(declarationFile, name, members) {\n        members = members || [];\n        const memberSuffix = members.length ? `.${members.join('.')}` : '';\n        const key = `\"${declarationFile}\".${name}${memberSuffix}`;\n        let result = this.cache.get(key);\n        if (!result) {\n            result = new StaticSymbol(declarationFile, name, members);\n            this.cache.set(key, result);\n        }\n        return result;\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// group 0: \"[prop] or (event) or @trigger\"\n// group 1: \"prop\" from \"[prop]\"\n// group 2: \"event\" from \"(event)\"\n// group 3: \"@trigger\" from \"@trigger\"\nconst HOST_REG_EXP = /^(?:(?:\\[([^\\]]+)\\])|(?:\\(([^\\)]+)\\)))|(\\@[-\\w]+)$/;\nfunction sanitizeIdentifier(name) {\n    return name.replace(/\\W/g, '_');\n}\nlet _anonymousTypeIndex = 0;\nfunction identifierName(compileIdentifier) {\n    if (!compileIdentifier || !compileIdentifier.reference) {\n        return null;\n    }\n    const ref = compileIdentifier.reference;\n    if (ref instanceof StaticSymbol) {\n        return ref.name;\n    }\n    if (ref['__anonymousType']) {\n        return ref['__anonymousType'];\n    }\n    let identifier = stringify(ref);\n    if (identifier.indexOf('(') >= 0) {\n        // case: anonymous functions!\n        identifier = `anonymous_${_anonymousTypeIndex++}`;\n        ref['__anonymousType'] = identifier;\n    }\n    else {\n        identifier = sanitizeIdentifier(identifier);\n    }\n    return identifier;\n}\nfunction identifierModuleUrl(compileIdentifier) {\n    const ref = compileIdentifier.reference;\n    if (ref instanceof StaticSymbol) {\n        return ref.filePath;\n    }\n    // Runtime type\n    return `./${stringify(ref)}`;\n}\nfunction viewClassName(compType, embeddedTemplateIndex) {\n    return `View_${identifierName({ reference: compType })}_${embeddedTemplateIndex}`;\n}\nfunction rendererTypeName(compType) {\n    return `RenderType_${identifierName({ reference: compType })}`;\n}\nfunction hostViewClassName(compType) {\n    return `HostView_${identifierName({ reference: compType })}`;\n}\nfunction componentFactoryName(compType) {\n    return `${identifierName({ reference: compType })}NgFactory`;\n}\nvar CompileSummaryKind;\n(function (CompileSummaryKind) {\n    CompileSummaryKind[CompileSummaryKind[\"Pipe\"] = 0] = \"Pipe\";\n    CompileSummaryKind[CompileSummaryKind[\"Directive\"] = 1] = \"Directive\";\n    CompileSummaryKind[CompileSummaryKind[\"NgModule\"] = 2] = \"NgModule\";\n    CompileSummaryKind[CompileSummaryKind[\"Injectable\"] = 3] = \"Injectable\";\n})(CompileSummaryKind || (CompileSummaryKind = {}));\nfunction tokenName(token) {\n    return token.value != null ? sanitizeIdentifier(token.value) : identifierName(token.identifier);\n}\nfunction tokenReference(token) {\n    if (token.identifier != null) {\n        return token.identifier.reference;\n    }\n    else {\n        return token.value;\n    }\n}\n/**\n * Metadata about a stylesheet\n */\nclass CompileStylesheetMetadata {\n    constructor({ moduleUrl, styles, styleUrls } = {}) {\n        this.moduleUrl = moduleUrl || null;\n        this.styles = _normalizeArray(styles);\n        this.styleUrls = _normalizeArray(styleUrls);\n    }\n}\n/**\n * Metadata regarding compilation of a template.\n */\nclass CompileTemplateMetadata {\n    constructor({ encapsulation, template, templateUrl, htmlAst, styles, styleUrls, externalStylesheets, animations, ngContentSelectors, interpolation, isInline, preserveWhitespaces }) {\n        this.encapsulation = encapsulation;\n        this.template = template;\n        this.templateUrl = templateUrl;\n        this.htmlAst = htmlAst;\n        this.styles = _normalizeArray(styles);\n        this.styleUrls = _normalizeArray(styleUrls);\n        this.externalStylesheets = _normalizeArray(externalStylesheets);\n        this.animations = animations ? flatten(animations) : [];\n        this.ngContentSelectors = ngContentSelectors || [];\n        if (interpolation && interpolation.length != 2) {\n            throw new Error(`'interpolation' should have a start and an end symbol.`);\n        }\n        this.interpolation = interpolation;\n        this.isInline = isInline;\n        this.preserveWhitespaces = preserveWhitespaces;\n    }\n    toSummary() {\n        return {\n            ngContentSelectors: this.ngContentSelectors,\n            encapsulation: this.encapsulation,\n            styles: this.styles,\n            animations: this.animations\n        };\n    }\n}\n/**\n * Metadata regarding compilation of a directive.\n */\nclass CompileDirectiveMetadata {\n    static create({ isHost, type, isComponent, selector, exportAs, changeDetection, inputs, outputs, host, providers, viewProviders, queries, guards, viewQueries, entryComponents, template, componentViewType, rendererType, componentFactory }) {\n        const hostListeners = {};\n        const hostProperties = {};\n        const hostAttributes = {};\n        if (host != null) {\n            Object.keys(host).forEach(key => {\n                const value = host[key];\n                const matches = key.match(HOST_REG_EXP);\n                if (matches === null) {\n                    hostAttributes[key] = value;\n                }\n                else if (matches[1] != null) {\n                    hostProperties[matches[1]] = value;\n                }\n                else if (matches[2] != null) {\n                    hostListeners[matches[2]] = value;\n                }\n            });\n        }\n        const inputsMap = {};\n        if (inputs != null) {\n            inputs.forEach((bindConfig) => {\n                // canonical syntax: `dirProp: elProp`\n                // if there is no `:`, use dirProp = elProp\n                const parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);\n                inputsMap[parts[0]] = parts[1];\n            });\n        }\n        const outputsMap = {};\n        if (outputs != null) {\n            outputs.forEach((bindConfig) => {\n                // canonical syntax: `dirProp: elProp`\n                // if there is no `:`, use dirProp = elProp\n                const parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);\n                outputsMap[parts[0]] = parts[1];\n            });\n        }\n        return new CompileDirectiveMetadata({\n            isHost,\n            type,\n            isComponent: !!isComponent, selector, exportAs, changeDetection,\n            inputs: inputsMap,\n            outputs: outputsMap,\n            hostListeners,\n            hostProperties,\n            hostAttributes,\n            providers,\n            viewProviders,\n            queries,\n            guards,\n            viewQueries,\n            entryComponents,\n            template,\n            componentViewType,\n            rendererType,\n            componentFactory,\n        });\n    }\n    constructor({ isHost, type, isComponent, selector, exportAs, changeDetection, inputs, outputs, hostListeners, hostProperties, hostAttributes, providers, viewProviders, queries, guards, viewQueries, entryComponents, template, componentViewType, rendererType, componentFactory }) {\n        this.isHost = !!isHost;\n        this.type = type;\n        this.isComponent = isComponent;\n        this.selector = selector;\n        this.exportAs = exportAs;\n        this.changeDetection = changeDetection;\n        this.inputs = inputs;\n        this.outputs = outputs;\n        this.hostListeners = hostListeners;\n        this.hostProperties = hostProperties;\n        this.hostAttributes = hostAttributes;\n        this.providers = _normalizeArray(providers);\n        this.viewProviders = _normalizeArray(viewProviders);\n        this.queries = _normalizeArray(queries);\n        this.guards = guards;\n        this.viewQueries = _normalizeArray(viewQueries);\n        this.entryComponents = _normalizeArray(entryComponents);\n        this.template = template;\n        this.componentViewType = componentViewType;\n        this.rendererType = rendererType;\n        this.componentFactory = componentFactory;\n    }\n    toSummary() {\n        return {\n            summaryKind: CompileSummaryKind.Directive,\n            type: this.type,\n            isComponent: this.isComponent,\n            selector: this.selector,\n            exportAs: this.exportAs,\n            inputs: this.inputs,\n            outputs: this.outputs,\n            hostListeners: this.hostListeners,\n            hostProperties: this.hostProperties,\n            hostAttributes: this.hostAttributes,\n            providers: this.providers,\n            viewProviders: this.viewProviders,\n            queries: this.queries,\n            guards: this.guards,\n            viewQueries: this.viewQueries,\n            entryComponents: this.entryComponents,\n            changeDetection: this.changeDetection,\n            template: this.template && this.template.toSummary(),\n            componentViewType: this.componentViewType,\n            rendererType: this.rendererType,\n            componentFactory: this.componentFactory\n        };\n    }\n}\nclass CompilePipeMetadata {\n    constructor({ type, name, pure }) {\n        this.type = type;\n        this.name = name;\n        this.pure = !!pure;\n    }\n    toSummary() {\n        return {\n            summaryKind: CompileSummaryKind.Pipe,\n            type: this.type,\n            name: this.name,\n            pure: this.pure\n        };\n    }\n}\nclass CompileShallowModuleMetadata {\n}\n/**\n * Metadata regarding compilation of a module.\n */\nclass CompileNgModuleMetadata {\n    constructor({ type, providers, declaredDirectives, exportedDirectives, declaredPipes, exportedPipes, entryComponents, bootstrapComponents, importedModules, exportedModules, schemas, transitiveModule, id }) {\n        this.type = type || null;\n        this.declaredDirectives = _normalizeArray(declaredDirectives);\n        this.exportedDirectives = _normalizeArray(exportedDirectives);\n        this.declaredPipes = _normalizeArray(declaredPipes);\n        this.exportedPipes = _normalizeArray(exportedPipes);\n        this.providers = _normalizeArray(providers);\n        this.entryComponents = _normalizeArray(entryComponents);\n        this.bootstrapComponents = _normalizeArray(bootstrapComponents);\n        this.importedModules = _normalizeArray(importedModules);\n        this.exportedModules = _normalizeArray(exportedModules);\n        this.schemas = _normalizeArray(schemas);\n        this.id = id || null;\n        this.transitiveModule = transitiveModule || null;\n    }\n    toSummary() {\n        const module = this.transitiveModule;\n        return {\n            summaryKind: CompileSummaryKind.NgModule,\n            type: this.type,\n            entryComponents: module.entryComponents,\n            providers: module.providers,\n            modules: module.modules,\n            exportedDirectives: module.exportedDirectives,\n            exportedPipes: module.exportedPipes\n        };\n    }\n}\nclass TransitiveCompileNgModuleMetadata {\n    constructor() {\n        this.directivesSet = new Set();\n        this.directives = [];\n        this.exportedDirectivesSet = new Set();\n        this.exportedDirectives = [];\n        this.pipesSet = new Set();\n        this.pipes = [];\n        this.exportedPipesSet = new Set();\n        this.exportedPipes = [];\n        this.modulesSet = new Set();\n        this.modules = [];\n        this.entryComponentsSet = new Set();\n        this.entryComponents = [];\n        this.providers = [];\n    }\n    addProvider(provider, module) {\n        this.providers.push({ provider: provider, module: module });\n    }\n    addDirective(id) {\n        if (!this.directivesSet.has(id.reference)) {\n            this.directivesSet.add(id.reference);\n            this.directives.push(id);\n        }\n    }\n    addExportedDirective(id) {\n        if (!this.exportedDirectivesSet.has(id.reference)) {\n            this.exportedDirectivesSet.add(id.reference);\n            this.exportedDirectives.push(id);\n        }\n    }\n    addPipe(id) {\n        if (!this.pipesSet.has(id.reference)) {\n            this.pipesSet.add(id.reference);\n            this.pipes.push(id);\n        }\n    }\n    addExportedPipe(id) {\n        if (!this.exportedPipesSet.has(id.reference)) {\n            this.exportedPipesSet.add(id.reference);\n            this.exportedPipes.push(id);\n        }\n    }\n    addModule(id) {\n        if (!this.modulesSet.has(id.reference)) {\n            this.modulesSet.add(id.reference);\n            this.modules.push(id);\n        }\n    }\n    addEntryComponent(ec) {\n        if (!this.entryComponentsSet.has(ec.componentType)) {\n            this.entryComponentsSet.add(ec.componentType);\n            this.entryComponents.push(ec);\n        }\n    }\n}\nfunction _normalizeArray(obj) {\n    return obj || [];\n}\nclass ProviderMeta {\n    constructor(token, { useClass, useValue, useExisting, useFactory, deps, multi }) {\n        this.token = token;\n        this.useClass = useClass || null;\n        this.useValue = useValue;\n        this.useExisting = useExisting;\n        this.useFactory = useFactory || null;\n        this.dependencies = deps || null;\n        this.multi = !!multi;\n    }\n}\nfunction flatten(list) {\n    return list.reduce((flat, item) => {\n        const flatItem = Array.isArray(item) ? flatten(item) : item;\n        return flat.concat(flatItem);\n    }, []);\n}\nfunction jitSourceUrl(url) {\n    // Note: We need 3 \"/\" so that ng shows up as a separate domain\n    // in the chrome dev tools.\n    return url.replace(/(\\w+:\\/\\/[\\w:-]+)?(\\/+)?/, 'ng:///');\n}\nfunction templateSourceUrl(ngModuleType, compMeta, templateMeta) {\n    let url;\n    if (templateMeta.isInline) {\n        if (compMeta.type.reference instanceof StaticSymbol) {\n            // Note: a .ts file might contain multiple components with inline templates,\n            // so we need to give them unique urls, as these will be used for sourcemaps.\n            url = `${compMeta.type.reference.filePath}.${compMeta.type.reference.name}.html`;\n        }\n        else {\n            url = `${identifierName(ngModuleType)}/${identifierName(compMeta.type)}.html`;\n        }\n    }\n    else {\n        url = templateMeta.templateUrl;\n    }\n    return compMeta.type.reference instanceof StaticSymbol ? url : jitSourceUrl(url);\n}\nfunction sharedStylesheetJitUrl(meta, id) {\n    const pathParts = meta.moduleUrl.split(/\\/\\\\/g);\n    const baseName = pathParts[pathParts.length - 1];\n    return jitSourceUrl(`css/${id}${baseName}.ngstyle.js`);\n}\nfunction ngModuleJitUrl(moduleMeta) {\n    return jitSourceUrl(`${identifierName(moduleMeta.type)}/module.ngfactory.js`);\n}\nfunction templateJitUrl(ngModuleType, compMeta) {\n    return jitSourceUrl(`${identifierName(ngModuleType)}/${identifierName(compMeta.type)}.ngfactory.js`);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst CORE$1 = '@angular/core';\nclass Identifiers$1 {\n}\n/* Methods */\nIdentifiers$1.NEW_METHOD = 'factory';\nIdentifiers$1.TRANSFORM_METHOD = 'transform';\nIdentifiers$1.PATCH_DEPS = 'patchedDeps';\n/* Instructions */\nIdentifiers$1.namespaceHTML = { name: 'ɵɵnamespaceHTML', moduleName: CORE$1 };\nIdentifiers$1.namespaceMathML = { name: 'ɵɵnamespaceMathML', moduleName: CORE$1 };\nIdentifiers$1.namespaceSVG = { name: 'ɵɵnamespaceSVG', moduleName: CORE$1 };\nIdentifiers$1.element = { name: 'ɵɵelement', moduleName: CORE$1 };\nIdentifiers$1.elementStart = { name: 'ɵɵelementStart', moduleName: CORE$1 };\nIdentifiers$1.elementEnd = { name: 'ɵɵelementEnd', moduleName: CORE$1 };\nIdentifiers$1.elementProperty = { name: 'ɵɵelementProperty', moduleName: CORE$1 };\nIdentifiers$1.select = { name: 'ɵɵselect', moduleName: CORE$1 };\nIdentifiers$1.componentHostSyntheticProperty = { name: 'ɵɵcomponentHostSyntheticProperty', moduleName: CORE$1 };\nIdentifiers$1.componentHostSyntheticListener = { name: 'ɵɵcomponentHostSyntheticListener', moduleName: CORE$1 };\nIdentifiers$1.elementAttribute = { name: 'ɵɵelementAttribute', moduleName: CORE$1 };\nIdentifiers$1.elementClassProp = { name: 'ɵɵelementClassProp', moduleName: CORE$1 };\nIdentifiers$1.elementContainerStart = { name: 'ɵɵelementContainerStart', moduleName: CORE$1 };\nIdentifiers$1.elementContainerEnd = { name: 'ɵɵelementContainerEnd', moduleName: CORE$1 };\nIdentifiers$1.elementStyling = { name: 'ɵɵelementStyling', moduleName: CORE$1 };\nIdentifiers$1.elementStylingMap = { name: 'ɵɵelementStylingMap', moduleName: CORE$1 };\nIdentifiers$1.elementStyleProp = { name: 'ɵɵelementStyleProp', moduleName: CORE$1 };\nIdentifiers$1.elementStylingApply = { name: 'ɵɵelementStylingApply', moduleName: CORE$1 };\nIdentifiers$1.elementHostAttrs = { name: 'ɵɵelementHostAttrs', moduleName: CORE$1 };\nIdentifiers$1.elementHostStyling = { name: 'ɵɵelementHostStyling', moduleName: CORE$1 };\nIdentifiers$1.elementHostStylingMap = { name: 'ɵɵelementHostStylingMap', moduleName: CORE$1 };\nIdentifiers$1.elementHostStyleProp = { name: 'ɵɵelementHostStyleProp', moduleName: CORE$1 };\nIdentifiers$1.elementHostClassProp = { name: 'ɵɵelementHostClassProp', moduleName: CORE$1 };\nIdentifiers$1.elementHostStylingApply = { name: 'ɵɵelementHostStylingApply', moduleName: CORE$1 };\nIdentifiers$1.containerCreate = { name: 'ɵɵcontainer', moduleName: CORE$1 };\nIdentifiers$1.nextContext = { name: 'ɵɵnextContext', moduleName: CORE$1 };\nIdentifiers$1.templateCreate = { name: 'ɵɵtemplate', moduleName: CORE$1 };\nIdentifiers$1.text = { name: 'ɵɵtext', moduleName: CORE$1 };\nIdentifiers$1.textBinding = { name: 'ɵɵtextBinding', moduleName: CORE$1 };\nIdentifiers$1.bind = { name: 'ɵɵbind', moduleName: CORE$1 };\nIdentifiers$1.enableBindings = { name: 'ɵɵenableBindings', moduleName: CORE$1 };\nIdentifiers$1.disableBindings = { name: 'ɵɵdisableBindings', moduleName: CORE$1 };\nIdentifiers$1.allocHostVars = { name: 'ɵɵallocHostVars', moduleName: CORE$1 };\nIdentifiers$1.getCurrentView = { name: 'ɵɵgetCurrentView', moduleName: CORE$1 };\nIdentifiers$1.restoreView = { name: 'ɵɵrestoreView', moduleName: CORE$1 };\nIdentifiers$1.interpolation1 = { name: 'ɵɵinterpolation1', moduleName: CORE$1 };\nIdentifiers$1.interpolation2 = { name: 'ɵɵinterpolation2', moduleName: CORE$1 };\nIdentifiers$1.interpolation3 = { name: 'ɵɵinterpolation3', moduleName: CORE$1 };\nIdentifiers$1.interpolation4 = { name: 'ɵɵinterpolation4', moduleName: CORE$1 };\nIdentifiers$1.interpolation5 = { name: 'ɵɵinterpolation5', moduleName: CORE$1 };\nIdentifiers$1.interpolation6 = { name: 'ɵɵinterpolation6', moduleName: CORE$1 };\nIdentifiers$1.interpolation7 = { name: 'ɵɵinterpolation7', moduleName: CORE$1 };\nIdentifiers$1.interpolation8 = { name: 'ɵɵinterpolation8', moduleName: CORE$1 };\nIdentifiers$1.interpolationV = { name: 'ɵɵinterpolationV', moduleName: CORE$1 };\nIdentifiers$1.pureFunction0 = { name: 'ɵɵpureFunction0', moduleName: CORE$1 };\nIdentifiers$1.pureFunction1 = { name: 'ɵɵpureFunction1', moduleName: CORE$1 };\nIdentifiers$1.pureFunction2 = { name: 'ɵɵpureFunction2', moduleName: CORE$1 };\nIdentifiers$1.pureFunction3 = { name: 'ɵɵpureFunction3', moduleName: CORE$1 };\nIdentifiers$1.pureFunction4 = { name: 'ɵɵpureFunction4', moduleName: CORE$1 };\nIdentifiers$1.pureFunction5 = { name: 'ɵɵpureFunction5', moduleName: CORE$1 };\nIdentifiers$1.pureFunction6 = { name: 'ɵɵpureFunction6', moduleName: CORE$1 };\nIdentifiers$1.pureFunction7 = { name: 'ɵɵpureFunction7', moduleName: CORE$1 };\nIdentifiers$1.pureFunction8 = { name: 'ɵɵpureFunction8', moduleName: CORE$1 };\nIdentifiers$1.pureFunctionV = { name: 'ɵɵpureFunctionV', moduleName: CORE$1 };\nIdentifiers$1.pipeBind1 = { name: 'ɵɵpipeBind1', moduleName: CORE$1 };\nIdentifiers$1.pipeBind2 = { name: 'ɵɵpipeBind2', moduleName: CORE$1 };\nIdentifiers$1.pipeBind3 = { name: 'ɵɵpipeBind3', moduleName: CORE$1 };\nIdentifiers$1.pipeBind4 = { name: 'ɵɵpipeBind4', moduleName: CORE$1 };\nIdentifiers$1.pipeBindV = { name: 'ɵɵpipeBindV', moduleName: CORE$1 };\nIdentifiers$1.property = { name: 'ɵɵproperty', moduleName: CORE$1 };\nIdentifiers$1.propertyInterpolate = { name: 'ɵɵpropertyInterpolate', moduleName: CORE$1 };\nIdentifiers$1.propertyInterpolate1 = { name: 'ɵɵpropertyInterpolate1', moduleName: CORE$1 };\nIdentifiers$1.propertyInterpolate2 = { name: 'ɵɵpropertyInterpolate2', moduleName: CORE$1 };\nIdentifiers$1.propertyInterpolate3 = { name: 'ɵɵpropertyInterpolate3', moduleName: CORE$1 };\nIdentifiers$1.propertyInterpolate4 = { name: 'ɵɵpropertyInterpolate4', moduleName: CORE$1 };\nIdentifiers$1.propertyInterpolate5 = { name: 'ɵɵpropertyInterpolate5', moduleName: CORE$1 };\nIdentifiers$1.propertyInterpolate6 = { name: 'ɵɵpropertyInterpolate6', moduleName: CORE$1 };\nIdentifiers$1.propertyInterpolate7 = { name: 'ɵɵpropertyInterpolate7', moduleName: CORE$1 };\nIdentifiers$1.propertyInterpolate8 = { name: 'ɵɵpropertyInterpolate8', moduleName: CORE$1 };\nIdentifiers$1.propertyInterpolateV = { name: 'ɵɵpropertyInterpolateV', moduleName: CORE$1 };\nIdentifiers$1.i18n = { name: 'ɵɵi18n', moduleName: CORE$1 };\nIdentifiers$1.i18nAttributes = { name: 'ɵɵi18nAttributes', moduleName: CORE$1 };\nIdentifiers$1.i18nExp = { name: 'ɵɵi18nExp', moduleName: CORE$1 };\nIdentifiers$1.i18nStart = { name: 'ɵɵi18nStart', moduleName: CORE$1 };\nIdentifiers$1.i18nEnd = { name: 'ɵɵi18nEnd', moduleName: CORE$1 };\nIdentifiers$1.i18nApply = { name: 'ɵɵi18nApply', moduleName: CORE$1 };\nIdentifiers$1.i18nPostprocess = { name: 'ɵɵi18nPostprocess', moduleName: CORE$1 };\nIdentifiers$1.i18nLocalize = { name: 'ɵɵi18nLocalize', moduleName: CORE$1 };\nIdentifiers$1.load = { name: 'ɵɵload', moduleName: CORE$1 };\nIdentifiers$1.pipe = { name: 'ɵɵpipe', moduleName: CORE$1 };\nIdentifiers$1.projection = { name: 'ɵɵprojection', moduleName: CORE$1 };\nIdentifiers$1.projectionDef = { name: 'ɵɵprojectionDef', moduleName: CORE$1 };\nIdentifiers$1.reference = { name: 'ɵɵreference', moduleName: CORE$1 };\nIdentifiers$1.inject = { name: 'ɵɵinject', moduleName: CORE$1 };\nIdentifiers$1.injectAttribute = { name: 'ɵɵinjectAttribute', moduleName: CORE$1 };\nIdentifiers$1.directiveInject = { name: 'ɵɵdirectiveInject', moduleName: CORE$1 };\nIdentifiers$1.templateRefExtractor = { name: 'ɵɵtemplateRefExtractor', moduleName: CORE$1 };\nIdentifiers$1.resolveWindow = { name: 'ɵɵresolveWindow', moduleName: CORE$1 };\nIdentifiers$1.resolveDocument = { name: 'ɵɵresolveDocument', moduleName: CORE$1 };\nIdentifiers$1.resolveBody = { name: 'ɵɵresolveBody', moduleName: CORE$1 };\nIdentifiers$1.defineBase = { name: 'ɵɵdefineBase', moduleName: CORE$1 };\nIdentifiers$1.BaseDef = {\n    name: 'ɵɵBaseDef',\n    moduleName: CORE$1,\n};\nIdentifiers$1.defineComponent = { name: 'ɵɵdefineComponent', moduleName: CORE$1 };\nIdentifiers$1.setComponentScope = { name: 'ɵɵsetComponentScope', moduleName: CORE$1 };\nIdentifiers$1.ComponentDefWithMeta = {\n    name: 'ɵɵComponentDefWithMeta',\n    moduleName: CORE$1,\n};\nIdentifiers$1.defineDirective = {\n    name: 'ɵɵdefineDirective',\n    moduleName: CORE$1,\n};\nIdentifiers$1.DirectiveDefWithMeta = {\n    name: 'ɵɵDirectiveDefWithMeta',\n    moduleName: CORE$1,\n};\nIdentifiers$1.InjectorDef = {\n    name: 'ɵɵInjectorDef',\n    moduleName: CORE$1,\n};\nIdentifiers$1.defineInjector = {\n    name: 'ɵɵdefineInjector',\n    moduleName: CORE$1,\n};\nIdentifiers$1.NgModuleDefWithMeta = {\n    name: 'ɵɵNgModuleDefWithMeta',\n    moduleName: CORE$1,\n};\nIdentifiers$1.defineNgModule = { name: 'ɵɵdefineNgModule', moduleName: CORE$1 };\nIdentifiers$1.setNgModuleScope = { name: 'ɵɵsetNgModuleScope', moduleName: CORE$1 };\nIdentifiers$1.PipeDefWithMeta = { name: 'ɵɵPipeDefWithMeta', moduleName: CORE$1 };\nIdentifiers$1.definePipe = { name: 'ɵɵdefinePipe', moduleName: CORE$1 };\nIdentifiers$1.queryRefresh = { name: 'ɵɵqueryRefresh', moduleName: CORE$1 };\nIdentifiers$1.viewQuery = { name: 'ɵɵviewQuery', moduleName: CORE$1 };\nIdentifiers$1.staticViewQuery = { name: 'ɵɵstaticViewQuery', moduleName: CORE$1 };\nIdentifiers$1.staticContentQuery = { name: 'ɵɵstaticContentQuery', moduleName: CORE$1 };\nIdentifiers$1.loadViewQuery = { name: 'ɵɵloadViewQuery', moduleName: CORE$1 };\nIdentifiers$1.contentQuery = { name: 'ɵɵcontentQuery', moduleName: CORE$1 };\nIdentifiers$1.loadContentQuery = { name: 'ɵɵloadContentQuery', moduleName: CORE$1 };\nIdentifiers$1.NgOnChangesFeature = { name: 'ɵɵNgOnChangesFeature', moduleName: CORE$1 };\nIdentifiers$1.InheritDefinitionFeature = { name: 'ɵɵInheritDefinitionFeature', moduleName: CORE$1 };\nIdentifiers$1.ProvidersFeature = { name: 'ɵɵProvidersFeature', moduleName: CORE$1 };\nIdentifiers$1.listener = { name: 'ɵɵlistener', moduleName: CORE$1 };\nIdentifiers$1.getFactoryOf = {\n    name: 'ɵɵgetFactoryOf',\n    moduleName: CORE$1,\n};\nIdentifiers$1.getInheritedFactory = {\n    name: 'ɵɵgetInheritedFactory',\n    moduleName: CORE$1,\n};\nIdentifiers$1.registerNgModuleType = { name: 'ɵregisterNgModuleType', moduleName: CORE$1 };\n// sanitization-related functions\nIdentifiers$1.sanitizeHtml = { name: 'ɵɵsanitizeHtml', moduleName: CORE$1 };\nIdentifiers$1.sanitizeStyle = { name: 'ɵɵsanitizeStyle', moduleName: CORE$1 };\nIdentifiers$1.defaultStyleSanitizer = { name: 'ɵɵdefaultStyleSanitizer', moduleName: CORE$1 };\nIdentifiers$1.sanitizeResourceUrl = { name: 'ɵɵsanitizeResourceUrl', moduleName: CORE$1 };\nIdentifiers$1.sanitizeScript = { name: 'ɵɵsanitizeScript', moduleName: CORE$1 };\nIdentifiers$1.sanitizeUrl = { name: 'ɵɵsanitizeUrl', moduleName: CORE$1 };\nIdentifiers$1.sanitizeUrlOrResourceUrl = { name: 'ɵɵsanitizeUrlOrResourceUrl', moduleName: CORE$1 };\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass Text {\n    constructor(value, sourceSpan) {\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(visitor) { return visitor.visitText(this); }\n}\nclass BoundText {\n    constructor(value, sourceSpan, i18n) {\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n        this.i18n = i18n;\n    }\n    visit(visitor) { return visitor.visitBoundText(this); }\n}\nclass TextAttribute {\n    constructor(name, value, sourceSpan, valueSpan, i18n) {\n        this.name = name;\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n        this.valueSpan = valueSpan;\n        this.i18n = i18n;\n    }\n    visit(visitor) { return visitor.visitTextAttribute(this); }\n}\nclass BoundAttribute {\n    constructor(name, type, securityContext, value, unit, sourceSpan, i18n) {\n        this.name = name;\n        this.type = type;\n        this.securityContext = securityContext;\n        this.value = value;\n        this.unit = unit;\n        this.sourceSpan = sourceSpan;\n        this.i18n = i18n;\n    }\n    static fromBoundElementProperty(prop, i18n) {\n        return new BoundAttribute(prop.name, prop.type, prop.securityContext, prop.value, prop.unit, prop.sourceSpan, i18n);\n    }\n    visit(visitor) { return visitor.visitBoundAttribute(this); }\n}\nclass BoundEvent {\n    constructor(name, type, handler, target, phase, sourceSpan, handlerSpan) {\n        this.name = name;\n        this.type = type;\n        this.handler = handler;\n        this.target = target;\n        this.phase = phase;\n        this.sourceSpan = sourceSpan;\n        this.handlerSpan = handlerSpan;\n    }\n    static fromParsedEvent(event) {\n        const target = event.type === 0 /* Regular */ ? event.targetOrPhase : null;\n        const phase = event.type === 1 /* Animation */ ? event.targetOrPhase : null;\n        return new BoundEvent(event.name, event.type, event.handler, target, phase, event.sourceSpan, event.handlerSpan);\n    }\n    visit(visitor) { return visitor.visitBoundEvent(this); }\n}\nclass Element {\n    constructor(name, attributes, inputs, outputs, children, references, sourceSpan, startSourceSpan, endSourceSpan, i18n) {\n        this.name = name;\n        this.attributes = attributes;\n        this.inputs = inputs;\n        this.outputs = outputs;\n        this.children = children;\n        this.references = references;\n        this.sourceSpan = sourceSpan;\n        this.startSourceSpan = startSourceSpan;\n        this.endSourceSpan = endSourceSpan;\n        this.i18n = i18n;\n        // If the element is empty then the source span should include any closing tag\n        if (children.length === 0 && startSourceSpan && endSourceSpan) {\n            this.sourceSpan = Object.assign({}, sourceSpan, { end: endSourceSpan.end });\n        }\n    }\n    visit(visitor) { return visitor.visitElement(this); }\n}\nclass Template {\n    constructor(tagName, attributes, inputs, outputs, templateAttrs, children, references, variables, sourceSpan, startSourceSpan, endSourceSpan, i18n) {\n        this.tagName = tagName;\n        this.attributes = attributes;\n        this.inputs = inputs;\n        this.outputs = outputs;\n        this.templateAttrs = templateAttrs;\n        this.children = children;\n        this.references = references;\n        this.variables = variables;\n        this.sourceSpan = sourceSpan;\n        this.startSourceSpan = startSourceSpan;\n        this.endSourceSpan = endSourceSpan;\n        this.i18n = i18n;\n    }\n    visit(visitor) { return visitor.visitTemplate(this); }\n}\nclass Content {\n    constructor(selector, attributes, sourceSpan, i18n) {\n        this.selector = selector;\n        this.attributes = attributes;\n        this.sourceSpan = sourceSpan;\n        this.i18n = i18n;\n    }\n    visit(visitor) { return visitor.visitContent(this); }\n}\nclass Variable {\n    constructor(name, value, sourceSpan) {\n        this.name = name;\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(visitor) { return visitor.visitVariable(this); }\n}\nclass Reference {\n    constructor(name, value, sourceSpan) {\n        this.name = name;\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(visitor) { return visitor.visitReference(this); }\n}\nclass Icu {\n    constructor(vars, placeholders, sourceSpan, i18n) {\n        this.vars = vars;\n        this.placeholders = placeholders;\n        this.sourceSpan = sourceSpan;\n        this.i18n = i18n;\n    }\n    visit(visitor) { return visitor.visitIcu(this); }\n}\nfunction visitAll(visitor, nodes) {\n    const result = [];\n    if (visitor.visit) {\n        for (const node of nodes) {\n            const newNode = visitor.visit(node) || node.visit(visitor);\n        }\n    }\n    else {\n        for (const node of nodes) {\n            const newNode = node.visit(visitor);\n            if (newNode) {\n                result.push(newNode);\n            }\n        }\n    }\n    return result;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass Message {\n    /**\n     * @param nodes message AST\n     * @param placeholders maps placeholder names to static content\n     * @param placeholderToMessage maps placeholder names to messages (used for nested ICU messages)\n     * @param meaning\n     * @param description\n     * @param id\n     */\n    constructor(nodes, placeholders, placeholderToMessage, meaning, description, id) {\n        this.nodes = nodes;\n        this.placeholders = placeholders;\n        this.placeholderToMessage = placeholderToMessage;\n        this.meaning = meaning;\n        this.description = description;\n        this.id = id;\n        if (nodes.length) {\n            this.sources = [{\n                    filePath: nodes[0].sourceSpan.start.file.url,\n                    startLine: nodes[0].sourceSpan.start.line + 1,\n                    startCol: nodes[0].sourceSpan.start.col + 1,\n                    endLine: nodes[nodes.length - 1].sourceSpan.end.line + 1,\n                    endCol: nodes[0].sourceSpan.start.col + 1\n                }];\n        }\n        else {\n            this.sources = [];\n        }\n    }\n}\nclass Text$1 {\n    constructor(value, sourceSpan) {\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(visitor, context) { return visitor.visitText(this, context); }\n}\n// TODO(vicb): do we really need this node (vs an array) ?\nclass Container {\n    constructor(children, sourceSpan) {\n        this.children = children;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(visitor, context) { return visitor.visitContainer(this, context); }\n}\nclass Icu$1 {\n    constructor(expression, type, cases, sourceSpan) {\n        this.expression = expression;\n        this.type = type;\n        this.cases = cases;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(visitor, context) { return visitor.visitIcu(this, context); }\n}\nclass TagPlaceholder {\n    constructor(tag, attrs, startName, closeName, children, isVoid, sourceSpan) {\n        this.tag = tag;\n        this.attrs = attrs;\n        this.startName = startName;\n        this.closeName = closeName;\n        this.children = children;\n        this.isVoid = isVoid;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(visitor, context) { return visitor.visitTagPlaceholder(this, context); }\n}\nclass Placeholder {\n    constructor(value, name, sourceSpan) {\n        this.value = value;\n        this.name = name;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(visitor, context) { return visitor.visitPlaceholder(this, context); }\n}\nclass IcuPlaceholder {\n    constructor(value, name, sourceSpan) {\n        this.value = value;\n        this.name = name;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(visitor, context) { return visitor.visitIcuPlaceholder(this, context); }\n}\n// Clone the AST\nclass CloneVisitor {\n    visitText(text, context) { return new Text$1(text.value, text.sourceSpan); }\n    visitContainer(container, context) {\n        const children = container.children.map(n => n.visit(this, context));\n        return new Container(children, container.sourceSpan);\n    }\n    visitIcu(icu, context) {\n        const cases = {};\n        Object.keys(icu.cases).forEach(key => cases[key] = icu.cases[key].visit(this, context));\n        const msg = new Icu$1(icu.expression, icu.type, cases, icu.sourceSpan);\n        msg.expressionPlaceholder = icu.expressionPlaceholder;\n        return msg;\n    }\n    visitTagPlaceholder(ph, context) {\n        const children = ph.children.map(n => n.visit(this, context));\n        return new TagPlaceholder(ph.tag, ph.attrs, ph.startName, ph.closeName, children, ph.isVoid, ph.sourceSpan);\n    }\n    visitPlaceholder(ph, context) {\n        return new Placeholder(ph.value, ph.name, ph.sourceSpan);\n    }\n    visitIcuPlaceholder(ph, context) {\n        return new IcuPlaceholder(ph.value, ph.name, ph.sourceSpan);\n    }\n}\n// Visit all the nodes recursively\nclass RecurseVisitor {\n    visitText(text, context) { }\n    visitContainer(container, context) {\n        container.children.forEach(child => child.visit(this));\n    }\n    visitIcu(icu, context) {\n        Object.keys(icu.cases).forEach(k => { icu.cases[k].visit(this); });\n    }\n    visitTagPlaceholder(ph, context) {\n        ph.children.forEach(child => child.visit(this));\n    }\n    visitPlaceholder(ph, context) { }\n    visitIcuPlaceholder(ph, context) { }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction digest(message) {\n    return message.id || sha1(serializeNodes(message.nodes).join('') + `[${message.meaning}]`);\n}\nfunction decimalDigest(message) {\n    if (message.id) {\n        return message.id;\n    }\n    const visitor = new _SerializerIgnoreIcuExpVisitor();\n    const parts = message.nodes.map(a => a.visit(visitor, null));\n    return computeMsgId(parts.join(''), message.meaning);\n}\n/**\n * Serialize the i18n ast to something xml-like in order to generate an UID.\n *\n * The visitor is also used in the i18n parser tests\n *\n * @internal\n */\nclass _SerializerVisitor {\n    visitText(text, context) { return text.value; }\n    visitContainer(container, context) {\n        return `[${container.children.map(child => child.visit(this)).join(', ')}]`;\n    }\n    visitIcu(icu, context) {\n        const strCases = Object.keys(icu.cases).map((k) => `${k} {${icu.cases[k].visit(this)}}`);\n        return `{${icu.expression}, ${icu.type}, ${strCases.join(', ')}}`;\n    }\n    visitTagPlaceholder(ph, context) {\n        return ph.isVoid ?\n            `<ph tag name=\"${ph.startName}\"/>` :\n            `<ph tag name=\"${ph.startName}\">${ph.children.map(child => child.visit(this)).join(', ')}</ph name=\"${ph.closeName}\">`;\n    }\n    visitPlaceholder(ph, context) {\n        return ph.value ? `<ph name=\"${ph.name}\">${ph.value}</ph>` : `<ph name=\"${ph.name}\"/>`;\n    }\n    visitIcuPlaceholder(ph, context) {\n        return `<ph icu name=\"${ph.name}\">${ph.value.visit(this)}</ph>`;\n    }\n}\nconst serializerVisitor = new _SerializerVisitor();\nfunction serializeNodes(nodes) {\n    return nodes.map(a => a.visit(serializerVisitor, null));\n}\n/**\n * Serialize the i18n ast to something xml-like in order to generate an UID.\n *\n * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.\n *\n * @internal\n */\nclass _SerializerIgnoreIcuExpVisitor extends _SerializerVisitor {\n    visitIcu(icu, context) {\n        let strCases = Object.keys(icu.cases).map((k) => `${k} {${icu.cases[k].visit(this)}}`);\n        // Do not take the expression into account\n        return `{${icu.type}, ${strCases.join(', ')}}`;\n    }\n}\n/**\n * Compute the SHA1 of the given string\n *\n * see http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf\n *\n * WARNING: this function has not been designed not tested with security in mind.\n *          DO NOT USE IT IN A SECURITY SENSITIVE CONTEXT.\n */\nfunction sha1(str) {\n    const utf8 = utf8Encode(str);\n    const words32 = stringToWords32(utf8, Endian.Big);\n    const len = utf8.length * 8;\n    const w = new Array(80);\n    let [a, b, c, d, e] = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n    words32[len >> 5] |= 0x80 << (24 - len % 32);\n    words32[((len + 64 >> 9) << 4) + 15] = len;\n    for (let i = 0; i < words32.length; i += 16) {\n        const [h0, h1, h2, h3, h4] = [a, b, c, d, e];\n        for (let j = 0; j < 80; j++) {\n            if (j < 16) {\n                w[j] = words32[i + j];\n            }\n            else {\n                w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n            }\n            const [f, k] = fk(j, b, c, d);\n            const temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);\n            [e, d, c, b, a] = [d, c, rol32(b, 30), a, temp];\n        }\n        [a, b, c, d, e] = [add32(a, h0), add32(b, h1), add32(c, h2), add32(d, h3), add32(e, h4)];\n    }\n    return byteStringToHexString(words32ToByteString([a, b, c, d, e]));\n}\nfunction fk(index, b, c, d) {\n    if (index < 20) {\n        return [(b & c) | (~b & d), 0x5a827999];\n    }\n    if (index < 40) {\n        return [b ^ c ^ d, 0x6ed9eba1];\n    }\n    if (index < 60) {\n        return [(b & c) | (b & d) | (c & d), 0x8f1bbcdc];\n    }\n    return [b ^ c ^ d, 0xca62c1d6];\n}\n/**\n * Compute the fingerprint of the given string\n *\n * The output is 64 bit number encoded as a decimal string\n *\n * based on:\n * https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java\n */\nfunction fingerprint(str) {\n    const utf8 = utf8Encode(str);\n    let [hi, lo] = [hash32(utf8, 0), hash32(utf8, 102072)];\n    if (hi == 0 && (lo == 0 || lo == 1)) {\n        hi = hi ^ 0x130f9bef;\n        lo = lo ^ -0x6b5f56d8;\n    }\n    return [hi, lo];\n}\nfunction computeMsgId(msg, meaning) {\n    let [hi, lo] = fingerprint(msg);\n    if (meaning) {\n        const [him, lom] = fingerprint(meaning);\n        [hi, lo] = add64(rol64([hi, lo], 1), [him, lom]);\n    }\n    return byteStringToDecString(words32ToByteString([hi & 0x7fffffff, lo]));\n}\nfunction hash32(str, c) {\n    let [a, b] = [0x9e3779b9, 0x9e3779b9];\n    let i;\n    const len = str.length;\n    for (i = 0; i + 12 <= len; i += 12) {\n        a = add32(a, wordAt(str, i, Endian.Little));\n        b = add32(b, wordAt(str, i + 4, Endian.Little));\n        c = add32(c, wordAt(str, i + 8, Endian.Little));\n        [a, b, c] = mix([a, b, c]);\n    }\n    a = add32(a, wordAt(str, i, Endian.Little));\n    b = add32(b, wordAt(str, i + 4, Endian.Little));\n    // the first byte of c is reserved for the length\n    c = add32(c, len);\n    c = add32(c, wordAt(str, i + 8, Endian.Little) << 8);\n    return mix([a, b, c])[2];\n}\n// clang-format off\nfunction mix([a, b, c]) {\n    a = sub32(a, b);\n    a = sub32(a, c);\n    a ^= c >>> 13;\n    b = sub32(b, c);\n    b = sub32(b, a);\n    b ^= a << 8;\n    c = sub32(c, a);\n    c = sub32(c, b);\n    c ^= b >>> 13;\n    a = sub32(a, b);\n    a = sub32(a, c);\n    a ^= c >>> 12;\n    b = sub32(b, c);\n    b = sub32(b, a);\n    b ^= a << 16;\n    c = sub32(c, a);\n    c = sub32(c, b);\n    c ^= b >>> 5;\n    a = sub32(a, b);\n    a = sub32(a, c);\n    a ^= c >>> 3;\n    b = sub32(b, c);\n    b = sub32(b, a);\n    b ^= a << 10;\n    c = sub32(c, a);\n    c = sub32(c, b);\n    c ^= b >>> 15;\n    return [a, b, c];\n}\n// clang-format on\n// Utils\nvar Endian;\n(function (Endian) {\n    Endian[Endian[\"Little\"] = 0] = \"Little\";\n    Endian[Endian[\"Big\"] = 1] = \"Big\";\n})(Endian || (Endian = {}));\nfunction add32(a, b) {\n    return add32to64(a, b)[1];\n}\nfunction add32to64(a, b) {\n    const low = (a & 0xffff) + (b & 0xffff);\n    const high = (a >>> 16) + (b >>> 16) + (low >>> 16);\n    return [high >>> 16, (high << 16) | (low & 0xffff)];\n}\nfunction add64([ah, al], [bh, bl]) {\n    const [carry, l] = add32to64(al, bl);\n    const h = add32(add32(ah, bh), carry);\n    return [h, l];\n}\nfunction sub32(a, b) {\n    const low = (a & 0xffff) - (b & 0xffff);\n    const high = (a >> 16) - (b >> 16) + (low >> 16);\n    return (high << 16) | (low & 0xffff);\n}\n// Rotate a 32b number left `count` position\nfunction rol32(a, count) {\n    return (a << count) | (a >>> (32 - count));\n}\n// Rotate a 64b number left `count` position\nfunction rol64([hi, lo], count) {\n    const h = (hi << count) | (lo >>> (32 - count));\n    const l = (lo << count) | (hi >>> (32 - count));\n    return [h, l];\n}\nfunction stringToWords32(str, endian) {\n    const words32 = Array((str.length + 3) >>> 2);\n    for (let i = 0; i < words32.length; i++) {\n        words32[i] = wordAt(str, i * 4, endian);\n    }\n    return words32;\n}\nfunction byteAt(str, index) {\n    return index >= str.length ? 0 : str.charCodeAt(index) & 0xff;\n}\nfunction wordAt(str, index, endian) {\n    let word = 0;\n    if (endian === Endian.Big) {\n        for (let i = 0; i < 4; i++) {\n            word += byteAt(str, index + i) << (24 - 8 * i);\n        }\n    }\n    else {\n        for (let i = 0; i < 4; i++) {\n            word += byteAt(str, index + i) << 8 * i;\n        }\n    }\n    return word;\n}\nfunction words32ToByteString(words32) {\n    return words32.reduce((str, word) => str + word32ToByteString(word), '');\n}\nfunction word32ToByteString(word) {\n    let str = '';\n    for (let i = 0; i < 4; i++) {\n        str += String.fromCharCode((word >>> 8 * (3 - i)) & 0xff);\n    }\n    return str;\n}\nfunction byteStringToHexString(str) {\n    let hex = '';\n    for (let i = 0; i < str.length; i++) {\n        const b = byteAt(str, i);\n        hex += (b >>> 4).toString(16) + (b & 0x0f).toString(16);\n    }\n    return hex.toLowerCase();\n}\n// based on http://www.danvk.org/hex2dec.html (JS can not handle more than 56b)\nfunction byteStringToDecString(str) {\n    let decimal = '';\n    let toThePower = '1';\n    for (let i = str.length - 1; i >= 0; i--) {\n        decimal = addBigInt(decimal, numberTimesBigInt(byteAt(str, i), toThePower));\n        toThePower = numberTimesBigInt(256, toThePower);\n    }\n    return decimal.split('').reverse().join('');\n}\n// x and y decimal, lowest significant digit first\nfunction addBigInt(x, y) {\n    let sum = '';\n    const len = Math.max(x.length, y.length);\n    for (let i = 0, carry = 0; i < len || carry; i++) {\n        const tmpSum = carry + +(x[i] || 0) + +(y[i] || 0);\n        if (tmpSum >= 10) {\n            carry = 1;\n            sum += tmpSum - 10;\n        }\n        else {\n            carry = 0;\n            sum += tmpSum;\n        }\n    }\n    return sum;\n}\nfunction numberTimesBigInt(num, b) {\n    let product = '';\n    let bToThePower = b;\n    for (; num !== 0; num = num >>> 1) {\n        if (num & 1)\n            product = addBigInt(product, bToThePower);\n        bToThePower = addBigInt(bToThePower, bToThePower);\n    }\n    return product;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass Serializer {\n    // Creates a name mapper, see `PlaceholderMapper`\n    // Returning `null` means that no name mapping is used.\n    createNameMapper(message) { return null; }\n}\n/**\n * A simple mapper that take a function to transform an internal name to a public name\n */\nclass SimplePlaceholderMapper extends RecurseVisitor {\n    // create a mapping from the message\n    constructor(message, mapName) {\n        super();\n        this.mapName = mapName;\n        this.internalToPublic = {};\n        this.publicToNextId = {};\n        this.publicToInternal = {};\n        message.nodes.forEach(node => node.visit(this));\n    }\n    toPublicName(internalName) {\n        return this.internalToPublic.hasOwnProperty(internalName) ?\n            this.internalToPublic[internalName] :\n            null;\n    }\n    toInternalName(publicName) {\n        return this.publicToInternal.hasOwnProperty(publicName) ? this.publicToInternal[publicName] :\n            null;\n    }\n    visitText(text, context) { return null; }\n    visitTagPlaceholder(ph, context) {\n        this.visitPlaceholderName(ph.startName);\n        super.visitTagPlaceholder(ph, context);\n        this.visitPlaceholderName(ph.closeName);\n    }\n    visitPlaceholder(ph, context) { this.visitPlaceholderName(ph.name); }\n    visitIcuPlaceholder(ph, context) {\n        this.visitPlaceholderName(ph.name);\n    }\n    // XMB placeholders could only contains A-Z, 0-9 and _\n    visitPlaceholderName(internalName) {\n        if (!internalName || this.internalToPublic.hasOwnProperty(internalName)) {\n            return;\n        }\n        let publicName = this.mapName(internalName);\n        if (this.publicToInternal.hasOwnProperty(publicName)) {\n            // Create a new XMB when it has already been used\n            const nextId = this.publicToNextId[publicName];\n            this.publicToNextId[publicName] = nextId + 1;\n            publicName = `${publicName}_${nextId}`;\n        }\n        else {\n            this.publicToNextId[publicName] = 1;\n        }\n        this.internalToPublic[internalName] = publicName;\n        this.publicToInternal[publicName] = internalName;\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass _Visitor {\n    visitTag(tag) {\n        const strAttrs = this._serializeAttributes(tag.attrs);\n        if (tag.children.length == 0) {\n            return `<${tag.name}${strAttrs}/>`;\n        }\n        const strChildren = tag.children.map(node => node.visit(this));\n        return `<${tag.name}${strAttrs}>${strChildren.join('')}</${tag.name}>`;\n    }\n    visitText(text) { return text.value; }\n    visitDeclaration(decl) {\n        return `<?xml${this._serializeAttributes(decl.attrs)} ?>`;\n    }\n    _serializeAttributes(attrs) {\n        const strAttrs = Object.keys(attrs).map((name) => `${name}=\"${attrs[name]}\"`).join(' ');\n        return strAttrs.length > 0 ? ' ' + strAttrs : '';\n    }\n    visitDoctype(doctype) {\n        return `<!DOCTYPE ${doctype.rootTag} [\\n${doctype.dtd}\\n]>`;\n    }\n}\nconst _visitor = new _Visitor();\nfunction serialize(nodes) {\n    return nodes.map((node) => node.visit(_visitor)).join('');\n}\nclass Declaration {\n    constructor(unescapedAttrs) {\n        this.attrs = {};\n        Object.keys(unescapedAttrs).forEach((k) => {\n            this.attrs[k] = escapeXml(unescapedAttrs[k]);\n        });\n    }\n    visit(visitor) { return visitor.visitDeclaration(this); }\n}\nclass Doctype {\n    constructor(rootTag, dtd) {\n        this.rootTag = rootTag;\n        this.dtd = dtd;\n    }\n    visit(visitor) { return visitor.visitDoctype(this); }\n}\nclass Tag {\n    constructor(name, unescapedAttrs = {}, children = []) {\n        this.name = name;\n        this.children = children;\n        this.attrs = {};\n        Object.keys(unescapedAttrs).forEach((k) => {\n            this.attrs[k] = escapeXml(unescapedAttrs[k]);\n        });\n    }\n    visit(visitor) { return visitor.visitTag(this); }\n}\nclass Text$2 {\n    constructor(unescapedValue) { this.value = escapeXml(unescapedValue); }\n    visit(visitor) { return visitor.visitText(this); }\n}\nclass CR extends Text$2 {\n    constructor(ws = 0) { super(`\\n${new Array(ws + 1).join(' ')}`); }\n}\nconst _ESCAPED_CHARS = [\n    [/&/g, '&amp;'],\n    [/\"/g, '&quot;'],\n    [/'/g, '&apos;'],\n    [/</g, '&lt;'],\n    [/>/g, '&gt;'],\n];\n// Escape `_ESCAPED_CHARS` characters in the given text with encoded entities\nfunction escapeXml(text) {\n    return _ESCAPED_CHARS.reduce((text, entry) => text.replace(entry[0], entry[1]), text);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst _MESSAGES_TAG = 'messagebundle';\nconst _MESSAGE_TAG = 'msg';\nconst _PLACEHOLDER_TAG = 'ph';\nconst _EXAMPLE_TAG = 'ex';\nconst _SOURCE_TAG = 'source';\nconst _DOCTYPE = `<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) \"default\">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>`;\nclass Xmb extends Serializer {\n    write(messages, locale) {\n        const exampleVisitor = new ExampleVisitor();\n        const visitor = new _Visitor$1();\n        let rootNode = new Tag(_MESSAGES_TAG);\n        messages.forEach(message => {\n            const attrs = { id: message.id };\n            if (message.description) {\n                attrs['desc'] = message.description;\n            }\n            if (message.meaning) {\n                attrs['meaning'] = message.meaning;\n            }\n            let sourceTags = [];\n            message.sources.forEach((source) => {\n                sourceTags.push(new Tag(_SOURCE_TAG, {}, [\n                    new Text$2(`${source.filePath}:${source.startLine}${source.endLine !== source.startLine ? ',' + source.endLine : ''}`)\n                ]));\n            });\n            rootNode.children.push(new CR(2), new Tag(_MESSAGE_TAG, attrs, [...sourceTags, ...visitor.serialize(message.nodes)]));\n        });\n        rootNode.children.push(new CR());\n        return serialize([\n            new Declaration({ version: '1.0', encoding: 'UTF-8' }),\n            new CR(),\n            new Doctype(_MESSAGES_TAG, _DOCTYPE),\n            new CR(),\n            exampleVisitor.addDefaultExamples(rootNode),\n            new CR(),\n        ]);\n    }\n    load(content, url) {\n        throw new Error('Unsupported');\n    }\n    digest(message) { return digest$1(message); }\n    createNameMapper(message) {\n        return new SimplePlaceholderMapper(message, toPublicName);\n    }\n}\nclass _Visitor$1 {\n    visitText(text, context) { return [new Text$2(text.value)]; }\n    visitContainer(container, context) {\n        const nodes = [];\n        container.children.forEach((node) => nodes.push(...node.visit(this)));\n        return nodes;\n    }\n    visitIcu(icu, context) {\n        const nodes = [new Text$2(`{${icu.expressionPlaceholder}, ${icu.type}, `)];\n        Object.keys(icu.cases).forEach((c) => {\n            nodes.push(new Text$2(`${c} {`), ...icu.cases[c].visit(this), new Text$2(`} `));\n        });\n        nodes.push(new Text$2(`}`));\n        return nodes;\n    }\n    visitTagPlaceholder(ph, context) {\n        const startTagAsText = new Text$2(`<${ph.tag}>`);\n        const startEx = new Tag(_EXAMPLE_TAG, {}, [startTagAsText]);\n        // TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n        const startTagPh = new Tag(_PLACEHOLDER_TAG, { name: ph.startName }, [startEx, startTagAsText]);\n        if (ph.isVoid) {\n            // void tags have no children nor closing tags\n            return [startTagPh];\n        }\n        const closeTagAsText = new Text$2(`</${ph.tag}>`);\n        const closeEx = new Tag(_EXAMPLE_TAG, {}, [closeTagAsText]);\n        // TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n        const closeTagPh = new Tag(_PLACEHOLDER_TAG, { name: ph.closeName }, [closeEx, closeTagAsText]);\n        return [startTagPh, ...this.serialize(ph.children), closeTagPh];\n    }\n    visitPlaceholder(ph, context) {\n        const interpolationAsText = new Text$2(`{{${ph.value}}}`);\n        // Example tag needs to be not-empty for TC.\n        const exTag = new Tag(_EXAMPLE_TAG, {}, [interpolationAsText]);\n        return [\n            // TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n            new Tag(_PLACEHOLDER_TAG, { name: ph.name }, [exTag, interpolationAsText])\n        ];\n    }\n    visitIcuPlaceholder(ph, context) {\n        const icuExpression = ph.value.expression;\n        const icuType = ph.value.type;\n        const icuCases = Object.keys(ph.value.cases).map((value) => value + ' {...}').join(' ');\n        const icuAsText = new Text$2(`{${icuExpression}, ${icuType}, ${icuCases}}`);\n        const exTag = new Tag(_EXAMPLE_TAG, {}, [icuAsText]);\n        return [\n            // TC requires PH to have a non empty EX, and uses the text node to show the \"original\" value.\n            new Tag(_PLACEHOLDER_TAG, { name: ph.name }, [exTag, icuAsText])\n        ];\n    }\n    serialize(nodes) {\n        return [].concat(...nodes.map(node => node.visit(this)));\n    }\n}\nfunction digest$1(message) {\n    return decimalDigest(message);\n}\n// TC requires at least one non-empty example on placeholders\nclass ExampleVisitor {\n    addDefaultExamples(node) {\n        node.visit(this);\n        return node;\n    }\n    visitTag(tag) {\n        if (tag.name === _PLACEHOLDER_TAG) {\n            if (!tag.children || tag.children.length == 0) {\n                const exText = new Text$2(tag.attrs['name'] || '...');\n                tag.children = [new Tag(_EXAMPLE_TAG, {}, [exText])];\n            }\n        }\n        else if (tag.children) {\n            tag.children.forEach(node => node.visit(this));\n        }\n    }\n    visitText(text) { }\n    visitDeclaration(decl) { }\n    visitDoctype(doctype) { }\n}\n// XMB/XTB placeholders can only contain A-Z, 0-9 and _\nfunction toPublicName(internalName) {\n    return internalName.toUpperCase().replace(/[^A-Z0-9_]/g, '_');\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction mapLiteral(obj, quoted = false) {\n    return literalMap(Object.keys(obj).map(key => ({\n        key,\n        quoted,\n        value: obj[key],\n    })));\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/* Closure variables holding messages must be named `MSG_[A-Z0-9]+` */\nconst CLOSURE_TRANSLATION_PREFIX = 'MSG_';\n/* Prefix for non-`goog.getMsg` i18n-related vars */\nconst TRANSLATION_PREFIX = 'I18N_';\n/** Closure uses `goog.getMsg(message)` to lookup translations */\nconst GOOG_GET_MSG = 'goog.getMsg';\n/** Name of the global variable that is used to determine if we use Closure translations or not */\nconst NG_I18N_CLOSURE_MODE = 'ngI18nClosureMode';\n/** I18n separators for metadata **/\nconst I18N_MEANING_SEPARATOR = '|';\nconst I18N_ID_SEPARATOR = '@@';\n/** Name of the i18n attributes **/\nconst I18N_ATTR = 'i18n';\nconst I18N_ATTR_PREFIX = 'i18n-';\n/** Prefix of var expressions used in ICUs */\nconst I18N_ICU_VAR_PREFIX = 'VAR_';\n/** Prefix of ICU expressions for post processing */\nconst I18N_ICU_MAPPING_PREFIX = 'I18N_EXP_';\n/** Placeholder wrapper for i18n expressions **/\nconst I18N_PLACEHOLDER_SYMBOL = '�';\nfunction i18nTranslationToDeclStmt(variable$1, closureVar, message, meta, params) {\n    const statements = [];\n    // var I18N_X;\n    statements.push(new DeclareVarStmt(variable$1.name, undefined, INFERRED_TYPE, null, variable$1.sourceSpan));\n    const args = [literal(message)];\n    if (params && Object.keys(params).length) {\n        args.push(mapLiteral(params, true));\n    }\n    // Closure JSDoc comments\n    const docStatements = i18nMetaToDocStmt(meta);\n    const thenStatements = docStatements ? [docStatements] : [];\n    const googFnCall = variable(GOOG_GET_MSG).callFn(args);\n    // const MSG_... = goog.getMsg(..);\n    thenStatements.push(closureVar.set(googFnCall).toConstDecl());\n    // I18N_X = MSG_...;\n    thenStatements.push(new ExpressionStatement(variable$1.set(closureVar)));\n    const localizeFnCall = importExpr(Identifiers$1.i18nLocalize).callFn(args);\n    // I18N_X = i18nLocalize(...);\n    const elseStatements = [new ExpressionStatement(variable$1.set(localizeFnCall))];\n    // if(ngI18nClosureMode) { ... } else { ... }\n    statements.push(ifStmt(variable(NG_I18N_CLOSURE_MODE), thenStatements, elseStatements));\n    return statements;\n}\n// Converts i18n meta information for a message (id, description, meaning)\n// to a JsDoc statement formatted as expected by the Closure compiler.\nfunction i18nMetaToDocStmt(meta) {\n    const tags = [];\n    if (meta.description) {\n        tags.push({ tagName: \"desc\" /* Desc */, text: meta.description });\n    }\n    if (meta.meaning) {\n        tags.push({ tagName: \"meaning\" /* Meaning */, text: meta.meaning });\n    }\n    return tags.length == 0 ? null : new JSDocCommentStmt(tags);\n}\nfunction isI18nAttribute(name) {\n    return name === I18N_ATTR || name.startsWith(I18N_ATTR_PREFIX);\n}\nfunction isI18nRootNode(meta) {\n    return meta instanceof Message;\n}\nfunction isSingleI18nIcu(meta) {\n    return isI18nRootNode(meta) && meta.nodes.length === 1 && meta.nodes[0] instanceof Icu$1;\n}\nfunction hasI18nAttrs(element) {\n    return element.attrs.some((attr) => isI18nAttribute(attr.name));\n}\nfunction metaFromI18nMessage(message, id = null) {\n    return {\n        id: typeof id === 'string' ? id : message.id || '',\n        meaning: message.meaning || '',\n        description: message.description || ''\n    };\n}\nfunction icuFromI18nMessage(message) {\n    return message.nodes[0];\n}\nfunction wrapI18nPlaceholder(content, contextId = 0) {\n    const blockId = contextId > 0 ? `:${contextId}` : '';\n    return `${I18N_PLACEHOLDER_SYMBOL}${content}${blockId}${I18N_PLACEHOLDER_SYMBOL}`;\n}\nfunction assembleI18nBoundString(strings, bindingStartIndex = 0, contextId = 0) {\n    if (!strings.length)\n        return '';\n    let acc = '';\n    const lastIdx = strings.length - 1;\n    for (let i = 0; i < lastIdx; i++) {\n        acc += `${strings[i]}${wrapI18nPlaceholder(bindingStartIndex + i, contextId)}`;\n    }\n    acc += strings[lastIdx];\n    return acc;\n}\nfunction getSeqNumberGenerator(startsAt = 0) {\n    let current = startsAt;\n    return () => current++;\n}\nfunction placeholdersToParams(placeholders) {\n    const params = {};\n    placeholders.forEach((values, key) => {\n        params[key] = literal(values.length > 1 ? `[${values.join('|')}]` : values[0]);\n    });\n    return params;\n}\nfunction updatePlaceholderMap(map, name, ...values) {\n    const current = map.get(name) || [];\n    current.push(...values);\n    map.set(name, current);\n}\nfunction assembleBoundTextPlaceholders(meta, bindingStartIndex = 0, contextId = 0) {\n    const startIdx = bindingStartIndex;\n    const placeholders = new Map();\n    const node = meta instanceof Message ? meta.nodes.find(node => node instanceof Container) : meta;\n    if (node) {\n        node\n            .children.filter((child) => child instanceof Placeholder)\n            .forEach((child, idx) => {\n            const content = wrapI18nPlaceholder(startIdx + idx, contextId);\n            updatePlaceholderMap(placeholders, child.name, content);\n        });\n    }\n    return placeholders;\n}\nfunction findIndex(items, callback) {\n    for (let i = 0; i < items.length; i++) {\n        if (callback(items[i])) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Parses i18n metas like:\n *  - \"@@id\",\n *  - \"description[@@id]\",\n *  - \"meaning|description[@@id]\"\n * and returns an object with parsed output.\n *\n * @param meta String that represents i18n meta\n * @returns Object with id, meaning and description fields\n */\nfunction parseI18nMeta(meta) {\n    let id;\n    let meaning;\n    let description;\n    if (meta) {\n        const idIndex = meta.indexOf(I18N_ID_SEPARATOR);\n        const descIndex = meta.indexOf(I18N_MEANING_SEPARATOR);\n        let meaningAndDesc;\n        [meaningAndDesc, id] =\n            (idIndex > -1) ? [meta.slice(0, idIndex), meta.slice(idIndex + 2)] : [meta, ''];\n        [meaning, description] = (descIndex > -1) ?\n            [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] :\n            ['', meaningAndDesc];\n    }\n    return { id, meaning, description };\n}\n/**\n * Converts internal placeholder names to public-facing format\n * (for example to use in goog.getMsg call).\n * Example: `START_TAG_DIV_1` is converted to `startTagDiv_1`.\n *\n * @param name The placeholder name that should be formatted\n * @returns Formatted placeholder name\n */\nfunction formatI18nPlaceholderName(name) {\n    const chunks = toPublicName(name).split('_');\n    if (chunks.length === 1) {\n        // if no \"_\" found - just lowercase the value\n        return name.toLowerCase();\n    }\n    let postfix;\n    // eject last element if it's a number\n    if (/^\\d+$/.test(chunks[chunks.length - 1])) {\n        postfix = chunks.pop();\n    }\n    let raw = chunks.shift().toLowerCase();\n    if (chunks.length) {\n        raw += chunks.map(c => c.charAt(0).toUpperCase() + c.slice(1).toLowerCase()).join('');\n    }\n    return postfix ? `${raw}_${postfix}` : raw;\n}\n/**\n * Generates a prefix for translation const name.\n *\n * @param extra Additional local prefix that should be injected into translation var name\n * @returns Complete translation const prefix\n */\nfunction getTranslationConstPrefix(extra) {\n    return `${CLOSURE_TRANSLATION_PREFIX}${extra}`.toUpperCase();\n}\n/**\n * Generates translation declaration statements.\n *\n * @param variable Translation value reference\n * @param closureVar Variable for Closure `goog.getMsg` calls\n * @param message Text message to be translated\n * @param meta Object that contains meta information (id, meaning and description)\n * @param params Object with placeholders key-value pairs\n * @param transformFn Optional transformation (post processing) function reference\n * @returns Array of Statements that represent a given translation\n */\nfunction getTranslationDeclStmts(variable, closureVar, message, meta, params = {}, transformFn) {\n    const statements = [];\n    statements.push(...i18nTranslationToDeclStmt(variable, closureVar, message, meta, params));\n    if (transformFn) {\n        statements.push(new ExpressionStatement(variable.set(transformFn(variable))));\n    }\n    return statements;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Checks whether an object key contains potentially unsafe chars, thus the key should be wrapped in\n * quotes. Note: we do not wrap all keys into quotes, as it may have impact on minification and may\n * bot work in some cases when object keys are mangled by minifier.\n *\n * TODO(FW-1136): this is a temporary solution, we need to come up with a better way of working with\n * inputs that contain potentially unsafe chars.\n */\nconst UNSAFE_OBJECT_KEY_NAME_REGEXP = /-/;\n/** Name of the temporary to use during data binding */\nconst TEMPORARY_NAME = '_t';\n/** Name of the context parameter passed into a template function */\nconst CONTEXT_NAME = 'ctx';\n/** Name of the RenderFlag passed into a template function */\nconst RENDER_FLAGS = 'rf';\n/** The prefix reference variables */\nconst REFERENCE_PREFIX = '_r';\n/** The name of the implicit context reference */\nconst IMPLICIT_REFERENCE = '$implicit';\n/** Non bindable attribute name **/\nconst NON_BINDABLE_ATTR = 'ngNonBindable';\n/**\n * Creates an allocator for a temporary variable.\n *\n * A variable declaration is added to the statements the first time the allocator is invoked.\n */\nfunction temporaryAllocator(statements, name) {\n    let temp = null;\n    return () => {\n        if (!temp) {\n            statements.push(new DeclareVarStmt(TEMPORARY_NAME, undefined, DYNAMIC_TYPE));\n            temp = variable(name);\n        }\n        return temp;\n    };\n}\nfunction unsupported(feature) {\n    if (this) {\n        throw new Error(`Builder ${this.constructor.name} doesn't support ${feature} yet`);\n    }\n    throw new Error(`Feature ${feature} is not supported yet`);\n}\nfunction invalid$1(arg) {\n    throw new Error(`Invalid state: Visitor ${this.constructor.name} doesn't handle ${arg.constructor.name}`);\n}\nfunction asLiteral(value) {\n    if (Array.isArray(value)) {\n        return literalArr(value.map(asLiteral));\n    }\n    return literal(value, INFERRED_TYPE);\n}\nfunction conditionallyCreateMapObjectLiteral(keys, keepDeclared) {\n    if (Object.getOwnPropertyNames(keys).length > 0) {\n        return mapToExpression(keys, keepDeclared);\n    }\n    return null;\n}\nfunction mapToExpression(map, keepDeclared) {\n    return literalMap(Object.getOwnPropertyNames(map).map(key => {\n        // canonical syntax: `dirProp: publicProp`\n        // if there is no `:`, use dirProp = elProp\n        const value = map[key];\n        let declaredName;\n        let publicName;\n        let minifiedName;\n        if (Array.isArray(value)) {\n            [publicName, declaredName] = value;\n        }\n        else {\n            [declaredName, publicName] = splitAtColon(key, [key, value]);\n        }\n        minifiedName = declaredName;\n        return {\n            key: minifiedName,\n            // put quotes around keys that contain potentially unsafe characters\n            quoted: UNSAFE_OBJECT_KEY_NAME_REGEXP.test(minifiedName),\n            value: (keepDeclared && publicName !== declaredName) ?\n                literalArr([asLiteral(publicName), asLiteral(declaredName)]) :\n                asLiteral(publicName)\n        };\n    }));\n}\n/**\n *  Remove trailing null nodes as they are implied.\n */\nfunction trimTrailingNulls(parameters) {\n    while (isNull(parameters[parameters.length - 1])) {\n        parameters.pop();\n    }\n    return parameters;\n}\nfunction getQueryPredicate(query, constantPool) {\n    if (Array.isArray(query.predicate)) {\n        let predicate = [];\n        query.predicate.forEach((selector) => {\n            // Each item in predicates array may contain strings with comma-separated refs\n            // (for ex. 'ref, ref1, ..., refN'), thus we extract individual refs and store them\n            // as separate array entities\n            const selectors = selector.split(',').map(token => literal(token.trim()));\n            predicate.push(...selectors);\n        });\n        return constantPool.getConstLiteral(literalArr(predicate), true);\n    }\n    else {\n        return query.predicate;\n    }\n}\nclass DefinitionMap {\n    constructor() {\n        this.values = [];\n    }\n    set(key, value) {\n        if (value) {\n            this.values.push({ key, value, quoted: false });\n        }\n    }\n    toLiteralMap() { return literalMap(this.values); }\n}\n/**\n * Extract a map of properties to values for a given element or template node, which can be used\n * by the directive matching machinery.\n *\n * @param elOrTpl the element or template in question\n * @return an object set up for directive matching. For attributes on the element/template, this\n * object maps a property name to its (static) value. For any bindings, this map simply maps the\n * property name to an empty string.\n */\nfunction getAttrsForDirectiveMatching(elOrTpl) {\n    const attributesMap = {};\n    if (elOrTpl instanceof Template && elOrTpl.tagName !== 'ng-template') {\n        elOrTpl.templateAttrs.forEach(a => attributesMap[a.name] = '');\n    }\n    else {\n        elOrTpl.attributes.forEach(a => {\n            if (!isI18nAttribute(a.name)) {\n                attributesMap[a.name] = a.value;\n            }\n        });\n        elOrTpl.inputs.forEach(i => { attributesMap[i.name] = ''; });\n        elOrTpl.outputs.forEach(o => { attributesMap[o.name] = ''; });\n    }\n    return attributesMap;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar R3FactoryDelegateType;\n(function (R3FactoryDelegateType) {\n    R3FactoryDelegateType[R3FactoryDelegateType[\"Class\"] = 0] = \"Class\";\n    R3FactoryDelegateType[R3FactoryDelegateType[\"Function\"] = 1] = \"Function\";\n    R3FactoryDelegateType[R3FactoryDelegateType[\"Factory\"] = 2] = \"Factory\";\n})(R3FactoryDelegateType || (R3FactoryDelegateType = {}));\n/**\n * Resolved type of a dependency.\n *\n * Occasionally, dependencies will have special significance which is known statically. In that\n * case the `R3ResolvedDependencyType` informs the factory generator that a particular dependency\n * should be generated specially (usually by calling a special injection function instead of the\n * standard one).\n */\nvar R3ResolvedDependencyType;\n(function (R3ResolvedDependencyType) {\n    /**\n     * A normal token dependency.\n     */\n    R3ResolvedDependencyType[R3ResolvedDependencyType[\"Token\"] = 0] = \"Token\";\n    /**\n     * The dependency is for an attribute.\n     *\n     * The token expression is a string representing the attribute name.\n     */\n    R3ResolvedDependencyType[R3ResolvedDependencyType[\"Attribute\"] = 1] = \"Attribute\";\n})(R3ResolvedDependencyType || (R3ResolvedDependencyType = {}));\n/**\n * Construct a factory function expression for the given `R3FactoryMetadata`.\n */\nfunction compileFactoryFunction(meta) {\n    const t = variable('t');\n    const statements = [];\n    // The type to instantiate via constructor invocation. If there is no delegated factory, meaning\n    // this type is always created by constructor invocation, then this is the type-to-create\n    // parameter provided by the user (t) if specified, or the current type if not. If there is a\n    // delegated factory (which is used to create the current type) then this is only the type-to-\n    // create parameter (t).\n    const typeForCtor = !isDelegatedMetadata(meta) ? new BinaryOperatorExpr(BinaryOperator.Or, t, meta.type) : t;\n    let ctorExpr = null;\n    if (meta.deps !== null) {\n        // There is a constructor (either explicitly or implicitly defined).\n        if (meta.deps !== 'invalid') {\n            ctorExpr = new InstantiateExpr(typeForCtor, injectDependencies(meta.deps, meta.injectFn));\n        }\n    }\n    else {\n        const baseFactory = variable(`ɵ${meta.name}_BaseFactory`);\n        const getInheritedFactory = importExpr(Identifiers$1.getInheritedFactory);\n        const baseFactoryStmt = baseFactory.set(getInheritedFactory.callFn([meta.type])).toDeclStmt(INFERRED_TYPE, [\n            StmtModifier.Exported, StmtModifier.Final\n        ]);\n        statements.push(baseFactoryStmt);\n        // There is no constructor, use the base class' factory to construct typeForCtor.\n        ctorExpr = baseFactory.callFn([typeForCtor]);\n    }\n    const ctorExprFinal = ctorExpr;\n    const body = [];\n    let retExpr = null;\n    function makeConditionalFactory(nonCtorExpr) {\n        const r = variable('r');\n        body.push(r.set(NULL_EXPR).toDeclStmt());\n        let ctorStmt = null;\n        if (ctorExprFinal !== null) {\n            ctorStmt = r.set(ctorExprFinal).toStmt();\n        }\n        else {\n            ctorStmt = makeErrorStmt(meta.name);\n        }\n        body.push(ifStmt(t, [ctorStmt], [r.set(nonCtorExpr).toStmt()]));\n        return r;\n    }\n    if (isDelegatedMetadata(meta) && meta.delegateType === R3FactoryDelegateType.Factory) {\n        const delegateFactory = variable(`ɵ${meta.name}_BaseFactory`);\n        const getFactoryOf = importExpr(Identifiers$1.getFactoryOf);\n        if (meta.delegate.isEquivalent(meta.type)) {\n            throw new Error(`Illegal state: compiling factory that delegates to itself`);\n        }\n        const delegateFactoryStmt = delegateFactory.set(getFactoryOf.callFn([meta.delegate])).toDeclStmt(INFERRED_TYPE, [\n            StmtModifier.Exported, StmtModifier.Final\n        ]);\n        statements.push(delegateFactoryStmt);\n        retExpr = makeConditionalFactory(delegateFactory.callFn([]));\n    }\n    else if (isDelegatedMetadata(meta)) {\n        // This type is created with a delegated factory. If a type parameter is not specified, call\n        // the factory instead.\n        const delegateArgs = injectDependencies(meta.delegateDeps, meta.injectFn);\n        // Either call `new delegate(...)` or `delegate(...)` depending on meta.useNewForDelegate.\n        const factoryExpr = new (meta.delegateType === R3FactoryDelegateType.Class ?\n            InstantiateExpr :\n            InvokeFunctionExpr)(meta.delegate, delegateArgs);\n        retExpr = makeConditionalFactory(factoryExpr);\n    }\n    else if (isExpressionFactoryMetadata(meta)) {\n        // TODO(alxhub): decide whether to lower the value here or in the caller\n        retExpr = makeConditionalFactory(meta.expression);\n    }\n    else {\n        retExpr = ctorExpr;\n    }\n    if (retExpr !== null) {\n        body.push(new ReturnStatement(retExpr));\n    }\n    else {\n        body.push(makeErrorStmt(meta.name));\n    }\n    return {\n        factory: fn([new FnParam('t', DYNAMIC_TYPE)], body, INFERRED_TYPE, undefined, `${meta.name}_Factory`),\n        statements,\n    };\n}\nfunction injectDependencies(deps, injectFn) {\n    return deps.map(dep => compileInjectDependency(dep, injectFn));\n}\nfunction compileInjectDependency(dep, injectFn) {\n    // Interpret the dependency according to its resolved type.\n    switch (dep.resolved) {\n        case R3ResolvedDependencyType.Token: {\n            // Build up the injection flags according to the metadata.\n            const flags = 0 /* Default */ | (dep.self ? 2 /* Self */ : 0) |\n                (dep.skipSelf ? 4 /* SkipSelf */ : 0) | (dep.host ? 1 /* Host */ : 0) |\n                (dep.optional ? 8 /* Optional */ : 0);\n            // Build up the arguments to the injectFn call.\n            const injectArgs = [dep.token];\n            // If this dependency is optional or otherwise has non-default flags, then additional\n            // parameters describing how to inject the dependency must be passed to the inject function\n            // that's being used.\n            if (flags !== 0 /* Default */ || dep.optional) {\n                injectArgs.push(literal(flags));\n            }\n            return importExpr(injectFn).callFn(injectArgs);\n        }\n        case R3ResolvedDependencyType.Attribute:\n            // In the case of attributes, the attribute name in question is given as the token.\n            return importExpr(Identifiers$1.injectAttribute).callFn([dep.token]);\n        default:\n            return unsupported(`Unknown R3ResolvedDependencyType: ${R3ResolvedDependencyType[dep.resolved]}`);\n    }\n}\n/**\n * A helper function useful for extracting `R3DependencyMetadata` from a Render2\n * `CompileTypeMetadata` instance.\n */\nfunction dependenciesFromGlobalMetadata(type, outputCtx, reflector) {\n    // Use the `CompileReflector` to look up references to some well-known Angular types. These will\n    // be compared with the token to statically determine whether the token has significance to\n    // Angular, and set the correct `R3ResolvedDependencyType` as a result.\n    const injectorRef = reflector.resolveExternalReference(Identifiers.Injector);\n    // Iterate through the type's DI dependencies and produce `R3DependencyMetadata` for each of them.\n    const deps = [];\n    for (let dependency of type.diDeps) {\n        if (dependency.token) {\n            const tokenRef = tokenReference(dependency.token);\n            let resolved = dependency.isAttribute ?\n                R3ResolvedDependencyType.Attribute :\n                R3ResolvedDependencyType.Token;\n            // In the case of most dependencies, the token will be a reference to a type. Sometimes,\n            // however, it can be a string, in the case of older Angular code or @Attribute injection.\n            const token = tokenRef instanceof StaticSymbol ? outputCtx.importExpr(tokenRef) : literal(tokenRef);\n            // Construct the dependency.\n            deps.push({\n                token,\n                resolved,\n                host: !!dependency.isHost,\n                optional: !!dependency.isOptional,\n                self: !!dependency.isSelf,\n                skipSelf: !!dependency.isSkipSelf,\n            });\n        }\n        else {\n            unsupported('dependency without a token');\n        }\n    }\n    return deps;\n}\nfunction makeErrorStmt(name) {\n    return new ThrowStmt(new InstantiateExpr(new ReadVarExpr('Error'), [\n        literal(`${name} has a constructor which is not compatible with Dependency Injection. It should probably not be @Injectable().`)\n    ]));\n}\nfunction isDelegatedMetadata(meta) {\n    return meta.delegateType !== undefined;\n}\nfunction isExpressionFactoryMetadata(meta) {\n    return meta.expression !== undefined;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Convert an object map with `Expression` values into a `LiteralMapExpr`.\n */\nfunction mapToMapExpression(map) {\n    const result = Object.keys(map).map(key => ({ key, value: map[key], quoted: false }));\n    return literalMap(result);\n}\n/**\n * Convert metadata into an `Expression` in the given `OutputContext`.\n *\n * This operation will handle arrays, references to symbols, or literal `null` or `undefined`.\n */\nfunction convertMetaToOutput(meta, ctx) {\n    if (Array.isArray(meta)) {\n        return literalArr(meta.map(entry => convertMetaToOutput(entry, ctx)));\n    }\n    if (meta instanceof StaticSymbol) {\n        return ctx.importExpr(meta);\n    }\n    if (meta == null) {\n        return literal(meta);\n    }\n    throw new Error(`Internal error: Unsupported or unknown metadata: ${meta}`);\n}\nfunction typeWithParameters(type, numParams) {\n    let params = null;\n    if (numParams > 0) {\n        params = [];\n        for (let i = 0; i < numParams; i++) {\n            params.push(DYNAMIC_TYPE);\n        }\n    }\n    return expressionType(type, null, params);\n}\nconst ANIMATE_SYMBOL_PREFIX = '@';\nfunction prepareSyntheticPropertyName(name) {\n    return `${ANIMATE_SYMBOL_PREFIX}${name}`;\n}\nfunction prepareSyntheticListenerName(name, phase) {\n    return `${ANIMATE_SYMBOL_PREFIX}${name}.${phase}`;\n}\nfunction prepareSyntheticListenerFunctionName(name, phase) {\n    return `animation_${name}_${phase}`;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction compileInjectable(meta) {\n    let result = null;\n    const factoryMeta = {\n        name: meta.name,\n        type: meta.type,\n        deps: meta.ctorDeps,\n        injectFn: Identifiers.inject,\n    };\n    if (meta.useClass !== undefined) {\n        // meta.useClass has two modes of operation. Either deps are specified, in which case `new` is\n        // used to instantiate the class with dependencies injected, or deps are not specified and\n        // the factory of the class is used to instantiate it.\n        //\n        // A special case exists for useClass: Type where Type is the injectable type itself and no\n        // deps are specified, in which case 'useClass' is effectively ignored.\n        const useClassOnSelf = meta.useClass.isEquivalent(meta.type);\n        let deps = undefined;\n        if (meta.userDeps !== undefined) {\n            deps = meta.userDeps;\n        }\n        if (deps !== undefined) {\n            // factory: () => new meta.useClass(...deps)\n            result = compileFactoryFunction(Object.assign({}, factoryMeta, { delegate: meta.useClass, delegateDeps: deps, delegateType: R3FactoryDelegateType.Class }));\n        }\n        else if (useClassOnSelf) {\n            result = compileFactoryFunction(factoryMeta);\n        }\n        else {\n            result = compileFactoryFunction(Object.assign({}, factoryMeta, { delegate: meta.useClass, delegateType: R3FactoryDelegateType.Factory }));\n        }\n    }\n    else if (meta.useFactory !== undefined) {\n        result = compileFactoryFunction(Object.assign({}, factoryMeta, { delegate: meta.useFactory, delegateDeps: meta.userDeps || [], delegateType: R3FactoryDelegateType.Function }));\n    }\n    else if (meta.useValue !== undefined) {\n        // Note: it's safe to use `meta.useValue` instead of the `USE_VALUE in meta` check used for\n        // client code because meta.useValue is an Expression which will be defined even if the actual\n        // value is undefined.\n        result = compileFactoryFunction(Object.assign({}, factoryMeta, { expression: meta.useValue }));\n    }\n    else if (meta.useExisting !== undefined) {\n        // useExisting is an `inject` call on the existing token.\n        result = compileFactoryFunction(Object.assign({}, factoryMeta, { expression: importExpr(Identifiers.inject).callFn([meta.useExisting]) }));\n    }\n    else {\n        result = compileFactoryFunction(factoryMeta);\n    }\n    const token = meta.type;\n    const providedIn = meta.providedIn;\n    const expression = importExpr(Identifiers.ɵɵdefineInjectable).callFn([mapToMapExpression({ token, factory: result.factory, providedIn })]);\n    const type = new ExpressionType(importExpr(Identifiers.InjectableDef, [typeWithParameters(meta.type, meta.typeArgumentCount)]));\n    return {\n        expression,\n        type,\n        statements: result.statements,\n    };\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction assertArrayOfStrings(identifier, value) {\n    if (value == null) {\n        return;\n    }\n    if (!Array.isArray(value)) {\n        throw new Error(`Expected '${identifier}' to be an array of strings.`);\n    }\n    for (let i = 0; i < value.length; i += 1) {\n        if (typeof value[i] !== 'string') {\n            throw new Error(`Expected '${identifier}' to be an array of strings.`);\n        }\n    }\n}\nconst UNUSABLE_INTERPOLATION_REGEXPS = [\n    /^\\s*$/,\n    /[<>]/,\n    /^[{}]$/,\n    /&(#|[a-z])/i,\n    /^\\/\\//,\n];\nfunction assertInterpolationSymbols(identifier, value) {\n    if (value != null && !(Array.isArray(value) && value.length == 2)) {\n        throw new Error(`Expected '${identifier}' to be an array, [start, end].`);\n    }\n    else if (value != null) {\n        const start = value[0];\n        const end = value[1];\n        // Check for unusable interpolation symbols\n        UNUSABLE_INTERPOLATION_REGEXPS.forEach(regexp => {\n            if (regexp.test(start) || regexp.test(end)) {\n                throw new Error(`['${start}', '${end}'] contains unusable interpolation symbol.`);\n            }\n        });\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass InterpolationConfig {\n    constructor(start, end) {\n        this.start = start;\n        this.end = end;\n    }\n    static fromArray(markers) {\n        if (!markers) {\n            return DEFAULT_INTERPOLATION_CONFIG;\n        }\n        assertInterpolationSymbols('interpolation', markers);\n        return new InterpolationConfig(markers[0], markers[1]);\n    }\n}\nconst DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig('{{', '}}');\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\nconst VERSION = 3;\nconst JS_B64_PREFIX = '# sourceMappingURL=data:application/json;base64,';\nclass SourceMapGenerator {\n    constructor(file = null) {\n        this.file = file;\n        this.sourcesContent = new Map();\n        this.lines = [];\n        this.lastCol0 = 0;\n        this.hasMappings = false;\n    }\n    // The content is `null` when the content is expected to be loaded using the URL\n    addSource(url, content = null) {\n        if (!this.sourcesContent.has(url)) {\n            this.sourcesContent.set(url, content);\n        }\n        return this;\n    }\n    addLine() {\n        this.lines.push([]);\n        this.lastCol0 = 0;\n        return this;\n    }\n    addMapping(col0, sourceUrl, sourceLine0, sourceCol0) {\n        if (!this.currentLine) {\n            throw new Error(`A line must be added before mappings can be added`);\n        }\n        if (sourceUrl != null && !this.sourcesContent.has(sourceUrl)) {\n            throw new Error(`Unknown source file \"${sourceUrl}\"`);\n        }\n        if (col0 == null) {\n            throw new Error(`The column in the generated code must be provided`);\n        }\n        if (col0 < this.lastCol0) {\n            throw new Error(`Mapping should be added in output order`);\n        }\n        if (sourceUrl && (sourceLine0 == null || sourceCol0 == null)) {\n            throw new Error(`The source location must be provided when a source url is provided`);\n        }\n        this.hasMappings = true;\n        this.lastCol0 = col0;\n        this.currentLine.push({ col0, sourceUrl, sourceLine0, sourceCol0 });\n        return this;\n    }\n    get currentLine() { return this.lines.slice(-1)[0]; }\n    toJSON() {\n        if (!this.hasMappings) {\n            return null;\n        }\n        const sourcesIndex = new Map();\n        const sources = [];\n        const sourcesContent = [];\n        Array.from(this.sourcesContent.keys()).forEach((url, i) => {\n            sourcesIndex.set(url, i);\n            sources.push(url);\n            sourcesContent.push(this.sourcesContent.get(url) || null);\n        });\n        let mappings = '';\n        let lastCol0 = 0;\n        let lastSourceIndex = 0;\n        let lastSourceLine0 = 0;\n        let lastSourceCol0 = 0;\n        this.lines.forEach(segments => {\n            lastCol0 = 0;\n            mappings += segments\n                .map(segment => {\n                // zero-based starting column of the line in the generated code\n                let segAsStr = toBase64VLQ(segment.col0 - lastCol0);\n                lastCol0 = segment.col0;\n                if (segment.sourceUrl != null) {\n                    // zero-based index into the “sources” list\n                    segAsStr +=\n                        toBase64VLQ(sourcesIndex.get(segment.sourceUrl) - lastSourceIndex);\n                    lastSourceIndex = sourcesIndex.get(segment.sourceUrl);\n                    // the zero-based starting line in the original source\n                    segAsStr += toBase64VLQ(segment.sourceLine0 - lastSourceLine0);\n                    lastSourceLine0 = segment.sourceLine0;\n                    // the zero-based starting column in the original source\n                    segAsStr += toBase64VLQ(segment.sourceCol0 - lastSourceCol0);\n                    lastSourceCol0 = segment.sourceCol0;\n                }\n                return segAsStr;\n            })\n                .join(',');\n            mappings += ';';\n        });\n        mappings = mappings.slice(0, -1);\n        return {\n            'file': this.file || '',\n            'version': VERSION,\n            'sourceRoot': '',\n            'sources': sources,\n            'sourcesContent': sourcesContent,\n            'mappings': mappings,\n        };\n    }\n    toJsComment() {\n        return this.hasMappings ? '//' + JS_B64_PREFIX + toBase64String(JSON.stringify(this, null, 0)) :\n            '';\n    }\n}\nfunction toBase64String(value) {\n    let b64 = '';\n    value = utf8Encode(value);\n    for (let i = 0; i < value.length;) {\n        const i1 = value.charCodeAt(i++);\n        const i2 = value.charCodeAt(i++);\n        const i3 = value.charCodeAt(i++);\n        b64 += toBase64Digit(i1 >> 2);\n        b64 += toBase64Digit(((i1 & 3) << 4) | (isNaN(i2) ? 0 : i2 >> 4));\n        b64 += isNaN(i2) ? '=' : toBase64Digit(((i2 & 15) << 2) | (i3 >> 6));\n        b64 += isNaN(i2) || isNaN(i3) ? '=' : toBase64Digit(i3 & 63);\n    }\n    return b64;\n}\nfunction toBase64VLQ(value) {\n    value = value < 0 ? ((-value) << 1) + 1 : value << 1;\n    let out = '';\n    do {\n        let digit = value & 31;\n        value = value >> 5;\n        if (value > 0) {\n            digit = digit | 32;\n        }\n        out += toBase64Digit(digit);\n    } while (value > 0);\n    return out;\n}\nconst B64_DIGITS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nfunction toBase64Digit(value) {\n    if (value < 0 || value >= 64) {\n        throw new Error(`Can only encode value in the range [0, 63]`);\n    }\n    return B64_DIGITS[value];\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\\\|\\n|\\r|\\$/g;\nconst _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;\nconst _INDENT_WITH = '  ';\nconst CATCH_ERROR_VAR$1 = variable('error', null, null);\nconst CATCH_STACK_VAR$1 = variable('stack', null, null);\nclass _EmittedLine {\n    constructor(indent) {\n        this.indent = indent;\n        this.partsLength = 0;\n        this.parts = [];\n        this.srcSpans = [];\n    }\n}\nclass EmitterVisitorContext {\n    constructor(_indent) {\n        this._indent = _indent;\n        this._classes = [];\n        this._preambleLineCount = 0;\n        this._lines = [new _EmittedLine(_indent)];\n    }\n    static createRoot() { return new EmitterVisitorContext(0); }\n    get _currentLine() { return this._lines[this._lines.length - 1]; }\n    println(from, lastPart = '') {\n        this.print(from || null, lastPart, true);\n    }\n    lineIsEmpty() { return this._currentLine.parts.length === 0; }\n    lineLength() {\n        return this._currentLine.indent * _INDENT_WITH.length + this._currentLine.partsLength;\n    }\n    print(from, part, newLine = false) {\n        if (part.length > 0) {\n            this._currentLine.parts.push(part);\n            this._currentLine.partsLength += part.length;\n            this._currentLine.srcSpans.push(from && from.sourceSpan || null);\n        }\n        if (newLine) {\n            this._lines.push(new _EmittedLine(this._indent));\n        }\n    }\n    removeEmptyLastLine() {\n        if (this.lineIsEmpty()) {\n            this._lines.pop();\n        }\n    }\n    incIndent() {\n        this._indent++;\n        if (this.lineIsEmpty()) {\n            this._currentLine.indent = this._indent;\n        }\n    }\n    decIndent() {\n        this._indent--;\n        if (this.lineIsEmpty()) {\n            this._currentLine.indent = this._indent;\n        }\n    }\n    pushClass(clazz) { this._classes.push(clazz); }\n    popClass() { return this._classes.pop(); }\n    get currentClass() {\n        return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;\n    }\n    toSource() {\n        return this.sourceLines\n            .map(l => l.parts.length > 0 ? _createIndent(l.indent) + l.parts.join('') : '')\n            .join('\\n');\n    }\n    toSourceMapGenerator(genFilePath, startsAtLine = 0) {\n        const map = new SourceMapGenerator(genFilePath);\n        let firstOffsetMapped = false;\n        const mapFirstOffsetIfNeeded = () => {\n            if (!firstOffsetMapped) {\n                // Add a single space so that tools won't try to load the file from disk.\n                // Note: We are using virtual urls like `ng:///`, so we have to\n                // provide a content here.\n                map.addSource(genFilePath, ' ').addMapping(0, genFilePath, 0, 0);\n                firstOffsetMapped = true;\n            }\n        };\n        for (let i = 0; i < startsAtLine; i++) {\n            map.addLine();\n            mapFirstOffsetIfNeeded();\n        }\n        this.sourceLines.forEach((line, lineIdx) => {\n            map.addLine();\n            const spans = line.srcSpans;\n            const parts = line.parts;\n            let col0 = line.indent * _INDENT_WITH.length;\n            let spanIdx = 0;\n            // skip leading parts without source spans\n            while (spanIdx < spans.length && !spans[spanIdx]) {\n                col0 += parts[spanIdx].length;\n                spanIdx++;\n            }\n            if (spanIdx < spans.length && lineIdx === 0 && col0 === 0) {\n                firstOffsetMapped = true;\n            }\n            else {\n                mapFirstOffsetIfNeeded();\n            }\n            while (spanIdx < spans.length) {\n                const span = spans[spanIdx];\n                const source = span.start.file;\n                const sourceLine = span.start.line;\n                const sourceCol = span.start.col;\n                map.addSource(source.url, source.content)\n                    .addMapping(col0, source.url, sourceLine, sourceCol);\n                col0 += parts[spanIdx].length;\n                spanIdx++;\n                // assign parts without span or the same span to the previous segment\n                while (spanIdx < spans.length && (span === spans[spanIdx] || !spans[spanIdx])) {\n                    col0 += parts[spanIdx].length;\n                    spanIdx++;\n                }\n            }\n        });\n        return map;\n    }\n    setPreambleLineCount(count) { return this._preambleLineCount = count; }\n    spanOf(line, column) {\n        const emittedLine = this._lines[line - this._preambleLineCount];\n        if (emittedLine) {\n            let columnsLeft = column - _createIndent(emittedLine.indent).length;\n            for (let partIndex = 0; partIndex < emittedLine.parts.length; partIndex++) {\n                const part = emittedLine.parts[partIndex];\n                if (part.length > columnsLeft) {\n                    return emittedLine.srcSpans[partIndex];\n                }\n                columnsLeft -= part.length;\n            }\n        }\n        return null;\n    }\n    get sourceLines() {\n        if (this._lines.length && this._lines[this._lines.length - 1].parts.length === 0) {\n            return this._lines.slice(0, -1);\n        }\n        return this._lines;\n    }\n}\nclass AbstractEmitterVisitor {\n    constructor(_escapeDollarInStrings) {\n        this._escapeDollarInStrings = _escapeDollarInStrings;\n    }\n    visitExpressionStmt(stmt, ctx) {\n        stmt.expr.visitExpression(this, ctx);\n        ctx.println(stmt, ';');\n        return null;\n    }\n    visitReturnStmt(stmt, ctx) {\n        ctx.print(stmt, `return `);\n        stmt.value.visitExpression(this, ctx);\n        ctx.println(stmt, ';');\n        return null;\n    }\n    visitIfStmt(stmt, ctx) {\n        ctx.print(stmt, `if (`);\n        stmt.condition.visitExpression(this, ctx);\n        ctx.print(stmt, `) {`);\n        const hasElseCase = stmt.falseCase != null && stmt.falseCase.length > 0;\n        if (stmt.trueCase.length <= 1 && !hasElseCase) {\n            ctx.print(stmt, ` `);\n            this.visitAllStatements(stmt.trueCase, ctx);\n            ctx.removeEmptyLastLine();\n            ctx.print(stmt, ` `);\n        }\n        else {\n            ctx.println();\n            ctx.incIndent();\n            this.visitAllStatements(stmt.trueCase, ctx);\n            ctx.decIndent();\n            if (hasElseCase) {\n                ctx.println(stmt, `} else {`);\n                ctx.incIndent();\n                this.visitAllStatements(stmt.falseCase, ctx);\n                ctx.decIndent();\n            }\n        }\n        ctx.println(stmt, `}`);\n        return null;\n    }\n    visitThrowStmt(stmt, ctx) {\n        ctx.print(stmt, `throw `);\n        stmt.error.visitExpression(this, ctx);\n        ctx.println(stmt, `;`);\n        return null;\n    }\n    visitCommentStmt(stmt, ctx) {\n        if (stmt.multiline) {\n            ctx.println(stmt, `/* ${stmt.comment} */`);\n        }\n        else {\n            stmt.comment.split('\\n').forEach((line) => { ctx.println(stmt, `// ${line}`); });\n        }\n        return null;\n    }\n    visitJSDocCommentStmt(stmt, ctx) {\n        ctx.println(stmt, `/*${stmt.toString()}*/`);\n        return null;\n    }\n    visitWriteVarExpr(expr, ctx) {\n        const lineWasEmpty = ctx.lineIsEmpty();\n        if (!lineWasEmpty) {\n            ctx.print(expr, '(');\n        }\n        ctx.print(expr, `${expr.name} = `);\n        expr.value.visitExpression(this, ctx);\n        if (!lineWasEmpty) {\n            ctx.print(expr, ')');\n        }\n        return null;\n    }\n    visitWriteKeyExpr(expr, ctx) {\n        const lineWasEmpty = ctx.lineIsEmpty();\n        if (!lineWasEmpty) {\n            ctx.print(expr, '(');\n        }\n        expr.receiver.visitExpression(this, ctx);\n        ctx.print(expr, `[`);\n        expr.index.visitExpression(this, ctx);\n        ctx.print(expr, `] = `);\n        expr.value.visitExpression(this, ctx);\n        if (!lineWasEmpty) {\n            ctx.print(expr, ')');\n        }\n        return null;\n    }\n    visitWritePropExpr(expr, ctx) {\n        const lineWasEmpty = ctx.lineIsEmpty();\n        if (!lineWasEmpty) {\n            ctx.print(expr, '(');\n        }\n        expr.receiver.visitExpression(this, ctx);\n        ctx.print(expr, `.${expr.name} = `);\n        expr.value.visitExpression(this, ctx);\n        if (!lineWasEmpty) {\n            ctx.print(expr, ')');\n        }\n        return null;\n    }\n    visitInvokeMethodExpr(expr, ctx) {\n        expr.receiver.visitExpression(this, ctx);\n        let name = expr.name;\n        if (expr.builtin != null) {\n            name = this.getBuiltinMethodName(expr.builtin);\n            if (name == null) {\n                // some builtins just mean to skip the call.\n                return null;\n            }\n        }\n        ctx.print(expr, `.${name}(`);\n        this.visitAllExpressions(expr.args, ctx, `,`);\n        ctx.print(expr, `)`);\n        return null;\n    }\n    visitInvokeFunctionExpr(expr, ctx) {\n        expr.fn.visitExpression(this, ctx);\n        ctx.print(expr, `(`);\n        this.visitAllExpressions(expr.args, ctx, ',');\n        ctx.print(expr, `)`);\n        return null;\n    }\n    visitWrappedNodeExpr(ast, ctx) {\n        throw new Error('Abstract emitter cannot visit WrappedNodeExpr.');\n    }\n    visitTypeofExpr(expr, ctx) {\n        ctx.print(expr, 'typeof ');\n        expr.expr.visitExpression(this, ctx);\n    }\n    visitReadVarExpr(ast, ctx) {\n        let varName = ast.name;\n        if (ast.builtin != null) {\n            switch (ast.builtin) {\n                case BuiltinVar.Super:\n                    varName = 'super';\n                    break;\n                case BuiltinVar.This:\n                    varName = 'this';\n                    break;\n                case BuiltinVar.CatchError:\n                    varName = CATCH_ERROR_VAR$1.name;\n                    break;\n                case BuiltinVar.CatchStack:\n                    varName = CATCH_STACK_VAR$1.name;\n                    break;\n                default:\n                    throw new Error(`Unknown builtin variable ${ast.builtin}`);\n            }\n        }\n        ctx.print(ast, varName);\n        return null;\n    }\n    visitInstantiateExpr(ast, ctx) {\n        ctx.print(ast, `new `);\n        ast.classExpr.visitExpression(this, ctx);\n        ctx.print(ast, `(`);\n        this.visitAllExpressions(ast.args, ctx, ',');\n        ctx.print(ast, `)`);\n        return null;\n    }\n    visitLiteralExpr(ast, ctx) {\n        const value = ast.value;\n        if (typeof value === 'string') {\n            ctx.print(ast, escapeIdentifier(value, this._escapeDollarInStrings));\n        }\n        else {\n            ctx.print(ast, `${value}`);\n        }\n        return null;\n    }\n    visitConditionalExpr(ast, ctx) {\n        ctx.print(ast, `(`);\n        ast.condition.visitExpression(this, ctx);\n        ctx.print(ast, '? ');\n        ast.trueCase.visitExpression(this, ctx);\n        ctx.print(ast, ': ');\n        ast.falseCase.visitExpression(this, ctx);\n        ctx.print(ast, `)`);\n        return null;\n    }\n    visitNotExpr(ast, ctx) {\n        ctx.print(ast, '!');\n        ast.condition.visitExpression(this, ctx);\n        return null;\n    }\n    visitAssertNotNullExpr(ast, ctx) {\n        ast.condition.visitExpression(this, ctx);\n        return null;\n    }\n    visitBinaryOperatorExpr(ast, ctx) {\n        let opStr;\n        switch (ast.operator) {\n            case BinaryOperator.Equals:\n                opStr = '==';\n                break;\n            case BinaryOperator.Identical:\n                opStr = '===';\n                break;\n            case BinaryOperator.NotEquals:\n                opStr = '!=';\n                break;\n            case BinaryOperator.NotIdentical:\n                opStr = '!==';\n                break;\n            case BinaryOperator.And:\n                opStr = '&&';\n                break;\n            case BinaryOperator.BitwiseAnd:\n                opStr = '&';\n                break;\n            case BinaryOperator.Or:\n                opStr = '||';\n                break;\n            case BinaryOperator.Plus:\n                opStr = '+';\n                break;\n            case BinaryOperator.Minus:\n                opStr = '-';\n                break;\n            case BinaryOperator.Divide:\n                opStr = '/';\n                break;\n            case BinaryOperator.Multiply:\n                opStr = '*';\n                break;\n            case BinaryOperator.Modulo:\n                opStr = '%';\n                break;\n            case BinaryOperator.Lower:\n                opStr = '<';\n                break;\n            case BinaryOperator.LowerEquals:\n                opStr = '<=';\n                break;\n            case BinaryOperator.Bigger:\n                opStr = '>';\n                break;\n            case BinaryOperator.BiggerEquals:\n                opStr = '>=';\n                break;\n            default:\n                throw new Error(`Unknown operator ${ast.operator}`);\n        }\n        if (ast.parens)\n            ctx.print(ast, `(`);\n        ast.lhs.visitExpression(this, ctx);\n        ctx.print(ast, ` ${opStr} `);\n        ast.rhs.visitExpression(this, ctx);\n        if (ast.parens)\n            ctx.print(ast, `)`);\n        return null;\n    }\n    visitReadPropExpr(ast, ctx) {\n        ast.receiver.visitExpression(this, ctx);\n        ctx.print(ast, `.`);\n        ctx.print(ast, ast.name);\n        return null;\n    }\n    visitReadKeyExpr(ast, ctx) {\n        ast.receiver.visitExpression(this, ctx);\n        ctx.print(ast, `[`);\n        ast.index.visitExpression(this, ctx);\n        ctx.print(ast, `]`);\n        return null;\n    }\n    visitLiteralArrayExpr(ast, ctx) {\n        ctx.print(ast, `[`);\n        this.visitAllExpressions(ast.entries, ctx, ',');\n        ctx.print(ast, `]`);\n        return null;\n    }\n    visitLiteralMapExpr(ast, ctx) {\n        ctx.print(ast, `{`);\n        this.visitAllObjects(entry => {\n            ctx.print(ast, `${escapeIdentifier(entry.key, this._escapeDollarInStrings, entry.quoted)}:`);\n            entry.value.visitExpression(this, ctx);\n        }, ast.entries, ctx, ',');\n        ctx.print(ast, `}`);\n        return null;\n    }\n    visitCommaExpr(ast, ctx) {\n        ctx.print(ast, '(');\n        this.visitAllExpressions(ast.parts, ctx, ',');\n        ctx.print(ast, ')');\n        return null;\n    }\n    visitAllExpressions(expressions, ctx, separator) {\n        this.visitAllObjects(expr => expr.visitExpression(this, ctx), expressions, ctx, separator);\n    }\n    visitAllObjects(handler, expressions, ctx, separator) {\n        let incrementedIndent = false;\n        for (let i = 0; i < expressions.length; i++) {\n            if (i > 0) {\n                if (ctx.lineLength() > 80) {\n                    ctx.print(null, separator, true);\n                    if (!incrementedIndent) {\n                        // continuation are marked with double indent.\n                        ctx.incIndent();\n                        ctx.incIndent();\n                        incrementedIndent = true;\n                    }\n                }\n                else {\n                    ctx.print(null, separator, false);\n                }\n            }\n            handler(expressions[i]);\n        }\n        if (incrementedIndent) {\n            // continuation are marked with double indent.\n            ctx.decIndent();\n            ctx.decIndent();\n        }\n    }\n    visitAllStatements(statements, ctx) {\n        statements.forEach((stmt) => stmt.visitStatement(this, ctx));\n    }\n}\nfunction escapeIdentifier(input, escapeDollar, alwaysQuote = true) {\n    if (input == null) {\n        return null;\n    }\n    const body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, (...match) => {\n        if (match[0] == '$') {\n            return escapeDollar ? '\\\\$' : '$';\n        }\n        else if (match[0] == '\\n') {\n            return '\\\\n';\n        }\n        else if (match[0] == '\\r') {\n            return '\\\\r';\n        }\n        else {\n            return `\\\\${match[0]}`;\n        }\n    });\n    const requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);\n    return requiresQuotes ? `'${body}'` : body;\n}\nfunction _createIndent(count) {\n    let res = '';\n    for (let i = 0; i < count; i++) {\n        res += _INDENT_WITH;\n    }\n    return res;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass AbstractJsEmitterVisitor extends AbstractEmitterVisitor {\n    constructor() { super(false); }\n    visitDeclareClassStmt(stmt, ctx) {\n        ctx.pushClass(stmt);\n        this._visitClassConstructor(stmt, ctx);\n        if (stmt.parent != null) {\n            ctx.print(stmt, `${stmt.name}.prototype = Object.create(`);\n            stmt.parent.visitExpression(this, ctx);\n            ctx.println(stmt, `.prototype);`);\n        }\n        stmt.getters.forEach((getter) => this._visitClassGetter(stmt, getter, ctx));\n        stmt.methods.forEach((method) => this._visitClassMethod(stmt, method, ctx));\n        ctx.popClass();\n        return null;\n    }\n    _visitClassConstructor(stmt, ctx) {\n        ctx.print(stmt, `function ${stmt.name}(`);\n        if (stmt.constructorMethod != null) {\n            this._visitParams(stmt.constructorMethod.params, ctx);\n        }\n        ctx.println(stmt, `) {`);\n        ctx.incIndent();\n        if (stmt.constructorMethod != null) {\n            if (stmt.constructorMethod.body.length > 0) {\n                ctx.println(stmt, `var self = this;`);\n                this.visitAllStatements(stmt.constructorMethod.body, ctx);\n            }\n        }\n        ctx.decIndent();\n        ctx.println(stmt, `}`);\n    }\n    _visitClassGetter(stmt, getter, ctx) {\n        ctx.println(stmt, `Object.defineProperty(${stmt.name}.prototype, '${getter.name}', { get: function() {`);\n        ctx.incIndent();\n        if (getter.body.length > 0) {\n            ctx.println(stmt, `var self = this;`);\n            this.visitAllStatements(getter.body, ctx);\n        }\n        ctx.decIndent();\n        ctx.println(stmt, `}});`);\n    }\n    _visitClassMethod(stmt, method, ctx) {\n        ctx.print(stmt, `${stmt.name}.prototype.${method.name} = function(`);\n        this._visitParams(method.params, ctx);\n        ctx.println(stmt, `) {`);\n        ctx.incIndent();\n        if (method.body.length > 0) {\n            ctx.println(stmt, `var self = this;`);\n            this.visitAllStatements(method.body, ctx);\n        }\n        ctx.decIndent();\n        ctx.println(stmt, `};`);\n    }\n    visitWrappedNodeExpr(ast, ctx) {\n        throw new Error('Cannot emit a WrappedNodeExpr in Javascript.');\n    }\n    visitReadVarExpr(ast, ctx) {\n        if (ast.builtin === BuiltinVar.This) {\n            ctx.print(ast, 'self');\n        }\n        else if (ast.builtin === BuiltinVar.Super) {\n            throw new Error(`'super' needs to be handled at a parent ast node, not at the variable level!`);\n        }\n        else {\n            super.visitReadVarExpr(ast, ctx);\n        }\n        return null;\n    }\n    visitDeclareVarStmt(stmt, ctx) {\n        ctx.print(stmt, `var ${stmt.name}`);\n        if (stmt.value) {\n            ctx.print(stmt, ' = ');\n            stmt.value.visitExpression(this, ctx);\n        }\n        ctx.println(stmt, `;`);\n        return null;\n    }\n    visitCastExpr(ast, ctx) {\n        ast.value.visitExpression(this, ctx);\n        return null;\n    }\n    visitInvokeFunctionExpr(expr, ctx) {\n        const fnExpr = expr.fn;\n        if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {\n            ctx.currentClass.parent.visitExpression(this, ctx);\n            ctx.print(expr, `.call(this`);\n            if (expr.args.length > 0) {\n                ctx.print(expr, `, `);\n                this.visitAllExpressions(expr.args, ctx, ',');\n            }\n            ctx.print(expr, `)`);\n        }\n        else {\n            super.visitInvokeFunctionExpr(expr, ctx);\n        }\n        return null;\n    }\n    visitFunctionExpr(ast, ctx) {\n        ctx.print(ast, `function${ast.name ? ' ' + ast.name : ''}(`);\n        this._visitParams(ast.params, ctx);\n        ctx.println(ast, `) {`);\n        ctx.incIndent();\n        this.visitAllStatements(ast.statements, ctx);\n        ctx.decIndent();\n        ctx.print(ast, `}`);\n        return null;\n    }\n    visitDeclareFunctionStmt(stmt, ctx) {\n        ctx.print(stmt, `function ${stmt.name}(`);\n        this._visitParams(stmt.params, ctx);\n        ctx.println(stmt, `) {`);\n        ctx.incIndent();\n        this.visitAllStatements(stmt.statements, ctx);\n        ctx.decIndent();\n        ctx.println(stmt, `}`);\n        return null;\n    }\n    visitTryCatchStmt(stmt, ctx) {\n        ctx.println(stmt, `try {`);\n        ctx.incIndent();\n        this.visitAllStatements(stmt.bodyStmts, ctx);\n        ctx.decIndent();\n        ctx.println(stmt, `} catch (${CATCH_ERROR_VAR$1.name}) {`);\n        ctx.incIndent();\n        const catchStmts = [CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop('stack')).toDeclStmt(null, [\n                StmtModifier.Final\n            ])].concat(stmt.catchStmts);\n        this.visitAllStatements(catchStmts, ctx);\n        ctx.decIndent();\n        ctx.println(stmt, `}`);\n        return null;\n    }\n    _visitParams(params, ctx) {\n        this.visitAllObjects(param => ctx.print(null, param.name), params, ctx, ',');\n    }\n    getBuiltinMethodName(method) {\n        let name;\n        switch (method) {\n            case BuiltinMethod.ConcatArray:\n                name = 'concat';\n                break;\n            case BuiltinMethod.SubscribeObservable:\n                name = 'subscribe';\n                break;\n            case BuiltinMethod.Bind:\n                name = 'bind';\n                break;\n            default:\n                throw new Error(`Unknown builtin method: ${method}`);\n        }\n        return name;\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A helper class to manage the evaluation of JIT generated code.\n */\nclass JitEvaluator {\n    /**\n     *\n     * @param sourceUrl The URL of the generated code.\n     * @param statements An array of Angular statement AST nodes to be evaluated.\n     * @param reflector A helper used when converting the statements to executable code.\n     * @param createSourceMaps If true then create a source-map for the generated code and include it\n     * inline as a source-map comment.\n     * @returns A map of all the variables in the generated code.\n     */\n    evaluateStatements(sourceUrl, statements, reflector, createSourceMaps) {\n        const converter = new JitEmitterVisitor(reflector);\n        const ctx = EmitterVisitorContext.createRoot();\n        // Ensure generated code is in strict mode\n        if (statements.length > 0 && !isUseStrictStatement(statements[0])) {\n            statements = [\n                literal('use strict').toStmt(),\n                ...statements,\n            ];\n        }\n        converter.visitAllStatements(statements, ctx);\n        converter.createReturnStmt(ctx);\n        return this.evaluateCode(sourceUrl, ctx, converter.getArgs(), createSourceMaps);\n    }\n    /**\n     * Evaluate a piece of JIT generated code.\n     * @param sourceUrl The URL of this generated code.\n     * @param ctx A context object that contains an AST of the code to be evaluated.\n     * @param vars A map containing the names and values of variables that the evaluated code might\n     * reference.\n     * @param createSourceMap If true then create a source-map for the generated code and include it\n     * inline as a source-map comment.\n     * @returns The result of evaluating the code.\n     */\n    evaluateCode(sourceUrl, ctx, vars, createSourceMap) {\n        let fnBody = `${ctx.toSource()}\\n//# sourceURL=${sourceUrl}`;\n        const fnArgNames = [];\n        const fnArgValues = [];\n        for (const argName in vars) {\n            fnArgValues.push(vars[argName]);\n            fnArgNames.push(argName);\n        }\n        if (createSourceMap) {\n            // using `new Function(...)` generates a header, 1 line of no arguments, 2 lines otherwise\n            // E.g. ```\n            // function anonymous(a,b,c\n            // /**/) { ... }```\n            // We don't want to hard code this fact, so we auto detect it via an empty function first.\n            const emptyFn = new Function(...fnArgNames.concat('return null;')).toString();\n            const headerLines = emptyFn.slice(0, emptyFn.indexOf('return null;')).split('\\n').length - 1;\n            fnBody += `\\n${ctx.toSourceMapGenerator(sourceUrl, headerLines).toJsComment()}`;\n        }\n        const fn = new Function(...fnArgNames.concat(fnBody));\n        return this.executeFunction(fn, fnArgValues);\n    }\n    /**\n     * Execute a JIT generated function by calling it.\n     *\n     * This method can be overridden in tests to capture the functions that are generated\n     * by this `JitEvaluator` class.\n     *\n     * @param fn A function to execute.\n     * @param args The arguments to pass to the function being executed.\n     * @returns The return value of the executed function.\n     */\n    executeFunction(fn, args) { return fn(...args); }\n}\n/**\n * An Angular AST visitor that converts AST nodes into executable JavaScript code.\n */\nclass JitEmitterVisitor extends AbstractJsEmitterVisitor {\n    constructor(reflector) {\n        super();\n        this.reflector = reflector;\n        this._evalArgNames = [];\n        this._evalArgValues = [];\n        this._evalExportedVars = [];\n    }\n    createReturnStmt(ctx) {\n        const stmt = new ReturnStatement(new LiteralMapExpr(this._evalExportedVars.map(resultVar => new LiteralMapEntry(resultVar, variable(resultVar), false))));\n        stmt.visitStatement(this, ctx);\n    }\n    getArgs() {\n        const result = {};\n        for (let i = 0; i < this._evalArgNames.length; i++) {\n            result[this._evalArgNames[i]] = this._evalArgValues[i];\n        }\n        return result;\n    }\n    visitExternalExpr(ast, ctx) {\n        this._emitReferenceToExternal(ast, this.reflector.resolveExternalReference(ast.value), ctx);\n        return null;\n    }\n    visitWrappedNodeExpr(ast, ctx) {\n        this._emitReferenceToExternal(ast, ast.node, ctx);\n        return null;\n    }\n    visitDeclareVarStmt(stmt, ctx) {\n        if (stmt.hasModifier(StmtModifier.Exported)) {\n            this._evalExportedVars.push(stmt.name);\n        }\n        return super.visitDeclareVarStmt(stmt, ctx);\n    }\n    visitDeclareFunctionStmt(stmt, ctx) {\n        if (stmt.hasModifier(StmtModifier.Exported)) {\n            this._evalExportedVars.push(stmt.name);\n        }\n        return super.visitDeclareFunctionStmt(stmt, ctx);\n    }\n    visitDeclareClassStmt(stmt, ctx) {\n        if (stmt.hasModifier(StmtModifier.Exported)) {\n            this._evalExportedVars.push(stmt.name);\n        }\n        return super.visitDeclareClassStmt(stmt, ctx);\n    }\n    _emitReferenceToExternal(ast, value, ctx) {\n        let id = this._evalArgValues.indexOf(value);\n        if (id === -1) {\n            id = this._evalArgValues.length;\n            this._evalArgValues.push(value);\n            const name = identifierName({ reference: value }) || 'val';\n            this._evalArgNames.push(`jit_${name}_${id}`);\n        }\n        ctx.print(ast, this._evalArgNames[id]);\n    }\n}\nfunction isUseStrictStatement(statement) {\n    return statement.isEquivalent(literal('use strict').toStmt());\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst $EOF = 0;\nconst $BSPACE = 8;\nconst $TAB = 9;\nconst $LF = 10;\nconst $VTAB = 11;\nconst $FF = 12;\nconst $CR = 13;\nconst $SPACE = 32;\nconst $BANG = 33;\nconst $DQ = 34;\nconst $HASH = 35;\nconst $$ = 36;\nconst $PERCENT = 37;\nconst $AMPERSAND = 38;\nconst $SQ = 39;\nconst $LPAREN = 40;\nconst $RPAREN = 41;\nconst $STAR = 42;\nconst $PLUS = 43;\nconst $COMMA = 44;\nconst $MINUS = 45;\nconst $PERIOD = 46;\nconst $SLASH = 47;\nconst $COLON = 58;\nconst $SEMICOLON = 59;\nconst $LT = 60;\nconst $EQ = 61;\nconst $GT = 62;\nconst $QUESTION = 63;\nconst $0 = 48;\nconst $7 = 55;\nconst $9 = 57;\nconst $A = 65;\nconst $E = 69;\nconst $F = 70;\nconst $X = 88;\nconst $Z = 90;\nconst $LBRACKET = 91;\nconst $BACKSLASH = 92;\nconst $RBRACKET = 93;\nconst $CARET = 94;\nconst $_ = 95;\nconst $a = 97;\nconst $b = 98;\nconst $e = 101;\nconst $f = 102;\nconst $n = 110;\nconst $r = 114;\nconst $t = 116;\nconst $u = 117;\nconst $v = 118;\nconst $x = 120;\nconst $z = 122;\nconst $LBRACE = 123;\nconst $BAR = 124;\nconst $RBRACE = 125;\nconst $NBSP = 160;\nconst $BT = 96;\nfunction isWhitespace(code) {\n    return (code >= $TAB && code <= $SPACE) || (code == $NBSP);\n}\nfunction isDigit(code) {\n    return $0 <= code && code <= $9;\n}\nfunction isAsciiLetter(code) {\n    return code >= $a && code <= $z || code >= $A && code <= $Z;\n}\nfunction isAsciiHexDigit(code) {\n    return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);\n}\nfunction isNewLine(code) {\n    return code === $LF || code === $CR;\n}\nfunction isOctalDigit(code) {\n    return $0 <= code && code <= $7;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ParseLocation {\n    constructor(file, offset, line, col) {\n        this.file = file;\n        this.offset = offset;\n        this.line = line;\n        this.col = col;\n    }\n    toString() {\n        return this.offset != null ? `${this.file.url}@${this.line}:${this.col}` : this.file.url;\n    }\n    moveBy(delta) {\n        const source = this.file.content;\n        const len = source.length;\n        let offset = this.offset;\n        let line = this.line;\n        let col = this.col;\n        while (offset > 0 && delta < 0) {\n            offset--;\n            delta++;\n            const ch = source.charCodeAt(offset);\n            if (ch == $LF) {\n                line--;\n                const priorLine = source.substr(0, offset - 1).lastIndexOf(String.fromCharCode($LF));\n                col = priorLine > 0 ? offset - priorLine : offset;\n            }\n            else {\n                col--;\n            }\n        }\n        while (offset < len && delta > 0) {\n            const ch = source.charCodeAt(offset);\n            offset++;\n            delta--;\n            if (ch == $LF) {\n                line++;\n                col = 0;\n            }\n            else {\n                col++;\n            }\n        }\n        return new ParseLocation(this.file, offset, line, col);\n    }\n    // Return the source around the location\n    // Up to `maxChars` or `maxLines` on each side of the location\n    getContext(maxChars, maxLines) {\n        const content = this.file.content;\n        let startOffset = this.offset;\n        if (startOffset != null) {\n            if (startOffset > content.length - 1) {\n                startOffset = content.length - 1;\n            }\n            let endOffset = startOffset;\n            let ctxChars = 0;\n            let ctxLines = 0;\n            while (ctxChars < maxChars && startOffset > 0) {\n                startOffset--;\n                ctxChars++;\n                if (content[startOffset] == '\\n') {\n                    if (++ctxLines == maxLines) {\n                        break;\n                    }\n                }\n            }\n            ctxChars = 0;\n            ctxLines = 0;\n            while (ctxChars < maxChars && endOffset < content.length - 1) {\n                endOffset++;\n                ctxChars++;\n                if (content[endOffset] == '\\n') {\n                    if (++ctxLines == maxLines) {\n                        break;\n                    }\n                }\n            }\n            return {\n                before: content.substring(startOffset, this.offset),\n                after: content.substring(this.offset, endOffset + 1),\n            };\n        }\n        return null;\n    }\n}\nclass ParseSourceFile {\n    constructor(content, url) {\n        this.content = content;\n        this.url = url;\n    }\n}\nclass ParseSourceSpan {\n    constructor(start, end, details = null) {\n        this.start = start;\n        this.end = end;\n        this.details = details;\n    }\n    toString() {\n        return this.start.file.content.substring(this.start.offset, this.end.offset);\n    }\n}\nvar ParseErrorLevel;\n(function (ParseErrorLevel) {\n    ParseErrorLevel[ParseErrorLevel[\"WARNING\"] = 0] = \"WARNING\";\n    ParseErrorLevel[ParseErrorLevel[\"ERROR\"] = 1] = \"ERROR\";\n})(ParseErrorLevel || (ParseErrorLevel = {}));\nclass ParseError {\n    constructor(span, msg, level = ParseErrorLevel.ERROR) {\n        this.span = span;\n        this.msg = msg;\n        this.level = level;\n    }\n    contextualMessage() {\n        const ctx = this.span.start.getContext(100, 3);\n        return ctx ? `${this.msg} (\"${ctx.before}[${ParseErrorLevel[this.level]} ->]${ctx.after}\")` :\n            this.msg;\n    }\n    toString() {\n        const details = this.span.details ? `, ${this.span.details}` : '';\n        return `${this.contextualMessage()}: ${this.span.start}${details}`;\n    }\n}\nfunction typeSourceSpan(kind, type) {\n    const moduleUrl = identifierModuleUrl(type);\n    const sourceFileName = moduleUrl != null ? `in ${kind} ${identifierName(type)} in ${moduleUrl}` :\n        `in ${kind} ${identifierName(type)}`;\n    const sourceFile = new ParseSourceFile('', sourceFileName);\n    return new ParseSourceSpan(new ParseLocation(sourceFile, -1, -1, -1), new ParseLocation(sourceFile, -1, -1, -1));\n}\n/**\n * Generates Source Span object for a given R3 Type for JIT mode.\n *\n * @param kind Component or Directive.\n * @param typeName name of the Component or Directive.\n * @param sourceUrl reference to Component or Directive source.\n * @returns instance of ParseSourceSpan that represent a given Component or Directive.\n */\nfunction r3JitTypeSourceSpan(kind, typeName, sourceUrl) {\n    const sourceFileName = `in ${kind} ${typeName} in ${sourceUrl}`;\n    const sourceFile = new ParseSourceFile('', sourceFileName);\n    return new ParseSourceSpan(new ParseLocation(sourceFile, -1, -1, -1), new ParseLocation(sourceFile, -1, -1, -1));\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Implementation of `CompileReflector` which resolves references to @angular/core\n * symbols at runtime, according to a consumer-provided mapping.\n *\n * Only supports `resolveExternalReference`, all other methods throw.\n */\nclass R3JitReflector {\n    constructor(context) {\n        this.context = context;\n    }\n    resolveExternalReference(ref) {\n        // This reflector only handles @angular/core imports.\n        if (ref.moduleName !== '@angular/core') {\n            throw new Error(`Cannot resolve external reference to ${ref.moduleName}, only references to @angular/core are supported.`);\n        }\n        if (!this.context.hasOwnProperty(ref.name)) {\n            throw new Error(`No value provided for @angular/core symbol '${ref.name}'.`);\n        }\n        return this.context[ref.name];\n    }\n    parameters(typeOrFunc) { throw new Error('Not implemented.'); }\n    annotations(typeOrFunc) { throw new Error('Not implemented.'); }\n    shallowAnnotations(typeOrFunc) { throw new Error('Not implemented.'); }\n    tryAnnotations(typeOrFunc) { throw new Error('Not implemented.'); }\n    propMetadata(typeOrFunc) { throw new Error('Not implemented.'); }\n    hasLifecycleHook(type, lcProperty) { throw new Error('Not implemented.'); }\n    guards(typeOrFunc) { throw new Error('Not implemented.'); }\n    componentModuleUrl(type, cmpMetadata) { throw new Error('Not implemented.'); }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Construct an `R3NgModuleDef` for the given `R3NgModuleMetadata`.\n */\nfunction compileNgModule(meta) {\n    const { type: moduleType, bootstrap, declarations, imports, exports, schemas, containsForwardDecls, emitInline } = meta;\n    const additionalStatements = [];\n    const definitionMap = {\n        type: moduleType\n    };\n    // Only generate the keys in the metadata if the arrays have values.\n    if (bootstrap.length) {\n        definitionMap.bootstrap = refsToArray(bootstrap, containsForwardDecls);\n    }\n    // If requested to emit scope information inline, pass the declarations, imports and exports to\n    // the `ɵɵdefineNgModule` call. The JIT compilation uses this.\n    if (emitInline) {\n        if (declarations.length) {\n            definitionMap.declarations = refsToArray(declarations, containsForwardDecls);\n        }\n        if (imports.length) {\n            definitionMap.imports = refsToArray(imports, containsForwardDecls);\n        }\n        if (exports.length) {\n            definitionMap.exports = refsToArray(exports, containsForwardDecls);\n        }\n    }\n    // If not emitting inline, the scope information is not passed into `ɵɵdefineNgModule` as it would\n    // prevent tree-shaking of the declarations, imports and exports references.\n    else {\n        const setNgModuleScopeCall = generateSetNgModuleScopeCall(meta);\n        if (setNgModuleScopeCall !== null) {\n            additionalStatements.push(setNgModuleScopeCall);\n        }\n    }\n    if (schemas && schemas.length) {\n        definitionMap.schemas = literalArr(schemas.map(ref => ref.value));\n    }\n    const expression = importExpr(Identifiers$1.defineNgModule).callFn([mapToMapExpression(definitionMap)]);\n    const type = new ExpressionType(importExpr(Identifiers$1.NgModuleDefWithMeta, [\n        new ExpressionType(moduleType), tupleTypeOf(declarations), tupleTypeOf(imports),\n        tupleTypeOf(exports)\n    ]));\n    return { expression, type, additionalStatements };\n}\n/**\n * Generates a function call to `ɵɵsetNgModuleScope` with all necessary information so that the\n * transitive module scope can be computed during runtime in JIT mode. This call is marked pure\n * such that the references to declarations, imports and exports may be elided causing these\n * symbols to become tree-shakeable.\n */\nfunction generateSetNgModuleScopeCall(meta) {\n    const { type: moduleType, declarations, imports, exports, containsForwardDecls } = meta;\n    const scopeMap = {};\n    if (declarations.length) {\n        scopeMap.declarations = refsToArray(declarations, containsForwardDecls);\n    }\n    if (imports.length) {\n        scopeMap.imports = refsToArray(imports, containsForwardDecls);\n    }\n    if (exports.length) {\n        scopeMap.exports = refsToArray(exports, containsForwardDecls);\n    }\n    if (Object.keys(scopeMap).length === 0) {\n        return null;\n    }\n    const fnCall = new InvokeFunctionExpr(\n    /* fn */ importExpr(Identifiers$1.setNgModuleScope), \n    /* args */ [moduleType, mapToMapExpression(scopeMap)], \n    /* type */ undefined, \n    /* sourceSpan */ undefined, \n    /* pure */ true);\n    return fnCall.toStmt();\n}\nfunction compileInjector(meta) {\n    const result = compileFactoryFunction({\n        name: meta.name,\n        type: meta.type,\n        deps: meta.deps,\n        injectFn: Identifiers$1.inject,\n    });\n    const definitionMap = {\n        factory: result.factory,\n    };\n    if (meta.providers !== null) {\n        definitionMap.providers = meta.providers;\n    }\n    if (meta.imports.length > 0) {\n        definitionMap.imports = literalArr(meta.imports);\n    }\n    const expression = importExpr(Identifiers$1.defineInjector).callFn([mapToMapExpression(definitionMap)]);\n    const type = new ExpressionType(importExpr(Identifiers$1.InjectorDef, [new ExpressionType(meta.type)]));\n    return { expression, type, statements: result.statements };\n}\n// TODO(alxhub): integrate this with `compileNgModule`. Currently the two are separate operations.\nfunction compileNgModuleFromRender2(ctx, ngModule, injectableCompiler) {\n    const className = identifierName(ngModule.type);\n    const rawImports = ngModule.rawImports ? [ngModule.rawImports] : [];\n    const rawExports = ngModule.rawExports ? [ngModule.rawExports] : [];\n    const injectorDefArg = mapLiteral({\n        'factory': injectableCompiler.factoryFor({ type: ngModule.type, symbol: ngModule.type.reference }, ctx),\n        'providers': convertMetaToOutput(ngModule.rawProviders, ctx),\n        'imports': convertMetaToOutput([...rawImports, ...rawExports], ctx),\n    });\n    const injectorDef = importExpr(Identifiers$1.defineInjector).callFn([injectorDefArg]);\n    ctx.statements.push(new ClassStmt(\n    /* name */ className, \n    /* parent */ null, \n    /* fields */ [new ClassField(\n        /* name */ 'ngInjectorDef', \n        /* type */ INFERRED_TYPE, \n        /* modifiers */ [StmtModifier.Static], \n        /* initializer */ injectorDef)], \n    /* getters */ [], \n    /* constructorMethod */ new ClassMethod(null, [], []), \n    /* methods */ []));\n}\nfunction tupleTypeOf(exp) {\n    const types = exp.map(ref => typeofExpr(ref.type));\n    return exp.length > 0 ? expressionType(literalArr(types)) : NONE_TYPE;\n}\nfunction refsToArray(refs, shouldForwardDeclare) {\n    const values = literalArr(refs.map(ref => ref.value));\n    return shouldForwardDeclare ? fn([], [new ReturnStatement(values)]) : values;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction compilePipeFromMetadata(metadata) {\n    const definitionMapValues = [];\n    // e.g. `name: 'myPipe'`\n    definitionMapValues.push({ key: 'name', value: literal(metadata.pipeName), quoted: false });\n    // e.g. `type: MyPipe`\n    definitionMapValues.push({ key: 'type', value: metadata.type, quoted: false });\n    const templateFactory = compileFactoryFunction({\n        name: metadata.name,\n        type: metadata.type,\n        deps: metadata.deps,\n        injectFn: Identifiers$1.directiveInject,\n    });\n    definitionMapValues.push({ key: 'factory', value: templateFactory.factory, quoted: false });\n    // e.g. `pure: true`\n    definitionMapValues.push({ key: 'pure', value: literal(metadata.pure), quoted: false });\n    const expression = importExpr(Identifiers$1.definePipe).callFn([literalMap(definitionMapValues)]);\n    const type = new ExpressionType(importExpr(Identifiers$1.PipeDefWithMeta, [\n        typeWithParameters(metadata.type, metadata.typeArgumentCount),\n        new ExpressionType(new LiteralExpr(metadata.pipeName)),\n    ]));\n    return { expression, type, statements: templateFactory.statements };\n}\n/**\n * Write a pipe definition to the output context.\n */\nfunction compilePipeFromRender2(outputCtx, pipe, reflector) {\n    const name = identifierName(pipe.type);\n    if (!name) {\n        return error(`Cannot resolve the name of ${pipe.type}`);\n    }\n    const metadata = {\n        name,\n        pipeName: pipe.name,\n        type: outputCtx.importExpr(pipe.type.reference),\n        typeArgumentCount: 0,\n        deps: dependenciesFromGlobalMetadata(pipe.type, outputCtx, reflector),\n        pure: pipe.pure,\n    };\n    const res = compilePipeFromMetadata(metadata);\n    const definitionField = outputCtx.constantPool.propertyNameOf(3 /* Pipe */);\n    outputCtx.statements.push(new ClassStmt(\n    /* name */ name, \n    /* parent */ null, \n    /* fields */ [new ClassField(\n        /* name */ definitionField, \n        /* type */ INFERRED_TYPE, \n        /* modifiers */ [StmtModifier.Static], \n        /* initializer */ res.expression)], \n    /* getters */ [], \n    /* constructorMethod */ new ClassMethod(null, [], []), \n    /* methods */ []));\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ParserError {\n    constructor(message, input, errLocation, ctxLocation) {\n        this.input = input;\n        this.errLocation = errLocation;\n        this.ctxLocation = ctxLocation;\n        this.message = `Parser Error: ${message} ${errLocation} [${input}] in ${ctxLocation}`;\n    }\n}\nclass ParseSpan {\n    constructor(start, end) {\n        this.start = start;\n        this.end = end;\n    }\n}\nclass AST {\n    constructor(span) {\n        this.span = span;\n    }\n    visit(visitor, context = null) { return null; }\n    toString() { return 'AST'; }\n}\n/**\n * Represents a quoted expression of the form:\n *\n * quote = prefix `:` uninterpretedExpression\n * prefix = identifier\n * uninterpretedExpression = arbitrary string\n *\n * A quoted expression is meant to be pre-processed by an AST transformer that\n * converts it into another AST that no longer contains quoted expressions.\n * It is meant to allow third-party developers to extend Angular template\n * expression language. The `uninterpretedExpression` part of the quote is\n * therefore not interpreted by the Angular's own expression parser.\n */\nclass Quote extends AST {\n    constructor(span, prefix, uninterpretedExpression, location) {\n        super(span);\n        this.prefix = prefix;\n        this.uninterpretedExpression = uninterpretedExpression;\n        this.location = location;\n    }\n    visit(visitor, context = null) { return visitor.visitQuote(this, context); }\n    toString() { return 'Quote'; }\n}\nclass EmptyExpr extends AST {\n    visit(visitor, context = null) {\n        // do nothing\n    }\n}\nclass ImplicitReceiver extends AST {\n    visit(visitor, context = null) {\n        return visitor.visitImplicitReceiver(this, context);\n    }\n}\n/**\n * Multiple expressions separated by a semicolon.\n */\nclass Chain extends AST {\n    constructor(span, expressions) {\n        super(span);\n        this.expressions = expressions;\n    }\n    visit(visitor, context = null) { return visitor.visitChain(this, context); }\n}\nclass Conditional extends AST {\n    constructor(span, condition, trueExp, falseExp) {\n        super(span);\n        this.condition = condition;\n        this.trueExp = trueExp;\n        this.falseExp = falseExp;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitConditional(this, context);\n    }\n}\nclass PropertyRead extends AST {\n    constructor(span, receiver, name) {\n        super(span);\n        this.receiver = receiver;\n        this.name = name;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitPropertyRead(this, context);\n    }\n}\nclass PropertyWrite extends AST {\n    constructor(span, receiver, name, value) {\n        super(span);\n        this.receiver = receiver;\n        this.name = name;\n        this.value = value;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitPropertyWrite(this, context);\n    }\n}\nclass SafePropertyRead extends AST {\n    constructor(span, receiver, name) {\n        super(span);\n        this.receiver = receiver;\n        this.name = name;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitSafePropertyRead(this, context);\n    }\n}\nclass KeyedRead extends AST {\n    constructor(span, obj, key) {\n        super(span);\n        this.obj = obj;\n        this.key = key;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitKeyedRead(this, context);\n    }\n}\nclass KeyedWrite extends AST {\n    constructor(span, obj, key, value) {\n        super(span);\n        this.obj = obj;\n        this.key = key;\n        this.value = value;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitKeyedWrite(this, context);\n    }\n}\nclass BindingPipe extends AST {\n    constructor(span, exp, name, args) {\n        super(span);\n        this.exp = exp;\n        this.name = name;\n        this.args = args;\n    }\n    visit(visitor, context = null) { return visitor.visitPipe(this, context); }\n}\nclass LiteralPrimitive extends AST {\n    constructor(span, value) {\n        super(span);\n        this.value = value;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitLiteralPrimitive(this, context);\n    }\n}\nclass LiteralArray extends AST {\n    constructor(span, expressions) {\n        super(span);\n        this.expressions = expressions;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitLiteralArray(this, context);\n    }\n}\nclass LiteralMap extends AST {\n    constructor(span, keys, values) {\n        super(span);\n        this.keys = keys;\n        this.values = values;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitLiteralMap(this, context);\n    }\n}\nclass Interpolation extends AST {\n    constructor(span, strings, expressions) {\n        super(span);\n        this.strings = strings;\n        this.expressions = expressions;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitInterpolation(this, context);\n    }\n}\nclass Binary extends AST {\n    constructor(span, operation, left, right) {\n        super(span);\n        this.operation = operation;\n        this.left = left;\n        this.right = right;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitBinary(this, context);\n    }\n}\nclass PrefixNot extends AST {\n    constructor(span, expression) {\n        super(span);\n        this.expression = expression;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitPrefixNot(this, context);\n    }\n}\nclass NonNullAssert extends AST {\n    constructor(span, expression) {\n        super(span);\n        this.expression = expression;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitNonNullAssert(this, context);\n    }\n}\nclass MethodCall extends AST {\n    constructor(span, receiver, name, args) {\n        super(span);\n        this.receiver = receiver;\n        this.name = name;\n        this.args = args;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitMethodCall(this, context);\n    }\n}\nclass SafeMethodCall extends AST {\n    constructor(span, receiver, name, args) {\n        super(span);\n        this.receiver = receiver;\n        this.name = name;\n        this.args = args;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitSafeMethodCall(this, context);\n    }\n}\nclass FunctionCall extends AST {\n    constructor(span, target, args) {\n        super(span);\n        this.target = target;\n        this.args = args;\n    }\n    visit(visitor, context = null) {\n        return visitor.visitFunctionCall(this, context);\n    }\n}\nclass ASTWithSource extends AST {\n    constructor(ast, source, location, errors) {\n        super(new ParseSpan(0, source == null ? 0 : source.length));\n        this.ast = ast;\n        this.source = source;\n        this.location = location;\n        this.errors = errors;\n    }\n    visit(visitor, context = null) { return this.ast.visit(visitor, context); }\n    toString() { return `${this.source} in ${this.location}`; }\n}\nclass TemplateBinding {\n    constructor(span, key, keyIsVar, name, expression) {\n        this.span = span;\n        this.key = key;\n        this.keyIsVar = keyIsVar;\n        this.name = name;\n        this.expression = expression;\n    }\n}\nclass NullAstVisitor {\n    visitBinary(ast, context) { }\n    visitChain(ast, context) { }\n    visitConditional(ast, context) { }\n    visitFunctionCall(ast, context) { }\n    visitImplicitReceiver(ast, context) { }\n    visitInterpolation(ast, context) { }\n    visitKeyedRead(ast, context) { }\n    visitKeyedWrite(ast, context) { }\n    visitLiteralArray(ast, context) { }\n    visitLiteralMap(ast, context) { }\n    visitLiteralPrimitive(ast, context) { }\n    visitMethodCall(ast, context) { }\n    visitPipe(ast, context) { }\n    visitPrefixNot(ast, context) { }\n    visitNonNullAssert(ast, context) { }\n    visitPropertyRead(ast, context) { }\n    visitPropertyWrite(ast, context) { }\n    visitQuote(ast, context) { }\n    visitSafeMethodCall(ast, context) { }\n    visitSafePropertyRead(ast, context) { }\n}\nclass RecursiveAstVisitor$1 {\n    visitBinary(ast, context) {\n        ast.left.visit(this);\n        ast.right.visit(this);\n        return null;\n    }\n    visitChain(ast, context) { return this.visitAll(ast.expressions, context); }\n    visitConditional(ast, context) {\n        ast.condition.visit(this);\n        ast.trueExp.visit(this);\n        ast.falseExp.visit(this);\n        return null;\n    }\n    visitPipe(ast, context) {\n        ast.exp.visit(this);\n        this.visitAll(ast.args, context);\n        return null;\n    }\n    visitFunctionCall(ast, context) {\n        ast.target.visit(this);\n        this.visitAll(ast.args, context);\n        return null;\n    }\n    visitImplicitReceiver(ast, context) { return null; }\n    visitInterpolation(ast, context) {\n        return this.visitAll(ast.expressions, context);\n    }\n    visitKeyedRead(ast, context) {\n        ast.obj.visit(this);\n        ast.key.visit(this);\n        return null;\n    }\n    visitKeyedWrite(ast, context) {\n        ast.obj.visit(this);\n        ast.key.visit(this);\n        ast.value.visit(this);\n        return null;\n    }\n    visitLiteralArray(ast, context) {\n        return this.visitAll(ast.expressions, context);\n    }\n    visitLiteralMap(ast, context) { return this.visitAll(ast.values, context); }\n    visitLiteralPrimitive(ast, context) { return null; }\n    visitMethodCall(ast, context) {\n        ast.receiver.visit(this);\n        return this.visitAll(ast.args, context);\n    }\n    visitPrefixNot(ast, context) {\n        ast.expression.visit(this);\n        return null;\n    }\n    visitNonNullAssert(ast, context) {\n        ast.expression.visit(this);\n        return null;\n    }\n    visitPropertyRead(ast, context) {\n        ast.receiver.visit(this);\n        return null;\n    }\n    visitPropertyWrite(ast, context) {\n        ast.receiver.visit(this);\n        ast.value.visit(this);\n        return null;\n    }\n    visitSafePropertyRead(ast, context) {\n        ast.receiver.visit(this);\n        return null;\n    }\n    visitSafeMethodCall(ast, context) {\n        ast.receiver.visit(this);\n        return this.visitAll(ast.args, context);\n    }\n    visitAll(asts, context) {\n        asts.forEach(ast => ast.visit(this, context));\n        return null;\n    }\n    visitQuote(ast, context) { return null; }\n}\nclass AstTransformer$1 {\n    visitImplicitReceiver(ast, context) { return ast; }\n    visitInterpolation(ast, context) {\n        return new Interpolation(ast.span, ast.strings, this.visitAll(ast.expressions));\n    }\n    visitLiteralPrimitive(ast, context) {\n        return new LiteralPrimitive(ast.span, ast.value);\n    }\n    visitPropertyRead(ast, context) {\n        return new PropertyRead(ast.span, ast.receiver.visit(this), ast.name);\n    }\n    visitPropertyWrite(ast, context) {\n        return new PropertyWrite(ast.span, ast.receiver.visit(this), ast.name, ast.value.visit(this));\n    }\n    visitSafePropertyRead(ast, context) {\n        return new SafePropertyRead(ast.span, ast.receiver.visit(this), ast.name);\n    }\n    visitMethodCall(ast, context) {\n        return new MethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));\n    }\n    visitSafeMethodCall(ast, context) {\n        return new SafeMethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));\n    }\n    visitFunctionCall(ast, context) {\n        return new FunctionCall(ast.span, ast.target.visit(this), this.visitAll(ast.args));\n    }\n    visitLiteralArray(ast, context) {\n        return new LiteralArray(ast.span, this.visitAll(ast.expressions));\n    }\n    visitLiteralMap(ast, context) {\n        return new LiteralMap(ast.span, ast.keys, this.visitAll(ast.values));\n    }\n    visitBinary(ast, context) {\n        return new Binary(ast.span, ast.operation, ast.left.visit(this), ast.right.visit(this));\n    }\n    visitPrefixNot(ast, context) {\n        return new PrefixNot(ast.span, ast.expression.visit(this));\n    }\n    visitNonNullAssert(ast, context) {\n        return new NonNullAssert(ast.span, ast.expression.visit(this));\n    }\n    visitConditional(ast, context) {\n        return new Conditional(ast.span, ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));\n    }\n    visitPipe(ast, context) {\n        return new BindingPipe(ast.span, ast.exp.visit(this), ast.name, this.visitAll(ast.args));\n    }\n    visitKeyedRead(ast, context) {\n        return new KeyedRead(ast.span, ast.obj.visit(this), ast.key.visit(this));\n    }\n    visitKeyedWrite(ast, context) {\n        return new KeyedWrite(ast.span, ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this));\n    }\n    visitAll(asts) {\n        const res = new Array(asts.length);\n        for (let i = 0; i < asts.length; ++i) {\n            res[i] = asts[i].visit(this);\n        }\n        return res;\n    }\n    visitChain(ast, context) {\n        return new Chain(ast.span, this.visitAll(ast.expressions));\n    }\n    visitQuote(ast, context) {\n        return new Quote(ast.span, ast.prefix, ast.uninterpretedExpression, ast.location);\n    }\n}\n// A transformer that only creates new nodes if the transformer makes a change or\n// a change is made a child node.\nclass AstMemoryEfficientTransformer {\n    visitImplicitReceiver(ast, context) { return ast; }\n    visitInterpolation(ast, context) {\n        const expressions = this.visitAll(ast.expressions);\n        if (expressions !== ast.expressions)\n            return new Interpolation(ast.span, ast.strings, expressions);\n        return ast;\n    }\n    visitLiteralPrimitive(ast, context) { return ast; }\n    visitPropertyRead(ast, context) {\n        const receiver = ast.receiver.visit(this);\n        if (receiver !== ast.receiver) {\n            return new PropertyRead(ast.span, receiver, ast.name);\n        }\n        return ast;\n    }\n    visitPropertyWrite(ast, context) {\n        const receiver = ast.receiver.visit(this);\n        const value = ast.value.visit(this);\n        if (receiver !== ast.receiver || value !== ast.value) {\n            return new PropertyWrite(ast.span, receiver, ast.name, value);\n        }\n        return ast;\n    }\n    visitSafePropertyRead(ast, context) {\n        const receiver = ast.receiver.visit(this);\n        if (receiver !== ast.receiver) {\n            return new SafePropertyRead(ast.span, receiver, ast.name);\n        }\n        return ast;\n    }\n    visitMethodCall(ast, context) {\n        const receiver = ast.receiver.visit(this);\n        const args = this.visitAll(ast.args);\n        if (receiver !== ast.receiver || args !== ast.args) {\n            return new MethodCall(ast.span, receiver, ast.name, args);\n        }\n        return ast;\n    }\n    visitSafeMethodCall(ast, context) {\n        const receiver = ast.receiver.visit(this);\n        const args = this.visitAll(ast.args);\n        if (receiver !== ast.receiver || args !== ast.args) {\n            return new SafeMethodCall(ast.span, receiver, ast.name, args);\n        }\n        return ast;\n    }\n    visitFunctionCall(ast, context) {\n        const target = ast.target && ast.target.visit(this);\n        const args = this.visitAll(ast.args);\n        if (target !== ast.target || args !== ast.args) {\n            return new FunctionCall(ast.span, target, args);\n        }\n        return ast;\n    }\n    visitLiteralArray(ast, context) {\n        const expressions = this.visitAll(ast.expressions);\n        if (expressions !== ast.expressions) {\n            return new LiteralArray(ast.span, expressions);\n        }\n        return ast;\n    }\n    visitLiteralMap(ast, context) {\n        const values = this.visitAll(ast.values);\n        if (values !== ast.values) {\n            return new LiteralMap(ast.span, ast.keys, values);\n        }\n        return ast;\n    }\n    visitBinary(ast, context) {\n        const left = ast.left.visit(this);\n        const right = ast.right.visit(this);\n        if (left !== ast.left || right !== ast.right) {\n            return new Binary(ast.span, ast.operation, left, right);\n        }\n        return ast;\n    }\n    visitPrefixNot(ast, context) {\n        const expression = ast.expression.visit(this);\n        if (expression !== ast.expression) {\n            return new PrefixNot(ast.span, expression);\n        }\n        return ast;\n    }\n    visitNonNullAssert(ast, context) {\n        const expression = ast.expression.visit(this);\n        if (expression !== ast.expression) {\n            return new NonNullAssert(ast.span, expression);\n        }\n        return ast;\n    }\n    visitConditional(ast, context) {\n        const condition = ast.condition.visit(this);\n        const trueExp = ast.trueExp.visit(this);\n        const falseExp = ast.falseExp.visit(this);\n        if (condition !== ast.condition || trueExp !== ast.trueExp || falseExp !== ast.falseExp) {\n            return new Conditional(ast.span, condition, trueExp, falseExp);\n        }\n        return ast;\n    }\n    visitPipe(ast, context) {\n        const exp = ast.exp.visit(this);\n        const args = this.visitAll(ast.args);\n        if (exp !== ast.exp || args !== ast.args) {\n            return new BindingPipe(ast.span, exp, ast.name, args);\n        }\n        return ast;\n    }\n    visitKeyedRead(ast, context) {\n        const obj = ast.obj.visit(this);\n        const key = ast.key.visit(this);\n        if (obj !== ast.obj || key !== ast.key) {\n            return new KeyedRead(ast.span, obj, key);\n        }\n        return ast;\n    }\n    visitKeyedWrite(ast, context) {\n        const obj = ast.obj.visit(this);\n        const key = ast.key.visit(this);\n        const value = ast.value.visit(this);\n        if (obj !== ast.obj || key !== ast.key || value !== ast.value) {\n            return new KeyedWrite(ast.span, obj, key, value);\n        }\n        return ast;\n    }\n    visitAll(asts) {\n        const res = new Array(asts.length);\n        let modified = false;\n        for (let i = 0; i < asts.length; ++i) {\n            const original = asts[i];\n            const value = original.visit(this);\n            res[i] = value;\n            modified = modified || value !== original;\n        }\n        return modified ? res : asts;\n    }\n    visitChain(ast, context) {\n        const expressions = this.visitAll(ast.expressions);\n        if (expressions !== ast.expressions) {\n            return new Chain(ast.span, expressions);\n        }\n        return ast;\n    }\n    visitQuote(ast, context) { return ast; }\n}\nfunction visitAstChildren(ast, visitor, context) {\n    function visit(ast) {\n        visitor.visit && visitor.visit(ast, context) || ast.visit(visitor, context);\n    }\n    function visitAll(asts) { asts.forEach(visit); }\n    ast.visit({\n        visitBinary(ast) {\n            visit(ast.left);\n            visit(ast.right);\n        },\n        visitChain(ast) { visitAll(ast.expressions); },\n        visitConditional(ast) {\n            visit(ast.condition);\n            visit(ast.trueExp);\n            visit(ast.falseExp);\n        },\n        visitFunctionCall(ast) {\n            if (ast.target) {\n                visit(ast.target);\n            }\n            visitAll(ast.args);\n        },\n        visitImplicitReceiver(ast) { },\n        visitInterpolation(ast) { visitAll(ast.expressions); },\n        visitKeyedRead(ast) {\n            visit(ast.obj);\n            visit(ast.key);\n        },\n        visitKeyedWrite(ast) {\n            visit(ast.obj);\n            visit(ast.key);\n            visit(ast.obj);\n        },\n        visitLiteralArray(ast) { visitAll(ast.expressions); },\n        visitLiteralMap(ast) { },\n        visitLiteralPrimitive(ast) { },\n        visitMethodCall(ast) {\n            visit(ast.receiver);\n            visitAll(ast.args);\n        },\n        visitPipe(ast) {\n            visit(ast.exp);\n            visitAll(ast.args);\n        },\n        visitPrefixNot(ast) { visit(ast.expression); },\n        visitNonNullAssert(ast) { visit(ast.expression); },\n        visitPropertyRead(ast) { visit(ast.receiver); },\n        visitPropertyWrite(ast) {\n            visit(ast.receiver);\n            visit(ast.value);\n        },\n        visitQuote(ast) { },\n        visitSafeMethodCall(ast) {\n            visit(ast.receiver);\n            visitAll(ast.args);\n        },\n        visitSafePropertyRead(ast) { visit(ast.receiver); },\n    });\n}\n// Bindings\nclass ParsedProperty {\n    constructor(name, expression, type, sourceSpan) {\n        this.name = name;\n        this.expression = expression;\n        this.type = type;\n        this.sourceSpan = sourceSpan;\n        this.isLiteral = this.type === ParsedPropertyType.LITERAL_ATTR;\n        this.isAnimation = this.type === ParsedPropertyType.ANIMATION;\n    }\n}\nvar ParsedPropertyType;\n(function (ParsedPropertyType) {\n    ParsedPropertyType[ParsedPropertyType[\"DEFAULT\"] = 0] = \"DEFAULT\";\n    ParsedPropertyType[ParsedPropertyType[\"LITERAL_ATTR\"] = 1] = \"LITERAL_ATTR\";\n    ParsedPropertyType[ParsedPropertyType[\"ANIMATION\"] = 2] = \"ANIMATION\";\n})(ParsedPropertyType || (ParsedPropertyType = {}));\nclass ParsedEvent {\n    // Regular events have a target\n    // Animation events have a phase\n    constructor(name, targetOrPhase, type, handler, sourceSpan, handlerSpan) {\n        this.name = name;\n        this.targetOrPhase = targetOrPhase;\n        this.type = type;\n        this.handler = handler;\n        this.sourceSpan = sourceSpan;\n        this.handlerSpan = handlerSpan;\n    }\n}\nclass ParsedVariable {\n    constructor(name, value, sourceSpan) {\n        this.name = name;\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n}\nclass BoundElementProperty {\n    constructor(name, type, securityContext, value, unit, sourceSpan) {\n        this.name = name;\n        this.type = type;\n        this.securityContext = securityContext;\n        this.value = value;\n        this.unit = unit;\n        this.sourceSpan = sourceSpan;\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass EventHandlerVars {\n}\nEventHandlerVars.event = variable('$event');\nclass ConvertActionBindingResult {\n    constructor(\n    /**\n     * Render2 compatible statements,\n     */\n    stmts, \n    /**\n     * Variable name used with render2 compatible statements.\n     */\n    allowDefault) {\n        this.stmts = stmts;\n        this.allowDefault = allowDefault;\n        /**\n         * This is bit of a hack. It converts statements which render2 expects to statements which are\n         * expected by render3.\n         *\n         * Example: `<div click=\"doSomething($event)\">` will generate:\n         *\n         * Render3:\n         * ```\n         * const pd_b:any = ((<any>ctx.doSomething($event)) !== false);\n         * return pd_b;\n         * ```\n         *\n         * but render2 expects:\n         * ```\n         * return ctx.doSomething($event);\n         * ```\n         */\n        // TODO(misko): remove this hack once we no longer support ViewEngine.\n        this.render3Stmts = stmts.map((statement) => {\n            if (statement instanceof DeclareVarStmt && statement.name == allowDefault.name &&\n                statement.value instanceof BinaryOperatorExpr) {\n                const lhs = statement.value.lhs;\n                return new ReturnStatement(lhs.value);\n            }\n            return statement;\n        });\n    }\n}\n/**\n * Converts the given expression AST into an executable output AST, assuming the expression is\n * used in an action binding (e.g. an event handler).\n */\nfunction convertActionBinding(localResolver, implicitReceiver, action, bindingId, interpolationFunction, baseSourceSpan) {\n    if (!localResolver) {\n        localResolver = new DefaultLocalResolver();\n    }\n    const actionWithoutBuiltins = convertPropertyBindingBuiltins({\n        createLiteralArrayConverter: (argCount) => {\n            // Note: no caching for literal arrays in actions.\n            return (args) => literalArr(args);\n        },\n        createLiteralMapConverter: (keys) => {\n            // Note: no caching for literal maps in actions.\n            return (values) => {\n                const entries = keys.map((k, i) => ({\n                    key: k.key,\n                    value: values[i],\n                    quoted: k.quoted,\n                }));\n                return literalMap(entries);\n            };\n        },\n        createPipeConverter: (name) => {\n            throw new Error(`Illegal State: Actions are not allowed to contain pipes. Pipe: ${name}`);\n        }\n    }, action);\n    const visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId, interpolationFunction, baseSourceSpan);\n    const actionStmts = [];\n    flattenStatements(actionWithoutBuiltins.visit(visitor, _Mode.Statement), actionStmts);\n    prependTemporaryDecls(visitor.temporaryCount, bindingId, actionStmts);\n    const lastIndex = actionStmts.length - 1;\n    let preventDefaultVar = null;\n    if (lastIndex >= 0) {\n        const lastStatement = actionStmts[lastIndex];\n        const returnExpr = convertStmtIntoExpression(lastStatement);\n        if (returnExpr) {\n            // Note: We need to cast the result of the method call to dynamic,\n            // as it might be a void method!\n            preventDefaultVar = createPreventDefaultVar(bindingId);\n            actionStmts[lastIndex] =\n                preventDefaultVar.set(returnExpr.cast(DYNAMIC_TYPE).notIdentical(literal(false)))\n                    .toDeclStmt(null, [StmtModifier.Final]);\n        }\n    }\n    return new ConvertActionBindingResult(actionStmts, preventDefaultVar);\n}\nfunction convertPropertyBindingBuiltins(converterFactory, ast) {\n    return convertBuiltins(converterFactory, ast);\n}\nclass ConvertPropertyBindingResult {\n    constructor(stmts, currValExpr) {\n        this.stmts = stmts;\n        this.currValExpr = currValExpr;\n    }\n}\nvar BindingForm;\n(function (BindingForm) {\n    // The general form of binding expression, supports all expressions.\n    BindingForm[BindingForm[\"General\"] = 0] = \"General\";\n    // Try to generate a simple binding (no temporaries or statements)\n    // otherwise generate a general binding\n    BindingForm[BindingForm[\"TrySimple\"] = 1] = \"TrySimple\";\n})(BindingForm || (BindingForm = {}));\n/**\n * Converts the given expression AST into an executable output AST, assuming the expression\n * is used in property binding. The expression has to be preprocessed via\n * `convertPropertyBindingBuiltins`.\n */\nfunction convertPropertyBinding(localResolver, implicitReceiver, expressionWithoutBuiltins, bindingId, form, interpolationFunction) {\n    if (!localResolver) {\n        localResolver = new DefaultLocalResolver();\n    }\n    const currValExpr = createCurrValueExpr(bindingId);\n    const visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId, interpolationFunction);\n    const outputExpr = expressionWithoutBuiltins.visit(visitor, _Mode.Expression);\n    const stmts = getStatementsFromVisitor(visitor, bindingId);\n    if (visitor.temporaryCount === 0 && form == BindingForm.TrySimple) {\n        return new ConvertPropertyBindingResult([], outputExpr);\n    }\n    stmts.push(currValExpr.set(outputExpr).toDeclStmt(DYNAMIC_TYPE, [StmtModifier.Final]));\n    return new ConvertPropertyBindingResult(stmts, currValExpr);\n}\n/**\n * Given some expression, such as a binding or interpolation expression, and a context expression to\n * look values up on, visit each facet of the given expression resolving values from the context\n * expression such that a list of arguments can be derived from the found values that can be used as\n * arguments to an external update instruction.\n *\n * @param localResolver The resolver to use to look up expressions by name appropriately\n * @param contextVariableExpression The expression representing the context variable used to create\n * the final argument expressions\n * @param expressionWithArgumentsToExtract The expression to visit to figure out what values need to\n * be resolved and what arguments list to build.\n * @param bindingId A name prefix used to create temporary variable names if they're needed for the\n * arguments generated\n * @returns An array of expressions that can be passed as arguments to instruction expressions like\n * `o.importExpr(R3.propertyInterpolate).callFn(result)`\n */\nfunction convertUpdateArguments(localResolver, contextVariableExpression, expressionWithArgumentsToExtract, bindingId) {\n    const visitor = new _AstToIrVisitor(localResolver, contextVariableExpression, bindingId, undefined);\n    const outputExpr = expressionWithArgumentsToExtract.visit(visitor, _Mode.Expression);\n    const stmts = getStatementsFromVisitor(visitor, bindingId);\n    // Removing the first argument, because it was a length for ViewEngine, not Ivy.\n    let args = outputExpr.args.slice(1);\n    if (expressionWithArgumentsToExtract instanceof Interpolation) {\n        // If we're dealing with an interpolation of 1 value with an empty prefix and suffix, reduce the\n        // args returned to just the value, because we're going to pass it to a special instruction.\n        const strings = expressionWithArgumentsToExtract.strings;\n        if (args.length === 3 && strings[0] === '' && strings[1] === '') {\n            // Single argument interpolate instructions.\n            args = [args[1]];\n        }\n        else if (args.length >= 19) {\n            // 19 or more arguments must be passed to the `interpolateV`-style instructions, which accept\n            // an array of arguments\n            args = [literalArr(args)];\n        }\n    }\n    return { stmts, args };\n}\nfunction getStatementsFromVisitor(visitor, bindingId) {\n    const stmts = [];\n    for (let i = 0; i < visitor.temporaryCount; i++) {\n        stmts.push(temporaryDeclaration(bindingId, i));\n    }\n    return stmts;\n}\nfunction convertBuiltins(converterFactory, ast) {\n    const visitor = new _BuiltinAstConverter(converterFactory);\n    return ast.visit(visitor);\n}\nfunction temporaryName(bindingId, temporaryNumber) {\n    return `tmp_${bindingId}_${temporaryNumber}`;\n}\nfunction temporaryDeclaration(bindingId, temporaryNumber) {\n    return new DeclareVarStmt(temporaryName(bindingId, temporaryNumber), NULL_EXPR);\n}\nfunction prependTemporaryDecls(temporaryCount, bindingId, statements) {\n    for (let i = temporaryCount - 1; i >= 0; i--) {\n        statements.unshift(temporaryDeclaration(bindingId, i));\n    }\n}\nvar _Mode;\n(function (_Mode) {\n    _Mode[_Mode[\"Statement\"] = 0] = \"Statement\";\n    _Mode[_Mode[\"Expression\"] = 1] = \"Expression\";\n})(_Mode || (_Mode = {}));\nfunction ensureStatementMode(mode, ast) {\n    if (mode !== _Mode.Statement) {\n        throw new Error(`Expected a statement, but saw ${ast}`);\n    }\n}\nfunction ensureExpressionMode(mode, ast) {\n    if (mode !== _Mode.Expression) {\n        throw new Error(`Expected an expression, but saw ${ast}`);\n    }\n}\nfunction convertToStatementIfNeeded(mode, expr) {\n    if (mode === _Mode.Statement) {\n        return expr.toStmt();\n    }\n    else {\n        return expr;\n    }\n}\nclass _BuiltinAstConverter extends AstTransformer$1 {\n    constructor(_converterFactory) {\n        super();\n        this._converterFactory = _converterFactory;\n    }\n    visitPipe(ast, context) {\n        const args = [ast.exp, ...ast.args].map(ast => ast.visit(this, context));\n        return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createPipeConverter(ast.name, args.length));\n    }\n    visitLiteralArray(ast, context) {\n        const args = ast.expressions.map(ast => ast.visit(this, context));\n        return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createLiteralArrayConverter(ast.expressions.length));\n    }\n    visitLiteralMap(ast, context) {\n        const args = ast.values.map(ast => ast.visit(this, context));\n        return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createLiteralMapConverter(ast.keys));\n    }\n}\nclass _AstToIrVisitor {\n    constructor(_localResolver, _implicitReceiver, bindingId, interpolationFunction, baseSourceSpan) {\n        this._localResolver = _localResolver;\n        this._implicitReceiver = _implicitReceiver;\n        this.bindingId = bindingId;\n        this.interpolationFunction = interpolationFunction;\n        this.baseSourceSpan = baseSourceSpan;\n        this._nodeMap = new Map();\n        this._resultMap = new Map();\n        this._currentTemporary = 0;\n        this.temporaryCount = 0;\n    }\n    visitBinary(ast, mode) {\n        let op;\n        switch (ast.operation) {\n            case '+':\n                op = BinaryOperator.Plus;\n                break;\n            case '-':\n                op = BinaryOperator.Minus;\n                break;\n            case '*':\n                op = BinaryOperator.Multiply;\n                break;\n            case '/':\n                op = BinaryOperator.Divide;\n                break;\n            case '%':\n                op = BinaryOperator.Modulo;\n                break;\n            case '&&':\n                op = BinaryOperator.And;\n                break;\n            case '||':\n                op = BinaryOperator.Or;\n                break;\n            case '==':\n                op = BinaryOperator.Equals;\n                break;\n            case '!=':\n                op = BinaryOperator.NotEquals;\n                break;\n            case '===':\n                op = BinaryOperator.Identical;\n                break;\n            case '!==':\n                op = BinaryOperator.NotIdentical;\n                break;\n            case '<':\n                op = BinaryOperator.Lower;\n                break;\n            case '>':\n                op = BinaryOperator.Bigger;\n                break;\n            case '<=':\n                op = BinaryOperator.LowerEquals;\n                break;\n            case '>=':\n                op = BinaryOperator.BiggerEquals;\n                break;\n            default:\n                throw new Error(`Unsupported operation ${ast.operation}`);\n        }\n        return convertToStatementIfNeeded(mode, new BinaryOperatorExpr(op, this._visit(ast.left, _Mode.Expression), this._visit(ast.right, _Mode.Expression), undefined, this.convertSourceSpan(ast.span)));\n    }\n    visitChain(ast, mode) {\n        ensureStatementMode(mode, ast);\n        return this.visitAll(ast.expressions, mode);\n    }\n    visitConditional(ast, mode) {\n        const value = this._visit(ast.condition, _Mode.Expression);\n        return convertToStatementIfNeeded(mode, value.conditional(this._visit(ast.trueExp, _Mode.Expression), this._visit(ast.falseExp, _Mode.Expression), this.convertSourceSpan(ast.span)));\n    }\n    visitPipe(ast, mode) {\n        throw new Error(`Illegal state: Pipes should have been converted into functions. Pipe: ${ast.name}`);\n    }\n    visitFunctionCall(ast, mode) {\n        const convertedArgs = this.visitAll(ast.args, _Mode.Expression);\n        let fnResult;\n        if (ast instanceof BuiltinFunctionCall) {\n            fnResult = ast.converter(convertedArgs);\n        }\n        else {\n            fnResult = this._visit(ast.target, _Mode.Expression)\n                .callFn(convertedArgs, this.convertSourceSpan(ast.span));\n        }\n        return convertToStatementIfNeeded(mode, fnResult);\n    }\n    visitImplicitReceiver(ast, mode) {\n        ensureExpressionMode(mode, ast);\n        return this._implicitReceiver;\n    }\n    visitInterpolation(ast, mode) {\n        ensureExpressionMode(mode, ast);\n        const args = [literal(ast.expressions.length)];\n        for (let i = 0; i < ast.strings.length - 1; i++) {\n            args.push(literal(ast.strings[i]));\n            args.push(this._visit(ast.expressions[i], _Mode.Expression));\n        }\n        args.push(literal(ast.strings[ast.strings.length - 1]));\n        if (this.interpolationFunction) {\n            return this.interpolationFunction(args);\n        }\n        return ast.expressions.length <= 9 ?\n            importExpr(Identifiers.inlineInterpolate).callFn(args) :\n            importExpr(Identifiers.interpolate).callFn([\n                args[0], literalArr(args.slice(1), undefined, this.convertSourceSpan(ast.span))\n            ]);\n    }\n    visitKeyedRead(ast, mode) {\n        const leftMostSafe = this.leftMostSafeNode(ast);\n        if (leftMostSafe) {\n            return this.convertSafeAccess(ast, leftMostSafe, mode);\n        }\n        else {\n            return convertToStatementIfNeeded(mode, this._visit(ast.obj, _Mode.Expression).key(this._visit(ast.key, _Mode.Expression)));\n        }\n    }\n    visitKeyedWrite(ast, mode) {\n        const obj = this._visit(ast.obj, _Mode.Expression);\n        const key = this._visit(ast.key, _Mode.Expression);\n        const value = this._visit(ast.value, _Mode.Expression);\n        return convertToStatementIfNeeded(mode, obj.key(key).set(value));\n    }\n    visitLiteralArray(ast, mode) {\n        throw new Error(`Illegal State: literal arrays should have been converted into functions`);\n    }\n    visitLiteralMap(ast, mode) {\n        throw new Error(`Illegal State: literal maps should have been converted into functions`);\n    }\n    visitLiteralPrimitive(ast, mode) {\n        // For literal values of null, undefined, true, or false allow type interference\n        // to infer the type.\n        const type = ast.value === null || ast.value === undefined || ast.value === true || ast.value === true ?\n            INFERRED_TYPE :\n            undefined;\n        return convertToStatementIfNeeded(mode, literal(ast.value, type, this.convertSourceSpan(ast.span)));\n    }\n    _getLocal(name) { return this._localResolver.getLocal(name); }\n    visitMethodCall(ast, mode) {\n        if (ast.receiver instanceof ImplicitReceiver && ast.name == '$any') {\n            const args = this.visitAll(ast.args, _Mode.Expression);\n            if (args.length != 1) {\n                throw new Error(`Invalid call to $any, expected 1 argument but received ${args.length || 'none'}`);\n            }\n            return args[0].cast(DYNAMIC_TYPE, this.convertSourceSpan(ast.span));\n        }\n        const leftMostSafe = this.leftMostSafeNode(ast);\n        if (leftMostSafe) {\n            return this.convertSafeAccess(ast, leftMostSafe, mode);\n        }\n        else {\n            const args = this.visitAll(ast.args, _Mode.Expression);\n            let result = null;\n            const receiver = this._visit(ast.receiver, _Mode.Expression);\n            if (receiver === this._implicitReceiver) {\n                const varExpr = this._getLocal(ast.name);\n                if (varExpr) {\n                    result = varExpr.callFn(args);\n                }\n            }\n            if (result == null) {\n                result = receiver.callMethod(ast.name, args, this.convertSourceSpan(ast.span));\n            }\n            return convertToStatementIfNeeded(mode, result);\n        }\n    }\n    visitPrefixNot(ast, mode) {\n        return convertToStatementIfNeeded(mode, not(this._visit(ast.expression, _Mode.Expression)));\n    }\n    visitNonNullAssert(ast, mode) {\n        return convertToStatementIfNeeded(mode, assertNotNull(this._visit(ast.expression, _Mode.Expression)));\n    }\n    visitPropertyRead(ast, mode) {\n        const leftMostSafe = this.leftMostSafeNode(ast);\n        if (leftMostSafe) {\n            return this.convertSafeAccess(ast, leftMostSafe, mode);\n        }\n        else {\n            let result = null;\n            const receiver = this._visit(ast.receiver, _Mode.Expression);\n            if (receiver === this._implicitReceiver) {\n                result = this._getLocal(ast.name);\n            }\n            if (result == null) {\n                result = receiver.prop(ast.name);\n            }\n            return convertToStatementIfNeeded(mode, result);\n        }\n    }\n    visitPropertyWrite(ast, mode) {\n        const receiver = this._visit(ast.receiver, _Mode.Expression);\n        let varExpr = null;\n        if (receiver === this._implicitReceiver) {\n            const localExpr = this._getLocal(ast.name);\n            if (localExpr) {\n                if (localExpr instanceof ReadPropExpr) {\n                    // If the local variable is a property read expression, it's a reference\n                    // to a 'context.property' value and will be used as the target of the\n                    // write expression.\n                    varExpr = localExpr;\n                }\n                else {\n                    // Otherwise it's an error.\n                    throw new Error('Cannot assign to a reference or variable!');\n                }\n            }\n        }\n        // If no local expression could be produced, use the original receiver's\n        // property as the target.\n        if (varExpr === null) {\n            varExpr = receiver.prop(ast.name);\n        }\n        return convertToStatementIfNeeded(mode, varExpr.set(this._visit(ast.value, _Mode.Expression)));\n    }\n    visitSafePropertyRead(ast, mode) {\n        return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);\n    }\n    visitSafeMethodCall(ast, mode) {\n        return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);\n    }\n    visitAll(asts, mode) { return asts.map(ast => this._visit(ast, mode)); }\n    visitQuote(ast, mode) {\n        throw new Error(`Quotes are not supported for evaluation!\n        Statement: ${ast.uninterpretedExpression} located at ${ast.location}`);\n    }\n    _visit(ast, mode) {\n        const result = this._resultMap.get(ast);\n        if (result)\n            return result;\n        return (this._nodeMap.get(ast) || ast).visit(this, mode);\n    }\n    convertSafeAccess(ast, leftMostSafe, mode) {\n        // If the expression contains a safe access node on the left it needs to be converted to\n        // an expression that guards the access to the member by checking the receiver for blank. As\n        // execution proceeds from left to right, the left most part of the expression must be guarded\n        // first but, because member access is left associative, the right side of the expression is at\n        // the top of the AST. The desired result requires lifting a copy of the the left part of the\n        // expression up to test it for blank before generating the unguarded version.\n        // Consider, for example the following expression: a?.b.c?.d.e\n        // This results in the ast:\n        //         .\n        //        / \\\n        //       ?.   e\n        //      /  \\\n        //     .    d\n        //    / \\\n        //   ?.  c\n        //  /  \\\n        // a    b\n        // The following tree should be generated:\n        //\n        //        /---- ? ----\\\n        //       /      |      \\\n        //     a   /--- ? ---\\  null\n        //        /     |     \\\n        //       .      .     null\n        //      / \\    / \\\n        //     .  c   .   e\n        //    / \\    / \\\n        //   a   b  ,   d\n        //         / \\\n        //        .   c\n        //       / \\\n        //      a   b\n        //\n        // Notice that the first guard condition is the left hand of the left most safe access node\n        // which comes in as leftMostSafe to this routine.\n        let guardedExpression = this._visit(leftMostSafe.receiver, _Mode.Expression);\n        let temporary = undefined;\n        if (this.needsTemporary(leftMostSafe.receiver)) {\n            // If the expression has method calls or pipes then we need to save the result into a\n            // temporary variable to avoid calling stateful or impure code more than once.\n            temporary = this.allocateTemporary();\n            // Preserve the result in the temporary variable\n            guardedExpression = temporary.set(guardedExpression);\n            // Ensure all further references to the guarded expression refer to the temporary instead.\n            this._resultMap.set(leftMostSafe.receiver, temporary);\n        }\n        const condition = guardedExpression.isBlank();\n        // Convert the ast to an unguarded access to the receiver's member. The map will substitute\n        // leftMostNode with its unguarded version in the call to `this.visit()`.\n        if (leftMostSafe instanceof SafeMethodCall) {\n            this._nodeMap.set(leftMostSafe, new MethodCall(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name, leftMostSafe.args));\n        }\n        else {\n            this._nodeMap.set(leftMostSafe, new PropertyRead(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name));\n        }\n        // Recursively convert the node now without the guarded member access.\n        const access = this._visit(ast, _Mode.Expression);\n        // Remove the mapping. This is not strictly required as the converter only traverses each node\n        // once but is safer if the conversion is changed to traverse the nodes more than once.\n        this._nodeMap.delete(leftMostSafe);\n        // If we allocated a temporary, release it.\n        if (temporary) {\n            this.releaseTemporary(temporary);\n        }\n        // Produce the conditional\n        return convertToStatementIfNeeded(mode, condition.conditional(literal(null), access));\n    }\n    // Given a expression of the form a?.b.c?.d.e the the left most safe node is\n    // the (a?.b). The . and ?. are left associative thus can be rewritten as:\n    // ((((a?.c).b).c)?.d).e. This returns the most deeply nested safe read or\n    // safe method call as this needs be transform initially to:\n    //   a == null ? null : a.c.b.c?.d.e\n    // then to:\n    //   a == null ? null : a.b.c == null ? null : a.b.c.d.e\n    leftMostSafeNode(ast) {\n        const visit = (visitor, ast) => {\n            return (this._nodeMap.get(ast) || ast).visit(visitor);\n        };\n        return ast.visit({\n            visitBinary(ast) { return null; },\n            visitChain(ast) { return null; },\n            visitConditional(ast) { return null; },\n            visitFunctionCall(ast) { return null; },\n            visitImplicitReceiver(ast) { return null; },\n            visitInterpolation(ast) { return null; },\n            visitKeyedRead(ast) { return visit(this, ast.obj); },\n            visitKeyedWrite(ast) { return null; },\n            visitLiteralArray(ast) { return null; },\n            visitLiteralMap(ast) { return null; },\n            visitLiteralPrimitive(ast) { return null; },\n            visitMethodCall(ast) { return visit(this, ast.receiver); },\n            visitPipe(ast) { return null; },\n            visitPrefixNot(ast) { return null; },\n            visitNonNullAssert(ast) { return null; },\n            visitPropertyRead(ast) { return visit(this, ast.receiver); },\n            visitPropertyWrite(ast) { return null; },\n            visitQuote(ast) { return null; },\n            visitSafeMethodCall(ast) { return visit(this, ast.receiver) || ast; },\n            visitSafePropertyRead(ast) {\n                return visit(this, ast.receiver) || ast;\n            }\n        });\n    }\n    // Returns true of the AST includes a method or a pipe indicating that, if the\n    // expression is used as the target of a safe property or method access then\n    // the expression should be stored into a temporary variable.\n    needsTemporary(ast) {\n        const visit = (visitor, ast) => {\n            return ast && (this._nodeMap.get(ast) || ast).visit(visitor);\n        };\n        const visitSome = (visitor, ast) => {\n            return ast.some(ast => visit(visitor, ast));\n        };\n        return ast.visit({\n            visitBinary(ast) { return visit(this, ast.left) || visit(this, ast.right); },\n            visitChain(ast) { return false; },\n            visitConditional(ast) {\n                return visit(this, ast.condition) || visit(this, ast.trueExp) ||\n                    visit(this, ast.falseExp);\n            },\n            visitFunctionCall(ast) { return true; },\n            visitImplicitReceiver(ast) { return false; },\n            visitInterpolation(ast) { return visitSome(this, ast.expressions); },\n            visitKeyedRead(ast) { return false; },\n            visitKeyedWrite(ast) { return false; },\n            visitLiteralArray(ast) { return true; },\n            visitLiteralMap(ast) { return true; },\n            visitLiteralPrimitive(ast) { return false; },\n            visitMethodCall(ast) { return true; },\n            visitPipe(ast) { return true; },\n            visitPrefixNot(ast) { return visit(this, ast.expression); },\n            visitNonNullAssert(ast) { return visit(this, ast.expression); },\n            visitPropertyRead(ast) { return false; },\n            visitPropertyWrite(ast) { return false; },\n            visitQuote(ast) { return false; },\n            visitSafeMethodCall(ast) { return true; },\n            visitSafePropertyRead(ast) { return false; }\n        });\n    }\n    allocateTemporary() {\n        const tempNumber = this._currentTemporary++;\n        this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount);\n        return new ReadVarExpr(temporaryName(this.bindingId, tempNumber));\n    }\n    releaseTemporary(temporary) {\n        this._currentTemporary--;\n        if (temporary.name != temporaryName(this.bindingId, this._currentTemporary)) {\n            throw new Error(`Temporary ${temporary.name} released out of order`);\n        }\n    }\n    /**\n     * Creates an absolute `ParseSourceSpan` from the relative `ParseSpan`.\n     *\n     * `ParseSpan` objects are relative to the start of the expression.\n     * This method converts these to full `ParseSourceSpan` objects that\n     * show where the span is within the overall source file.\n     *\n     * @param span the relative span to convert.\n     * @returns a `ParseSourceSpan` for the the given span or null if no\n     * `baseSourceSpan` was provided to this class.\n     */\n    convertSourceSpan(span) {\n        if (this.baseSourceSpan) {\n            const start = this.baseSourceSpan.start.moveBy(span.start);\n            const end = this.baseSourceSpan.start.moveBy(span.end);\n            return new ParseSourceSpan(start, end);\n        }\n        else {\n            return null;\n        }\n    }\n}\nfunction flattenStatements(arg, output) {\n    if (Array.isArray(arg)) {\n        arg.forEach((entry) => flattenStatements(entry, output));\n    }\n    else {\n        output.push(arg);\n    }\n}\nclass DefaultLocalResolver {\n    getLocal(name) {\n        if (name === EventHandlerVars.event.name) {\n            return EventHandlerVars.event;\n        }\n        return null;\n    }\n}\nfunction createCurrValueExpr(bindingId) {\n    return variable(`currVal_${bindingId}`); // fix syntax highlighting: `\n}\nfunction createPreventDefaultVar(bindingId) {\n    return variable(`pd_${bindingId}`);\n}\nfunction convertStmtIntoExpression(stmt) {\n    if (stmt instanceof ExpressionStatement) {\n        return stmt.expr;\n    }\n    else if (stmt instanceof ReturnStatement) {\n        return stmt.value;\n    }\n    return null;\n}\nclass BuiltinFunctionCall extends FunctionCall {\n    constructor(span, args, converter) {\n        super(span, null, args);\n        this.args = args;\n        this.converter = converter;\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n *\n * Please make sure to keep to edits in sync with the source file.\n *\n * Source:\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n *\n * The original file level comment is reproduced below\n */\n/*\n  This is a limited shim for ShadowDOM css styling.\n  https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles\n\n  The intention here is to support only the styling features which can be\n  relatively simply implemented. The goal is to allow users to avoid the\n  most obvious pitfalls and do so without compromising performance significantly.\n  For ShadowDOM styling that's not covered here, a set of best practices\n  can be provided that should allow users to accomplish more complex styling.\n\n  The following is a list of specific ShadowDOM styling features and a brief\n  discussion of the approach used to shim.\n\n  Shimmed features:\n\n  * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host\n  element using the :host rule. To shim this feature, the :host styles are\n  reformatted and prefixed with a given scope name and promoted to a\n  document level stylesheet.\n  For example, given a scope name of .foo, a rule like this:\n\n    :host {\n        background: red;\n      }\n    }\n\n  becomes:\n\n    .foo {\n      background: red;\n    }\n\n  * encapsulation: Styles defined within ShadowDOM, apply only to\n  dom inside the ShadowDOM. Polymer uses one of two techniques to implement\n  this feature.\n\n  By default, rules are prefixed with the host element tag name\n  as a descendant selector. This ensures styling does not leak out of the 'top'\n  of the element's ShadowDOM. For example,\n\n  div {\n      font-weight: bold;\n    }\n\n  becomes:\n\n  x-foo div {\n      font-weight: bold;\n    }\n\n  becomes:\n\n\n  Alternatively, if WebComponents.ShadowCSS.strictStyling is set to true then\n  selectors are scoped by adding an attribute selector suffix to each\n  simple selector that contains the host element tag name. Each element\n  in the element's ShadowDOM template is also given the scope attribute.\n  Thus, these rules match only elements that have the scope attribute.\n  For example, given a scope name of x-foo, a rule like this:\n\n    div {\n      font-weight: bold;\n    }\n\n  becomes:\n\n    div[x-foo] {\n      font-weight: bold;\n    }\n\n  Note that elements that are dynamically added to a scope must have the scope\n  selector added to them manually.\n\n  * upper/lower bound encapsulation: Styles which are defined outside a\n  shadowRoot should not cross the ShadowDOM boundary and should not apply\n  inside a shadowRoot.\n\n  This styling behavior is not emulated. Some possible ways to do this that\n  were rejected due to complexity and/or performance concerns include: (1) reset\n  every possible property for every possible selector for a given scope name;\n  (2) re-implement css in javascript.\n\n  As an alternative, users should make sure to use selectors\n  specific to the scope in which they are working.\n\n  * ::distributed: This behavior is not emulated. It's often not necessary\n  to style the contents of a specific insertion point and instead, descendants\n  of the host element can be styled selectively. Users can also create an\n  extra node around an insertion point and style that node's contents\n  via descendent selectors. For example, with a shadowRoot like this:\n\n    <style>\n      ::content(div) {\n        background: red;\n      }\n    </style>\n    <content></content>\n\n  could become:\n\n    <style>\n      / *@polyfill .content-container div * /\n      ::content(div) {\n        background: red;\n      }\n    </style>\n    <div class=\"content-container\">\n      <content></content>\n    </div>\n\n  Note the use of @polyfill in the comment above a ShadowDOM specific style\n  declaration. This is a directive to the styling shim to use the selector\n  in comments in lieu of the next selector when running under polyfill.\n*/\nclass ShadowCss {\n    constructor() {\n        this.strictStyling = true;\n    }\n    /*\n    * Shim some cssText with the given selector. Returns cssText that can\n    * be included in the document via WebComponents.ShadowCSS.addCssToDocument(css).\n    *\n    * When strictStyling is true:\n    * - selector is the attribute added to all elements inside the host,\n    * - hostSelector is the attribute added to the host itself.\n    */\n    shimCssText(cssText, selector, hostSelector = '') {\n        const commentsWithHash = extractCommentsWithHash(cssText);\n        cssText = stripComments(cssText);\n        cssText = this._insertDirectives(cssText);\n        const scopedCssText = this._scopeCssText(cssText, selector, hostSelector);\n        return [scopedCssText, ...commentsWithHash].join('\\n');\n    }\n    _insertDirectives(cssText) {\n        cssText = this._insertPolyfillDirectivesInCssText(cssText);\n        return this._insertPolyfillRulesInCssText(cssText);\n    }\n    /*\n     * Process styles to convert native ShadowDOM rules that will trip\n     * up the css parser; we rely on decorating the stylesheet with inert rules.\n     *\n     * For example, we convert this rule:\n     *\n     * polyfill-next-selector { content: ':host menu-item'; }\n     * ::content menu-item {\n     *\n     * to this:\n     *\n     * scopeName menu-item {\n     *\n    **/\n    _insertPolyfillDirectivesInCssText(cssText) {\n        // Difference with webcomponents.js: does not handle comments\n        return cssText.replace(_cssContentNextSelectorRe, function (...m) { return m[2] + '{'; });\n    }\n    /*\n     * Process styles to add rules which will only apply under the polyfill\n     *\n     * For example, we convert this rule:\n     *\n     * polyfill-rule {\n     *   content: ':host menu-item';\n     * ...\n     * }\n     *\n     * to this:\n     *\n     * scopeName menu-item {...}\n     *\n    **/\n    _insertPolyfillRulesInCssText(cssText) {\n        // Difference with webcomponents.js: does not handle comments\n        return cssText.replace(_cssContentRuleRe, (...m) => {\n            const rule = m[0].replace(m[1], '').replace(m[2], '');\n            return m[4] + rule;\n        });\n    }\n    /* Ensure styles are scoped. Pseudo-scoping takes a rule like:\n     *\n     *  .foo {... }\n     *\n     *  and converts this to\n     *\n     *  scopeName .foo { ... }\n    */\n    _scopeCssText(cssText, scopeSelector, hostSelector) {\n        const unscopedRules = this._extractUnscopedRulesFromCssText(cssText);\n        // replace :host and :host-context -shadowcsshost and -shadowcsshost respectively\n        cssText = this._insertPolyfillHostInCssText(cssText);\n        cssText = this._convertColonHost(cssText);\n        cssText = this._convertColonHostContext(cssText);\n        cssText = this._convertShadowDOMSelectors(cssText);\n        if (scopeSelector) {\n            cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);\n        }\n        cssText = cssText + '\\n' + unscopedRules;\n        return cssText.trim();\n    }\n    /*\n     * Process styles to add rules which will only apply under the polyfill\n     * and do not process via CSSOM. (CSSOM is destructive to rules on rare\n     * occasions, e.g. -webkit-calc on Safari.)\n     * For example, we convert this rule:\n     *\n     * @polyfill-unscoped-rule {\n     *   content: 'menu-item';\n     * ... }\n     *\n     * to this:\n     *\n     * menu-item {...}\n     *\n    **/\n    _extractUnscopedRulesFromCssText(cssText) {\n        // Difference with webcomponents.js: does not handle comments\n        let r = '';\n        let m;\n        _cssContentUnscopedRuleRe.lastIndex = 0;\n        while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {\n            const rule = m[0].replace(m[2], '').replace(m[1], m[4]);\n            r += rule + '\\n\\n';\n        }\n        return r;\n    }\n    /*\n     * convert a rule like :host(.foo) > .bar { }\n     *\n     * to\n     *\n     * .foo<scopeName> > .bar\n    */\n    _convertColonHost(cssText) {\n        return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);\n    }\n    /*\n     * convert a rule like :host-context(.foo) > .bar { }\n     *\n     * to\n     *\n     * .foo<scopeName> > .bar, .foo scopeName > .bar { }\n     *\n     * and\n     *\n     * :host-context(.foo:host) .bar { ... }\n     *\n     * to\n     *\n     * .foo<scopeName> .bar { ... }\n    */\n    _convertColonHostContext(cssText) {\n        return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);\n    }\n    _convertColonRule(cssText, regExp, partReplacer) {\n        // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n        return cssText.replace(regExp, function (...m) {\n            if (m[2]) {\n                const parts = m[2].split(',');\n                const r = [];\n                for (let i = 0; i < parts.length; i++) {\n                    const p = parts[i].trim();\n                    if (!p)\n                        break;\n                    r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n                }\n                return r.join(',');\n            }\n            else {\n                return _polyfillHostNoCombinator + m[3];\n            }\n        });\n    }\n    _colonHostContextPartReplacer(host, part, suffix) {\n        if (part.indexOf(_polyfillHost) > -1) {\n            return this._colonHostPartReplacer(host, part, suffix);\n        }\n        else {\n            return host + part + suffix + ', ' + part + ' ' + host + suffix;\n        }\n    }\n    _colonHostPartReplacer(host, part, suffix) {\n        return host + part.replace(_polyfillHost, '') + suffix;\n    }\n    /*\n     * Convert combinators like ::shadow and pseudo-elements like ::content\n     * by replacing with space.\n    */\n    _convertShadowDOMSelectors(cssText) {\n        return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\n    }\n    // change a selector like 'div' to 'name div'\n    _scopeSelectors(cssText, scopeSelector, hostSelector) {\n        return processRules(cssText, (rule) => {\n            let selector = rule.selector;\n            let content = rule.content;\n            if (rule.selector[0] != '@') {\n                selector =\n                    this._scopeSelector(rule.selector, scopeSelector, hostSelector, this.strictStyling);\n            }\n            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||\n                rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n                content = this._scopeSelectors(rule.content, scopeSelector, hostSelector);\n            }\n            return new CssRule(selector, content);\n        });\n    }\n    _scopeSelector(selector, scopeSelector, hostSelector, strict) {\n        return selector.split(',')\n            .map(part => part.trim().split(_shadowDeepSelectors))\n            .map((deepParts) => {\n            const [shallowPart, ...otherParts] = deepParts;\n            const applyScope = (shallowPart) => {\n                if (this._selectorNeedsScoping(shallowPart, scopeSelector)) {\n                    return strict ?\n                        this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector) :\n                        this._applySelectorScope(shallowPart, scopeSelector, hostSelector);\n                }\n                else {\n                    return shallowPart;\n                }\n            };\n            return [applyScope(shallowPart), ...otherParts].join(' ');\n        })\n            .join(', ');\n    }\n    _selectorNeedsScoping(selector, scopeSelector) {\n        const re = this._makeScopeMatcher(scopeSelector);\n        return !re.test(selector);\n    }\n    _makeScopeMatcher(scopeSelector) {\n        const lre = /\\[/g;\n        const rre = /\\]/g;\n        scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n        return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n    }\n    _applySelectorScope(selector, scopeSelector, hostSelector) {\n        // Difference from webcomponents.js: scopeSelector could not be an array\n        return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);\n    }\n    // scope via name and [is=name]\n    _applySimpleSelectorScope(selector, scopeSelector, hostSelector) {\n        // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n        _polyfillHostRe.lastIndex = 0;\n        if (_polyfillHostRe.test(selector)) {\n            const replaceBy = this.strictStyling ? `[${hostSelector}]` : scopeSelector;\n            return selector\n                .replace(_polyfillHostNoCombinatorRe, (hnc, selector) => {\n                return selector.replace(/([^:]*)(:*)(.*)/, (_, before, colon, after) => {\n                    return before + replaceBy + colon + after;\n                });\n            })\n                .replace(_polyfillHostRe, replaceBy + ' ');\n        }\n        return scopeSelector + ' ' + selector;\n    }\n    // return a selector with [name] suffix on each simple selector\n    // e.g. .foo.bar > .zot becomes .foo[name].bar[name] > .zot[name]  /** @internal */\n    _applyStrictSelectorScope(selector, scopeSelector, hostSelector) {\n        const isRe = /\\[is=([^\\]]*)\\]/g;\n        scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\n        const attrName = '[' + scopeSelector + ']';\n        const _scopeSelectorPart = (p) => {\n            let scopedP = p.trim();\n            if (!scopedP) {\n                return '';\n            }\n            if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n                scopedP = this._applySimpleSelectorScope(p, scopeSelector, hostSelector);\n            }\n            else {\n                // remove :host since it should be unnecessary\n                const t = p.replace(_polyfillHostRe, '');\n                if (t.length > 0) {\n                    const matches = t.match(/([^:]*)(:*)(.*)/);\n                    if (matches) {\n                        scopedP = matches[1] + attrName + matches[2] + matches[3];\n                    }\n                }\n            }\n            return scopedP;\n        };\n        const safeContent = new SafeSelector(selector);\n        selector = safeContent.content();\n        let scopedSelector = '';\n        let startIndex = 0;\n        let res;\n        const sep = /( |>|\\+|~(?!=))\\s*/g;\n        // If a selector appears before :host it should not be shimmed as it\n        // matches on ancestor elements and not on elements in the host's shadow\n        // `:host-context(div)` is transformed to\n        // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n        // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n        // Historically `component-tag:host` was matching the component so we also want to preserve\n        // this behavior to avoid breaking legacy apps (it should not match).\n        // The behavior should be:\n        // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n        // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n        //   `:host-context(tag)`)\n        const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n        // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n        let shouldScope = !hasHost;\n        while ((res = sep.exec(selector)) !== null) {\n            const separator = res[1];\n            const part = selector.slice(startIndex, res.index).trim();\n            shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n            const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\n            scopedSelector += `${scopedPart} ${separator} `;\n            startIndex = sep.lastIndex;\n        }\n        const part = selector.substring(startIndex);\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n        scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n        // replace the placeholders with their original values\n        return safeContent.restore(scopedSelector);\n    }\n    _insertPolyfillHostInCssText(selector) {\n        return selector.replace(_colonHostContextRe, _polyfillHostContext)\n            .replace(_colonHostRe, _polyfillHost);\n    }\n}\nclass SafeSelector {\n    constructor(selector) {\n        this.placeholders = [];\n        this.index = 0;\n        // Replaces attribute selectors with placeholders.\n        // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n        selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n            const replaceBy = `__ph-${this.index}__`;\n            this.placeholders.push(keep);\n            this.index++;\n            return replaceBy;\n        });\n        // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n        // WS and \"+\" would otherwise be interpreted as selector separators.\n        this._content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n            const replaceBy = `__ph-${this.index}__`;\n            this.placeholders.push(exp);\n            this.index++;\n            return pseudo + replaceBy;\n        });\n    }\n    restore(content) {\n        return content.replace(/__ph-(\\d+)__/g, (ph, index) => this.placeholders[+index]);\n    }\n    content() { return this._content; }\n}\nconst _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\\s]*?(['\"])(.*?)\\1[;\\s]*}([^{]*?){/gim;\nconst _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\\s]*(['\"])(.*?)\\3)[;\\s]*[^}]*}/gim;\nconst _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\\s]*(['\"])(.*?)\\3)[;\\s]*[^}]*}/gim;\nconst _polyfillHost = '-shadowcsshost';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nconst _polyfillHostContext = '-shadowcsscontext';\nconst _parenSuffix = ')(?:\\\\((' +\n    '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' +\n    ')\\\\))?([^,{]*)';\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nconst _shadowDOMSelectorsRe = [\n    /::shadow/g,\n    /::content/g,\n    // Deprecated selectors\n    /\\/shadow-deep\\//g,\n    /\\/shadow\\//g,\n];\n// The deep combinator is deprecated in the CSS spec\n// Support for `>>>`, `deep`, `::ng-deep` is then also deprecated and will be removed in the future.\n// see https://github.com/angular/angular/pull/17677\nconst _shadowDeepSelectors = /(?:>>>)|(?:\\/deep\\/)|(?:::ng-deep)/g;\nconst _selectorReSuffix = '([>\\\\s~+\\[.,{:][\\\\s\\\\S]*)?$';\nconst _polyfillHostRe = /-shadowcsshost/gim;\nconst _colonHostRe = /:host/gim;\nconst _colonHostContextRe = /:host-context/gim;\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nfunction stripComments(input) {\n    return input.replace(_commentRe, '');\n}\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nfunction extractCommentsWithHash(input) {\n    return input.match(_commentWithHashRe) || [];\n}\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nconst _curlyRe = /([{}])/g;\nconst OPEN_CURLY = '{';\nconst CLOSE_CURLY = '}';\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\nclass CssRule {\n    constructor(selector, content) {\n        this.selector = selector;\n        this.content = content;\n    }\n}\nfunction processRules(input, ruleCallback) {\n    const inputWithEscapedBlocks = escapeBlocks(input);\n    let nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function (...m) {\n        const selector = m[2];\n        let content = '';\n        let suffix = m[4];\n        let contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        const rule = ruleCallback(new CssRule(selector, content));\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n    });\n}\nclass StringWithEscapedBlocks {\n    constructor(escapedString, blocks) {\n        this.escapedString = escapedString;\n        this.blocks = blocks;\n    }\n}\nfunction escapeBlocks(input) {\n    const inputParts = input.split(_curlyRe);\n    const resultParts = [];\n    const escapedBlocks = [];\n    let bracketCount = 0;\n    let currentBlockParts = [];\n    for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        const part = inputParts[partIndex];\n        if (part == CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part == OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst COMPONENT_VARIABLE = '%COMP%';\nconst HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nconst CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\nclass StylesCompileDependency {\n    constructor(name, moduleUrl, setValue) {\n        this.name = name;\n        this.moduleUrl = moduleUrl;\n        this.setValue = setValue;\n    }\n}\nclass CompiledStylesheet {\n    constructor(outputCtx, stylesVar, dependencies, isShimmed, meta) {\n        this.outputCtx = outputCtx;\n        this.stylesVar = stylesVar;\n        this.dependencies = dependencies;\n        this.isShimmed = isShimmed;\n        this.meta = meta;\n    }\n}\nclass StyleCompiler {\n    constructor(_urlResolver) {\n        this._urlResolver = _urlResolver;\n        this._shadowCss = new ShadowCss();\n    }\n    compileComponent(outputCtx, comp) {\n        const template = comp.template;\n        return this._compileStyles(outputCtx, comp, new CompileStylesheetMetadata({\n            styles: template.styles,\n            styleUrls: template.styleUrls,\n            moduleUrl: identifierModuleUrl(comp.type)\n        }), this.needsStyleShim(comp), true);\n    }\n    compileStyles(outputCtx, comp, stylesheet, shim = this.needsStyleShim(comp)) {\n        return this._compileStyles(outputCtx, comp, stylesheet, shim, false);\n    }\n    needsStyleShim(comp) {\n        return comp.template.encapsulation === ViewEncapsulation.Emulated;\n    }\n    _compileStyles(outputCtx, comp, stylesheet, shim, isComponentStylesheet) {\n        const styleExpressions = stylesheet.styles.map(plainStyle => literal(this._shimIfNeeded(plainStyle, shim)));\n        const dependencies = [];\n        stylesheet.styleUrls.forEach((styleUrl) => {\n            const exprIndex = styleExpressions.length;\n            // Note: This placeholder will be filled later.\n            styleExpressions.push(null);\n            dependencies.push(new StylesCompileDependency(getStylesVarName(null), styleUrl, (value) => styleExpressions[exprIndex] = outputCtx.importExpr(value)));\n        });\n        // styles variable contains plain strings and arrays of other styles arrays (recursive),\n        // so we set its type to dynamic.\n        const stylesVar = getStylesVarName(isComponentStylesheet ? comp : null);\n        const stmt = variable(stylesVar)\n            .set(literalArr(styleExpressions, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const])))\n            .toDeclStmt(null, isComponentStylesheet ? [StmtModifier.Final] : [\n            StmtModifier.Final, StmtModifier.Exported\n        ]);\n        outputCtx.statements.push(stmt);\n        return new CompiledStylesheet(outputCtx, stylesVar, dependencies, shim, stylesheet);\n    }\n    _shimIfNeeded(style, shim) {\n        return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;\n    }\n}\nfunction getStylesVarName(component) {\n    let result = `styles`;\n    if (component) {\n        result += `_${identifierName(component.type)}`;\n    }\n    return result;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A path is an ordered set of elements. Typically a path is to  a\n * particular offset in a source file. The head of the list is the top\n * most node. The tail is the node that contains the offset directly.\n *\n * For example, the expression `a + b + c` might have an ast that looks\n * like:\n *     +\n *    / \\\n *   a   +\n *      / \\\n *     b   c\n *\n * The path to the node at offset 9 would be `['+' at 1-10, '+' at 7-10,\n * 'c' at 9-10]` and the path the node at offset 1 would be\n * `['+' at 1-10, 'a' at 1-2]`.\n */\nclass AstPath {\n    constructor(path, position = -1) {\n        this.path = path;\n        this.position = position;\n    }\n    get empty() { return !this.path || !this.path.length; }\n    get head() { return this.path[0]; }\n    get tail() { return this.path[this.path.length - 1]; }\n    parentOf(node) {\n        return node && this.path[this.path.indexOf(node) - 1];\n    }\n    childOf(node) { return this.path[this.path.indexOf(node) + 1]; }\n    first(ctor) {\n        for (let i = this.path.length - 1; i >= 0; i--) {\n            let item = this.path[i];\n            if (item instanceof ctor)\n                return item;\n        }\n    }\n    push(node) { this.path.push(node); }\n    pop() { return this.path.pop(); }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass Text$3 {\n    constructor(value, sourceSpan, i18n) {\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n        this.i18n = i18n;\n    }\n    visit(visitor, context) { return visitor.visitText(this, context); }\n}\nclass Expansion {\n    constructor(switchValue, type, cases, sourceSpan, switchValueSourceSpan, i18n) {\n        this.switchValue = switchValue;\n        this.type = type;\n        this.cases = cases;\n        this.sourceSpan = sourceSpan;\n        this.switchValueSourceSpan = switchValueSourceSpan;\n        this.i18n = i18n;\n    }\n    visit(visitor, context) { return visitor.visitExpansion(this, context); }\n}\nclass ExpansionCase {\n    constructor(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {\n        this.value = value;\n        this.expression = expression;\n        this.sourceSpan = sourceSpan;\n        this.valueSourceSpan = valueSourceSpan;\n        this.expSourceSpan = expSourceSpan;\n    }\n    visit(visitor, context) { return visitor.visitExpansionCase(this, context); }\n}\nclass Attribute {\n    constructor(name, value, sourceSpan, valueSpan, i18n) {\n        this.name = name;\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n        this.valueSpan = valueSpan;\n        this.i18n = i18n;\n    }\n    visit(visitor, context) { return visitor.visitAttribute(this, context); }\n}\nclass Element$1 {\n    constructor(name, attrs, children, sourceSpan, startSourceSpan = null, endSourceSpan = null, i18n) {\n        this.name = name;\n        this.attrs = attrs;\n        this.children = children;\n        this.sourceSpan = sourceSpan;\n        this.startSourceSpan = startSourceSpan;\n        this.endSourceSpan = endSourceSpan;\n        this.i18n = i18n;\n    }\n    visit(visitor, context) { return visitor.visitElement(this, context); }\n}\nclass Comment {\n    constructor(value, sourceSpan) {\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(visitor, context) { return visitor.visitComment(this, context); }\n}\nfunction visitAll$1(visitor, nodes, context = null) {\n    const result = [];\n    const visit = visitor.visit ?\n        (ast) => visitor.visit(ast, context) || ast.visit(visitor, context) :\n        (ast) => ast.visit(visitor, context);\n    nodes.forEach(ast => {\n        const astResult = visit(ast);\n        if (astResult) {\n            result.push(astResult);\n        }\n    });\n    return result;\n}\nclass RecursiveVisitor {\n    constructor() { }\n    visitElement(ast, context) {\n        this.visitChildren(context, visit => {\n            visit(ast.attrs);\n            visit(ast.children);\n        });\n    }\n    visitAttribute(ast, context) { }\n    visitText(ast, context) { }\n    visitComment(ast, context) { }\n    visitExpansion(ast, context) {\n        return this.visitChildren(context, visit => { visit(ast.cases); });\n    }\n    visitExpansionCase(ast, context) { }\n    visitChildren(context, cb) {\n        let results = [];\n        let t = this;\n        function visit(children) {\n            if (children)\n                results.push(visitAll$1(t, children, context));\n        }\n        cb(visit);\n        return [].concat.apply([], results);\n    }\n}\nfunction spanOf(ast) {\n    const start = ast.sourceSpan.start.offset;\n    let end = ast.sourceSpan.end.offset;\n    if (ast instanceof Element$1) {\n        if (ast.endSourceSpan) {\n            end = ast.endSourceSpan.end.offset;\n        }\n        else if (ast.children && ast.children.length) {\n            end = spanOf(ast.children[ast.children.length - 1]).end;\n        }\n    }\n    return { start, end };\n}\nfunction findNode(nodes, position) {\n    const path = [];\n    const visitor = new class extends RecursiveVisitor {\n        visit(ast, context) {\n            const span = spanOf(ast);\n            if (span.start <= position && position < span.end) {\n                path.push(ast);\n            }\n            else {\n                // Returning a value here will result in the children being skipped.\n                return true;\n            }\n        }\n    };\n    visitAll$1(visitor, nodes);\n    return new AstPath(path, position);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar TokenType;\n(function (TokenType) {\n    TokenType[TokenType[\"TAG_OPEN_START\"] = 0] = \"TAG_OPEN_START\";\n    TokenType[TokenType[\"TAG_OPEN_END\"] = 1] = \"TAG_OPEN_END\";\n    TokenType[TokenType[\"TAG_OPEN_END_VOID\"] = 2] = \"TAG_OPEN_END_VOID\";\n    TokenType[TokenType[\"TAG_CLOSE\"] = 3] = \"TAG_CLOSE\";\n    TokenType[TokenType[\"TEXT\"] = 4] = \"TEXT\";\n    TokenType[TokenType[\"ESCAPABLE_RAW_TEXT\"] = 5] = \"ESCAPABLE_RAW_TEXT\";\n    TokenType[TokenType[\"RAW_TEXT\"] = 6] = \"RAW_TEXT\";\n    TokenType[TokenType[\"COMMENT_START\"] = 7] = \"COMMENT_START\";\n    TokenType[TokenType[\"COMMENT_END\"] = 8] = \"COMMENT_END\";\n    TokenType[TokenType[\"CDATA_START\"] = 9] = \"CDATA_START\";\n    TokenType[TokenType[\"CDATA_END\"] = 10] = \"CDATA_END\";\n    TokenType[TokenType[\"ATTR_NAME\"] = 11] = \"ATTR_NAME\";\n    TokenType[TokenType[\"ATTR_QUOTE\"] = 12] = \"ATTR_QUOTE\";\n    TokenType[TokenType[\"ATTR_VALUE\"] = 13] = \"ATTR_VALUE\";\n    TokenType[TokenType[\"DOC_TYPE\"] = 14] = \"DOC_TYPE\";\n    TokenType[TokenType[\"EXPANSION_FORM_START\"] = 15] = \"EXPANSION_FORM_START\";\n    TokenType[TokenType[\"EXPANSION_CASE_VALUE\"] = 16] = \"EXPANSION_CASE_VALUE\";\n    TokenType[TokenType[\"EXPANSION_CASE_EXP_START\"] = 17] = \"EXPANSION_CASE_EXP_START\";\n    TokenType[TokenType[\"EXPANSION_CASE_EXP_END\"] = 18] = \"EXPANSION_CASE_EXP_END\";\n    TokenType[TokenType[\"EXPANSION_FORM_END\"] = 19] = \"EXPANSION_FORM_END\";\n    TokenType[TokenType[\"EOF\"] = 20] = \"EOF\";\n})(TokenType || (TokenType = {}));\nclass Token {\n    constructor(type, parts, sourceSpan) {\n        this.type = type;\n        this.parts = parts;\n        this.sourceSpan = sourceSpan;\n    }\n}\nclass TokenError extends ParseError {\n    constructor(errorMsg, tokenType, span) {\n        super(span, errorMsg);\n        this.tokenType = tokenType;\n    }\n}\nclass TokenizeResult {\n    constructor(tokens, errors) {\n        this.tokens = tokens;\n        this.errors = errors;\n    }\n}\nfunction tokenize(source, url, getTagDefinition, options = {}) {\n    return new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, options).tokenize();\n}\nconst _CR_OR_CRLF_REGEXP = /\\r\\n?/g;\nfunction _unexpectedCharacterErrorMsg(charCode) {\n    const char = charCode === $EOF ? 'EOF' : String.fromCharCode(charCode);\n    return `Unexpected character \"${char}\"`;\n}\nfunction _unknownEntityErrorMsg(entitySrc) {\n    return `Unknown entity \"${entitySrc}\" - use the \"&#<decimal>;\" or  \"&#x<hex>;\" syntax`;\n}\nclass _ControlFlowError {\n    constructor(error) {\n        this.error = error;\n    }\n}\n// See http://www.w3.org/TR/html51/syntax.html#writing\nclass _Tokenizer {\n    /**\n     * @param _file The html source file being tokenized.\n     * @param _getTagDefinition A function that will retrieve a tag definition for a given tag name.\n     * @param options Configuration of the tokenization.\n     */\n    constructor(_file, _getTagDefinition, options) {\n        this._getTagDefinition = _getTagDefinition;\n        this._currentTokenStart = null;\n        this._currentTokenType = null;\n        this._expansionCaseStack = [];\n        this._inInterpolation = false;\n        this.tokens = [];\n        this.errors = [];\n        this._tokenizeIcu = options.tokenizeExpansionForms || false;\n        this._interpolationConfig = options.interpolationConfig || DEFAULT_INTERPOLATION_CONFIG;\n        this._leadingTriviaCodePoints =\n            options.leadingTriviaChars && options.leadingTriviaChars.map(c => c.codePointAt(0) || 0);\n        const range = options.range || { endPos: _file.content.length, startPos: 0, startLine: 0, startCol: 0 };\n        this._cursor = options.escapedString ? new EscapedCharacterCursor(_file, range) :\n            new PlainCharacterCursor(_file, range);\n        try {\n            this._cursor.init();\n        }\n        catch (e) {\n            this.handleError(e);\n        }\n    }\n    _processCarriageReturns(content) {\n        // http://www.w3.org/TR/html5/syntax.html#preprocessing-the-input-stream\n        // In order to keep the original position in the source, we can not\n        // pre-process it.\n        // Instead CRs are processed right before instantiating the tokens.\n        return content.replace(_CR_OR_CRLF_REGEXP, '\\n');\n    }\n    tokenize() {\n        while (this._cursor.peek() !== $EOF) {\n            const start = this._cursor.clone();\n            try {\n                if (this._attemptCharCode($LT)) {\n                    if (this._attemptCharCode($BANG)) {\n                        if (this._attemptCharCode($LBRACKET)) {\n                            this._consumeCdata(start);\n                        }\n                        else if (this._attemptCharCode($MINUS)) {\n                            this._consumeComment(start);\n                        }\n                        else {\n                            this._consumeDocType(start);\n                        }\n                    }\n                    else if (this._attemptCharCode($SLASH)) {\n                        this._consumeTagClose(start);\n                    }\n                    else {\n                        this._consumeTagOpen(start);\n                    }\n                }\n                else if (!(this._tokenizeIcu && this._tokenizeExpansionForm())) {\n                    this._consumeText();\n                }\n            }\n            catch (e) {\n                this.handleError(e);\n            }\n        }\n        this._beginToken(TokenType.EOF);\n        this._endToken([]);\n        return new TokenizeResult(mergeTextTokens(this.tokens), this.errors);\n    }\n    /**\n     * @returns whether an ICU token has been created\n     * @internal\n     */\n    _tokenizeExpansionForm() {\n        if (this.isExpansionFormStart()) {\n            this._consumeExpansionFormStart();\n            return true;\n        }\n        if (isExpansionCaseStart(this._cursor.peek()) && this._isInExpansionForm()) {\n            this._consumeExpansionCaseStart();\n            return true;\n        }\n        if (this._cursor.peek() === $RBRACE) {\n            if (this._isInExpansionCase()) {\n                this._consumeExpansionCaseEnd();\n                return true;\n            }\n            if (this._isInExpansionForm()) {\n                this._consumeExpansionFormEnd();\n                return true;\n            }\n        }\n        return false;\n    }\n    _beginToken(type, start = this._cursor.clone()) {\n        this._currentTokenStart = start;\n        this._currentTokenType = type;\n    }\n    _endToken(parts, end = this._cursor.clone()) {\n        if (this._currentTokenStart === null) {\n            throw new TokenError('Programming error - attempted to end a token when there was no start to the token', this._currentTokenType, this._cursor.getSpan(end));\n        }\n        if (this._currentTokenType === null) {\n            throw new TokenError('Programming error - attempted to end a token which has no token type', null, this._cursor.getSpan(this._currentTokenStart));\n        }\n        const token = new Token(this._currentTokenType, parts, this._cursor.getSpan(this._currentTokenStart, this._leadingTriviaCodePoints));\n        this.tokens.push(token);\n        this._currentTokenStart = null;\n        this._currentTokenType = null;\n        return token;\n    }\n    _createError(msg, span) {\n        if (this._isInExpansionForm()) {\n            msg += ` (Do you have an unescaped \"{\" in your template? Use \"{{ '{' }}\") to escape it.)`;\n        }\n        const error = new TokenError(msg, this._currentTokenType, span);\n        this._currentTokenStart = null;\n        this._currentTokenType = null;\n        return new _ControlFlowError(error);\n    }\n    handleError(e) {\n        if (e instanceof CursorError) {\n            e = this._createError(e.msg, this._cursor.getSpan(e.cursor));\n        }\n        if (e instanceof _ControlFlowError) {\n            this.errors.push(e.error);\n        }\n        else {\n            throw e;\n        }\n    }\n    _attemptCharCode(charCode) {\n        if (this._cursor.peek() === charCode) {\n            this._cursor.advance();\n            return true;\n        }\n        return false;\n    }\n    _attemptCharCodeCaseInsensitive(charCode) {\n        if (compareCharCodeCaseInsensitive(this._cursor.peek(), charCode)) {\n            this._cursor.advance();\n            return true;\n        }\n        return false;\n    }\n    _requireCharCode(charCode) {\n        const location = this._cursor.clone();\n        if (!this._attemptCharCode(charCode)) {\n            throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(location));\n        }\n    }\n    _attemptStr(chars) {\n        const len = chars.length;\n        if (this._cursor.charsLeft() < len) {\n            return false;\n        }\n        const initialPosition = this._cursor.clone();\n        for (let i = 0; i < len; i++) {\n            if (!this._attemptCharCode(chars.charCodeAt(i))) {\n                // If attempting to parse the string fails, we want to reset the parser\n                // to where it was before the attempt\n                this._cursor = initialPosition;\n                return false;\n            }\n        }\n        return true;\n    }\n    _attemptStrCaseInsensitive(chars) {\n        for (let i = 0; i < chars.length; i++) {\n            if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n    _requireStr(chars) {\n        const location = this._cursor.clone();\n        if (!this._attemptStr(chars)) {\n            throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(location));\n        }\n    }\n    _attemptCharCodeUntilFn(predicate) {\n        while (!predicate(this._cursor.peek())) {\n            this._cursor.advance();\n        }\n    }\n    _requireCharCodeUntilFn(predicate, len) {\n        const start = this._cursor.clone();\n        this._attemptCharCodeUntilFn(predicate);\n        const end = this._cursor.clone();\n        if (end.diff(start) < len) {\n            throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(start));\n        }\n    }\n    _attemptUntilChar(char) {\n        while (this._cursor.peek() !== char) {\n            this._cursor.advance();\n        }\n    }\n    _readChar(decodeEntities) {\n        if (decodeEntities && this._cursor.peek() === $AMPERSAND) {\n            return this._decodeEntity();\n        }\n        else {\n            // Don't rely upon reading directly from `_input` as the actual char value\n            // may have been generated from an escape sequence.\n            const char = String.fromCodePoint(this._cursor.peek());\n            this._cursor.advance();\n            return char;\n        }\n    }\n    _decodeEntity() {\n        const start = this._cursor.clone();\n        this._cursor.advance();\n        if (this._attemptCharCode($HASH)) {\n            const isHex = this._attemptCharCode($x) || this._attemptCharCode($X);\n            const codeStart = this._cursor.clone();\n            this._attemptCharCodeUntilFn(isDigitEntityEnd);\n            if (this._cursor.peek() != $SEMICOLON) {\n                throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan());\n            }\n            const strNum = this._cursor.getChars(codeStart);\n            this._cursor.advance();\n            try {\n                const charCode = parseInt(strNum, isHex ? 16 : 10);\n                return String.fromCharCode(charCode);\n            }\n            catch (_a) {\n                throw this._createError(_unknownEntityErrorMsg(this._cursor.getChars(start)), this._cursor.getSpan());\n            }\n        }\n        else {\n            const nameStart = this._cursor.clone();\n            this._attemptCharCodeUntilFn(isNamedEntityEnd);\n            if (this._cursor.peek() != $SEMICOLON) {\n                this._cursor = nameStart;\n                return '&';\n            }\n            const name = this._cursor.getChars(nameStart);\n            this._cursor.advance();\n            const char = NAMED_ENTITIES[name];\n            if (!char) {\n                throw this._createError(_unknownEntityErrorMsg(name), this._cursor.getSpan(start));\n            }\n            return char;\n        }\n    }\n    _consumeRawText(decodeEntities, endMarkerPredicate) {\n        this._beginToken(decodeEntities ? TokenType.ESCAPABLE_RAW_TEXT : TokenType.RAW_TEXT);\n        const parts = [];\n        while (true) {\n            const tagCloseStart = this._cursor.clone();\n            const foundEndMarker = endMarkerPredicate();\n            this._cursor = tagCloseStart;\n            if (foundEndMarker) {\n                break;\n            }\n            parts.push(this._readChar(decodeEntities));\n        }\n        return this._endToken([this._processCarriageReturns(parts.join(''))]);\n    }\n    _consumeComment(start) {\n        this._beginToken(TokenType.COMMENT_START, start);\n        this._requireCharCode($MINUS);\n        this._endToken([]);\n        this._consumeRawText(false, () => this._attemptStr('-->'));\n        this._beginToken(TokenType.COMMENT_END);\n        this._requireStr('-->');\n        this._endToken([]);\n    }\n    _consumeCdata(start) {\n        this._beginToken(TokenType.CDATA_START, start);\n        this._requireStr('CDATA[');\n        this._endToken([]);\n        this._consumeRawText(false, () => this._attemptStr(']]>'));\n        this._beginToken(TokenType.CDATA_END);\n        this._requireStr(']]>');\n        this._endToken([]);\n    }\n    _consumeDocType(start) {\n        this._beginToken(TokenType.DOC_TYPE, start);\n        const contentStart = this._cursor.clone();\n        this._attemptUntilChar($GT);\n        const content = this._cursor.getChars(contentStart);\n        this._cursor.advance();\n        this._endToken([content]);\n    }\n    _consumePrefixAndName() {\n        const nameOrPrefixStart = this._cursor.clone();\n        let prefix = '';\n        while (this._cursor.peek() !== $COLON && !isPrefixEnd(this._cursor.peek())) {\n            this._cursor.advance();\n        }\n        let nameStart;\n        if (this._cursor.peek() === $COLON) {\n            prefix = this._cursor.getChars(nameOrPrefixStart);\n            this._cursor.advance();\n            nameStart = this._cursor.clone();\n        }\n        else {\n            nameStart = nameOrPrefixStart;\n        }\n        this._requireCharCodeUntilFn(isNameEnd, prefix === '' ? 0 : 1);\n        const name = this._cursor.getChars(nameStart);\n        return [prefix, name];\n    }\n    _consumeTagOpen(start) {\n        let tagName;\n        let prefix;\n        let openTagToken;\n        let tokensBeforeTagOpen = this.tokens.length;\n        const innerStart = this._cursor.clone();\n        try {\n            if (!isAsciiLetter(this._cursor.peek())) {\n                throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(start));\n            }\n            openTagToken = this._consumeTagOpenStart(start);\n            prefix = openTagToken.parts[0];\n            tagName = openTagToken.parts[1];\n            this._attemptCharCodeUntilFn(isNotWhitespace);\n            while (this._cursor.peek() !== $SLASH && this._cursor.peek() !== $GT) {\n                this._consumeAttributeName();\n                this._attemptCharCodeUntilFn(isNotWhitespace);\n                if (this._attemptCharCode($EQ)) {\n                    this._attemptCharCodeUntilFn(isNotWhitespace);\n                    this._consumeAttributeValue();\n                }\n                this._attemptCharCodeUntilFn(isNotWhitespace);\n            }\n            this._consumeTagOpenEnd();\n        }\n        catch (e) {\n            if (e instanceof _ControlFlowError) {\n                // When the start tag is invalid (including invalid \"attributes\"), assume we want a \"<\"\n                this._cursor = innerStart;\n                if (openTagToken) {\n                    this.tokens.length = tokensBeforeTagOpen;\n                }\n                // Back to back text tokens are merged at the end\n                this._beginToken(TokenType.TEXT, start);\n                this._endToken(['<']);\n                return;\n            }\n            throw e;\n        }\n        const contentTokenType = this._getTagDefinition(tagName).contentType;\n        if (contentTokenType === TagContentType.RAW_TEXT) {\n            this._consumeRawTextWithTagClose(prefix, tagName, false);\n        }\n        else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {\n            this._consumeRawTextWithTagClose(prefix, tagName, true);\n        }\n    }\n    _consumeRawTextWithTagClose(prefix, tagName, decodeEntities) {\n        const textToken = this._consumeRawText(decodeEntities, () => {\n            if (!this._attemptCharCode($LT))\n                return false;\n            if (!this._attemptCharCode($SLASH))\n                return false;\n            this._attemptCharCodeUntilFn(isNotWhitespace);\n            if (!this._attemptStrCaseInsensitive(tagName))\n                return false;\n            this._attemptCharCodeUntilFn(isNotWhitespace);\n            return this._attemptCharCode($GT);\n        });\n        this._beginToken(TokenType.TAG_CLOSE);\n        this._requireCharCodeUntilFn(code => code === $GT, 3);\n        this._cursor.advance(); // Consume the `>`\n        this._endToken([prefix, tagName]);\n    }\n    _consumeTagOpenStart(start) {\n        this._beginToken(TokenType.TAG_OPEN_START, start);\n        const parts = this._consumePrefixAndName();\n        return this._endToken(parts);\n    }\n    _consumeAttributeName() {\n        const attrNameStart = this._cursor.peek();\n        if (attrNameStart === $SQ || attrNameStart === $DQ) {\n            throw this._createError(_unexpectedCharacterErrorMsg(attrNameStart), this._cursor.getSpan());\n        }\n        this._beginToken(TokenType.ATTR_NAME);\n        const prefixAndName = this._consumePrefixAndName();\n        this._endToken(prefixAndName);\n    }\n    _consumeAttributeValue() {\n        let value;\n        if (this._cursor.peek() === $SQ || this._cursor.peek() === $DQ) {\n            this._beginToken(TokenType.ATTR_QUOTE);\n            const quoteChar = this._cursor.peek();\n            this._cursor.advance();\n            this._endToken([String.fromCodePoint(quoteChar)]);\n            this._beginToken(TokenType.ATTR_VALUE);\n            const parts = [];\n            while (this._cursor.peek() !== quoteChar) {\n                parts.push(this._readChar(true));\n            }\n            value = parts.join('');\n            this._endToken([this._processCarriageReturns(value)]);\n            this._beginToken(TokenType.ATTR_QUOTE);\n            this._cursor.advance();\n            this._endToken([String.fromCodePoint(quoteChar)]);\n        }\n        else {\n            this._beginToken(TokenType.ATTR_VALUE);\n            const valueStart = this._cursor.clone();\n            this._requireCharCodeUntilFn(isNameEnd, 1);\n            value = this._cursor.getChars(valueStart);\n            this._endToken([this._processCarriageReturns(value)]);\n        }\n    }\n    _consumeTagOpenEnd() {\n        const tokenType = this._attemptCharCode($SLASH) ? TokenType.TAG_OPEN_END_VOID : TokenType.TAG_OPEN_END;\n        this._beginToken(tokenType);\n        this._requireCharCode($GT);\n        this._endToken([]);\n    }\n    _consumeTagClose(start) {\n        this._beginToken(TokenType.TAG_CLOSE, start);\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        const prefixAndName = this._consumePrefixAndName();\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        this._requireCharCode($GT);\n        this._endToken(prefixAndName);\n    }\n    _consumeExpansionFormStart() {\n        this._beginToken(TokenType.EXPANSION_FORM_START);\n        this._requireCharCode($LBRACE);\n        this._endToken([]);\n        this._expansionCaseStack.push(TokenType.EXPANSION_FORM_START);\n        this._beginToken(TokenType.RAW_TEXT);\n        const condition = this._readUntil($COMMA);\n        this._endToken([condition]);\n        this._requireCharCode($COMMA);\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        this._beginToken(TokenType.RAW_TEXT);\n        const type = this._readUntil($COMMA);\n        this._endToken([type]);\n        this._requireCharCode($COMMA);\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n    }\n    _consumeExpansionCaseStart() {\n        this._beginToken(TokenType.EXPANSION_CASE_VALUE);\n        const value = this._readUntil($LBRACE).trim();\n        this._endToken([value]);\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        this._beginToken(TokenType.EXPANSION_CASE_EXP_START);\n        this._requireCharCode($LBRACE);\n        this._endToken([]);\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        this._expansionCaseStack.push(TokenType.EXPANSION_CASE_EXP_START);\n    }\n    _consumeExpansionCaseEnd() {\n        this._beginToken(TokenType.EXPANSION_CASE_EXP_END);\n        this._requireCharCode($RBRACE);\n        this._endToken([]);\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        this._expansionCaseStack.pop();\n    }\n    _consumeExpansionFormEnd() {\n        this._beginToken(TokenType.EXPANSION_FORM_END);\n        this._requireCharCode($RBRACE);\n        this._endToken([]);\n        this._expansionCaseStack.pop();\n    }\n    _consumeText() {\n        const start = this._cursor.clone();\n        this._beginToken(TokenType.TEXT, start);\n        const parts = [];\n        do {\n            if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {\n                parts.push(this._interpolationConfig.start);\n                this._inInterpolation = true;\n            }\n            else if (this._interpolationConfig && this._inInterpolation &&\n                this._attemptStr(this._interpolationConfig.end)) {\n                parts.push(this._interpolationConfig.end);\n                this._inInterpolation = false;\n            }\n            else {\n                parts.push(this._readChar(true));\n            }\n        } while (!this._isTextEnd());\n        this._endToken([this._processCarriageReturns(parts.join(''))]);\n    }\n    _isTextEnd() {\n        if (this._cursor.peek() === $LT || this._cursor.peek() === $EOF) {\n            return true;\n        }\n        if (this._tokenizeIcu && !this._inInterpolation) {\n            if (this.isExpansionFormStart()) {\n                // start of an expansion form\n                return true;\n            }\n            if (this._cursor.peek() === $RBRACE && this._isInExpansionCase()) {\n                // end of and expansion case\n                return true;\n            }\n        }\n        return false;\n    }\n    _readUntil(char) {\n        const start = this._cursor.clone();\n        this._attemptUntilChar(char);\n        return this._cursor.getChars(start);\n    }\n    _isInExpansionCase() {\n        return this._expansionCaseStack.length > 0 &&\n            this._expansionCaseStack[this._expansionCaseStack.length - 1] ===\n                TokenType.EXPANSION_CASE_EXP_START;\n    }\n    _isInExpansionForm() {\n        return this._expansionCaseStack.length > 0 &&\n            this._expansionCaseStack[this._expansionCaseStack.length - 1] ===\n                TokenType.EXPANSION_FORM_START;\n    }\n    isExpansionFormStart() {\n        if (this._cursor.peek() !== $LBRACE) {\n            return false;\n        }\n        if (this._interpolationConfig) {\n            const start = this._cursor.clone();\n            const isInterpolation = this._attemptStr(this._interpolationConfig.start);\n            this._cursor = start;\n            return !isInterpolation;\n        }\n        return true;\n    }\n}\nfunction isNotWhitespace(code) {\n    return !isWhitespace(code) || code === $EOF;\n}\nfunction isNameEnd(code) {\n    return isWhitespace(code) || code === $GT || code === $SLASH ||\n        code === $SQ || code === $DQ || code === $EQ;\n}\nfunction isPrefixEnd(code) {\n    return (code < $a || $z < code) && (code < $A || $Z < code) &&\n        (code < $0 || code > $9);\n}\nfunction isDigitEntityEnd(code) {\n    return code == $SEMICOLON || code == $EOF || !isAsciiHexDigit(code);\n}\nfunction isNamedEntityEnd(code) {\n    return code == $SEMICOLON || code == $EOF || !isAsciiLetter(code);\n}\nfunction isExpansionCaseStart(peek) {\n    return peek === $EQ || isAsciiLetter(peek) || isDigit(peek);\n}\nfunction compareCharCodeCaseInsensitive(code1, code2) {\n    return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);\n}\nfunction toUpperCaseCharCode(code) {\n    return code >= $a && code <= $z ? code - $a + $A : code;\n}\nfunction mergeTextTokens(srcTokens) {\n    const dstTokens = [];\n    let lastDstToken = undefined;\n    for (let i = 0; i < srcTokens.length; i++) {\n        const token = srcTokens[i];\n        if (lastDstToken && lastDstToken.type == TokenType.TEXT && token.type == TokenType.TEXT) {\n            lastDstToken.parts[0] += token.parts[0];\n            lastDstToken.sourceSpan.end = token.sourceSpan.end;\n        }\n        else {\n            lastDstToken = token;\n            dstTokens.push(lastDstToken);\n        }\n    }\n    return dstTokens;\n}\nclass PlainCharacterCursor {\n    constructor(fileOrCursor, range) {\n        if (fileOrCursor instanceof PlainCharacterCursor) {\n            this.file = fileOrCursor.file;\n            this.input = fileOrCursor.input;\n            this.end = fileOrCursor.end;\n            this.state = Object.assign({}, fileOrCursor.state);\n        }\n        else {\n            if (!range) {\n                throw new Error('Programming error: the range argument must be provided with a file argument.');\n            }\n            this.file = fileOrCursor;\n            this.input = fileOrCursor.content;\n            this.end = range.endPos;\n            this.state = {\n                peek: -1,\n                offset: range.startPos,\n                line: range.startLine,\n                column: range.startCol,\n            };\n        }\n    }\n    clone() { return new PlainCharacterCursor(this); }\n    peek() { return this.state.peek; }\n    charsLeft() { return this.end - this.state.offset; }\n    diff(other) { return this.state.offset - other.state.offset; }\n    advance() { this.advanceState(this.state); }\n    init() { this.updatePeek(this.state); }\n    getSpan(start, leadingTriviaCodePoints) {\n        start = start || this;\n        if (leadingTriviaCodePoints) {\n            start = start.clone();\n            while (this.diff(start) > 0 && leadingTriviaCodePoints.indexOf(start.peek()) !== -1) {\n                start.advance();\n            }\n        }\n        return new ParseSourceSpan(new ParseLocation(start.file, start.state.offset, start.state.line, start.state.column), new ParseLocation(this.file, this.state.offset, this.state.line, this.state.column));\n    }\n    getChars(start) {\n        return this.input.substring(start.state.offset, this.state.offset);\n    }\n    charAt(pos) { return this.input.charCodeAt(pos); }\n    advanceState(state) {\n        if (state.offset >= this.end) {\n            this.state = state;\n            throw new CursorError('Unexpected character \"EOF\"', this);\n        }\n        const currentChar = this.charAt(state.offset);\n        if (currentChar === $LF) {\n            state.line++;\n            state.column = 0;\n        }\n        else if (!isNewLine(currentChar)) {\n            state.column++;\n        }\n        state.offset++;\n        this.updatePeek(state);\n    }\n    updatePeek(state) {\n        state.peek = state.offset >= this.end ? $EOF : this.charAt(state.offset);\n    }\n}\nclass EscapedCharacterCursor extends PlainCharacterCursor {\n    constructor(fileOrCursor, range) {\n        if (fileOrCursor instanceof EscapedCharacterCursor) {\n            super(fileOrCursor);\n            this.internalState = Object.assign({}, fileOrCursor.internalState);\n        }\n        else {\n            super(fileOrCursor, range);\n            this.internalState = this.state;\n        }\n    }\n    advance() {\n        this.state = this.internalState;\n        super.advance();\n        this.processEscapeSequence();\n    }\n    init() {\n        super.init();\n        this.processEscapeSequence();\n    }\n    clone() { return new EscapedCharacterCursor(this); }\n    getChars(start) {\n        const cursor = start.clone();\n        let chars = '';\n        while (cursor.internalState.offset < this.internalState.offset) {\n            chars += String.fromCodePoint(cursor.peek());\n            cursor.advance();\n        }\n        return chars;\n    }\n    /**\n     * Process the escape sequence that starts at the current position in the text.\n     *\n     * This method is called to ensure that `peek` has the unescaped value of escape sequences.\n     */\n    processEscapeSequence() {\n        const peek = () => this.internalState.peek;\n        if (peek() === $BACKSLASH) {\n            // We have hit an escape sequence so we need the internal state to become independent\n            // of the external state.\n            this.internalState = Object.assign({}, this.state);\n            // Move past the backslash\n            this.advanceState(this.internalState);\n            // First check for standard control char sequences\n            if (peek() === $n) {\n                this.state.peek = $LF;\n            }\n            else if (peek() === $r) {\n                this.state.peek = $CR;\n            }\n            else if (peek() === $v) {\n                this.state.peek = $VTAB;\n            }\n            else if (peek() === $t) {\n                this.state.peek = $TAB;\n            }\n            else if (peek() === $b) {\n                this.state.peek = $BSPACE;\n            }\n            else if (peek() === $f) {\n                this.state.peek = $FF;\n            }\n            // Now consider more complex sequences\n            else if (peek() === $u) {\n                // Unicode code-point sequence\n                this.advanceState(this.internalState); // advance past the `u` char\n                if (peek() === $LBRACE) {\n                    // Variable length Unicode, e.g. `\\x{123}`\n                    this.advanceState(this.internalState); // advance past the `{` char\n                    // Advance past the variable number of hex digits until we hit a `}` char\n                    const digitStart = this.clone();\n                    let length = 0;\n                    while (peek() !== $RBRACE) {\n                        this.advanceState(this.internalState);\n                        length++;\n                    }\n                    this.state.peek = this.decodeHexDigits(digitStart, length);\n                }\n                else {\n                    // Fixed length Unicode, e.g. `\\u1234`\n                    const digitStart = this.clone();\n                    this.advanceState(this.internalState);\n                    this.advanceState(this.internalState);\n                    this.advanceState(this.internalState);\n                    this.state.peek = this.decodeHexDigits(digitStart, 4);\n                }\n            }\n            else if (peek() === $x) {\n                // Hex char code, e.g. `\\x2F`\n                this.advanceState(this.internalState); // advance past the `x` char\n                const digitStart = this.clone();\n                this.advanceState(this.internalState);\n                this.state.peek = this.decodeHexDigits(digitStart, 2);\n            }\n            else if (isOctalDigit(peek())) {\n                // Octal char code, e.g. `\\012`,\n                let octal = '';\n                let length = 0;\n                let previous = this.clone();\n                while (isOctalDigit(peek()) && length < 3) {\n                    previous = this.clone();\n                    octal += String.fromCodePoint(peek());\n                    this.advanceState(this.internalState);\n                    length++;\n                }\n                this.state.peek = parseInt(octal, 8);\n                // Backup one char\n                this.internalState = previous.internalState;\n            }\n            else if (isNewLine(this.internalState.peek)) {\n                // Line continuation `\\` followed by a new line\n                this.advanceState(this.internalState); // advance over the newline\n                this.state = this.internalState;\n            }\n            else {\n                // If none of the `if` blocks were executed then we just have an escaped normal character.\n                // In that case we just, effectively, skip the backslash from the character.\n                this.state.peek = this.internalState.peek;\n            }\n        }\n    }\n    decodeHexDigits(start, length) {\n        const hex = this.input.substr(start.internalState.offset, length);\n        const charCode = parseInt(hex, 16);\n        if (!isNaN(charCode)) {\n            return charCode;\n        }\n        else {\n            start.state = start.internalState;\n            throw new CursorError('Invalid hexadecimal escape sequence', start);\n        }\n    }\n}\nclass CursorError {\n    constructor(msg, cursor) {\n        this.msg = msg;\n        this.cursor = cursor;\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass TreeError extends ParseError {\n    constructor(elementName, span, msg) {\n        super(span, msg);\n        this.elementName = elementName;\n    }\n    static create(elementName, span, msg) {\n        return new TreeError(elementName, span, msg);\n    }\n}\nclass ParseTreeResult {\n    constructor(rootNodes, errors) {\n        this.rootNodes = rootNodes;\n        this.errors = errors;\n    }\n}\nclass Parser {\n    constructor(getTagDefinition) {\n        this.getTagDefinition = getTagDefinition;\n    }\n    parse(source, url, options) {\n        const tokensAndErrors = tokenize(source, url, this.getTagDefinition, options);\n        const treeAndErrors = new _TreeBuilder(tokensAndErrors.tokens, this.getTagDefinition).build();\n        return new ParseTreeResult(treeAndErrors.rootNodes, tokensAndErrors.errors.concat(treeAndErrors.errors));\n    }\n}\nclass _TreeBuilder {\n    constructor(tokens, getTagDefinition) {\n        this.tokens = tokens;\n        this.getTagDefinition = getTagDefinition;\n        this._index = -1;\n        this._rootNodes = [];\n        this._errors = [];\n        this._elementStack = [];\n        this._advance();\n    }\n    build() {\n        while (this._peek.type !== TokenType.EOF) {\n            if (this._peek.type === TokenType.TAG_OPEN_START) {\n                this._consumeStartTag(this._advance());\n            }\n            else if (this._peek.type === TokenType.TAG_CLOSE) {\n                this._consumeEndTag(this._advance());\n            }\n            else if (this._peek.type === TokenType.CDATA_START) {\n                this._closeVoidElement();\n                this._consumeCdata(this._advance());\n            }\n            else if (this._peek.type === TokenType.COMMENT_START) {\n                this._closeVoidElement();\n                this._consumeComment(this._advance());\n            }\n            else if (this._peek.type === TokenType.TEXT || this._peek.type === TokenType.RAW_TEXT ||\n                this._peek.type === TokenType.ESCAPABLE_RAW_TEXT) {\n                this._closeVoidElement();\n                this._consumeText(this._advance());\n            }\n            else if (this._peek.type === TokenType.EXPANSION_FORM_START) {\n                this._consumeExpansion(this._advance());\n            }\n            else {\n                // Skip all other tokens...\n                this._advance();\n            }\n        }\n        return new ParseTreeResult(this._rootNodes, this._errors);\n    }\n    _advance() {\n        const prev = this._peek;\n        if (this._index < this.tokens.length - 1) {\n            // Note: there is always an EOF token at the end\n            this._index++;\n        }\n        this._peek = this.tokens[this._index];\n        return prev;\n    }\n    _advanceIf(type) {\n        if (this._peek.type === type) {\n            return this._advance();\n        }\n        return null;\n    }\n    _consumeCdata(startToken) {\n        this._consumeText(this._advance());\n        this._advanceIf(TokenType.CDATA_END);\n    }\n    _consumeComment(token) {\n        const text = this._advanceIf(TokenType.RAW_TEXT);\n        this._advanceIf(TokenType.COMMENT_END);\n        const value = text != null ? text.parts[0].trim() : null;\n        this._addToParent(new Comment(value, token.sourceSpan));\n    }\n    _consumeExpansion(token) {\n        const switchValue = this._advance();\n        const type = this._advance();\n        const cases = [];\n        // read =\n        while (this._peek.type === TokenType.EXPANSION_CASE_VALUE) {\n            const expCase = this._parseExpansionCase();\n            if (!expCase)\n                return; // error\n            cases.push(expCase);\n        }\n        // read the final }\n        if (this._peek.type !== TokenType.EXPANSION_FORM_END) {\n            this._errors.push(TreeError.create(null, this._peek.sourceSpan, `Invalid ICU message. Missing '}'.`));\n            return;\n        }\n        const sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end);\n        this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));\n        this._advance();\n    }\n    _parseExpansionCase() {\n        const value = this._advance();\n        // read {\n        if (this._peek.type !== TokenType.EXPANSION_CASE_EXP_START) {\n            this._errors.push(TreeError.create(null, this._peek.sourceSpan, `Invalid ICU message. Missing '{'.`));\n            return null;\n        }\n        // read until }\n        const start = this._advance();\n        const exp = this._collectExpansionExpTokens(start);\n        if (!exp)\n            return null;\n        const end = this._advance();\n        exp.push(new Token(TokenType.EOF, [], end.sourceSpan));\n        // parse everything in between { and }\n        const parsedExp = new _TreeBuilder(exp, this.getTagDefinition).build();\n        if (parsedExp.errors.length > 0) {\n            this._errors = this._errors.concat(parsedExp.errors);\n            return null;\n        }\n        const sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end);\n        const expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end);\n        return new ExpansionCase(value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);\n    }\n    _collectExpansionExpTokens(start) {\n        const exp = [];\n        const expansionFormStack = [TokenType.EXPANSION_CASE_EXP_START];\n        while (true) {\n            if (this._peek.type === TokenType.EXPANSION_FORM_START ||\n                this._peek.type === TokenType.EXPANSION_CASE_EXP_START) {\n                expansionFormStack.push(this._peek.type);\n            }\n            if (this._peek.type === TokenType.EXPANSION_CASE_EXP_END) {\n                if (lastOnStack(expansionFormStack, TokenType.EXPANSION_CASE_EXP_START)) {\n                    expansionFormStack.pop();\n                    if (expansionFormStack.length == 0)\n                        return exp;\n                }\n                else {\n                    this._errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));\n                    return null;\n                }\n            }\n            if (this._peek.type === TokenType.EXPANSION_FORM_END) {\n                if (lastOnStack(expansionFormStack, TokenType.EXPANSION_FORM_START)) {\n                    expansionFormStack.pop();\n                }\n                else {\n                    this._errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));\n                    return null;\n                }\n            }\n            if (this._peek.type === TokenType.EOF) {\n                this._errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));\n                return null;\n            }\n            exp.push(this._advance());\n        }\n    }\n    _consumeText(token) {\n        let text = token.parts[0];\n        if (text.length > 0 && text[0] == '\\n') {\n            const parent = this._getParentElement();\n            if (parent != null && parent.children.length == 0 &&\n                this.getTagDefinition(parent.name).ignoreFirstLf) {\n                text = text.substring(1);\n            }\n        }\n        if (text.length > 0) {\n            this._addToParent(new Text$3(text, token.sourceSpan));\n        }\n    }\n    _closeVoidElement() {\n        const el = this._getParentElement();\n        if (el && this.getTagDefinition(el.name).isVoid) {\n            this._elementStack.pop();\n        }\n    }\n    _consumeStartTag(startTagToken) {\n        const prefix = startTagToken.parts[0];\n        const name = startTagToken.parts[1];\n        const attrs = [];\n        while (this._peek.type === TokenType.ATTR_NAME) {\n            attrs.push(this._consumeAttr(this._advance()));\n        }\n        const fullName = this._getElementFullName(prefix, name, this._getParentElement());\n        let selfClosing = false;\n        // Note: There could have been a tokenizer error\n        // so that we don't get a token for the end tag...\n        if (this._peek.type === TokenType.TAG_OPEN_END_VOID) {\n            this._advance();\n            selfClosing = true;\n            const tagDef = this.getTagDefinition(fullName);\n            if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {\n                this._errors.push(TreeError.create(fullName, startTagToken.sourceSpan, `Only void and foreign elements can be self closed \"${startTagToken.parts[1]}\"`));\n            }\n        }\n        else if (this._peek.type === TokenType.TAG_OPEN_END) {\n            this._advance();\n            selfClosing = false;\n        }\n        const end = this._peek.sourceSpan.start;\n        const span = new ParseSourceSpan(startTagToken.sourceSpan.start, end);\n        const el = new Element$1(fullName, attrs, [], span, span, undefined);\n        this._pushElement(el);\n        if (selfClosing) {\n            this._popElement(fullName);\n            el.endSourceSpan = span;\n        }\n    }\n    _pushElement(el) {\n        const parentEl = this._getParentElement();\n        if (parentEl && this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {\n            this._elementStack.pop();\n        }\n        this._addToParent(el);\n        this._elementStack.push(el);\n    }\n    _consumeEndTag(endTagToken) {\n        const fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());\n        if (this._getParentElement()) {\n            this._getParentElement().endSourceSpan = endTagToken.sourceSpan;\n        }\n        if (this.getTagDefinition(fullName).isVoid) {\n            this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, `Void elements do not have end tags \"${endTagToken.parts[1]}\"`));\n        }\n        else if (!this._popElement(fullName)) {\n            const errMsg = `Unexpected closing tag \"${fullName}\". It may happen when the tag has already been closed by another tag. For more info see https://www.w3.org/TR/html5/syntax.html#closing-elements-that-have-implied-end-tags`;\n            this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, errMsg));\n        }\n    }\n    _popElement(fullName) {\n        for (let stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {\n            const el = this._elementStack[stackIndex];\n            if (el.name == fullName) {\n                this._elementStack.splice(stackIndex, this._elementStack.length - stackIndex);\n                return true;\n            }\n            if (!this.getTagDefinition(el.name).closedByParent) {\n                return false;\n            }\n        }\n        return false;\n    }\n    _consumeAttr(attrName) {\n        const fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);\n        let end = attrName.sourceSpan.end;\n        let value = '';\n        let valueSpan = undefined;\n        if (this._peek.type === TokenType.ATTR_QUOTE) {\n            this._advance();\n        }\n        if (this._peek.type === TokenType.ATTR_VALUE) {\n            const valueToken = this._advance();\n            value = valueToken.parts[0];\n            end = valueToken.sourceSpan.end;\n            valueSpan = valueToken.sourceSpan;\n        }\n        if (this._peek.type === TokenType.ATTR_QUOTE) {\n            const quoteToken = this._advance();\n            end = quoteToken.sourceSpan.end;\n        }\n        return new Attribute(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, end), valueSpan);\n    }\n    _getParentElement() {\n        return this._elementStack.length > 0 ? this._elementStack[this._elementStack.length - 1] : null;\n    }\n    /**\n     * Returns the parent in the DOM and the container.\n     *\n     * `<ng-container>` elements are skipped as they are not rendered as DOM element.\n     */\n    _getParentElementSkippingContainers() {\n        let container = null;\n        for (let i = this._elementStack.length - 1; i >= 0; i--) {\n            if (!isNgContainer(this._elementStack[i].name)) {\n                return { parent: this._elementStack[i], container };\n            }\n            container = this._elementStack[i];\n        }\n        return { parent: null, container };\n    }\n    _addToParent(node) {\n        const parent = this._getParentElement();\n        if (parent != null) {\n            parent.children.push(node);\n        }\n        else {\n            this._rootNodes.push(node);\n        }\n    }\n    /**\n     * Insert a node between the parent and the container.\n     * When no container is given, the node is appended as a child of the parent.\n     * Also updates the element stack accordingly.\n     *\n     * @internal\n     */\n    _insertBeforeContainer(parent, container, node) {\n        if (!container) {\n            this._addToParent(node);\n            this._elementStack.push(node);\n        }\n        else {\n            if (parent) {\n                // replace the container with the new node in the children\n                const index = parent.children.indexOf(container);\n                parent.children[index] = node;\n            }\n            else {\n                this._rootNodes.push(node);\n            }\n            node.children.push(container);\n            this._elementStack.splice(this._elementStack.indexOf(container), 0, node);\n        }\n    }\n    _getElementFullName(prefix, localName, parentElement) {\n        if (prefix === '') {\n            prefix = this.getTagDefinition(localName).implicitNamespacePrefix || '';\n            if (prefix === '' && parentElement != null) {\n                prefix = getNsPrefix(parentElement.name);\n            }\n        }\n        return mergeNsAndName(prefix, localName);\n    }\n}\nfunction lastOnStack(stack, element) {\n    return stack.length > 0 && stack[stack.length - 1] === element;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass HtmlParser extends Parser {\n    constructor() { super(getHtmlTagDefinition); }\n    parse(source, url, options) {\n        return super.parse(source, url, options);\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst PRESERVE_WS_ATTR_NAME = 'ngPreserveWhitespaces';\nconst SKIP_WS_TRIM_TAGS = new Set(['pre', 'template', 'textarea', 'script', 'style']);\n// Equivalent to \\s with \\u00a0 (non-breaking space) excluded.\n// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\nconst WS_CHARS = ' \\f\\n\\r\\t\\v\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff';\nconst NO_WS_REGEXP = new RegExp(`[^${WS_CHARS}]`);\nconst WS_REPLACE_REGEXP = new RegExp(`[${WS_CHARS}]{2,}`, 'g');\nfunction hasPreserveWhitespacesAttr(attrs) {\n    return attrs.some((attr) => attr.name === PRESERVE_WS_ATTR_NAME);\n}\n/**\n * Angular Dart introduced &ngsp; as a placeholder for non-removable space, see:\n * https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart#L25-L32\n * In Angular Dart &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character\n * and later on replaced by a space. We are re-implementing the same idea here.\n */\nfunction replaceNgsp(value) {\n    // lexer is replacing the &ngsp; pseudo-entity with NGSP_UNICODE\n    return value.replace(new RegExp(NGSP_UNICODE, 'g'), ' ');\n}\n/**\n * This visitor can walk HTML parse tree and remove / trim text nodes using the following rules:\n * - consider spaces, tabs and new lines as whitespace characters;\n * - drop text nodes consisting of whitespace characters only;\n * - for all other text nodes replace consecutive whitespace characters with one space;\n * - convert &ngsp; pseudo-entity to a single space;\n *\n * Removal and trimming of whitespaces have positive performance impact (less code to generate\n * while compiling templates, faster view creation). At the same time it can be \"destructive\"\n * in some cases (whitespaces can influence layout). Because of the potential of breaking layout\n * this visitor is not activated by default in Angular 5 and people need to explicitly opt-in for\n * whitespace removal. The default option for whitespace removal will be revisited in Angular 6\n * and might be changed to \"on\" by default.\n */\nclass WhitespaceVisitor {\n    visitElement(element, context) {\n        if (SKIP_WS_TRIM_TAGS.has(element.name) || hasPreserveWhitespacesAttr(element.attrs)) {\n            // don't descent into elements where we need to preserve whitespaces\n            // but still visit all attributes to eliminate one used as a market to preserve WS\n            return new Element$1(element.name, visitAll$1(this, element.attrs), element.children, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);\n        }\n        return new Element$1(element.name, element.attrs, visitAll$1(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);\n    }\n    visitAttribute(attribute, context) {\n        return attribute.name !== PRESERVE_WS_ATTR_NAME ? attribute : null;\n    }\n    visitText(text, context) {\n        const isNotBlank = text.value.match(NO_WS_REGEXP);\n        if (isNotBlank) {\n            return new Text$3(replaceNgsp(text.value).replace(WS_REPLACE_REGEXP, ' '), text.sourceSpan, text.i18n);\n        }\n        return null;\n    }\n    visitComment(comment, context) { return comment; }\n    visitExpansion(expansion, context) { return expansion; }\n    visitExpansionCase(expansionCase, context) { return expansionCase; }\n}\nfunction removeWhitespaces(htmlAstWithErrors) {\n    return new ParseTreeResult(visitAll$1(new WhitespaceVisitor(), htmlAstWithErrors.rootNodes), htmlAstWithErrors.errors);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// http://cldr.unicode.org/index/cldr-spec/plural-rules\nconst PLURAL_CASES = ['zero', 'one', 'two', 'few', 'many', 'other'];\n/**\n * Expands special forms into elements.\n *\n * For example,\n *\n * ```\n * { messages.length, plural,\n *   =0 {zero}\n *   =1 {one}\n *   other {more than one}\n * }\n * ```\n *\n * will be expanded into\n *\n * ```\n * <ng-container [ngPlural]=\"messages.length\">\n *   <ng-template ngPluralCase=\"=0\">zero</ng-template>\n *   <ng-template ngPluralCase=\"=1\">one</ng-template>\n *   <ng-template ngPluralCase=\"other\">more than one</ng-template>\n * </ng-container>\n * ```\n */\nfunction expandNodes(nodes) {\n    const expander = new _Expander();\n    return new ExpansionResult(visitAll$1(expander, nodes), expander.isExpanded, expander.errors);\n}\nclass ExpansionResult {\n    constructor(nodes, expanded, errors) {\n        this.nodes = nodes;\n        this.expanded = expanded;\n        this.errors = errors;\n    }\n}\nclass ExpansionError extends ParseError {\n    constructor(span, errorMsg) { super(span, errorMsg); }\n}\n/**\n * Expand expansion forms (plural, select) to directives\n *\n * @internal\n */\nclass _Expander {\n    constructor() {\n        this.isExpanded = false;\n        this.errors = [];\n    }\n    visitElement(element, context) {\n        return new Element$1(element.name, element.attrs, visitAll$1(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan);\n    }\n    visitAttribute(attribute, context) { return attribute; }\n    visitText(text, context) { return text; }\n    visitComment(comment, context) { return comment; }\n    visitExpansion(icu, context) {\n        this.isExpanded = true;\n        return icu.type == 'plural' ? _expandPluralForm(icu, this.errors) :\n            _expandDefaultForm(icu, this.errors);\n    }\n    visitExpansionCase(icuCase, context) {\n        throw new Error('Should not be reached');\n    }\n}\n// Plural forms are expanded to `NgPlural` and `NgPluralCase`s\nfunction _expandPluralForm(ast, errors) {\n    const children = ast.cases.map(c => {\n        if (PLURAL_CASES.indexOf(c.value) == -1 && !c.value.match(/^=\\d+$/)) {\n            errors.push(new ExpansionError(c.valueSourceSpan, `Plural cases should be \"=<number>\" or one of ${PLURAL_CASES.join(\", \")}`));\n        }\n        const expansionResult = expandNodes(c.expression);\n        errors.push(...expansionResult.errors);\n        return new Element$1(`ng-template`, [new Attribute('ngPluralCase', `${c.value}`, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);\n    });\n    const switchAttr = new Attribute('[ngPlural]', ast.switchValue, ast.switchValueSourceSpan);\n    return new Element$1('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);\n}\n// ICU messages (excluding plural form) are expanded to `NgSwitch`  and `NgSwitchCase`s\nfunction _expandDefaultForm(ast, errors) {\n    const children = ast.cases.map(c => {\n        const expansionResult = expandNodes(c.expression);\n        errors.push(...expansionResult.errors);\n        if (c.value === 'other') {\n            // other is the default case when no values match\n            return new Element$1(`ng-template`, [new Attribute('ngSwitchDefault', '', c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);\n        }\n        return new Element$1(`ng-template`, [new Attribute('ngSwitchCase', `${c.value}`, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);\n    });\n    const switchAttr = new Attribute('[ngSwitch]', ast.switchValue, ast.switchValueSourceSpan);\n    return new Element$1('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A segment of text within the template.\n */\nclass TextAst {\n    constructor(value, ngContentIndex, sourceSpan) {\n        this.value = value;\n        this.ngContentIndex = ngContentIndex;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(visitor, context) { return visitor.visitText(this, context); }\n}\n/**\n * A bound expression within the text of a template.\n */\nclass BoundTextAst {\n    constructor(value, ngContentIndex, sourceSpan) {\n        this.value = value;\n        this.ngContentIndex = ngContentIndex;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(visitor, context) {\n        return visitor.visitBoundText(this, context);\n    }\n}\n/**\n * A plain attribute on an element.\n */\nclass AttrAst {\n    constructor(name, value, sourceSpan) {\n        this.name = name;\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(visitor, context) { return visitor.visitAttr(this, context); }\n}\nconst BoundPropertyMapping = {\n    [4 /* Animation */]: 4 /* Animation */,\n    [1 /* Attribute */]: 1 /* Attribute */,\n    [2 /* Class */]: 2 /* Class */,\n    [0 /* Property */]: 0 /* Property */,\n    [3 /* Style */]: 3 /* Style */,\n};\n/**\n * A binding for an element property (e.g. `[property]=\"expression\"`) or an animation trigger (e.g.\n * `[@trigger]=\"stateExp\"`)\n */\nclass BoundElementPropertyAst {\n    constructor(name, type, securityContext, value, unit, sourceSpan) {\n        this.name = name;\n        this.type = type;\n        this.securityContext = securityContext;\n        this.value = value;\n        this.unit = unit;\n        this.sourceSpan = sourceSpan;\n        this.isAnimation = this.type === 4 /* Animation */;\n    }\n    static fromBoundProperty(prop) {\n        const type = BoundPropertyMapping[prop.type];\n        return new BoundElementPropertyAst(prop.name, type, prop.securityContext, prop.value, prop.unit, prop.sourceSpan);\n    }\n    visit(visitor, context) {\n        return visitor.visitElementProperty(this, context);\n    }\n}\n/**\n * A binding for an element event (e.g. `(event)=\"handler()\"`) or an animation trigger event (e.g.\n * `(@trigger.phase)=\"callback($event)\"`).\n */\nclass BoundEventAst {\n    constructor(name, target, phase, handler, sourceSpan, handlerSpan) {\n        this.name = name;\n        this.target = target;\n        this.phase = phase;\n        this.handler = handler;\n        this.sourceSpan = sourceSpan;\n        this.handlerSpan = handlerSpan;\n        this.fullName = BoundEventAst.calcFullName(this.name, this.target, this.phase);\n        this.isAnimation = !!this.phase;\n    }\n    static calcFullName(name, target, phase) {\n        if (target) {\n            return `${target}:${name}`;\n        }\n        if (phase) {\n            return `@${name}.${phase}`;\n        }\n        return name;\n    }\n    static fromParsedEvent(event) {\n        const target = event.type === 0 /* Regular */ ? event.targetOrPhase : null;\n        const phase = event.type === 1 /* Animation */ ? event.targetOrPhase : null;\n        return new BoundEventAst(event.name, target, phase, event.handler, event.sourceSpan, event.handlerSpan);\n    }\n    visit(visitor, context) {\n        return visitor.visitEvent(this, context);\n    }\n}\n/**\n * A reference declaration on an element (e.g. `let someName=\"expression\"`).\n */\nclass ReferenceAst {\n    constructor(name, value, originalValue, sourceSpan) {\n        this.name = name;\n        this.value = value;\n        this.originalValue = originalValue;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(visitor, context) {\n        return visitor.visitReference(this, context);\n    }\n}\n/**\n * A variable declaration on a <ng-template> (e.g. `var-someName=\"someLocalName\"`).\n */\nclass VariableAst {\n    constructor(name, value, sourceSpan) {\n        this.name = name;\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    static fromParsedVariable(v) {\n        return new VariableAst(v.name, v.value, v.sourceSpan);\n    }\n    visit(visitor, context) {\n        return visitor.visitVariable(this, context);\n    }\n}\n/**\n * An element declaration in a template.\n */\nclass ElementAst {\n    constructor(name, attrs, inputs, outputs, references, directives, providers, hasViewContainer, queryMatches, children, ngContentIndex, sourceSpan, endSourceSpan) {\n        this.name = name;\n        this.attrs = attrs;\n        this.inputs = inputs;\n        this.outputs = outputs;\n        this.references = references;\n        this.directives = directives;\n        this.providers = providers;\n        this.hasViewContainer = hasViewContainer;\n        this.queryMatches = queryMatches;\n        this.children = children;\n        this.ngContentIndex = ngContentIndex;\n        this.sourceSpan = sourceSpan;\n        this.endSourceSpan = endSourceSpan;\n    }\n    visit(visitor, context) {\n        return visitor.visitElement(this, context);\n    }\n}\n/**\n * A `<ng-template>` element included in an Angular template.\n */\nclass EmbeddedTemplateAst {\n    constructor(attrs, outputs, references, variables, directives, providers, hasViewContainer, queryMatches, children, ngContentIndex, sourceSpan) {\n        this.attrs = attrs;\n        this.outputs = outputs;\n        this.references = references;\n        this.variables = variables;\n        this.directives = directives;\n        this.providers = providers;\n        this.hasViewContainer = hasViewContainer;\n        this.queryMatches = queryMatches;\n        this.children = children;\n        this.ngContentIndex = ngContentIndex;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(visitor, context) {\n        return visitor.visitEmbeddedTemplate(this, context);\n    }\n}\n/**\n * A directive property with a bound value (e.g. `*ngIf=\"condition\").\n */\nclass BoundDirectivePropertyAst {\n    constructor(directiveName, templateName, value, sourceSpan) {\n        this.directiveName = directiveName;\n        this.templateName = templateName;\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(visitor, context) {\n        return visitor.visitDirectiveProperty(this, context);\n    }\n}\n/**\n * A directive declared on an element.\n */\nclass DirectiveAst {\n    constructor(directive, inputs, hostProperties, hostEvents, contentQueryStartId, sourceSpan) {\n        this.directive = directive;\n        this.inputs = inputs;\n        this.hostProperties = hostProperties;\n        this.hostEvents = hostEvents;\n        this.contentQueryStartId = contentQueryStartId;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(visitor, context) {\n        return visitor.visitDirective(this, context);\n    }\n}\n/**\n * A provider declared on an element\n */\nclass ProviderAst {\n    constructor(token, multiProvider, eager, providers, providerType, lifecycleHooks, sourceSpan, isModule) {\n        this.token = token;\n        this.multiProvider = multiProvider;\n        this.eager = eager;\n        this.providers = providers;\n        this.providerType = providerType;\n        this.lifecycleHooks = lifecycleHooks;\n        this.sourceSpan = sourceSpan;\n        this.isModule = isModule;\n    }\n    visit(visitor, context) {\n        // No visit method in the visitor for now...\n        return null;\n    }\n}\nvar ProviderAstType;\n(function (ProviderAstType) {\n    ProviderAstType[ProviderAstType[\"PublicService\"] = 0] = \"PublicService\";\n    ProviderAstType[ProviderAstType[\"PrivateService\"] = 1] = \"PrivateService\";\n    ProviderAstType[ProviderAstType[\"Component\"] = 2] = \"Component\";\n    ProviderAstType[ProviderAstType[\"Directive\"] = 3] = \"Directive\";\n    ProviderAstType[ProviderAstType[\"Builtin\"] = 4] = \"Builtin\";\n})(ProviderAstType || (ProviderAstType = {}));\n/**\n * Position where content is to be projected (instance of `<ng-content>` in a template).\n */\nclass NgContentAst {\n    constructor(index, ngContentIndex, sourceSpan) {\n        this.index = index;\n        this.ngContentIndex = ngContentIndex;\n        this.sourceSpan = sourceSpan;\n    }\n    visit(visitor, context) {\n        return visitor.visitNgContent(this, context);\n    }\n}\n/**\n * A visitor that accepts each node but doesn't do anything. It is intended to be used\n * as the base class for a visitor that is only interested in a subset of the node types.\n */\nclass NullTemplateVisitor {\n    visitNgContent(ast, context) { }\n    visitEmbeddedTemplate(ast, context) { }\n    visitElement(ast, context) { }\n    visitReference(ast, context) { }\n    visitVariable(ast, context) { }\n    visitEvent(ast, context) { }\n    visitElementProperty(ast, context) { }\n    visitAttr(ast, context) { }\n    visitBoundText(ast, context) { }\n    visitText(ast, context) { }\n    visitDirective(ast, context) { }\n    visitDirectiveProperty(ast, context) { }\n}\n/**\n * Base class that can be used to build a visitor that visits each node\n * in an template ast recursively.\n */\nclass RecursiveTemplateAstVisitor extends NullTemplateVisitor {\n    constructor() { super(); }\n    // Nodes with children\n    visitEmbeddedTemplate(ast, context) {\n        return this.visitChildren(context, visit => {\n            visit(ast.attrs);\n            visit(ast.references);\n            visit(ast.variables);\n            visit(ast.directives);\n            visit(ast.providers);\n            visit(ast.children);\n        });\n    }\n    visitElement(ast, context) {\n        return this.visitChildren(context, visit => {\n            visit(ast.attrs);\n            visit(ast.inputs);\n            visit(ast.outputs);\n            visit(ast.references);\n            visit(ast.directives);\n            visit(ast.providers);\n            visit(ast.children);\n        });\n    }\n    visitDirective(ast, context) {\n        return this.visitChildren(context, visit => {\n            visit(ast.inputs);\n            visit(ast.hostProperties);\n            visit(ast.hostEvents);\n        });\n    }\n    visitChildren(context, cb) {\n        let results = [];\n        let t = this;\n        function visit(children) {\n            if (children && children.length)\n                results.push(templateVisitAll(t, children, context));\n        }\n        cb(visit);\n        return [].concat.apply([], results);\n    }\n}\n/**\n * Visit every node in a list of {@link TemplateAst}s with the given {@link TemplateAstVisitor}.\n */\nfunction templateVisitAll(visitor, asts, context = null) {\n    const result = [];\n    const visit = visitor.visit ?\n        (ast) => visitor.visit(ast, context) || ast.visit(visitor, context) :\n        (ast) => ast.visit(visitor, context);\n    asts.forEach(ast => {\n        const astResult = visit(ast);\n        if (astResult) {\n            result.push(astResult);\n        }\n    });\n    return result;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ProviderError extends ParseError {\n    constructor(message, span) { super(span, message); }\n}\nclass ProviderViewContext {\n    constructor(reflector, component) {\n        this.reflector = reflector;\n        this.component = component;\n        this.errors = [];\n        this.viewQueries = _getViewQueries(component);\n        this.viewProviders = new Map();\n        component.viewProviders.forEach((provider) => {\n            if (this.viewProviders.get(tokenReference(provider.token)) == null) {\n                this.viewProviders.set(tokenReference(provider.token), true);\n            }\n        });\n    }\n}\nclass ProviderElementContext {\n    constructor(viewContext, _parent, _isViewRoot, _directiveAsts, attrs, refs, isTemplate, contentQueryStartId, _sourceSpan) {\n        this.viewContext = viewContext;\n        this._parent = _parent;\n        this._isViewRoot = _isViewRoot;\n        this._directiveAsts = _directiveAsts;\n        this._sourceSpan = _sourceSpan;\n        this._transformedProviders = new Map();\n        this._seenProviders = new Map();\n        this._queriedTokens = new Map();\n        this.transformedHasViewContainer = false;\n        this._attrs = {};\n        attrs.forEach((attrAst) => this._attrs[attrAst.name] = attrAst.value);\n        const directivesMeta = _directiveAsts.map(directiveAst => directiveAst.directive);\n        this._allProviders =\n            _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, viewContext.errors);\n        this._contentQueries = _getContentQueries(contentQueryStartId, directivesMeta);\n        Array.from(this._allProviders.values()).forEach((provider) => {\n            this._addQueryReadsTo(provider.token, provider.token, this._queriedTokens);\n        });\n        if (isTemplate) {\n            const templateRefId = createTokenForExternalReference(this.viewContext.reflector, Identifiers.TemplateRef);\n            this._addQueryReadsTo(templateRefId, templateRefId, this._queriedTokens);\n        }\n        refs.forEach((refAst) => {\n            let defaultQueryValue = refAst.value ||\n                createTokenForExternalReference(this.viewContext.reflector, Identifiers.ElementRef);\n            this._addQueryReadsTo({ value: refAst.name }, defaultQueryValue, this._queriedTokens);\n        });\n        if (this._queriedTokens.get(this.viewContext.reflector.resolveExternalReference(Identifiers.ViewContainerRef))) {\n            this.transformedHasViewContainer = true;\n        }\n        // create the providers that we know are eager first\n        Array.from(this._allProviders.values()).forEach((provider) => {\n            const eager = provider.eager || this._queriedTokens.get(tokenReference(provider.token));\n            if (eager) {\n                this._getOrCreateLocalProvider(provider.providerType, provider.token, true);\n            }\n        });\n    }\n    afterElement() {\n        // collect lazy providers\n        Array.from(this._allProviders.values()).forEach((provider) => {\n            this._getOrCreateLocalProvider(provider.providerType, provider.token, false);\n        });\n    }\n    get transformProviders() {\n        // Note: Maps keep their insertion order.\n        const lazyProviders = [];\n        const eagerProviders = [];\n        this._transformedProviders.forEach(provider => {\n            if (provider.eager) {\n                eagerProviders.push(provider);\n            }\n            else {\n                lazyProviders.push(provider);\n            }\n        });\n        return lazyProviders.concat(eagerProviders);\n    }\n    get transformedDirectiveAsts() {\n        const sortedProviderTypes = this.transformProviders.map(provider => provider.token.identifier);\n        const sortedDirectives = this._directiveAsts.slice();\n        sortedDirectives.sort((dir1, dir2) => sortedProviderTypes.indexOf(dir1.directive.type) -\n            sortedProviderTypes.indexOf(dir2.directive.type));\n        return sortedDirectives;\n    }\n    get queryMatches() {\n        const allMatches = [];\n        this._queriedTokens.forEach((matches) => { allMatches.push(...matches); });\n        return allMatches;\n    }\n    _addQueryReadsTo(token, defaultValue, queryReadTokens) {\n        this._getQueriesFor(token).forEach((query) => {\n            const queryValue = query.meta.read || defaultValue;\n            const tokenRef = tokenReference(queryValue);\n            let queryMatches = queryReadTokens.get(tokenRef);\n            if (!queryMatches) {\n                queryMatches = [];\n                queryReadTokens.set(tokenRef, queryMatches);\n            }\n            queryMatches.push({ queryId: query.queryId, value: queryValue });\n        });\n    }\n    _getQueriesFor(token) {\n        const result = [];\n        let currentEl = this;\n        let distance = 0;\n        let queries;\n        while (currentEl !== null) {\n            queries = currentEl._contentQueries.get(tokenReference(token));\n            if (queries) {\n                result.push(...queries.filter((query) => query.meta.descendants || distance <= 1));\n            }\n            if (currentEl._directiveAsts.length > 0) {\n                distance++;\n            }\n            currentEl = currentEl._parent;\n        }\n        queries = this.viewContext.viewQueries.get(tokenReference(token));\n        if (queries) {\n            result.push(...queries);\n        }\n        return result;\n    }\n    _getOrCreateLocalProvider(requestingProviderType, token, eager) {\n        const resolvedProvider = this._allProviders.get(tokenReference(token));\n        if (!resolvedProvider || ((requestingProviderType === ProviderAstType.Directive ||\n            requestingProviderType === ProviderAstType.PublicService) &&\n            resolvedProvider.providerType === ProviderAstType.PrivateService) ||\n            ((requestingProviderType === ProviderAstType.PrivateService ||\n                requestingProviderType === ProviderAstType.PublicService) &&\n                resolvedProvider.providerType === ProviderAstType.Builtin)) {\n            return null;\n        }\n        let transformedProviderAst = this._transformedProviders.get(tokenReference(token));\n        if (transformedProviderAst) {\n            return transformedProviderAst;\n        }\n        if (this._seenProviders.get(tokenReference(token)) != null) {\n            this.viewContext.errors.push(new ProviderError(`Cannot instantiate cyclic dependency! ${tokenName(token)}`, this._sourceSpan));\n            return null;\n        }\n        this._seenProviders.set(tokenReference(token), true);\n        const transformedProviders = resolvedProvider.providers.map((provider) => {\n            let transformedUseValue = provider.useValue;\n            let transformedUseExisting = provider.useExisting;\n            let transformedDeps = undefined;\n            if (provider.useExisting != null) {\n                const existingDiDep = this._getDependency(resolvedProvider.providerType, { token: provider.useExisting }, eager);\n                if (existingDiDep.token != null) {\n                    transformedUseExisting = existingDiDep.token;\n                }\n                else {\n                    transformedUseExisting = null;\n                    transformedUseValue = existingDiDep.value;\n                }\n            }\n            else if (provider.useFactory) {\n                const deps = provider.deps || provider.useFactory.diDeps;\n                transformedDeps =\n                    deps.map((dep) => this._getDependency(resolvedProvider.providerType, dep, eager));\n            }\n            else if (provider.useClass) {\n                const deps = provider.deps || provider.useClass.diDeps;\n                transformedDeps =\n                    deps.map((dep) => this._getDependency(resolvedProvider.providerType, dep, eager));\n            }\n            return _transformProvider(provider, {\n                useExisting: transformedUseExisting,\n                useValue: transformedUseValue,\n                deps: transformedDeps\n            });\n        });\n        transformedProviderAst =\n            _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });\n        this._transformedProviders.set(tokenReference(token), transformedProviderAst);\n        return transformedProviderAst;\n    }\n    _getLocalDependency(requestingProviderType, dep, eager = false) {\n        if (dep.isAttribute) {\n            const attrValue = this._attrs[dep.token.value];\n            return { isValue: true, value: attrValue == null ? null : attrValue };\n        }\n        if (dep.token != null) {\n            // access builtints\n            if ((requestingProviderType === ProviderAstType.Directive ||\n                requestingProviderType === ProviderAstType.Component)) {\n                if (tokenReference(dep.token) ===\n                    this.viewContext.reflector.resolveExternalReference(Identifiers.Renderer) ||\n                    tokenReference(dep.token) ===\n                        this.viewContext.reflector.resolveExternalReference(Identifiers.ElementRef) ||\n                    tokenReference(dep.token) ===\n                        this.viewContext.reflector.resolveExternalReference(Identifiers.ChangeDetectorRef) ||\n                    tokenReference(dep.token) ===\n                        this.viewContext.reflector.resolveExternalReference(Identifiers.TemplateRef)) {\n                    return dep;\n                }\n                if (tokenReference(dep.token) ===\n                    this.viewContext.reflector.resolveExternalReference(Identifiers.ViewContainerRef)) {\n                    this.transformedHasViewContainer = true;\n                }\n            }\n            // access the injector\n            if (tokenReference(dep.token) ===\n                this.viewContext.reflector.resolveExternalReference(Identifiers.Injector)) {\n                return dep;\n            }\n            // access providers\n            if (this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager) != null) {\n                return dep;\n            }\n        }\n        return null;\n    }\n    _getDependency(requestingProviderType, dep, eager = false) {\n        let currElement = this;\n        let currEager = eager;\n        let result = null;\n        if (!dep.isSkipSelf) {\n            result = this._getLocalDependency(requestingProviderType, dep, eager);\n        }\n        if (dep.isSelf) {\n            if (!result && dep.isOptional) {\n                result = { isValue: true, value: null };\n            }\n        }\n        else {\n            // check parent elements\n            while (!result && currElement._parent) {\n                const prevElement = currElement;\n                currElement = currElement._parent;\n                if (prevElement._isViewRoot) {\n                    currEager = false;\n                }\n                result = currElement._getLocalDependency(ProviderAstType.PublicService, dep, currEager);\n            }\n            // check @Host restriction\n            if (!result) {\n                if (!dep.isHost || this.viewContext.component.isHost ||\n                    this.viewContext.component.type.reference === tokenReference(dep.token) ||\n                    this.viewContext.viewProviders.get(tokenReference(dep.token)) != null) {\n                    result = dep;\n                }\n                else {\n                    result = dep.isOptional ? { isValue: true, value: null } : null;\n                }\n            }\n        }\n        if (!result) {\n            this.viewContext.errors.push(new ProviderError(`No provider for ${tokenName(dep.token)}`, this._sourceSpan));\n        }\n        return result;\n    }\n}\nclass NgModuleProviderAnalyzer {\n    constructor(reflector, ngModule, extraProviders, sourceSpan) {\n        this.reflector = reflector;\n        this._transformedProviders = new Map();\n        this._seenProviders = new Map();\n        this._errors = [];\n        this._allProviders = new Map();\n        ngModule.transitiveModule.modules.forEach((ngModuleType) => {\n            const ngModuleProvider = { token: { identifier: ngModuleType }, useClass: ngModuleType };\n            _resolveProviders([ngModuleProvider], ProviderAstType.PublicService, true, sourceSpan, this._errors, this._allProviders, /* isModule */ true);\n        });\n        _resolveProviders(ngModule.transitiveModule.providers.map(entry => entry.provider).concat(extraProviders), ProviderAstType.PublicService, false, sourceSpan, this._errors, this._allProviders, \n        /* isModule */ false);\n    }\n    parse() {\n        Array.from(this._allProviders.values()).forEach((provider) => {\n            this._getOrCreateLocalProvider(provider.token, provider.eager);\n        });\n        if (this._errors.length > 0) {\n            const errorString = this._errors.join('\\n');\n            throw new Error(`Provider parse errors:\\n${errorString}`);\n        }\n        // Note: Maps keep their insertion order.\n        const lazyProviders = [];\n        const eagerProviders = [];\n        this._transformedProviders.forEach(provider => {\n            if (provider.eager) {\n                eagerProviders.push(provider);\n            }\n            else {\n                lazyProviders.push(provider);\n            }\n        });\n        return lazyProviders.concat(eagerProviders);\n    }\n    _getOrCreateLocalProvider(token, eager) {\n        const resolvedProvider = this._allProviders.get(tokenReference(token));\n        if (!resolvedProvider) {\n            return null;\n        }\n        let transformedProviderAst = this._transformedProviders.get(tokenReference(token));\n        if (transformedProviderAst) {\n            return transformedProviderAst;\n        }\n        if (this._seenProviders.get(tokenReference(token)) != null) {\n            this._errors.push(new ProviderError(`Cannot instantiate cyclic dependency! ${tokenName(token)}`, resolvedProvider.sourceSpan));\n            return null;\n        }\n        this._seenProviders.set(tokenReference(token), true);\n        const transformedProviders = resolvedProvider.providers.map((provider) => {\n            let transformedUseValue = provider.useValue;\n            let transformedUseExisting = provider.useExisting;\n            let transformedDeps = undefined;\n            if (provider.useExisting != null) {\n                const existingDiDep = this._getDependency({ token: provider.useExisting }, eager, resolvedProvider.sourceSpan);\n                if (existingDiDep.token != null) {\n                    transformedUseExisting = existingDiDep.token;\n                }\n                else {\n                    transformedUseExisting = null;\n                    transformedUseValue = existingDiDep.value;\n                }\n            }\n            else if (provider.useFactory) {\n                const deps = provider.deps || provider.useFactory.diDeps;\n                transformedDeps =\n                    deps.map((dep) => this._getDependency(dep, eager, resolvedProvider.sourceSpan));\n            }\n            else if (provider.useClass) {\n                const deps = provider.deps || provider.useClass.diDeps;\n                transformedDeps =\n                    deps.map((dep) => this._getDependency(dep, eager, resolvedProvider.sourceSpan));\n            }\n            return _transformProvider(provider, {\n                useExisting: transformedUseExisting,\n                useValue: transformedUseValue,\n                deps: transformedDeps\n            });\n        });\n        transformedProviderAst =\n            _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });\n        this._transformedProviders.set(tokenReference(token), transformedProviderAst);\n        return transformedProviderAst;\n    }\n    _getDependency(dep, eager = false, requestorSourceSpan) {\n        if (!dep.isSkipSelf && dep.token != null) {\n            // access the injector\n            if (tokenReference(dep.token) ===\n                this.reflector.resolveExternalReference(Identifiers.Injector) ||\n                tokenReference(dep.token) ===\n                    this.reflector.resolveExternalReference(Identifiers.ComponentFactoryResolver)) ;\n            else if (this._getOrCreateLocalProvider(dep.token, eager) != null) ;\n        }\n        return dep;\n    }\n}\nfunction _transformProvider(provider, { useExisting, useValue, deps }) {\n    return {\n        token: provider.token,\n        useClass: provider.useClass,\n        useExisting: useExisting,\n        useFactory: provider.useFactory,\n        useValue: useValue,\n        deps: deps,\n        multi: provider.multi\n    };\n}\nfunction _transformProviderAst(provider, { eager, providers }) {\n    return new ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers, provider.providerType, provider.lifecycleHooks, provider.sourceSpan, provider.isModule);\n}\nfunction _resolveProvidersFromDirectives(directives, sourceSpan, targetErrors) {\n    const providersByToken = new Map();\n    directives.forEach((directive) => {\n        const dirProvider = { token: { identifier: directive.type }, useClass: directive.type };\n        _resolveProviders([dirProvider], directive.isComponent ? ProviderAstType.Component : ProviderAstType.Directive, true, sourceSpan, targetErrors, providersByToken, /* isModule */ false);\n    });\n    // Note: directives need to be able to overwrite providers of a component!\n    const directivesWithComponentFirst = directives.filter(dir => dir.isComponent).concat(directives.filter(dir => !dir.isComponent));\n    directivesWithComponentFirst.forEach((directive) => {\n        _resolveProviders(directive.providers, ProviderAstType.PublicService, false, sourceSpan, targetErrors, providersByToken, /* isModule */ false);\n        _resolveProviders(directive.viewProviders, ProviderAstType.PrivateService, false, sourceSpan, targetErrors, providersByToken, /* isModule */ false);\n    });\n    return providersByToken;\n}\nfunction _resolveProviders(providers, providerType, eager, sourceSpan, targetErrors, targetProvidersByToken, isModule) {\n    providers.forEach((provider) => {\n        let resolvedProvider = targetProvidersByToken.get(tokenReference(provider.token));\n        if (resolvedProvider != null && !!resolvedProvider.multiProvider !== !!provider.multi) {\n            targetErrors.push(new ProviderError(`Mixing multi and non multi provider is not possible for token ${tokenName(resolvedProvider.token)}`, sourceSpan));\n        }\n        if (!resolvedProvider) {\n            const lifecycleHooks = provider.token.identifier &&\n                provider.token.identifier.lifecycleHooks ?\n                provider.token.identifier.lifecycleHooks :\n                [];\n            const isUseValue = !(provider.useClass || provider.useExisting || provider.useFactory);\n            resolvedProvider = new ProviderAst(provider.token, !!provider.multi, eager || isUseValue, [provider], providerType, lifecycleHooks, sourceSpan, isModule);\n            targetProvidersByToken.set(tokenReference(provider.token), resolvedProvider);\n        }\n        else {\n            if (!provider.multi) {\n                resolvedProvider.providers.length = 0;\n            }\n            resolvedProvider.providers.push(provider);\n        }\n    });\n}\nfunction _getViewQueries(component) {\n    // Note: queries start with id 1 so we can use the number in a Bloom filter!\n    let viewQueryId = 1;\n    const viewQueries = new Map();\n    if (component.viewQueries) {\n        component.viewQueries.forEach((query) => _addQueryToTokenMap(viewQueries, { meta: query, queryId: viewQueryId++ }));\n    }\n    return viewQueries;\n}\nfunction _getContentQueries(contentQueryStartId, directives) {\n    let contentQueryId = contentQueryStartId;\n    const contentQueries = new Map();\n    directives.forEach((directive, directiveIndex) => {\n        if (directive.queries) {\n            directive.queries.forEach((query) => _addQueryToTokenMap(contentQueries, { meta: query, queryId: contentQueryId++ }));\n        }\n    });\n    return contentQueries;\n}\nfunction _addQueryToTokenMap(map, query) {\n    query.meta.selectors.forEach((token) => {\n        let entry = map.get(tokenReference(token));\n        if (!entry) {\n            entry = [];\n            map.set(tokenReference(token), entry);\n        }\n        entry.push(query);\n    });\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass StyleWithImports {\n    constructor(style, styleUrls) {\n        this.style = style;\n        this.styleUrls = styleUrls;\n    }\n}\nfunction isStyleUrlResolvable(url) {\n    if (url == null || url.length === 0 || url[0] == '/')\n        return false;\n    const schemeMatch = url.match(URL_WITH_SCHEMA_REGEXP);\n    return schemeMatch === null || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';\n}\n/**\n * Rewrites stylesheets by resolving and removing the @import urls that\n * are either relative or don't have a `package:` scheme\n */\nfunction extractStyleUrls(resolver, baseUrl, cssText) {\n    const foundUrls = [];\n    const modifiedCssText = cssText.replace(CSS_STRIPPABLE_COMMENT_REGEXP, '')\n        .replace(CSS_IMPORT_REGEXP, (...m) => {\n        const url = m[1] || m[2];\n        if (!isStyleUrlResolvable(url)) {\n            // Do not attempt to resolve non-package absolute URLs with URI\n            // scheme\n            return m[0];\n        }\n        foundUrls.push(resolver.resolve(baseUrl, url));\n        return '';\n    });\n    return new StyleWithImports(modifiedCssText, foundUrls);\n}\nconst CSS_IMPORT_REGEXP = /@import\\s+(?:url\\()?\\s*(?:(?:['\"]([^'\"]*))|([^;\\)\\s]*))[^;]*;?/g;\nconst CSS_STRIPPABLE_COMMENT_REGEXP = /\\/\\*(?!#\\s*(?:sourceURL|sourceMappingURL)=)[\\s\\S]+?\\*\\//g;\nconst URL_WITH_SCHEMA_REGEXP = /^([^:/?#]+):/;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst PROPERTY_PARTS_SEPARATOR = '.';\nconst ATTRIBUTE_PREFIX = 'attr';\nconst CLASS_PREFIX = 'class';\nconst STYLE_PREFIX = 'style';\nconst ANIMATE_PROP_PREFIX = 'animate-';\n/**\n * Parses bindings in templates and in the directive host area.\n */\nclass BindingParser {\n    constructor(_exprParser, _interpolationConfig, _schemaRegistry, pipes, errors) {\n        this._exprParser = _exprParser;\n        this._interpolationConfig = _interpolationConfig;\n        this._schemaRegistry = _schemaRegistry;\n        this.errors = errors;\n        this.pipesByName = null;\n        this._usedPipes = new Map();\n        // When the `pipes` parameter is `null`, do not check for used pipes\n        // This is used in IVY when we might not know the available pipes at compile time\n        if (pipes) {\n            const pipesByName = new Map();\n            pipes.forEach(pipe => pipesByName.set(pipe.name, pipe));\n            this.pipesByName = pipesByName;\n        }\n    }\n    get interpolationConfig() { return this._interpolationConfig; }\n    getUsedPipes() { return Array.from(this._usedPipes.values()); }\n    createBoundHostProperties(dirMeta, sourceSpan) {\n        if (dirMeta.hostProperties) {\n            const boundProps = [];\n            Object.keys(dirMeta.hostProperties).forEach(propName => {\n                const expression = dirMeta.hostProperties[propName];\n                if (typeof expression === 'string') {\n                    this.parsePropertyBinding(propName, expression, true, sourceSpan, [], boundProps);\n                }\n                else {\n                    this._reportError(`Value of the host property binding \"${propName}\" needs to be a string representing an expression but got \"${expression}\" (${typeof expression})`, sourceSpan);\n                }\n            });\n            return boundProps;\n        }\n        return null;\n    }\n    createDirectiveHostPropertyAsts(dirMeta, elementSelector, sourceSpan) {\n        const boundProps = this.createBoundHostProperties(dirMeta, sourceSpan);\n        return boundProps &&\n            boundProps.map((prop) => this.createBoundElementProperty(elementSelector, prop));\n    }\n    createDirectiveHostEventAsts(dirMeta, sourceSpan) {\n        if (dirMeta.hostListeners) {\n            const targetEvents = [];\n            Object.keys(dirMeta.hostListeners).forEach(propName => {\n                const expression = dirMeta.hostListeners[propName];\n                if (typeof expression === 'string') {\n                    // TODO: pass a more accurate handlerSpan for this event.\n                    this.parseEvent(propName, expression, sourceSpan, sourceSpan, [], targetEvents);\n                }\n                else {\n                    this._reportError(`Value of the host listener \"${propName}\" needs to be a string representing an expression but got \"${expression}\" (${typeof expression})`, sourceSpan);\n                }\n            });\n            return targetEvents;\n        }\n        return null;\n    }\n    parseInterpolation(value, sourceSpan) {\n        const sourceInfo = sourceSpan.start.toString();\n        try {\n            const ast = this._exprParser.parseInterpolation(value, sourceInfo, this._interpolationConfig);\n            if (ast)\n                this._reportExpressionParserErrors(ast.errors, sourceSpan);\n            this._checkPipes(ast, sourceSpan);\n            return ast;\n        }\n        catch (e) {\n            this._reportError(`${e}`, sourceSpan);\n            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\n        }\n    }\n    // Parse an inline template binding. ie `<tag *tplKey=\"<tplValue>\">`\n    parseInlineTemplateBinding(tplKey, tplValue, sourceSpan, targetMatchableAttrs, targetProps, targetVars) {\n        const bindings = this._parseTemplateBindings(tplKey, tplValue, sourceSpan);\n        for (let i = 0; i < bindings.length; i++) {\n            const binding = bindings[i];\n            if (binding.keyIsVar) {\n                targetVars.push(new ParsedVariable(binding.key, binding.name, sourceSpan));\n            }\n            else if (binding.expression) {\n                this._parsePropertyAst(binding.key, binding.expression, sourceSpan, targetMatchableAttrs, targetProps);\n            }\n            else {\n                targetMatchableAttrs.push([binding.key, '']);\n                this.parseLiteralAttr(binding.key, null, sourceSpan, targetMatchableAttrs, targetProps);\n            }\n        }\n    }\n    _parseTemplateBindings(tplKey, tplValue, sourceSpan) {\n        const sourceInfo = sourceSpan.start.toString();\n        try {\n            const bindingsResult = this._exprParser.parseTemplateBindings(tplKey, tplValue, sourceInfo);\n            this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan);\n            bindingsResult.templateBindings.forEach((binding) => {\n                if (binding.expression) {\n                    this._checkPipes(binding.expression, sourceSpan);\n                }\n            });\n            bindingsResult.warnings.forEach((warning) => { this._reportError(warning, sourceSpan, ParseErrorLevel.WARNING); });\n            return bindingsResult.templateBindings;\n        }\n        catch (e) {\n            this._reportError(`${e}`, sourceSpan);\n            return [];\n        }\n    }\n    parseLiteralAttr(name, value, sourceSpan, targetMatchableAttrs, targetProps) {\n        if (isAnimationLabel(name)) {\n            name = name.substring(1);\n            if (value) {\n                this._reportError(`Assigning animation triggers via @prop=\"exp\" attributes with an expression is invalid.` +\n                    ` Use property bindings (e.g. [@prop]=\"exp\") or use an attribute without a value (e.g. @prop) instead.`, sourceSpan, ParseErrorLevel.ERROR);\n            }\n            this._parseAnimation(name, value, sourceSpan, targetMatchableAttrs, targetProps);\n        }\n        else {\n            targetProps.push(new ParsedProperty(name, this._exprParser.wrapLiteralPrimitive(value, ''), ParsedPropertyType.LITERAL_ATTR, sourceSpan));\n        }\n    }\n    parsePropertyBinding(name, expression, isHost, sourceSpan, targetMatchableAttrs, targetProps) {\n        let isAnimationProp = false;\n        if (name.startsWith(ANIMATE_PROP_PREFIX)) {\n            isAnimationProp = true;\n            name = name.substring(ANIMATE_PROP_PREFIX.length);\n        }\n        else if (isAnimationLabel(name)) {\n            isAnimationProp = true;\n            name = name.substring(1);\n        }\n        if (isAnimationProp) {\n            this._parseAnimation(name, expression, sourceSpan, targetMatchableAttrs, targetProps);\n        }\n        else {\n            this._parsePropertyAst(name, this._parseBinding(expression, isHost, sourceSpan), sourceSpan, targetMatchableAttrs, targetProps);\n        }\n    }\n    parsePropertyInterpolation(name, value, sourceSpan, targetMatchableAttrs, targetProps) {\n        const expr = this.parseInterpolation(value, sourceSpan);\n        if (expr) {\n            this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps);\n            return true;\n        }\n        return false;\n    }\n    _parsePropertyAst(name, ast, sourceSpan, targetMatchableAttrs, targetProps) {\n        targetMatchableAttrs.push([name, ast.source]);\n        targetProps.push(new ParsedProperty(name, ast, ParsedPropertyType.DEFAULT, sourceSpan));\n    }\n    _parseAnimation(name, expression, sourceSpan, targetMatchableAttrs, targetProps) {\n        // This will occur when a @trigger is not paired with an expression.\n        // For animations it is valid to not have an expression since */void\n        // states will be applied by angular when the element is attached/detached\n        const ast = this._parseBinding(expression || 'undefined', false, sourceSpan);\n        targetMatchableAttrs.push([name, ast.source]);\n        targetProps.push(new ParsedProperty(name, ast, ParsedPropertyType.ANIMATION, sourceSpan));\n    }\n    _parseBinding(value, isHostBinding, sourceSpan) {\n        const sourceInfo = (sourceSpan && sourceSpan.start || '(unknown)').toString();\n        try {\n            const ast = isHostBinding ?\n                this._exprParser.parseSimpleBinding(value, sourceInfo, this._interpolationConfig) :\n                this._exprParser.parseBinding(value, sourceInfo, this._interpolationConfig);\n            if (ast)\n                this._reportExpressionParserErrors(ast.errors, sourceSpan);\n            this._checkPipes(ast, sourceSpan);\n            return ast;\n        }\n        catch (e) {\n            this._reportError(`${e}`, sourceSpan);\n            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\n        }\n    }\n    createBoundElementProperty(elementSelector, boundProp, skipValidation = false, mapPropertyName = true) {\n        if (boundProp.isAnimation) {\n            return new BoundElementProperty(boundProp.name, 4 /* Animation */, SecurityContext.NONE, boundProp.expression, null, boundProp.sourceSpan);\n        }\n        let unit = null;\n        let bindingType = undefined;\n        let boundPropertyName = null;\n        const parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);\n        let securityContexts = undefined;\n        // Check for special cases (prefix style, attr, class)\n        if (parts.length > 1) {\n            if (parts[0] == ATTRIBUTE_PREFIX) {\n                boundPropertyName = parts[1];\n                if (!skipValidation) {\n                    this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);\n                }\n                securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, true);\n                const nsSeparatorIdx = boundPropertyName.indexOf(':');\n                if (nsSeparatorIdx > -1) {\n                    const ns = boundPropertyName.substring(0, nsSeparatorIdx);\n                    const name = boundPropertyName.substring(nsSeparatorIdx + 1);\n                    boundPropertyName = mergeNsAndName(ns, name);\n                }\n                bindingType = 1 /* Attribute */;\n            }\n            else if (parts[0] == CLASS_PREFIX) {\n                boundPropertyName = parts[1];\n                bindingType = 2 /* Class */;\n                securityContexts = [SecurityContext.NONE];\n            }\n            else if (parts[0] == STYLE_PREFIX) {\n                unit = parts.length > 2 ? parts[2] : null;\n                boundPropertyName = parts[1];\n                bindingType = 3 /* Style */;\n                securityContexts = [SecurityContext.STYLE];\n            }\n        }\n        // If not a special case, use the full property name\n        if (boundPropertyName === null) {\n            const mappedPropName = this._schemaRegistry.getMappedPropName(boundProp.name);\n            boundPropertyName = mapPropertyName ? mappedPropName : boundProp.name;\n            securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, mappedPropName, false);\n            bindingType = 0 /* Property */;\n            if (!skipValidation) {\n                this._validatePropertyOrAttributeName(mappedPropName, boundProp.sourceSpan, false);\n            }\n        }\n        return new BoundElementProperty(boundPropertyName, bindingType, securityContexts[0], boundProp.expression, unit, boundProp.sourceSpan);\n    }\n    parseEvent(name, expression, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents) {\n        if (isAnimationLabel(name)) {\n            name = name.substr(1);\n            this._parseAnimationEvent(name, expression, sourceSpan, handlerSpan, targetEvents);\n        }\n        else {\n            this._parseRegularEvent(name, expression, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents);\n        }\n    }\n    calcPossibleSecurityContexts(selector, propName, isAttribute) {\n        const prop = this._schemaRegistry.getMappedPropName(propName);\n        return calcPossibleSecurityContexts(this._schemaRegistry, selector, prop, isAttribute);\n    }\n    _parseAnimationEvent(name, expression, sourceSpan, handlerSpan, targetEvents) {\n        const matches = splitAtPeriod(name, [name, '']);\n        const eventName = matches[0];\n        const phase = matches[1].toLowerCase();\n        if (phase) {\n            switch (phase) {\n                case 'start':\n                case 'done':\n                    const ast = this._parseAction(expression, handlerSpan);\n                    targetEvents.push(new ParsedEvent(eventName, phase, 1 /* Animation */, ast, sourceSpan, handlerSpan));\n                    break;\n                default:\n                    this._reportError(`The provided animation output phase value \"${phase}\" for \"@${eventName}\" is not supported (use start or done)`, sourceSpan);\n                    break;\n            }\n        }\n        else {\n            this._reportError(`The animation trigger output event (@${eventName}) is missing its phase value name (start or done are currently supported)`, sourceSpan);\n        }\n    }\n    _parseRegularEvent(name, expression, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents) {\n        // long format: 'target: eventName'\n        const [target, eventName] = splitAtColon(name, [null, name]);\n        const ast = this._parseAction(expression, handlerSpan);\n        targetMatchableAttrs.push([name, ast.source]);\n        targetEvents.push(new ParsedEvent(eventName, target, 0 /* Regular */, ast, sourceSpan, handlerSpan));\n        // Don't detect directives for event names for now,\n        // so don't add the event name to the matchableAttrs\n    }\n    _parseAction(value, sourceSpan) {\n        const sourceInfo = (sourceSpan && sourceSpan.start || '(unknown').toString();\n        try {\n            const ast = this._exprParser.parseAction(value, sourceInfo, this._interpolationConfig);\n            if (ast) {\n                this._reportExpressionParserErrors(ast.errors, sourceSpan);\n            }\n            if (!ast || ast.ast instanceof EmptyExpr) {\n                this._reportError(`Empty expressions are not allowed`, sourceSpan);\n                return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\n            }\n            this._checkPipes(ast, sourceSpan);\n            return ast;\n        }\n        catch (e) {\n            this._reportError(`${e}`, sourceSpan);\n            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\n        }\n    }\n    _reportError(message, sourceSpan, level = ParseErrorLevel.ERROR) {\n        this.errors.push(new ParseError(sourceSpan, message, level));\n    }\n    _reportExpressionParserErrors(errors, sourceSpan) {\n        for (const error of errors) {\n            this._reportError(error.message, sourceSpan);\n        }\n    }\n    // Make sure all the used pipes are known in `this.pipesByName`\n    _checkPipes(ast, sourceSpan) {\n        if (ast && this.pipesByName) {\n            const collector = new PipeCollector();\n            ast.visit(collector);\n            collector.pipes.forEach((ast, pipeName) => {\n                const pipeMeta = this.pipesByName.get(pipeName);\n                if (!pipeMeta) {\n                    this._reportError(`The pipe '${pipeName}' could not be found`, new ParseSourceSpan(sourceSpan.start.moveBy(ast.span.start), sourceSpan.start.moveBy(ast.span.end)));\n                }\n                else {\n                    this._usedPipes.set(pipeName, pipeMeta);\n                }\n            });\n        }\n    }\n    /**\n     * @param propName the name of the property / attribute\n     * @param sourceSpan\n     * @param isAttr true when binding to an attribute\n     */\n    _validatePropertyOrAttributeName(propName, sourceSpan, isAttr) {\n        const report = isAttr ? this._schemaRegistry.validateAttribute(propName) :\n            this._schemaRegistry.validateProperty(propName);\n        if (report.error) {\n            this._reportError(report.msg, sourceSpan, ParseErrorLevel.ERROR);\n        }\n    }\n}\nclass PipeCollector extends RecursiveAstVisitor$1 {\n    constructor() {\n        super(...arguments);\n        this.pipes = new Map();\n    }\n    visitPipe(ast, context) {\n        this.pipes.set(ast.name, ast);\n        ast.exp.visit(this);\n        this.visitAll(ast.args, context);\n        return null;\n    }\n}\nfunction isAnimationLabel(name) {\n    return name[0] == '@';\n}\nfunction calcPossibleSecurityContexts(registry, selector, propName, isAttribute) {\n    const ctxs = [];\n    CssSelector.parse(selector).forEach((selector) => {\n        const elementNames = selector.element ? [selector.element] : registry.allKnownElementNames();\n        const notElementNames = new Set(selector.notSelectors.filter(selector => selector.isElementSelector())\n            .map((selector) => selector.element));\n        const possibleElementNames = elementNames.filter(elementName => !notElementNames.has(elementName));\n        ctxs.push(...possibleElementNames.map(elementName => registry.securityContext(elementName, propName, isAttribute)));\n    });\n    return ctxs.length === 0 ? [SecurityContext.NONE] : Array.from(new Set(ctxs)).sort();\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst NG_CONTENT_SELECT_ATTR = 'select';\nconst LINK_ELEMENT = 'link';\nconst LINK_STYLE_REL_ATTR = 'rel';\nconst LINK_STYLE_HREF_ATTR = 'href';\nconst LINK_STYLE_REL_VALUE = 'stylesheet';\nconst STYLE_ELEMENT = 'style';\nconst SCRIPT_ELEMENT = 'script';\nconst NG_NON_BINDABLE_ATTR = 'ngNonBindable';\nconst NG_PROJECT_AS = 'ngProjectAs';\nfunction preparseElement(ast) {\n    let selectAttr = null;\n    let hrefAttr = null;\n    let relAttr = null;\n    let nonBindable = false;\n    let projectAs = '';\n    ast.attrs.forEach(attr => {\n        const lcAttrName = attr.name.toLowerCase();\n        if (lcAttrName == NG_CONTENT_SELECT_ATTR) {\n            selectAttr = attr.value;\n        }\n        else if (lcAttrName == LINK_STYLE_HREF_ATTR) {\n            hrefAttr = attr.value;\n        }\n        else if (lcAttrName == LINK_STYLE_REL_ATTR) {\n            relAttr = attr.value;\n        }\n        else if (attr.name == NG_NON_BINDABLE_ATTR) {\n            nonBindable = true;\n        }\n        else if (attr.name == NG_PROJECT_AS) {\n            if (attr.value.length > 0) {\n                projectAs = attr.value;\n            }\n        }\n    });\n    selectAttr = normalizeNgContentSelect(selectAttr);\n    const nodeName = ast.name.toLowerCase();\n    let type = PreparsedElementType.OTHER;\n    if (isNgContent(nodeName)) {\n        type = PreparsedElementType.NG_CONTENT;\n    }\n    else if (nodeName == STYLE_ELEMENT) {\n        type = PreparsedElementType.STYLE;\n    }\n    else if (nodeName == SCRIPT_ELEMENT) {\n        type = PreparsedElementType.SCRIPT;\n    }\n    else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {\n        type = PreparsedElementType.STYLESHEET;\n    }\n    return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);\n}\nvar PreparsedElementType;\n(function (PreparsedElementType) {\n    PreparsedElementType[PreparsedElementType[\"NG_CONTENT\"] = 0] = \"NG_CONTENT\";\n    PreparsedElementType[PreparsedElementType[\"STYLE\"] = 1] = \"STYLE\";\n    PreparsedElementType[PreparsedElementType[\"STYLESHEET\"] = 2] = \"STYLESHEET\";\n    PreparsedElementType[PreparsedElementType[\"SCRIPT\"] = 3] = \"SCRIPT\";\n    PreparsedElementType[PreparsedElementType[\"OTHER\"] = 4] = \"OTHER\";\n})(PreparsedElementType || (PreparsedElementType = {}));\nclass PreparsedElement {\n    constructor(type, selectAttr, hrefAttr, nonBindable, projectAs) {\n        this.type = type;\n        this.selectAttr = selectAttr;\n        this.hrefAttr = hrefAttr;\n        this.nonBindable = nonBindable;\n        this.projectAs = projectAs;\n    }\n}\nfunction normalizeNgContentSelect(selectAttr) {\n    if (selectAttr === null || selectAttr.length === 0) {\n        return '*';\n    }\n    return selectAttr;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.+))|\\[\\(([^\\)]+)\\)\\]|\\[([^\\]]+)\\]|\\(([^\\)]+)\\))$/;\n// Group 1 = \"bind-\"\nconst KW_BIND_IDX = 1;\n// Group 2 = \"let-\"\nconst KW_LET_IDX = 2;\n// Group 3 = \"ref-/#\"\nconst KW_REF_IDX = 3;\n// Group 4 = \"on-\"\nconst KW_ON_IDX = 4;\n// Group 5 = \"bindon-\"\nconst KW_BINDON_IDX = 5;\n// Group 6 = \"@\"\nconst KW_AT_IDX = 6;\n// Group 7 = the identifier after \"bind-\", \"let-\", \"ref-/#\", \"on-\", \"bindon-\" or \"@\"\nconst IDENT_KW_IDX = 7;\n// Group 8 = identifier inside [()]\nconst IDENT_BANANA_BOX_IDX = 8;\n// Group 9 = identifier inside []\nconst IDENT_PROPERTY_IDX = 9;\n// Group 10 = identifier inside ()\nconst IDENT_EVENT_IDX = 10;\nconst TEMPLATE_ATTR_PREFIX = '*';\nconst CLASS_ATTR = 'class';\nlet _TEXT_CSS_SELECTOR;\nfunction TEXT_CSS_SELECTOR() {\n    if (!_TEXT_CSS_SELECTOR) {\n        _TEXT_CSS_SELECTOR = CssSelector.parse('*')[0];\n    }\n    return _TEXT_CSS_SELECTOR;\n}\nclass TemplateParseError extends ParseError {\n    constructor(message, span, level) {\n        super(span, message, level);\n    }\n}\nclass TemplateParseResult {\n    constructor(templateAst, usedPipes, errors) {\n        this.templateAst = templateAst;\n        this.usedPipes = usedPipes;\n        this.errors = errors;\n    }\n}\nclass TemplateParser {\n    constructor(_config, _reflector, _exprParser, _schemaRegistry, _htmlParser, _console, transforms) {\n        this._config = _config;\n        this._reflector = _reflector;\n        this._exprParser = _exprParser;\n        this._schemaRegistry = _schemaRegistry;\n        this._htmlParser = _htmlParser;\n        this._console = _console;\n        this.transforms = transforms;\n    }\n    get expressionParser() { return this._exprParser; }\n    parse(component, template, directives, pipes, schemas, templateUrl, preserveWhitespaces) {\n        const result = this.tryParse(component, template, directives, pipes, schemas, templateUrl, preserveWhitespaces);\n        const warnings = result.errors.filter(error => error.level === ParseErrorLevel.WARNING);\n        const errors = result.errors.filter(error => error.level === ParseErrorLevel.ERROR);\n        if (warnings.length > 0) {\n            this._console.warn(`Template parse warnings:\\n${warnings.join('\\n')}`);\n        }\n        if (errors.length > 0) {\n            const errorString = errors.join('\\n');\n            throw syntaxError(`Template parse errors:\\n${errorString}`, errors);\n        }\n        return { template: result.templateAst, pipes: result.usedPipes };\n    }\n    tryParse(component, template, directives, pipes, schemas, templateUrl, preserveWhitespaces) {\n        let htmlParseResult = typeof template === 'string' ?\n            this._htmlParser.parse(template, templateUrl, {\n                tokenizeExpansionForms: true,\n                interpolationConfig: this.getInterpolationConfig(component)\n            }) :\n            template;\n        if (!preserveWhitespaces) {\n            htmlParseResult = removeWhitespaces(htmlParseResult);\n        }\n        return this.tryParseHtml(this.expandHtml(htmlParseResult), component, directives, pipes, schemas);\n    }\n    tryParseHtml(htmlAstWithErrors, component, directives, pipes, schemas) {\n        let result;\n        const errors = htmlAstWithErrors.errors;\n        const usedPipes = [];\n        if (htmlAstWithErrors.rootNodes.length > 0) {\n            const uniqDirectives = removeSummaryDuplicates(directives);\n            const uniqPipes = removeSummaryDuplicates(pipes);\n            const providerViewContext = new ProviderViewContext(this._reflector, component);\n            let interpolationConfig = undefined;\n            if (component.template && component.template.interpolation) {\n                interpolationConfig = {\n                    start: component.template.interpolation[0],\n                    end: component.template.interpolation[1]\n                };\n            }\n            const bindingParser = new BindingParser(this._exprParser, interpolationConfig, this._schemaRegistry, uniqPipes, errors);\n            const parseVisitor = new TemplateParseVisitor(this._reflector, this._config, providerViewContext, uniqDirectives, bindingParser, this._schemaRegistry, schemas, errors);\n            result = visitAll$1(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT);\n            errors.push(...providerViewContext.errors);\n            usedPipes.push(...bindingParser.getUsedPipes());\n        }\n        else {\n            result = [];\n        }\n        this._assertNoReferenceDuplicationOnTemplate(result, errors);\n        if (errors.length > 0) {\n            return new TemplateParseResult(result, usedPipes, errors);\n        }\n        if (this.transforms) {\n            this.transforms.forEach((transform) => { result = templateVisitAll(transform, result); });\n        }\n        return new TemplateParseResult(result, usedPipes, errors);\n    }\n    expandHtml(htmlAstWithErrors, forced = false) {\n        const errors = htmlAstWithErrors.errors;\n        if (errors.length == 0 || forced) {\n            // Transform ICU messages to angular directives\n            const expandedHtmlAst = expandNodes(htmlAstWithErrors.rootNodes);\n            errors.push(...expandedHtmlAst.errors);\n            htmlAstWithErrors = new ParseTreeResult(expandedHtmlAst.nodes, errors);\n        }\n        return htmlAstWithErrors;\n    }\n    getInterpolationConfig(component) {\n        if (component.template) {\n            return InterpolationConfig.fromArray(component.template.interpolation);\n        }\n        return undefined;\n    }\n    /** @internal */\n    _assertNoReferenceDuplicationOnTemplate(result, errors) {\n        const existingReferences = [];\n        result.filter(element => !!element.references)\n            .forEach(element => element.references.forEach((reference) => {\n            const name = reference.name;\n            if (existingReferences.indexOf(name) < 0) {\n                existingReferences.push(name);\n            }\n            else {\n                const error = new TemplateParseError(`Reference \"#${name}\" is defined several times`, reference.sourceSpan, ParseErrorLevel.ERROR);\n                errors.push(error);\n            }\n        }));\n    }\n}\nclass TemplateParseVisitor {\n    constructor(reflector, config, providerViewContext, directives, _bindingParser, _schemaRegistry, _schemas, _targetErrors) {\n        this.reflector = reflector;\n        this.config = config;\n        this.providerViewContext = providerViewContext;\n        this._bindingParser = _bindingParser;\n        this._schemaRegistry = _schemaRegistry;\n        this._schemas = _schemas;\n        this._targetErrors = _targetErrors;\n        this.selectorMatcher = new SelectorMatcher();\n        this.directivesIndex = new Map();\n        this.ngContentCount = 0;\n        // Note: queries start with id 1 so we can use the number in a Bloom filter!\n        this.contentQueryStartId = providerViewContext.component.viewQueries.length + 1;\n        directives.forEach((directive, index) => {\n            const selector = CssSelector.parse(directive.selector);\n            this.selectorMatcher.addSelectables(selector, directive);\n            this.directivesIndex.set(directive, index);\n        });\n    }\n    visitExpansion(expansion, context) { return null; }\n    visitExpansionCase(expansionCase, context) { return null; }\n    visitText(text, parent) {\n        const ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR());\n        const valueNoNgsp = replaceNgsp(text.value);\n        const expr = this._bindingParser.parseInterpolation(valueNoNgsp, text.sourceSpan);\n        return expr ? new BoundTextAst(expr, ngContentIndex, text.sourceSpan) :\n            new TextAst(valueNoNgsp, ngContentIndex, text.sourceSpan);\n    }\n    visitAttribute(attribute, context) {\n        return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);\n    }\n    visitComment(comment, context) { return null; }\n    visitElement(element, parent) {\n        const queryStartIndex = this.contentQueryStartId;\n        const elName = element.name;\n        const preparsedElement = preparseElement(element);\n        if (preparsedElement.type === PreparsedElementType.SCRIPT ||\n            preparsedElement.type === PreparsedElementType.STYLE) {\n            // Skipping <script> for security reasons\n            // Skipping <style> as we already processed them\n            // in the StyleCompiler\n            return null;\n        }\n        if (preparsedElement.type === PreparsedElementType.STYLESHEET &&\n            isStyleUrlResolvable(preparsedElement.hrefAttr)) {\n            // Skipping stylesheets with either relative urls or package scheme as we already processed\n            // them in the StyleCompiler\n            return null;\n        }\n        const matchableAttrs = [];\n        const elementOrDirectiveProps = [];\n        const elementOrDirectiveRefs = [];\n        const elementVars = [];\n        const events = [];\n        const templateElementOrDirectiveProps = [];\n        const templateMatchableAttrs = [];\n        const templateElementVars = [];\n        let hasInlineTemplates = false;\n        const attrs = [];\n        const isTemplateElement = isNgTemplate(element.name);\n        element.attrs.forEach(attr => {\n            const parsedVariables = [];\n            const hasBinding = this._parseAttr(isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, events, elementOrDirectiveRefs, elementVars);\n            elementVars.push(...parsedVariables.map(v => VariableAst.fromParsedVariable(v)));\n            let templateValue;\n            let templateKey;\n            const normalizedName = this._normalizeAttributeName(attr.name);\n            if (normalizedName.startsWith(TEMPLATE_ATTR_PREFIX)) {\n                templateValue = attr.value;\n                templateKey = normalizedName.substring(TEMPLATE_ATTR_PREFIX.length);\n            }\n            const hasTemplateBinding = templateValue != null;\n            if (hasTemplateBinding) {\n                if (hasInlineTemplates) {\n                    this._reportError(`Can't have multiple template bindings on one element. Use only one attribute prefixed with *`, attr.sourceSpan);\n                }\n                hasInlineTemplates = true;\n                const parsedVariables = [];\n                this._bindingParser.parseInlineTemplateBinding(templateKey, templateValue, attr.sourceSpan, templateMatchableAttrs, templateElementOrDirectiveProps, parsedVariables);\n                templateElementVars.push(...parsedVariables.map(v => VariableAst.fromParsedVariable(v)));\n            }\n            if (!hasBinding && !hasTemplateBinding) {\n                // don't include the bindings as attributes as well in the AST\n                attrs.push(this.visitAttribute(attr, null));\n                matchableAttrs.push([attr.name, attr.value]);\n            }\n        });\n        const elementCssSelector = createElementCssSelector(elName, matchableAttrs);\n        const { directives: directiveMetas, matchElement } = this._parseDirectives(this.selectorMatcher, elementCssSelector);\n        const references = [];\n        const boundDirectivePropNames = new Set();\n        const directiveAsts = this._createDirectiveAsts(isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps, elementOrDirectiveRefs, element.sourceSpan, references, boundDirectivePropNames);\n        const elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, boundDirectivePropNames);\n        const isViewRoot = parent.isTemplateElement || hasInlineTemplates;\n        const providerContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, isViewRoot, directiveAsts, attrs, references, isTemplateElement, queryStartIndex, element.sourceSpan);\n        const children = visitAll$1(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, ElementContext.create(isTemplateElement, directiveAsts, isTemplateElement ? parent.providerContext : providerContext));\n        providerContext.afterElement();\n        // Override the actual selector when the `ngProjectAs` attribute is provided\n        const projectionSelector = preparsedElement.projectAs != '' ?\n            CssSelector.parse(preparsedElement.projectAs)[0] :\n            elementCssSelector;\n        const ngContentIndex = parent.findNgContentIndex(projectionSelector);\n        let parsedElement;\n        if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {\n            // `<ng-content>` element\n            if (element.children && !element.children.every(_isEmptyTextNode)) {\n                this._reportError(`<ng-content> element cannot have content.`, element.sourceSpan);\n            }\n            parsedElement = new NgContentAst(this.ngContentCount++, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);\n        }\n        else if (isTemplateElement) {\n            // `<ng-template>` element\n            this._assertAllEventsPublishedByDirectives(directiveAsts, events);\n            this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, element.sourceSpan);\n            parsedElement = new EmbeddedTemplateAst(attrs, events, references, elementVars, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, providerContext.queryMatches, children, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);\n        }\n        else {\n            // element other than `<ng-content>` and `<ng-template>`\n            this._assertElementExists(matchElement, element);\n            this._assertOnlyOneComponent(directiveAsts, element.sourceSpan);\n            const ngContentIndex = hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);\n            parsedElement = new ElementAst(elName, attrs, elementProps, events, references, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, providerContext.queryMatches, children, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan, element.endSourceSpan || null);\n        }\n        if (hasInlineTemplates) {\n            // The element as a *-attribute\n            const templateQueryStartIndex = this.contentQueryStartId;\n            const templateSelector = createElementCssSelector('ng-template', templateMatchableAttrs);\n            const { directives } = this._parseDirectives(this.selectorMatcher, templateSelector);\n            const templateBoundDirectivePropNames = new Set();\n            const templateDirectiveAsts = this._createDirectiveAsts(true, elName, directives, templateElementOrDirectiveProps, [], element.sourceSpan, [], templateBoundDirectivePropNames);\n            const templateElementProps = this._createElementPropertyAsts(elName, templateElementOrDirectiveProps, templateBoundDirectivePropNames);\n            this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts, templateElementProps, element.sourceSpan);\n            const templateProviderContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, parent.isTemplateElement, templateDirectiveAsts, [], [], true, templateQueryStartIndex, element.sourceSpan);\n            templateProviderContext.afterElement();\n            parsedElement = new EmbeddedTemplateAst([], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts, templateProviderContext.transformProviders, templateProviderContext.transformedHasViewContainer, templateProviderContext.queryMatches, [parsedElement], ngContentIndex, element.sourceSpan);\n        }\n        return parsedElement;\n    }\n    _parseAttr(isTemplateElement, attr, targetMatchableAttrs, targetProps, targetEvents, targetRefs, targetVars) {\n        const name = this._normalizeAttributeName(attr.name);\n        const value = attr.value;\n        const srcSpan = attr.sourceSpan;\n        const boundEvents = [];\n        const bindParts = name.match(BIND_NAME_REGEXP);\n        let hasBinding = false;\n        if (bindParts !== null) {\n            hasBinding = true;\n            if (bindParts[KW_BIND_IDX] != null) {\n                this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);\n            }\n            else if (bindParts[KW_LET_IDX]) {\n                if (isTemplateElement) {\n                    const identifier = bindParts[IDENT_KW_IDX];\n                    this._parseVariable(identifier, value, srcSpan, targetVars);\n                }\n                else {\n                    this._reportError(`\"let-\" is only supported on ng-template elements.`, srcSpan);\n                }\n            }\n            else if (bindParts[KW_REF_IDX]) {\n                const identifier = bindParts[IDENT_KW_IDX];\n                this._parseReference(identifier, value, srcSpan, targetRefs);\n            }\n            else if (bindParts[KW_ON_IDX]) {\n                this._bindingParser.parseEvent(bindParts[IDENT_KW_IDX], value, srcSpan, attr.valueSpan || srcSpan, targetMatchableAttrs, boundEvents);\n            }\n            else if (bindParts[KW_BINDON_IDX]) {\n                this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);\n                this._parseAssignmentEvent(bindParts[IDENT_KW_IDX], value, srcSpan, attr.valueSpan || srcSpan, targetMatchableAttrs, boundEvents);\n            }\n            else if (bindParts[KW_AT_IDX]) {\n                this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);\n            }\n            else if (bindParts[IDENT_BANANA_BOX_IDX]) {\n                this._bindingParser.parsePropertyBinding(bindParts[IDENT_BANANA_BOX_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);\n                this._parseAssignmentEvent(bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, attr.valueSpan || srcSpan, targetMatchableAttrs, boundEvents);\n            }\n            else if (bindParts[IDENT_PROPERTY_IDX]) {\n                this._bindingParser.parsePropertyBinding(bindParts[IDENT_PROPERTY_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);\n            }\n            else if (bindParts[IDENT_EVENT_IDX]) {\n                this._bindingParser.parseEvent(bindParts[IDENT_EVENT_IDX], value, srcSpan, attr.valueSpan || srcSpan, targetMatchableAttrs, boundEvents);\n            }\n        }\n        else {\n            hasBinding = this._bindingParser.parsePropertyInterpolation(name, value, srcSpan, targetMatchableAttrs, targetProps);\n        }\n        if (!hasBinding) {\n            this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);\n        }\n        targetEvents.push(...boundEvents.map(e => BoundEventAst.fromParsedEvent(e)));\n        return hasBinding;\n    }\n    _normalizeAttributeName(attrName) {\n        return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;\n    }\n    _parseVariable(identifier, value, sourceSpan, targetVars) {\n        if (identifier.indexOf('-') > -1) {\n            this._reportError(`\"-\" is not allowed in variable names`, sourceSpan);\n        }\n        targetVars.push(new VariableAst(identifier, value, sourceSpan));\n    }\n    _parseReference(identifier, value, sourceSpan, targetRefs) {\n        if (identifier.indexOf('-') > -1) {\n            this._reportError(`\"-\" is not allowed in reference names`, sourceSpan);\n        }\n        targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));\n    }\n    _parseAssignmentEvent(name, expression, sourceSpan, valueSpan, targetMatchableAttrs, targetEvents) {\n        this._bindingParser.parseEvent(`${name}Change`, `${expression}=$event`, sourceSpan, valueSpan, targetMatchableAttrs, targetEvents);\n    }\n    _parseDirectives(selectorMatcher, elementCssSelector) {\n        // Need to sort the directives so that we get consistent results throughout,\n        // as selectorMatcher uses Maps inside.\n        // Also deduplicate directives as they might match more than one time!\n        const directives = new Array(this.directivesIndex.size);\n        // Whether any directive selector matches on the element name\n        let matchElement = false;\n        selectorMatcher.match(elementCssSelector, (selector, directive) => {\n            directives[this.directivesIndex.get(directive)] = directive;\n            matchElement = matchElement || selector.hasElementSelector();\n        });\n        return {\n            directives: directives.filter(dir => !!dir),\n            matchElement,\n        };\n    }\n    _createDirectiveAsts(isTemplateElement, elementName, directives, props, elementOrDirectiveRefs, elementSourceSpan, targetReferences, targetBoundDirectivePropNames) {\n        const matchedReferences = new Set();\n        let component = null;\n        const directiveAsts = directives.map((directive) => {\n            const sourceSpan = new ParseSourceSpan(elementSourceSpan.start, elementSourceSpan.end, `Directive ${identifierName(directive.type)}`);\n            if (directive.isComponent) {\n                component = directive;\n            }\n            const directiveProperties = [];\n            const boundProperties = this._bindingParser.createDirectiveHostPropertyAsts(directive, elementName, sourceSpan);\n            let hostProperties = boundProperties.map(prop => BoundElementPropertyAst.fromBoundProperty(prop));\n            // Note: We need to check the host properties here as well,\n            // as we don't know the element name in the DirectiveWrapperCompiler yet.\n            hostProperties = this._checkPropertiesInSchema(elementName, hostProperties);\n            const parsedEvents = this._bindingParser.createDirectiveHostEventAsts(directive, sourceSpan);\n            this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties, targetBoundDirectivePropNames);\n            elementOrDirectiveRefs.forEach((elOrDirRef) => {\n                if ((elOrDirRef.value.length === 0 && directive.isComponent) ||\n                    (elOrDirRef.isReferenceToDirective(directive))) {\n                    targetReferences.push(new ReferenceAst(elOrDirRef.name, createTokenForReference(directive.type.reference), elOrDirRef.value, elOrDirRef.sourceSpan));\n                    matchedReferences.add(elOrDirRef.name);\n                }\n            });\n            const hostEvents = parsedEvents.map(e => BoundEventAst.fromParsedEvent(e));\n            const contentQueryStartId = this.contentQueryStartId;\n            this.contentQueryStartId += directive.queries.length;\n            return new DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, contentQueryStartId, sourceSpan);\n        });\n        elementOrDirectiveRefs.forEach((elOrDirRef) => {\n            if (elOrDirRef.value.length > 0) {\n                if (!matchedReferences.has(elOrDirRef.name)) {\n                    this._reportError(`There is no directive with \"exportAs\" set to \"${elOrDirRef.value}\"`, elOrDirRef.sourceSpan);\n                }\n            }\n            else if (!component) {\n                let refToken = null;\n                if (isTemplateElement) {\n                    refToken = createTokenForExternalReference(this.reflector, Identifiers.TemplateRef);\n                }\n                targetReferences.push(new ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.value, elOrDirRef.sourceSpan));\n            }\n        });\n        return directiveAsts;\n    }\n    _createDirectivePropertyAsts(directiveProperties, boundProps, targetBoundDirectiveProps, targetBoundDirectivePropNames) {\n        if (directiveProperties) {\n            const boundPropsByName = new Map();\n            boundProps.forEach(boundProp => {\n                const prevValue = boundPropsByName.get(boundProp.name);\n                if (!prevValue || prevValue.isLiteral) {\n                    // give [a]=\"b\" a higher precedence than a=\"b\" on the same element\n                    boundPropsByName.set(boundProp.name, boundProp);\n                }\n            });\n            Object.keys(directiveProperties).forEach(dirProp => {\n                const elProp = directiveProperties[dirProp];\n                const boundProp = boundPropsByName.get(elProp);\n                // Bindings are optional, so this binding only needs to be set up if an expression is given.\n                if (boundProp) {\n                    targetBoundDirectivePropNames.add(boundProp.name);\n                    if (!isEmptyExpression(boundProp.expression)) {\n                        targetBoundDirectiveProps.push(new BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));\n                    }\n                }\n            });\n        }\n    }\n    _createElementPropertyAsts(elementName, props, boundDirectivePropNames) {\n        const boundElementProps = [];\n        props.forEach((prop) => {\n            if (!prop.isLiteral && !boundDirectivePropNames.has(prop.name)) {\n                const boundProp = this._bindingParser.createBoundElementProperty(elementName, prop);\n                boundElementProps.push(BoundElementPropertyAst.fromBoundProperty(boundProp));\n            }\n        });\n        return this._checkPropertiesInSchema(elementName, boundElementProps);\n    }\n    _findComponentDirectives(directives) {\n        return directives.filter(directive => directive.directive.isComponent);\n    }\n    _findComponentDirectiveNames(directives) {\n        return this._findComponentDirectives(directives)\n            .map(directive => identifierName(directive.directive.type));\n    }\n    _assertOnlyOneComponent(directives, sourceSpan) {\n        const componentTypeNames = this._findComponentDirectiveNames(directives);\n        if (componentTypeNames.length > 1) {\n            this._reportError(`More than one component matched on this element.\\n` +\n                `Make sure that only one component's selector can match a given element.\\n` +\n                `Conflicting components: ${componentTypeNames.join(',')}`, sourceSpan);\n        }\n    }\n    /**\n     * Make sure that non-angular tags conform to the schemas.\n     *\n     * Note: An element is considered an angular tag when at least one directive selector matches the\n     * tag name.\n     *\n     * @param matchElement Whether any directive has matched on the tag name\n     * @param element the html element\n     */\n    _assertElementExists(matchElement, element) {\n        const elName = element.name.replace(/^:xhtml:/, '');\n        if (!matchElement && !this._schemaRegistry.hasElement(elName, this._schemas)) {\n            let errorMsg = `'${elName}' is not a known element:\\n`;\n            errorMsg +=\n                `1. If '${elName}' is an Angular component, then verify that it is part of this module.\\n`;\n            if (elName.indexOf('-') > -1) {\n                errorMsg +=\n                    `2. If '${elName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.`;\n            }\n            else {\n                errorMsg +=\n                    `2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.`;\n            }\n            this._reportError(errorMsg, element.sourceSpan);\n        }\n    }\n    _assertNoComponentsNorElementBindingsOnTemplate(directives, elementProps, sourceSpan) {\n        const componentTypeNames = this._findComponentDirectiveNames(directives);\n        if (componentTypeNames.length > 0) {\n            this._reportError(`Components on an embedded template: ${componentTypeNames.join(',')}`, sourceSpan);\n        }\n        elementProps.forEach(prop => {\n            this._reportError(`Property binding ${prop.name} not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the \"@NgModule.declarations\".`, sourceSpan);\n        });\n    }\n    _assertAllEventsPublishedByDirectives(directives, events) {\n        const allDirectiveEvents = new Set();\n        directives.forEach(directive => {\n            Object.keys(directive.directive.outputs).forEach(k => {\n                const eventName = directive.directive.outputs[k];\n                allDirectiveEvents.add(eventName);\n            });\n        });\n        events.forEach(event => {\n            if (event.target != null || !allDirectiveEvents.has(event.name)) {\n                this._reportError(`Event binding ${event.fullName} not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the \"@NgModule.declarations\".`, event.sourceSpan);\n            }\n        });\n    }\n    _checkPropertiesInSchema(elementName, boundProps) {\n        // Note: We can't filter out empty expressions before this method,\n        // as we still want to validate them!\n        return boundProps.filter((boundProp) => {\n            if (boundProp.type === 0 /* Property */ &&\n                !this._schemaRegistry.hasProperty(elementName, boundProp.name, this._schemas)) {\n                let errorMsg = `Can't bind to '${boundProp.name}' since it isn't a known property of '${elementName}'.`;\n                if (elementName.startsWith('ng-')) {\n                    errorMsg +=\n                        `\\n1. If '${boundProp.name}' is an Angular directive, then add 'CommonModule' to the '@NgModule.imports' of this component.` +\n                            `\\n2. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.`;\n                }\n                else if (elementName.indexOf('-') > -1) {\n                    errorMsg +=\n                        `\\n1. If '${elementName}' is an Angular component and it has '${boundProp.name}' input, then verify that it is part of this module.` +\n                            `\\n2. If '${elementName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.` +\n                            `\\n3. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.`;\n                }\n                this._reportError(errorMsg, boundProp.sourceSpan);\n            }\n            return !isEmptyExpression(boundProp.value);\n        });\n    }\n    _reportError(message, sourceSpan, level = ParseErrorLevel.ERROR) {\n        this._targetErrors.push(new ParseError(sourceSpan, message, level));\n    }\n}\nclass NonBindableVisitor {\n    visitElement(ast, parent) {\n        const preparsedElement = preparseElement(ast);\n        if (preparsedElement.type === PreparsedElementType.SCRIPT ||\n            preparsedElement.type === PreparsedElementType.STYLE ||\n            preparsedElement.type === PreparsedElementType.STYLESHEET) {\n            // Skipping <script> for security reasons\n            // Skipping <style> and stylesheets as we already processed them\n            // in the StyleCompiler\n            return null;\n        }\n        const attrNameAndValues = ast.attrs.map((attr) => [attr.name, attr.value]);\n        const selector = createElementCssSelector(ast.name, attrNameAndValues);\n        const ngContentIndex = parent.findNgContentIndex(selector);\n        const children = visitAll$1(this, ast.children, EMPTY_ELEMENT_CONTEXT);\n        return new ElementAst(ast.name, visitAll$1(this, ast.attrs), [], [], [], [], [], false, [], children, ngContentIndex, ast.sourceSpan, ast.endSourceSpan);\n    }\n    visitComment(comment, context) { return null; }\n    visitAttribute(attribute, context) {\n        return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);\n    }\n    visitText(text, parent) {\n        const ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR());\n        return new TextAst(text.value, ngContentIndex, text.sourceSpan);\n    }\n    visitExpansion(expansion, context) { return expansion; }\n    visitExpansionCase(expansionCase, context) { return expansionCase; }\n}\n/**\n * A reference to an element or directive in a template. E.g., the reference in this template:\n *\n * <div #myMenu=\"coolMenu\">\n *\n * would be {name: 'myMenu', value: 'coolMenu', sourceSpan: ...}\n */\nclass ElementOrDirectiveRef {\n    constructor(name, value, sourceSpan) {\n        this.name = name;\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    /** Gets whether this is a reference to the given directive. */\n    isReferenceToDirective(directive) {\n        return splitExportAs(directive.exportAs).indexOf(this.value) !== -1;\n    }\n}\n/** Splits a raw, potentially comma-delimited `exportAs` value into an array of names. */\nfunction splitExportAs(exportAs) {\n    return exportAs ? exportAs.split(',').map(e => e.trim()) : [];\n}\nfunction splitClasses(classAttrValue) {\n    return classAttrValue.trim().split(/\\s+/g);\n}\nclass ElementContext {\n    constructor(isTemplateElement, _ngContentIndexMatcher, _wildcardNgContentIndex, providerContext) {\n        this.isTemplateElement = isTemplateElement;\n        this._ngContentIndexMatcher = _ngContentIndexMatcher;\n        this._wildcardNgContentIndex = _wildcardNgContentIndex;\n        this.providerContext = providerContext;\n    }\n    static create(isTemplateElement, directives, providerContext) {\n        const matcher = new SelectorMatcher();\n        let wildcardNgContentIndex = null;\n        const component = directives.find(directive => directive.directive.isComponent);\n        if (component) {\n            const ngContentSelectors = component.directive.template.ngContentSelectors;\n            for (let i = 0; i < ngContentSelectors.length; i++) {\n                const selector = ngContentSelectors[i];\n                if (selector === '*') {\n                    wildcardNgContentIndex = i;\n                }\n                else {\n                    matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]), i);\n                }\n            }\n        }\n        return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);\n    }\n    findNgContentIndex(selector) {\n        const ngContentIndices = [];\n        this._ngContentIndexMatcher.match(selector, (selector, ngContentIndex) => { ngContentIndices.push(ngContentIndex); });\n        ngContentIndices.sort();\n        if (this._wildcardNgContentIndex != null) {\n            ngContentIndices.push(this._wildcardNgContentIndex);\n        }\n        return ngContentIndices.length > 0 ? ngContentIndices[0] : null;\n    }\n}\nfunction createElementCssSelector(elementName, attributes) {\n    const cssSelector = new CssSelector();\n    const elNameNoNs = splitNsName(elementName)[1];\n    cssSelector.setElement(elNameNoNs);\n    for (let i = 0; i < attributes.length; i++) {\n        const attrName = attributes[i][0];\n        const attrNameNoNs = splitNsName(attrName)[1];\n        const attrValue = attributes[i][1];\n        cssSelector.addAttribute(attrNameNoNs, attrValue);\n        if (attrName.toLowerCase() == CLASS_ATTR) {\n            const classes = splitClasses(attrValue);\n            classes.forEach(className => cssSelector.addClassName(className));\n        }\n    }\n    return cssSelector;\n}\nconst EMPTY_ELEMENT_CONTEXT = new ElementContext(true, new SelectorMatcher(), null, null);\nconst NON_BINDABLE_VISITOR = new NonBindableVisitor();\nfunction _isEmptyTextNode(node) {\n    return node instanceof Text$3 && node.value.trim().length == 0;\n}\nfunction removeSummaryDuplicates(items) {\n    const map = new Map();\n    items.forEach((item) => {\n        if (!map.get(item.type.reference)) {\n            map.set(item.type.reference, item);\n        }\n    });\n    return Array.from(map.values());\n}\nfunction isEmptyExpression(ast) {\n    if (ast instanceof ASTWithSource) {\n        ast = ast.ast;\n    }\n    return ast instanceof EmptyExpr;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Parses string representation of a style and converts it into object literal.\n *\n * @param value string representation of style as used in the `style` attribute in HTML.\n *   Example: `color: red; height: auto`.\n * @returns An array of style property name and value pairs, e.g. `['color', 'red', 'height',\n * 'auto']`\n */\nfunction parse(value) {\n    // we use a string array here instead of a string map\n    // because a string-map is not guaranteed to retain the\n    // order of the entries whereas a string array can be\n    // construted in a [key, value, key, value] format.\n    const styles = [];\n    let i = 0;\n    let parenDepth = 0;\n    let quote = 0 /* QuoteNone */;\n    let valueStart = 0;\n    let propStart = 0;\n    let currentProp = null;\n    let valueHasQuotes = false;\n    while (i < value.length) {\n        const token = value.charCodeAt(i++);\n        switch (token) {\n            case 40 /* OpenParen */:\n                parenDepth++;\n                break;\n            case 41 /* CloseParen */:\n                parenDepth--;\n                break;\n            case 39 /* QuoteSingle */:\n                // valueStart needs to be there since prop values don't\n                // have quotes in CSS\n                valueHasQuotes = valueHasQuotes || valueStart > 0;\n                if (quote === 0 /* QuoteNone */) {\n                    quote = 39 /* QuoteSingle */;\n                }\n                else if (quote === 39 /* QuoteSingle */ && value.charCodeAt(i - 1) !== 92 /* BackSlash */) {\n                    quote = 0 /* QuoteNone */;\n                }\n                break;\n            case 34 /* QuoteDouble */:\n                // same logic as above\n                valueHasQuotes = valueHasQuotes || valueStart > 0;\n                if (quote === 0 /* QuoteNone */) {\n                    quote = 34 /* QuoteDouble */;\n                }\n                else if (quote === 34 /* QuoteDouble */ && value.charCodeAt(i - 1) !== 92 /* BackSlash */) {\n                    quote = 0 /* QuoteNone */;\n                }\n                break;\n            case 58 /* Colon */:\n                if (!currentProp && parenDepth === 0 && quote === 0 /* QuoteNone */) {\n                    currentProp = hyphenate(value.substring(propStart, i - 1).trim());\n                    valueStart = i;\n                }\n                break;\n            case 59 /* Semicolon */:\n                if (currentProp && valueStart > 0 && parenDepth === 0 && quote === 0 /* QuoteNone */) {\n                    const styleVal = value.substring(valueStart, i - 1).trim();\n                    styles.push(currentProp, valueHasQuotes ? stripUnnecessaryQuotes(styleVal) : styleVal);\n                    propStart = i;\n                    valueStart = 0;\n                    currentProp = null;\n                    valueHasQuotes = false;\n                }\n                break;\n        }\n    }\n    if (currentProp && valueStart) {\n        const styleVal = value.substr(valueStart).trim();\n        styles.push(currentProp, valueHasQuotes ? stripUnnecessaryQuotes(styleVal) : styleVal);\n    }\n    return styles;\n}\nfunction stripUnnecessaryQuotes(value) {\n    const qS = value.charCodeAt(0);\n    const qE = value.charCodeAt(value.length - 1);\n    if (qS == qE && (qS == 39 /* QuoteSingle */ || qS == 34 /* QuoteDouble */)) {\n        const tempValue = value.substring(1, value.length - 1);\n        // special case to avoid using a multi-quoted string that was just chomped\n        // (e.g. `font-family: \"Verdana\", \"sans-serif\"`)\n        if (tempValue.indexOf('\\'') == -1 && tempValue.indexOf('\"') == -1) {\n            value = tempValue;\n        }\n    }\n    return value;\n}\nfunction hyphenate(value) {\n    return value.replace(/[a-z][A-Z]/g, v => {\n        return v.charAt(0) + '-' + v.charAt(1);\n    }).toLowerCase();\n}\n\nconst IMPORTANT_FLAG = '!important';\n/**\n * Produces creation/update instructions for all styling bindings (class and style)\n *\n * It also produces the creation instruction to register all initial styling values\n * (which are all the static class=\"...\" and style=\"...\" attribute values that exist\n * on an element within a template).\n *\n * The builder class below handles producing instructions for the following cases:\n *\n * - Static style/class attributes (style=\"...\" and class=\"...\")\n * - Dynamic style/class map bindings ([style]=\"map\" and [class]=\"map|string\")\n * - Dynamic style/class property bindings ([style.prop]=\"exp\" and [class.name]=\"exp\")\n *\n * Due to the complex relationship of all of these cases, the instructions generated\n * for these attributes/properties/bindings must be done so in the correct order. The\n * order which these must be generated is as follows:\n *\n * if (createMode) {\n *   elementStyling(...)\n * }\n * if (updateMode) {\n *   elementStylingMap(...)\n *   elementStyleProp(...)\n *   elementClassProp(...)\n *   elementStylingApp(...)\n * }\n *\n * The creation/update methods within the builder class produce these instructions.\n */\nclass StylingBuilder {\n    constructor(_elementIndexExpr, _directiveExpr) {\n        this._elementIndexExpr = _elementIndexExpr;\n        this._directiveExpr = _directiveExpr;\n        /** Whether or not there are any static styling values present */\n        this._hasInitialValues = false;\n        /**\n         *  Whether or not there are any styling bindings present\n         *  (i.e. `[style]`, `[class]`, `[style.prop]` or `[class.name]`)\n         */\n        this.hasBindings = false;\n        /** the input for [class] (if it exists) */\n        this._classMapInput = null;\n        /** the input for [style] (if it exists) */\n        this._styleMapInput = null;\n        /** an array of each [style.prop] input */\n        this._singleStyleInputs = null;\n        /** an array of each [class.name] input */\n        this._singleClassInputs = null;\n        this._lastStylingInput = null;\n        // maps are used instead of hash maps because a Map will\n        // retain the ordering of the keys\n        /**\n         * Represents the location of each style binding in the template\n         * (e.g. `<div [style.width]=\"w\" [style.height]=\"h\">` implies\n         * that `width=0` and `height=1`)\n         */\n        this._stylesIndex = new Map();\n        /**\n         * Represents the location of each class binding in the template\n         * (e.g. `<div [class.big]=\"b\" [class.hidden]=\"h\">` implies\n         * that `big=0` and `hidden=1`)\n         */\n        this._classesIndex = new Map();\n        this._initialStyleValues = [];\n        this._initialClassValues = [];\n        // certain style properties ALWAYS need sanitization\n        // this is checked each time new styles are encountered\n        this._useDefaultSanitizer = false;\n    }\n    /**\n     * Registers a given input to the styling builder to be later used when producing AOT code.\n     *\n     * The code below will only accept the input if it is somehow tied to styling (whether it be\n     * style/class bindings or static style/class attributes).\n     */\n    registerBoundInput(input) {\n        // [attr.style] or [attr.class] are skipped in the code below,\n        // they should not be treated as styling-based bindings since\n        // they are intended to be written directly to the attr and\n        // will therefore skip all style/class resolution that is present\n        // with style=\"\", [style]=\"\" and [style.prop]=\"\", class=\"\",\n        // [class.prop]=\"\". [class]=\"\" assignments\n        let binding = null;\n        let name = input.name;\n        switch (input.type) {\n            case 0 /* Property */:\n                binding = this.registerInputBasedOnName(name, input.value, input.sourceSpan);\n                break;\n            case 3 /* Style */:\n                binding = this.registerStyleInput(name, false, input.value, input.sourceSpan, input.unit);\n                break;\n            case 2 /* Class */:\n                binding = this.registerClassInput(name, false, input.value, input.sourceSpan);\n                break;\n        }\n        return binding ? true : false;\n    }\n    registerInputBasedOnName(name, expression, sourceSpan) {\n        let binding = null;\n        const nameToMatch = name.substring(0, 5); // class | style\n        const isStyle = nameToMatch === 'style';\n        const isClass = isStyle ? false : (nameToMatch === 'class');\n        if (isStyle || isClass) {\n            const isMapBased = name.charAt(5) !== '.'; // style.prop or class.prop makes this a no\n            const property = name.substr(isMapBased ? 5 : 6); // the dot explains why there's a +1\n            if (isStyle) {\n                binding = this.registerStyleInput(property, isMapBased, expression, sourceSpan);\n            }\n            else {\n                binding = this.registerClassInput(property, isMapBased, expression, sourceSpan);\n            }\n        }\n        return binding;\n    }\n    registerStyleInput(name, isMapBased, value, sourceSpan, unit) {\n        if (isEmptyExpression(value)) {\n            return null;\n        }\n        const { property, hasOverrideFlag, unit: bindingUnit } = parseProperty(name);\n        const entry = {\n            name: property,\n            unit: unit || bindingUnit, value, sourceSpan, hasOverrideFlag\n        };\n        if (isMapBased) {\n            this._useDefaultSanitizer = true;\n            this._styleMapInput = entry;\n        }\n        else {\n            (this._singleStyleInputs = this._singleStyleInputs || []).push(entry);\n            this._useDefaultSanitizer = this._useDefaultSanitizer || isStyleSanitizable(name);\n            registerIntoMap(this._stylesIndex, property);\n        }\n        this._lastStylingInput = entry;\n        this.hasBindings = true;\n        return entry;\n    }\n    registerClassInput(name, isMapBased, value, sourceSpan) {\n        if (isEmptyExpression(value)) {\n            return null;\n        }\n        const { property, hasOverrideFlag } = parseProperty(name);\n        const entry = { name: property, value, sourceSpan, hasOverrideFlag, unit: null };\n        if (isMapBased) {\n            this._classMapInput = entry;\n        }\n        else {\n            (this._singleClassInputs = this._singleClassInputs || []).push(entry);\n            registerIntoMap(this._classesIndex, property);\n        }\n        this._lastStylingInput = entry;\n        this.hasBindings = true;\n        return entry;\n    }\n    /**\n     * Registers the element's static style string value to the builder.\n     *\n     * @param value the style string (e.g. `width:100px; height:200px;`)\n     */\n    registerStyleAttr(value) {\n        this._initialStyleValues = parse(value);\n        this._hasInitialValues = true;\n    }\n    /**\n     * Registers the element's static class string value to the builder.\n     *\n     * @param value the className string (e.g. `disabled gold zoom`)\n     */\n    registerClassAttr(value) {\n        this._initialClassValues = value.trim().split(/\\s+/g);\n        this._hasInitialValues = true;\n    }\n    /**\n     * Appends all styling-related expressions to the provided attrs array.\n     *\n     * @param attrs an existing array where each of the styling expressions\n     * will be inserted into.\n     */\n    populateInitialStylingAttrs(attrs) {\n        // [CLASS_MARKER, 'foo', 'bar', 'baz' ...]\n        if (this._initialClassValues.length) {\n            attrs.push(literal(1 /* Classes */));\n            for (let i = 0; i < this._initialClassValues.length; i++) {\n                attrs.push(literal(this._initialClassValues[i]));\n            }\n        }\n        // [STYLE_MARKER, 'width', '200px', 'height', '100px', ...]\n        if (this._initialStyleValues.length) {\n            attrs.push(literal(2 /* Styles */));\n            for (let i = 0; i < this._initialStyleValues.length; i += 2) {\n                attrs.push(literal(this._initialStyleValues[i]), literal(this._initialStyleValues[i + 1]));\n            }\n        }\n    }\n    /**\n     * Builds an instruction with all the expressions and parameters for `elementHostAttrs`.\n     *\n     * The instruction generation code below is used for producing the AOT statement code which is\n     * responsible for registering initial styles (within a directive hostBindings' creation block),\n     * as well as any of the provided attribute values, to the directive host element.\n     */\n    buildHostAttrsInstruction(sourceSpan, attrs, constantPool) {\n        if (this._directiveExpr && (attrs.length || this._hasInitialValues)) {\n            return {\n                sourceSpan,\n                reference: Identifiers$1.elementHostAttrs,\n                allocateBindingSlots: 0,\n                buildParams: () => {\n                    // params => elementHostAttrs(agetDirectiveContext()ttrs)\n                    this.populateInitialStylingAttrs(attrs);\n                    const attrArray = !attrs.some(attr => attr instanceof WrappedNodeExpr) ?\n                        getConstantLiteralFromArray(constantPool, attrs) :\n                        literalArr(attrs);\n                    return [attrArray];\n                }\n            };\n        }\n        return null;\n    }\n    /**\n     * Builds an instruction with all the expressions and parameters for `elementStyling`.\n     *\n     * The instruction generation code below is used for producing the AOT statement code which is\n     * responsible for registering style/class bindings to an element.\n     */\n    buildElementStylingInstruction(sourceSpan, constantPool) {\n        const reference = this._directiveExpr ? Identifiers$1.elementHostStyling : Identifiers$1.elementStyling;\n        if (this.hasBindings) {\n            return {\n                sourceSpan,\n                allocateBindingSlots: 0, reference,\n                buildParams: () => {\n                    // a string array of every style-based binding\n                    const styleBindingProps = this._singleStyleInputs ? this._singleStyleInputs.map(i => literal(i.name)) : [];\n                    // a string array of every class-based binding\n                    const classBindingNames = this._singleClassInputs ? this._singleClassInputs.map(i => literal(i.name)) : [];\n                    // to salvage space in the AOT generated code, there is no point in passing\n                    // in `null` into a param if any follow-up params are not used. Therefore,\n                    // only when a trailing param is used then it will be filled with nulls in between\n                    // (otherwise a shorter amount of params will be filled). The code below helps\n                    // determine how many params are required in the expression code.\n                    //\n                    // HOST:\n                    //   min params => elementHostStyling()\n                    //   max params => elementHostStyling(classBindings, styleBindings, sanitizer)\n                    //\n                    // Template:\n                    //   min params => elementStyling()\n                    //   max params => elementStyling(classBindings, styleBindings, sanitizer)\n                    //\n                    const params = [];\n                    let expectedNumberOfArgs = 0;\n                    if (this._useDefaultSanitizer) {\n                        expectedNumberOfArgs = 3;\n                    }\n                    else if (styleBindingProps.length) {\n                        expectedNumberOfArgs = 2;\n                    }\n                    else if (classBindingNames.length) {\n                        expectedNumberOfArgs = 1;\n                    }\n                    addParam(params, classBindingNames.length > 0, getConstantLiteralFromArray(constantPool, classBindingNames), 1, expectedNumberOfArgs);\n                    addParam(params, styleBindingProps.length > 0, getConstantLiteralFromArray(constantPool, styleBindingProps), 2, expectedNumberOfArgs);\n                    addParam(params, this._useDefaultSanitizer, importExpr(Identifiers$1.defaultStyleSanitizer), 3, expectedNumberOfArgs);\n                    return params;\n                }\n            };\n        }\n        return null;\n    }\n    /**\n     * Builds an instruction with all the expressions and parameters for `elementStylingMap`.\n     *\n     * The instruction data will contain all expressions for `elementStylingMap` to function\n     * which include the `[style]` and `[class]` expression params (if they exist) as well as\n     * the sanitizer and directive reference expression.\n     */\n    buildElementStylingMapInstruction(valueConverter) {\n        if (this._classMapInput || this._styleMapInput) {\n            const stylingInput = this._classMapInput || this._styleMapInput;\n            let totalBindingSlotsRequired = 0;\n            // these values must be outside of the update block so that they can\n            // be evaluted (the AST visit call) during creation time so that any\n            // pipes can be picked up in time before the template is built\n            const mapBasedClassValue = this._classMapInput ? this._classMapInput.value.visit(valueConverter) : null;\n            if (mapBasedClassValue instanceof Interpolation) {\n                totalBindingSlotsRequired += mapBasedClassValue.expressions.length;\n            }\n            const mapBasedStyleValue = this._styleMapInput ? this._styleMapInput.value.visit(valueConverter) : null;\n            if (mapBasedStyleValue instanceof Interpolation) {\n                totalBindingSlotsRequired += mapBasedStyleValue.expressions.length;\n            }\n            const isHostBinding = this._directiveExpr;\n            const reference = isHostBinding ? Identifiers$1.elementHostStylingMap : Identifiers$1.elementStylingMap;\n            return {\n                sourceSpan: stylingInput.sourceSpan,\n                reference,\n                allocateBindingSlots: totalBindingSlotsRequired,\n                buildParams: (convertFn) => {\n                    // HOST:\n                    //   min params => elementHostStylingMap(classMap)\n                    //   max params => elementHostStylingMap(classMap, styleMap)\n                    // Template:\n                    //   min params => elementStylingMap(elmIndex, classMap)\n                    //   max params => elementStylingMap(elmIndex, classMap, styleMap)\n                    const params = [];\n                    if (!isHostBinding) {\n                        params.push(this._elementIndexExpr);\n                    }\n                    let expectedNumberOfArgs = 0;\n                    if (mapBasedStyleValue) {\n                        expectedNumberOfArgs = 2;\n                    }\n                    else if (mapBasedClassValue) {\n                        // index and class = 2\n                        expectedNumberOfArgs = 1;\n                    }\n                    addParam(params, mapBasedClassValue, mapBasedClassValue ? convertFn(mapBasedClassValue) : null, 1, expectedNumberOfArgs);\n                    addParam(params, mapBasedStyleValue, mapBasedStyleValue ? convertFn(mapBasedStyleValue) : null, 2, expectedNumberOfArgs);\n                    return params;\n                }\n            };\n        }\n        return null;\n    }\n    _buildSingleInputs(reference, isHostBinding, inputs, mapIndex, allowUnits, valueConverter) {\n        let totalBindingSlotsRequired = 0;\n        return inputs.map(input => {\n            const bindingIndex = mapIndex.get(input.name);\n            const value = input.value.visit(valueConverter);\n            totalBindingSlotsRequired += (value instanceof Interpolation) ? value.expressions.length : 0;\n            return {\n                sourceSpan: input.sourceSpan,\n                allocateBindingSlots: totalBindingSlotsRequired, reference,\n                buildParams: (convertFn) => {\n                    // HOST:\n                    //   min params => elementHostStylingProp(bindingIndex, value)\n                    //   max params => elementHostStylingProp(bindingIndex, value, overrideFlag)\n                    // Template:\n                    //   min params => elementStylingProp(elmIndex, bindingIndex, value)\n                    //   max params => elementStylingProp(elmIndex, bindingIndex, value, overrideFlag)\n                    const params = [];\n                    if (!isHostBinding) {\n                        params.push(this._elementIndexExpr);\n                    }\n                    params.push(literal(bindingIndex));\n                    params.push(convertFn(value));\n                    if (allowUnits) {\n                        if (input.unit) {\n                            params.push(literal(input.unit));\n                        }\n                        else if (input.hasOverrideFlag) {\n                            params.push(NULL_EXPR);\n                        }\n                    }\n                    if (input.hasOverrideFlag) {\n                        params.push(literal(true));\n                    }\n                    return params;\n                }\n            };\n        });\n    }\n    _buildClassInputs(valueConverter) {\n        if (this._singleClassInputs) {\n            const isHostBinding = !!this._directiveExpr;\n            const reference = isHostBinding ? Identifiers$1.elementHostClassProp : Identifiers$1.elementClassProp;\n            return this._buildSingleInputs(reference, isHostBinding, this._singleClassInputs, this._classesIndex, false, valueConverter);\n        }\n        return [];\n    }\n    _buildStyleInputs(valueConverter) {\n        if (this._singleStyleInputs) {\n            const isHostBinding = !!this._directiveExpr;\n            const reference = isHostBinding ? Identifiers$1.elementHostStyleProp : Identifiers$1.elementStyleProp;\n            return this._buildSingleInputs(reference, isHostBinding, this._singleStyleInputs, this._stylesIndex, true, valueConverter);\n        }\n        return [];\n    }\n    _buildApplyFn() {\n        const isHostBinding = this._directiveExpr;\n        const reference = isHostBinding ? Identifiers$1.elementHostStylingApply : Identifiers$1.elementStylingApply;\n        return {\n            sourceSpan: this._lastStylingInput ? this._lastStylingInput.sourceSpan : null,\n            reference,\n            allocateBindingSlots: 0,\n            buildParams: () => {\n                // HOST:\n                //   params => elementHostStylingApply()\n                // Template:\n                //   params => elementStylingApply(elmIndex)\n                return isHostBinding ? [] : [this._elementIndexExpr];\n            }\n        };\n    }\n    /**\n     * Constructs all instructions which contain the expressions that will be placed\n     * into the update block of a template function or a directive hostBindings function.\n     */\n    buildUpdateLevelInstructions(valueConverter) {\n        const instructions = [];\n        if (this.hasBindings) {\n            const mapInstruction = this.buildElementStylingMapInstruction(valueConverter);\n            if (mapInstruction) {\n                instructions.push(mapInstruction);\n            }\n            instructions.push(...this._buildStyleInputs(valueConverter));\n            instructions.push(...this._buildClassInputs(valueConverter));\n            instructions.push(this._buildApplyFn());\n        }\n        return instructions;\n    }\n}\nfunction registerIntoMap(map, key) {\n    if (!map.has(key)) {\n        map.set(key, map.size);\n    }\n}\nfunction isStyleSanitizable(prop) {\n    return prop === 'background-image' || prop === 'background' || prop === 'border-image' ||\n        prop === 'filter' || prop === 'list-style' || prop === 'list-style-image';\n}\n/**\n * Simple helper function to either provide the constant literal that will house the value\n * here or a null value if the provided values are empty.\n */\nfunction getConstantLiteralFromArray(constantPool, values) {\n    return values.length ? constantPool.getConstLiteral(literalArr(values), true) : NULL_EXPR;\n}\n/**\n * Simple helper function that adds a parameter or does nothing at all depending on the provided\n * predicate and totalExpectedArgs values\n */\nfunction addParam(params, predicate, value, argNumber, totalExpectedArgs) {\n    if (predicate && value) {\n        params.push(value);\n    }\n    else if (argNumber < totalExpectedArgs) {\n        params.push(NULL_EXPR);\n    }\n}\nfunction parseProperty(name) {\n    let hasOverrideFlag = false;\n    const overrideIndex = name.indexOf(IMPORTANT_FLAG);\n    if (overrideIndex !== -1) {\n        name = overrideIndex > 0 ? name.substring(0, overrideIndex) : '';\n        hasOverrideFlag = true;\n    }\n    let unit = '';\n    let property = name;\n    const unitIndex = name.lastIndexOf('.');\n    if (unitIndex > 0) {\n        unit = name.substr(unitIndex + 1);\n        property = name.substring(0, unitIndex);\n    }\n    return { property, unit, hasOverrideFlag };\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar TokenType$1;\n(function (TokenType) {\n    TokenType[TokenType[\"Character\"] = 0] = \"Character\";\n    TokenType[TokenType[\"Identifier\"] = 1] = \"Identifier\";\n    TokenType[TokenType[\"Keyword\"] = 2] = \"Keyword\";\n    TokenType[TokenType[\"String\"] = 3] = \"String\";\n    TokenType[TokenType[\"Operator\"] = 4] = \"Operator\";\n    TokenType[TokenType[\"Number\"] = 5] = \"Number\";\n    TokenType[TokenType[\"Error\"] = 6] = \"Error\";\n})(TokenType$1 || (TokenType$1 = {}));\nconst KEYWORDS = ['var', 'let', 'as', 'null', 'undefined', 'true', 'false', 'if', 'else', 'this'];\nclass Lexer {\n    tokenize(text) {\n        const scanner = new _Scanner(text);\n        const tokens = [];\n        let token = scanner.scanToken();\n        while (token != null) {\n            tokens.push(token);\n            token = scanner.scanToken();\n        }\n        return tokens;\n    }\n}\nclass Token$1 {\n    constructor(index, type, numValue, strValue) {\n        this.index = index;\n        this.type = type;\n        this.numValue = numValue;\n        this.strValue = strValue;\n    }\n    isCharacter(code) {\n        return this.type == TokenType$1.Character && this.numValue == code;\n    }\n    isNumber() { return this.type == TokenType$1.Number; }\n    isString() { return this.type == TokenType$1.String; }\n    isOperator(operator) {\n        return this.type == TokenType$1.Operator && this.strValue == operator;\n    }\n    isIdentifier() { return this.type == TokenType$1.Identifier; }\n    isKeyword() { return this.type == TokenType$1.Keyword; }\n    isKeywordLet() { return this.type == TokenType$1.Keyword && this.strValue == 'let'; }\n    isKeywordAs() { return this.type == TokenType$1.Keyword && this.strValue == 'as'; }\n    isKeywordNull() { return this.type == TokenType$1.Keyword && this.strValue == 'null'; }\n    isKeywordUndefined() {\n        return this.type == TokenType$1.Keyword && this.strValue == 'undefined';\n    }\n    isKeywordTrue() { return this.type == TokenType$1.Keyword && this.strValue == 'true'; }\n    isKeywordFalse() { return this.type == TokenType$1.Keyword && this.strValue == 'false'; }\n    isKeywordThis() { return this.type == TokenType$1.Keyword && this.strValue == 'this'; }\n    isError() { return this.type == TokenType$1.Error; }\n    toNumber() { return this.type == TokenType$1.Number ? this.numValue : -1; }\n    toString() {\n        switch (this.type) {\n            case TokenType$1.Character:\n            case TokenType$1.Identifier:\n            case TokenType$1.Keyword:\n            case TokenType$1.Operator:\n            case TokenType$1.String:\n            case TokenType$1.Error:\n                return this.strValue;\n            case TokenType$1.Number:\n                return this.numValue.toString();\n            default:\n                return null;\n        }\n    }\n}\nfunction newCharacterToken(index, code) {\n    return new Token$1(index, TokenType$1.Character, code, String.fromCharCode(code));\n}\nfunction newIdentifierToken(index, text) {\n    return new Token$1(index, TokenType$1.Identifier, 0, text);\n}\nfunction newKeywordToken(index, text) {\n    return new Token$1(index, TokenType$1.Keyword, 0, text);\n}\nfunction newOperatorToken(index, text) {\n    return new Token$1(index, TokenType$1.Operator, 0, text);\n}\nfunction newStringToken(index, text) {\n    return new Token$1(index, TokenType$1.String, 0, text);\n}\nfunction newNumberToken(index, n) {\n    return new Token$1(index, TokenType$1.Number, n, '');\n}\nfunction newErrorToken(index, message) {\n    return new Token$1(index, TokenType$1.Error, 0, message);\n}\nconst EOF = new Token$1(-1, TokenType$1.Character, 0, '');\nclass _Scanner {\n    constructor(input) {\n        this.input = input;\n        this.peek = 0;\n        this.index = -1;\n        this.length = input.length;\n        this.advance();\n    }\n    advance() {\n        this.peek = ++this.index >= this.length ? $EOF : this.input.charCodeAt(this.index);\n    }\n    scanToken() {\n        const input = this.input, length = this.length;\n        let peek = this.peek, index = this.index;\n        // Skip whitespace.\n        while (peek <= $SPACE) {\n            if (++index >= length) {\n                peek = $EOF;\n                break;\n            }\n            else {\n                peek = input.charCodeAt(index);\n            }\n        }\n        this.peek = peek;\n        this.index = index;\n        if (index >= length) {\n            return null;\n        }\n        // Handle identifiers and numbers.\n        if (isIdentifierStart(peek))\n            return this.scanIdentifier();\n        if (isDigit(peek))\n            return this.scanNumber(index);\n        const start = index;\n        switch (peek) {\n            case $PERIOD:\n                this.advance();\n                return isDigit(this.peek) ? this.scanNumber(start) :\n                    newCharacterToken(start, $PERIOD);\n            case $LPAREN:\n            case $RPAREN:\n            case $LBRACE:\n            case $RBRACE:\n            case $LBRACKET:\n            case $RBRACKET:\n            case $COMMA:\n            case $COLON:\n            case $SEMICOLON:\n                return this.scanCharacter(start, peek);\n            case $SQ:\n            case $DQ:\n                return this.scanString();\n            case $HASH:\n            case $PLUS:\n            case $MINUS:\n            case $STAR:\n            case $SLASH:\n            case $PERCENT:\n            case $CARET:\n                return this.scanOperator(start, String.fromCharCode(peek));\n            case $QUESTION:\n                return this.scanComplexOperator(start, '?', $PERIOD, '.');\n            case $LT:\n            case $GT:\n                return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=');\n            case $BANG:\n            case $EQ:\n                return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=', $EQ, '=');\n            case $AMPERSAND:\n                return this.scanComplexOperator(start, '&', $AMPERSAND, '&');\n            case $BAR:\n                return this.scanComplexOperator(start, '|', $BAR, '|');\n            case $NBSP:\n                while (isWhitespace(this.peek))\n                    this.advance();\n                return this.scanToken();\n        }\n        this.advance();\n        return this.error(`Unexpected character [${String.fromCharCode(peek)}]`, 0);\n    }\n    scanCharacter(start, code) {\n        this.advance();\n        return newCharacterToken(start, code);\n    }\n    scanOperator(start, str) {\n        this.advance();\n        return newOperatorToken(start, str);\n    }\n    /**\n     * Tokenize a 2/3 char long operator\n     *\n     * @param start start index in the expression\n     * @param one first symbol (always part of the operator)\n     * @param twoCode code point for the second symbol\n     * @param two second symbol (part of the operator when the second code point matches)\n     * @param threeCode code point for the third symbol\n     * @param three third symbol (part of the operator when provided and matches source expression)\n     */\n    scanComplexOperator(start, one, twoCode, two, threeCode, three) {\n        this.advance();\n        let str = one;\n        if (this.peek == twoCode) {\n            this.advance();\n            str += two;\n        }\n        if (threeCode != null && this.peek == threeCode) {\n            this.advance();\n            str += three;\n        }\n        return newOperatorToken(start, str);\n    }\n    scanIdentifier() {\n        const start = this.index;\n        this.advance();\n        while (isIdentifierPart(this.peek))\n            this.advance();\n        const str = this.input.substring(start, this.index);\n        return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, str) :\n            newIdentifierToken(start, str);\n    }\n    scanNumber(start) {\n        let simple = (this.index === start);\n        this.advance(); // Skip initial digit.\n        while (true) {\n            if (isDigit(this.peek)) ;\n            else if (this.peek == $PERIOD) {\n                simple = false;\n            }\n            else if (isExponentStart(this.peek)) {\n                this.advance();\n                if (isExponentSign(this.peek))\n                    this.advance();\n                if (!isDigit(this.peek))\n                    return this.error('Invalid exponent', -1);\n                simple = false;\n            }\n            else {\n                break;\n            }\n            this.advance();\n        }\n        const str = this.input.substring(start, this.index);\n        const value = simple ? parseIntAutoRadix(str) : parseFloat(str);\n        return newNumberToken(start, value);\n    }\n    scanString() {\n        const start = this.index;\n        const quote = this.peek;\n        this.advance(); // Skip initial quote.\n        let buffer = '';\n        let marker = this.index;\n        const input = this.input;\n        while (this.peek != quote) {\n            if (this.peek == $BACKSLASH) {\n                buffer += input.substring(marker, this.index);\n                this.advance();\n                let unescapedCode;\n                // Workaround for TS2.1-introduced type strictness\n                this.peek = this.peek;\n                if (this.peek == $u) {\n                    // 4 character hex code for unicode character.\n                    const hex = input.substring(this.index + 1, this.index + 5);\n                    if (/^[0-9a-f]+$/i.test(hex)) {\n                        unescapedCode = parseInt(hex, 16);\n                    }\n                    else {\n                        return this.error(`Invalid unicode escape [\\\\u${hex}]`, 0);\n                    }\n                    for (let i = 0; i < 5; i++) {\n                        this.advance();\n                    }\n                }\n                else {\n                    unescapedCode = unescape(this.peek);\n                    this.advance();\n                }\n                buffer += String.fromCharCode(unescapedCode);\n                marker = this.index;\n            }\n            else if (this.peek == $EOF) {\n                return this.error('Unterminated quote', 0);\n            }\n            else {\n                this.advance();\n            }\n        }\n        const last = input.substring(marker, this.index);\n        this.advance(); // Skip terminating quote.\n        return newStringToken(start, buffer + last);\n    }\n    error(message, offset) {\n        const position = this.index + offset;\n        return newErrorToken(position, `Lexer Error: ${message} at column ${position} in expression [${this.input}]`);\n    }\n}\nfunction isIdentifierStart(code) {\n    return ($a <= code && code <= $z) || ($A <= code && code <= $Z) ||\n        (code == $_) || (code == $$);\n}\nfunction isIdentifier(input) {\n    if (input.length == 0)\n        return false;\n    const scanner = new _Scanner(input);\n    if (!isIdentifierStart(scanner.peek))\n        return false;\n    scanner.advance();\n    while (scanner.peek !== $EOF) {\n        if (!isIdentifierPart(scanner.peek))\n            return false;\n        scanner.advance();\n    }\n    return true;\n}\nfunction isIdentifierPart(code) {\n    return isAsciiLetter(code) || isDigit(code) || (code == $_) ||\n        (code == $$);\n}\nfunction isExponentStart(code) {\n    return code == $e || code == $E;\n}\nfunction isExponentSign(code) {\n    return code == $MINUS || code == $PLUS;\n}\nfunction isQuote(code) {\n    return code === $SQ || code === $DQ || code === $BT;\n}\nfunction unescape(code) {\n    switch (code) {\n        case $n:\n            return $LF;\n        case $f:\n            return $FF;\n        case $r:\n            return $CR;\n        case $t:\n            return $TAB;\n        case $v:\n            return $VTAB;\n        default:\n            return code;\n    }\n}\nfunction parseIntAutoRadix(text) {\n    const result = parseInt(text);\n    if (isNaN(result)) {\n        throw new Error('Invalid integer literal when parsing ' + text);\n    }\n    return result;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass SplitInterpolation {\n    constructor(strings, expressions, offsets) {\n        this.strings = strings;\n        this.expressions = expressions;\n        this.offsets = offsets;\n    }\n}\nclass TemplateBindingParseResult {\n    constructor(templateBindings, warnings, errors) {\n        this.templateBindings = templateBindings;\n        this.warnings = warnings;\n        this.errors = errors;\n    }\n}\nfunction _createInterpolateRegExp(config) {\n    const pattern = escapeRegExp(config.start) + '([\\\\s\\\\S]*?)' + escapeRegExp(config.end);\n    return new RegExp(pattern, 'g');\n}\nclass Parser$1 {\n    constructor(_lexer) {\n        this._lexer = _lexer;\n        this.errors = [];\n    }\n    parseAction(input, location, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n        this._checkNoInterpolation(input, location, interpolationConfig);\n        const sourceToLex = this._stripComments(input);\n        const tokens = this._lexer.tokenize(this._stripComments(input));\n        const ast = new _ParseAST(input, location, tokens, sourceToLex.length, true, this.errors, input.length - sourceToLex.length)\n            .parseChain();\n        return new ASTWithSource(ast, input, location, this.errors);\n    }\n    parseBinding(input, location, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n        const ast = this._parseBindingAst(input, location, interpolationConfig);\n        return new ASTWithSource(ast, input, location, this.errors);\n    }\n    parseSimpleBinding(input, location, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n        const ast = this._parseBindingAst(input, location, interpolationConfig);\n        const errors = SimpleExpressionChecker.check(ast);\n        if (errors.length > 0) {\n            this._reportError(`Host binding expression cannot contain ${errors.join(' ')}`, input, location);\n        }\n        return new ASTWithSource(ast, input, location, this.errors);\n    }\n    _reportError(message, input, errLocation, ctxLocation) {\n        this.errors.push(new ParserError(message, input, errLocation, ctxLocation));\n    }\n    _parseBindingAst(input, location, interpolationConfig) {\n        // Quotes expressions use 3rd-party expression language. We don't want to use\n        // our lexer or parser for that, so we check for that ahead of time.\n        const quote = this._parseQuote(input, location);\n        if (quote != null) {\n            return quote;\n        }\n        this._checkNoInterpolation(input, location, interpolationConfig);\n        const sourceToLex = this._stripComments(input);\n        const tokens = this._lexer.tokenize(sourceToLex);\n        return new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, input.length - sourceToLex.length)\n            .parseChain();\n    }\n    _parseQuote(input, location) {\n        if (input == null)\n            return null;\n        const prefixSeparatorIndex = input.indexOf(':');\n        if (prefixSeparatorIndex == -1)\n            return null;\n        const prefix = input.substring(0, prefixSeparatorIndex).trim();\n        if (!isIdentifier(prefix))\n            return null;\n        const uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);\n        return new Quote(new ParseSpan(0, input.length), prefix, uninterpretedExpression, location);\n    }\n    parseTemplateBindings(tplKey, tplValue, location) {\n        const tokens = this._lexer.tokenize(tplValue);\n        return new _ParseAST(tplValue, location, tokens, tplValue.length, false, this.errors, 0)\n            .parseTemplateBindings(tplKey);\n    }\n    parseInterpolation(input, location, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n        const split = this.splitInterpolation(input, location, interpolationConfig);\n        if (split == null)\n            return null;\n        const expressions = [];\n        for (let i = 0; i < split.expressions.length; ++i) {\n            const expressionText = split.expressions[i];\n            const sourceToLex = this._stripComments(expressionText);\n            const tokens = this._lexer.tokenize(sourceToLex);\n            const ast = new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, split.offsets[i] + (expressionText.length - sourceToLex.length))\n                .parseChain();\n            expressions.push(ast);\n        }\n        return new ASTWithSource(new Interpolation(new ParseSpan(0, input == null ? 0 : input.length), split.strings, expressions), input, location, this.errors);\n    }\n    splitInterpolation(input, location, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n        const regexp = _createInterpolateRegExp(interpolationConfig);\n        const parts = input.split(regexp);\n        if (parts.length <= 1) {\n            return null;\n        }\n        const strings = [];\n        const expressions = [];\n        const offsets = [];\n        let offset = 0;\n        for (let i = 0; i < parts.length; i++) {\n            const part = parts[i];\n            if (i % 2 === 0) {\n                // fixed string\n                strings.push(part);\n                offset += part.length;\n            }\n            else if (part.trim().length > 0) {\n                offset += interpolationConfig.start.length;\n                expressions.push(part);\n                offsets.push(offset);\n                offset += part.length + interpolationConfig.end.length;\n            }\n            else {\n                this._reportError('Blank expressions are not allowed in interpolated strings', input, `at column ${this._findInterpolationErrorColumn(parts, i, interpolationConfig)} in`, location);\n                expressions.push('$implict');\n                offsets.push(offset);\n            }\n        }\n        return new SplitInterpolation(strings, expressions, offsets);\n    }\n    wrapLiteralPrimitive(input, location) {\n        return new ASTWithSource(new LiteralPrimitive(new ParseSpan(0, input == null ? 0 : input.length), input), input, location, this.errors);\n    }\n    _stripComments(input) {\n        const i = this._commentStart(input);\n        return i != null ? input.substring(0, i).trim() : input;\n    }\n    _commentStart(input) {\n        let outerQuote = null;\n        for (let i = 0; i < input.length - 1; i++) {\n            const char = input.charCodeAt(i);\n            const nextChar = input.charCodeAt(i + 1);\n            if (char === $SLASH && nextChar == $SLASH && outerQuote == null)\n                return i;\n            if (outerQuote === char) {\n                outerQuote = null;\n            }\n            else if (outerQuote == null && isQuote(char)) {\n                outerQuote = char;\n            }\n        }\n        return null;\n    }\n    _checkNoInterpolation(input, location, interpolationConfig) {\n        const regexp = _createInterpolateRegExp(interpolationConfig);\n        const parts = input.split(regexp);\n        if (parts.length > 1) {\n            this._reportError(`Got interpolation (${interpolationConfig.start}${interpolationConfig.end}) where expression was expected`, input, `at column ${this._findInterpolationErrorColumn(parts, 1, interpolationConfig)} in`, location);\n        }\n    }\n    _findInterpolationErrorColumn(parts, partInErrIdx, interpolationConfig) {\n        let errLocation = '';\n        for (let j = 0; j < partInErrIdx; j++) {\n            errLocation += j % 2 === 0 ?\n                parts[j] :\n                `${interpolationConfig.start}${parts[j]}${interpolationConfig.end}`;\n        }\n        return errLocation.length;\n    }\n}\nclass _ParseAST {\n    constructor(input, location, tokens, inputLength, parseAction, errors, offset) {\n        this.input = input;\n        this.location = location;\n        this.tokens = tokens;\n        this.inputLength = inputLength;\n        this.parseAction = parseAction;\n        this.errors = errors;\n        this.offset = offset;\n        this.rparensExpected = 0;\n        this.rbracketsExpected = 0;\n        this.rbracesExpected = 0;\n        this.index = 0;\n    }\n    peek(offset) {\n        const i = this.index + offset;\n        return i < this.tokens.length ? this.tokens[i] : EOF;\n    }\n    get next() { return this.peek(0); }\n    get inputIndex() {\n        return (this.index < this.tokens.length) ? this.next.index + this.offset :\n            this.inputLength + this.offset;\n    }\n    span(start) { return new ParseSpan(start, this.inputIndex); }\n    advance() { this.index++; }\n    optionalCharacter(code) {\n        if (this.next.isCharacter(code)) {\n            this.advance();\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    peekKeywordLet() { return this.next.isKeywordLet(); }\n    peekKeywordAs() { return this.next.isKeywordAs(); }\n    expectCharacter(code) {\n        if (this.optionalCharacter(code))\n            return;\n        this.error(`Missing expected ${String.fromCharCode(code)}`);\n    }\n    optionalOperator(op) {\n        if (this.next.isOperator(op)) {\n            this.advance();\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    expectOperator(operator) {\n        if (this.optionalOperator(operator))\n            return;\n        this.error(`Missing expected operator ${operator}`);\n    }\n    expectIdentifierOrKeyword() {\n        const n = this.next;\n        if (!n.isIdentifier() && !n.isKeyword()) {\n            this.error(`Unexpected token ${n}, expected identifier or keyword`);\n            return '';\n        }\n        this.advance();\n        return n.toString();\n    }\n    expectIdentifierOrKeywordOrString() {\n        const n = this.next;\n        if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {\n            this.error(`Unexpected token ${n}, expected identifier, keyword, or string`);\n            return '';\n        }\n        this.advance();\n        return n.toString();\n    }\n    parseChain() {\n        const exprs = [];\n        const start = this.inputIndex;\n        while (this.index < this.tokens.length) {\n            const expr = this.parsePipe();\n            exprs.push(expr);\n            if (this.optionalCharacter($SEMICOLON)) {\n                if (!this.parseAction) {\n                    this.error('Binding expression cannot contain chained expression');\n                }\n                while (this.optionalCharacter($SEMICOLON)) {\n                } // read all semicolons\n            }\n            else if (this.index < this.tokens.length) {\n                this.error(`Unexpected token '${this.next}'`);\n            }\n        }\n        if (exprs.length == 0)\n            return new EmptyExpr(this.span(start));\n        if (exprs.length == 1)\n            return exprs[0];\n        return new Chain(this.span(start), exprs);\n    }\n    parsePipe() {\n        let result = this.parseExpression();\n        if (this.optionalOperator('|')) {\n            if (this.parseAction) {\n                this.error('Cannot have a pipe in an action expression');\n            }\n            do {\n                const name = this.expectIdentifierOrKeyword();\n                const args = [];\n                while (this.optionalCharacter($COLON)) {\n                    args.push(this.parseExpression());\n                }\n                result = new BindingPipe(this.span(result.span.start), result, name, args);\n            } while (this.optionalOperator('|'));\n        }\n        return result;\n    }\n    parseExpression() { return this.parseConditional(); }\n    parseConditional() {\n        const start = this.inputIndex;\n        const result = this.parseLogicalOr();\n        if (this.optionalOperator('?')) {\n            const yes = this.parsePipe();\n            let no;\n            if (!this.optionalCharacter($COLON)) {\n                const end = this.inputIndex;\n                const expression = this.input.substring(start, end);\n                this.error(`Conditional expression ${expression} requires all 3 expressions`);\n                no = new EmptyExpr(this.span(start));\n            }\n            else {\n                no = this.parsePipe();\n            }\n            return new Conditional(this.span(start), result, yes, no);\n        }\n        else {\n            return result;\n        }\n    }\n    parseLogicalOr() {\n        // '||'\n        let result = this.parseLogicalAnd();\n        while (this.optionalOperator('||')) {\n            const right = this.parseLogicalAnd();\n            result = new Binary(this.span(result.span.start), '||', result, right);\n        }\n        return result;\n    }\n    parseLogicalAnd() {\n        // '&&'\n        let result = this.parseEquality();\n        while (this.optionalOperator('&&')) {\n            const right = this.parseEquality();\n            result = new Binary(this.span(result.span.start), '&&', result, right);\n        }\n        return result;\n    }\n    parseEquality() {\n        // '==','!=','===','!=='\n        let result = this.parseRelational();\n        while (this.next.type == TokenType$1.Operator) {\n            const operator = this.next.strValue;\n            switch (operator) {\n                case '==':\n                case '===':\n                case '!=':\n                case '!==':\n                    this.advance();\n                    const right = this.parseRelational();\n                    result = new Binary(this.span(result.span.start), operator, result, right);\n                    continue;\n            }\n            break;\n        }\n        return result;\n    }\n    parseRelational() {\n        // '<', '>', '<=', '>='\n        let result = this.parseAdditive();\n        while (this.next.type == TokenType$1.Operator) {\n            const operator = this.next.strValue;\n            switch (operator) {\n                case '<':\n                case '>':\n                case '<=':\n                case '>=':\n                    this.advance();\n                    const right = this.parseAdditive();\n                    result = new Binary(this.span(result.span.start), operator, result, right);\n                    continue;\n            }\n            break;\n        }\n        return result;\n    }\n    parseAdditive() {\n        // '+', '-'\n        let result = this.parseMultiplicative();\n        while (this.next.type == TokenType$1.Operator) {\n            const operator = this.next.strValue;\n            switch (operator) {\n                case '+':\n                case '-':\n                    this.advance();\n                    let right = this.parseMultiplicative();\n                    result = new Binary(this.span(result.span.start), operator, result, right);\n                    continue;\n            }\n            break;\n        }\n        return result;\n    }\n    parseMultiplicative() {\n        // '*', '%', '/'\n        let result = this.parsePrefix();\n        while (this.next.type == TokenType$1.Operator) {\n            const operator = this.next.strValue;\n            switch (operator) {\n                case '*':\n                case '%':\n                case '/':\n                    this.advance();\n                    let right = this.parsePrefix();\n                    result = new Binary(this.span(result.span.start), operator, result, right);\n                    continue;\n            }\n            break;\n        }\n        return result;\n    }\n    parsePrefix() {\n        if (this.next.type == TokenType$1.Operator) {\n            const start = this.inputIndex;\n            const operator = this.next.strValue;\n            let result;\n            switch (operator) {\n                case '+':\n                    this.advance();\n                    result = this.parsePrefix();\n                    return new Binary(this.span(start), '-', result, new LiteralPrimitive(new ParseSpan(start, start), 0));\n                case '-':\n                    this.advance();\n                    result = this.parsePrefix();\n                    return new Binary(this.span(start), operator, new LiteralPrimitive(new ParseSpan(start, start), 0), result);\n                case '!':\n                    this.advance();\n                    result = this.parsePrefix();\n                    return new PrefixNot(this.span(start), result);\n            }\n        }\n        return this.parseCallChain();\n    }\n    parseCallChain() {\n        let result = this.parsePrimary();\n        while (true) {\n            if (this.optionalCharacter($PERIOD)) {\n                result = this.parseAccessMemberOrMethodCall(result, false);\n            }\n            else if (this.optionalOperator('?.')) {\n                result = this.parseAccessMemberOrMethodCall(result, true);\n            }\n            else if (this.optionalCharacter($LBRACKET)) {\n                this.rbracketsExpected++;\n                const key = this.parsePipe();\n                this.rbracketsExpected--;\n                this.expectCharacter($RBRACKET);\n                if (this.optionalOperator('=')) {\n                    const value = this.parseConditional();\n                    result = new KeyedWrite(this.span(result.span.start), result, key, value);\n                }\n                else {\n                    result = new KeyedRead(this.span(result.span.start), result, key);\n                }\n            }\n            else if (this.optionalCharacter($LPAREN)) {\n                this.rparensExpected++;\n                const args = this.parseCallArguments();\n                this.rparensExpected--;\n                this.expectCharacter($RPAREN);\n                result = new FunctionCall(this.span(result.span.start), result, args);\n            }\n            else if (this.optionalOperator('!')) {\n                result = new NonNullAssert(this.span(result.span.start), result);\n            }\n            else {\n                return result;\n            }\n        }\n    }\n    parsePrimary() {\n        const start = this.inputIndex;\n        if (this.optionalCharacter($LPAREN)) {\n            this.rparensExpected++;\n            const result = this.parsePipe();\n            this.rparensExpected--;\n            this.expectCharacter($RPAREN);\n            return result;\n        }\n        else if (this.next.isKeywordNull()) {\n            this.advance();\n            return new LiteralPrimitive(this.span(start), null);\n        }\n        else if (this.next.isKeywordUndefined()) {\n            this.advance();\n            return new LiteralPrimitive(this.span(start), void 0);\n        }\n        else if (this.next.isKeywordTrue()) {\n            this.advance();\n            return new LiteralPrimitive(this.span(start), true);\n        }\n        else if (this.next.isKeywordFalse()) {\n            this.advance();\n            return new LiteralPrimitive(this.span(start), false);\n        }\n        else if (this.next.isKeywordThis()) {\n            this.advance();\n            return new ImplicitReceiver(this.span(start));\n        }\n        else if (this.optionalCharacter($LBRACKET)) {\n            this.rbracketsExpected++;\n            const elements = this.parseExpressionList($RBRACKET);\n            this.rbracketsExpected--;\n            this.expectCharacter($RBRACKET);\n            return new LiteralArray(this.span(start), elements);\n        }\n        else if (this.next.isCharacter($LBRACE)) {\n            return this.parseLiteralMap();\n        }\n        else if (this.next.isIdentifier()) {\n            return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start)), false);\n        }\n        else if (this.next.isNumber()) {\n            const value = this.next.toNumber();\n            this.advance();\n            return new LiteralPrimitive(this.span(start), value);\n        }\n        else if (this.next.isString()) {\n            const literalValue = this.next.toString();\n            this.advance();\n            return new LiteralPrimitive(this.span(start), literalValue);\n        }\n        else if (this.index >= this.tokens.length) {\n            this.error(`Unexpected end of expression: ${this.input}`);\n            return new EmptyExpr(this.span(start));\n        }\n        else {\n            this.error(`Unexpected token ${this.next}`);\n            return new EmptyExpr(this.span(start));\n        }\n    }\n    parseExpressionList(terminator) {\n        const result = [];\n        if (!this.next.isCharacter(terminator)) {\n            do {\n                result.push(this.parsePipe());\n            } while (this.optionalCharacter($COMMA));\n        }\n        return result;\n    }\n    parseLiteralMap() {\n        const keys = [];\n        const values = [];\n        const start = this.inputIndex;\n        this.expectCharacter($LBRACE);\n        if (!this.optionalCharacter($RBRACE)) {\n            this.rbracesExpected++;\n            do {\n                const quoted = this.next.isString();\n                const key = this.expectIdentifierOrKeywordOrString();\n                keys.push({ key, quoted });\n                this.expectCharacter($COLON);\n                values.push(this.parsePipe());\n            } while (this.optionalCharacter($COMMA));\n            this.rbracesExpected--;\n            this.expectCharacter($RBRACE);\n        }\n        return new LiteralMap(this.span(start), keys, values);\n    }\n    parseAccessMemberOrMethodCall(receiver, isSafe = false) {\n        const start = receiver.span.start;\n        const id = this.expectIdentifierOrKeyword();\n        if (this.optionalCharacter($LPAREN)) {\n            this.rparensExpected++;\n            const args = this.parseCallArguments();\n            this.expectCharacter($RPAREN);\n            this.rparensExpected--;\n            const span = this.span(start);\n            return isSafe ? new SafeMethodCall(span, receiver, id, args) :\n                new MethodCall(span, receiver, id, args);\n        }\n        else {\n            if (isSafe) {\n                if (this.optionalOperator('=')) {\n                    this.error('The \\'?.\\' operator cannot be used in the assignment');\n                    return new EmptyExpr(this.span(start));\n                }\n                else {\n                    return new SafePropertyRead(this.span(start), receiver, id);\n                }\n            }\n            else {\n                if (this.optionalOperator('=')) {\n                    if (!this.parseAction) {\n                        this.error('Bindings cannot contain assignments');\n                        return new EmptyExpr(this.span(start));\n                    }\n                    const value = this.parseConditional();\n                    return new PropertyWrite(this.span(start), receiver, id, value);\n                }\n                else {\n                    return new PropertyRead(this.span(start), receiver, id);\n                }\n            }\n        }\n    }\n    parseCallArguments() {\n        if (this.next.isCharacter($RPAREN))\n            return [];\n        const positionals = [];\n        do {\n            positionals.push(this.parsePipe());\n        } while (this.optionalCharacter($COMMA));\n        return positionals;\n    }\n    /**\n     * An identifier, a keyword, a string with an optional `-` in between.\n     */\n    expectTemplateBindingKey() {\n        let result = '';\n        let operatorFound = false;\n        do {\n            result += this.expectIdentifierOrKeywordOrString();\n            operatorFound = this.optionalOperator('-');\n            if (operatorFound) {\n                result += '-';\n            }\n        } while (operatorFound);\n        return result.toString();\n    }\n    // Parses the AST for `<some-tag *tplKey=AST>`\n    parseTemplateBindings(tplKey) {\n        let firstBinding = true;\n        const bindings = [];\n        const warnings = [];\n        do {\n            const start = this.inputIndex;\n            let rawKey;\n            let key;\n            let isVar = false;\n            if (firstBinding) {\n                rawKey = key = tplKey;\n                firstBinding = false;\n            }\n            else {\n                isVar = this.peekKeywordLet();\n                if (isVar)\n                    this.advance();\n                rawKey = this.expectTemplateBindingKey();\n                key = isVar ? rawKey : tplKey + rawKey[0].toUpperCase() + rawKey.substring(1);\n                this.optionalCharacter($COLON);\n            }\n            let name = null;\n            let expression = null;\n            if (isVar) {\n                if (this.optionalOperator('=')) {\n                    name = this.expectTemplateBindingKey();\n                }\n                else {\n                    name = '\\$implicit';\n                }\n            }\n            else if (this.peekKeywordAs()) {\n                this.advance(); // consume `as`\n                name = rawKey;\n                key = this.expectTemplateBindingKey(); // read local var name\n                isVar = true;\n            }\n            else if (this.next !== EOF && !this.peekKeywordLet()) {\n                const start = this.inputIndex;\n                const ast = this.parsePipe();\n                const source = this.input.substring(start - this.offset, this.inputIndex - this.offset);\n                expression = new ASTWithSource(ast, source, this.location, this.errors);\n            }\n            bindings.push(new TemplateBinding(this.span(start), key, isVar, name, expression));\n            if (this.peekKeywordAs() && !isVar) {\n                const letStart = this.inputIndex;\n                this.advance(); // consume `as`\n                const letName = this.expectTemplateBindingKey(); // read local var name\n                bindings.push(new TemplateBinding(this.span(letStart), letName, true, key, null));\n            }\n            if (!this.optionalCharacter($SEMICOLON)) {\n                this.optionalCharacter($COMMA);\n            }\n        } while (this.index < this.tokens.length);\n        return new TemplateBindingParseResult(bindings, warnings, this.errors);\n    }\n    error(message, index = null) {\n        this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));\n        this.skip();\n    }\n    locationText(index = null) {\n        if (index == null)\n            index = this.index;\n        return (index < this.tokens.length) ? `at column ${this.tokens[index].index + 1} in` :\n            `at the end of the expression`;\n    }\n    // Error recovery should skip tokens until it encounters a recovery point. skip() treats\n    // the end of input and a ';' as unconditionally a recovery point. It also treats ')',\n    // '}' and ']' as conditional recovery points if one of calling productions is expecting\n    // one of these symbols. This allows skip() to recover from errors such as '(a.) + 1' allowing\n    // more of the AST to be retained (it doesn't skip any tokens as the ')' is retained because\n    // of the '(' begins an '(' <expr> ')' production). The recovery points of grouping symbols\n    // must be conditional as they must be skipped if none of the calling productions are not\n    // expecting the closing token else we will never make progress in the case of an\n    // extraneous group closing symbol (such as a stray ')'). This is not the case for ';' because\n    // parseChain() is always the root production and it expects a ';'.\n    // If a production expects one of these token it increments the corresponding nesting count,\n    // and then decrements it just prior to checking if the token is in the input.\n    skip() {\n        let n = this.next;\n        while (this.index < this.tokens.length && !n.isCharacter($SEMICOLON) &&\n            (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) &&\n            (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) &&\n            (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET))) {\n            if (this.next.isError()) {\n                this.errors.push(new ParserError(this.next.toString(), this.input, this.locationText(), this.location));\n            }\n            this.advance();\n            n = this.next;\n        }\n    }\n}\nclass SimpleExpressionChecker {\n    constructor() {\n        this.errors = [];\n    }\n    static check(ast) {\n        const s = new SimpleExpressionChecker();\n        ast.visit(s);\n        return s.errors;\n    }\n    visitImplicitReceiver(ast, context) { }\n    visitInterpolation(ast, context) { }\n    visitLiteralPrimitive(ast, context) { }\n    visitPropertyRead(ast, context) { }\n    visitPropertyWrite(ast, context) { }\n    visitSafePropertyRead(ast, context) { }\n    visitMethodCall(ast, context) { }\n    visitSafeMethodCall(ast, context) { }\n    visitFunctionCall(ast, context) { }\n    visitLiteralArray(ast, context) { this.visitAll(ast.expressions); }\n    visitLiteralMap(ast, context) { this.visitAll(ast.values); }\n    visitBinary(ast, context) { }\n    visitPrefixNot(ast, context) { }\n    visitNonNullAssert(ast, context) { }\n    visitConditional(ast, context) { }\n    visitPipe(ast, context) { this.errors.push('pipes'); }\n    visitKeyedRead(ast, context) { }\n    visitKeyedWrite(ast, context) { }\n    visitAll(asts) { return asts.map(node => node.visit(this)); }\n    visitChain(ast, context) { }\n    visitQuote(ast, context) { }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// =================================================================================================\n// =================================================================================================\n// =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========\n// =================================================================================================\n// =================================================================================================\n//\n//        DO NOT EDIT THIS LIST OF SECURITY SENSITIVE PROPERTIES WITHOUT A SECURITY REVIEW!\n//                               Reach out to mprobst for details.\n//\n// =================================================================================================\n/** Map from tagName|propertyName SecurityContext. Properties applying to all tags use '*'. */\nlet _SECURITY_SCHEMA;\nfunction SECURITY_SCHEMA() {\n    if (!_SECURITY_SCHEMA) {\n        _SECURITY_SCHEMA = {};\n        // Case is insignificant below, all element and attribute names are lower-cased for lookup.\n        registerContext(SecurityContext.HTML, [\n            'iframe|srcdoc',\n            '*|innerHTML',\n            '*|outerHTML',\n        ]);\n        registerContext(SecurityContext.STYLE, ['*|style']);\n        // NB: no SCRIPT contexts here, they are never allowed due to the parser stripping them.\n        registerContext(SecurityContext.URL, [\n            '*|formAction', 'area|href', 'area|ping', 'audio|src', 'a|href',\n            'a|ping', 'blockquote|cite', 'body|background', 'del|cite', 'form|action',\n            'img|src', 'img|srcset', 'input|src', 'ins|cite', 'q|cite',\n            'source|src', 'source|srcset', 'track|src', 'video|poster', 'video|src',\n        ]);\n        registerContext(SecurityContext.RESOURCE_URL, [\n            'applet|code',\n            'applet|codebase',\n            'base|href',\n            'embed|src',\n            'frame|src',\n            'head|profile',\n            'html|manifest',\n            'iframe|src',\n            'link|href',\n            'media|src',\n            'object|codebase',\n            'object|data',\n            'script|src',\n        ]);\n    }\n    return _SECURITY_SCHEMA;\n}\nfunction registerContext(ctx, specs) {\n    for (const spec of specs)\n        _SECURITY_SCHEMA[spec.toLowerCase()] = ctx;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ElementSchemaRegistry {\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst BOOLEAN = 'boolean';\nconst NUMBER = 'number';\nconst STRING = 'string';\nconst OBJECT = 'object';\n/**\n * This array represents the DOM schema. It encodes inheritance, properties, and events.\n *\n * ## Overview\n *\n * Each line represents one kind of element. The `element_inheritance` and properties are joined\n * using `element_inheritance|properties` syntax.\n *\n * ## Element Inheritance\n *\n * The `element_inheritance` can be further subdivided as `element1,element2,...^parentElement`.\n * Here the individual elements are separated by `,` (commas). Every element in the list\n * has identical properties.\n *\n * An `element` may inherit additional properties from `parentElement` If no `^parentElement` is\n * specified then `\"\"` (blank) element is assumed.\n *\n * NOTE: The blank element inherits from root `[Element]` element, the super element of all\n * elements.\n *\n * NOTE an element prefix such as `:svg:` has no special meaning to the schema.\n *\n * ## Properties\n *\n * Each element has a set of properties separated by `,` (commas). Each property can be prefixed\n * by a special character designating its type:\n *\n * - (no prefix): property is a string.\n * - `*`: property represents an event.\n * - `!`: property is a boolean.\n * - `#`: property is a number.\n * - `%`: property is an object.\n *\n * ## Query\n *\n * The class creates an internal squas representation which allows to easily answer the query of\n * if a given property exist on a given element.\n *\n * NOTE: We don't yet support querying for types or events.\n * NOTE: This schema is auto extracted from `schema_extractor.ts` located in the test folder,\n *       see dom_element_schema_registry_spec.ts\n */\n// =================================================================================================\n// =================================================================================================\n// =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========\n// =================================================================================================\n// =================================================================================================\n//\n//                       DO NOT EDIT THIS DOM SCHEMA WITHOUT A SECURITY REVIEW!\n//\n// Newly added properties must be security reviewed and assigned an appropriate SecurityContext in\n// dom_security_schema.ts. Reach out to mprobst & rjamet for details.\n//\n// =================================================================================================\nconst SCHEMA = [\n    '[Element]|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop,slot' +\n        /* added manually to avoid breaking changes */\n        ',*message,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored',\n    '[HTMLElement]^[Element]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,outerText,!spellcheck,%style,#tabIndex,title,!translate',\n    'abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,outerText,!spellcheck,%style,#tabIndex,title,!translate',\n    'media^[HTMLElement]|!autoplay,!controls,%controlsList,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,*waitingforkey,#playbackRate,preload,src,%srcObject,#volume',\n    ':svg:^[HTMLElement]|*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex',\n    ':svg:graphics^:svg:|',\n    ':svg:animation^:svg:|*begin,*end,*repeat',\n    ':svg:geometry^:svg:|',\n    ':svg:componentTransferFunction^:svg:|',\n    ':svg:gradient^:svg:|',\n    ':svg:textContent^:svg:graphics|',\n    ':svg:textPositioning^:svg:textContent|',\n    'a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username',\n    'area^[HTMLElement]|alt,coords,download,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,rel,search,shape,target,username',\n    'audio^media|',\n    'br^[HTMLElement]|clear',\n    'base^[HTMLElement]|href,target',\n    'body^[HTMLElement]|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink',\n    'button^[HTMLElement]|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value',\n    'canvas^[HTMLElement]|#height,#width',\n    'content^[HTMLElement]|select',\n    'dl^[HTMLElement]|!compact',\n    'datalist^[HTMLElement]|',\n    'details^[HTMLElement]|!open',\n    'dialog^[HTMLElement]|!open,returnValue',\n    'dir^[HTMLElement]|!compact',\n    'div^[HTMLElement]|align',\n    'embed^[HTMLElement]|align,height,name,src,type,width',\n    'fieldset^[HTMLElement]|!disabled,name',\n    'font^[HTMLElement]|color,face,size',\n    'form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target',\n    'frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src',\n    'frameset^[HTMLElement]|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows',\n    'hr^[HTMLElement]|align,color,!noShade,size,width',\n    'head^[HTMLElement]|',\n    'h1,h2,h3,h4,h5,h6^[HTMLElement]|align',\n    'html^[HTMLElement]|version',\n    'iframe^[HTMLElement]|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width',\n    'img^[HTMLElement]|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width',\n    'input^[HTMLElement]|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width',\n    'li^[HTMLElement]|type,#value',\n    'label^[HTMLElement]|htmlFor',\n    'legend^[HTMLElement]|align',\n    'link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,referrerPolicy,rel,%relList,rev,%sizes,target,type',\n    'map^[HTMLElement]|name',\n    'marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width',\n    'menu^[HTMLElement]|!compact',\n    'meta^[HTMLElement]|content,httpEquiv,name,scheme',\n    'meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value',\n    'ins,del^[HTMLElement]|cite,dateTime',\n    'ol^[HTMLElement]|!compact,!reversed,#start,type',\n    'object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width',\n    'optgroup^[HTMLElement]|!disabled,label',\n    'option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value',\n    'output^[HTMLElement]|defaultValue,%htmlFor,name,value',\n    'p^[HTMLElement]|align',\n    'param^[HTMLElement]|name,type,value,valueType',\n    'picture^[HTMLElement]|',\n    'pre^[HTMLElement]|#width',\n    'progress^[HTMLElement]|#max,#value',\n    'q,blockquote,cite^[HTMLElement]|',\n    'script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type',\n    'select^[HTMLElement]|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value',\n    'shadow^[HTMLElement]|',\n    'slot^[HTMLElement]|name',\n    'source^[HTMLElement]|media,sizes,src,srcset,type',\n    'span^[HTMLElement]|',\n    'style^[HTMLElement]|!disabled,media,type',\n    'caption^[HTMLElement]|align',\n    'th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width',\n    'col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width',\n    'table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width',\n    'tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign',\n    'tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign',\n    'template^[HTMLElement]|',\n    'textarea^[HTMLElement]|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap',\n    'title^[HTMLElement]|text',\n    'track^[HTMLElement]|!default,kind,label,src,srclang',\n    'ul^[HTMLElement]|!compact,type',\n    'unknown^[HTMLElement]|',\n    'video^media|#height,poster,#width',\n    ':svg:a^:svg:graphics|',\n    ':svg:animate^:svg:animation|',\n    ':svg:animateMotion^:svg:animation|',\n    ':svg:animateTransform^:svg:animation|',\n    ':svg:circle^:svg:geometry|',\n    ':svg:clipPath^:svg:graphics|',\n    ':svg:defs^:svg:graphics|',\n    ':svg:desc^:svg:|',\n    ':svg:discard^:svg:|',\n    ':svg:ellipse^:svg:geometry|',\n    ':svg:feBlend^:svg:|',\n    ':svg:feColorMatrix^:svg:|',\n    ':svg:feComponentTransfer^:svg:|',\n    ':svg:feComposite^:svg:|',\n    ':svg:feConvolveMatrix^:svg:|',\n    ':svg:feDiffuseLighting^:svg:|',\n    ':svg:feDisplacementMap^:svg:|',\n    ':svg:feDistantLight^:svg:|',\n    ':svg:feDropShadow^:svg:|',\n    ':svg:feFlood^:svg:|',\n    ':svg:feFuncA^:svg:componentTransferFunction|',\n    ':svg:feFuncB^:svg:componentTransferFunction|',\n    ':svg:feFuncG^:svg:componentTransferFunction|',\n    ':svg:feFuncR^:svg:componentTransferFunction|',\n    ':svg:feGaussianBlur^:svg:|',\n    ':svg:feImage^:svg:|',\n    ':svg:feMerge^:svg:|',\n    ':svg:feMergeNode^:svg:|',\n    ':svg:feMorphology^:svg:|',\n    ':svg:feOffset^:svg:|',\n    ':svg:fePointLight^:svg:|',\n    ':svg:feSpecularLighting^:svg:|',\n    ':svg:feSpotLight^:svg:|',\n    ':svg:feTile^:svg:|',\n    ':svg:feTurbulence^:svg:|',\n    ':svg:filter^:svg:|',\n    ':svg:foreignObject^:svg:graphics|',\n    ':svg:g^:svg:graphics|',\n    ':svg:image^:svg:graphics|',\n    ':svg:line^:svg:geometry|',\n    ':svg:linearGradient^:svg:gradient|',\n    ':svg:mpath^:svg:|',\n    ':svg:marker^:svg:|',\n    ':svg:mask^:svg:|',\n    ':svg:metadata^:svg:|',\n    ':svg:path^:svg:geometry|',\n    ':svg:pattern^:svg:|',\n    ':svg:polygon^:svg:geometry|',\n    ':svg:polyline^:svg:geometry|',\n    ':svg:radialGradient^:svg:gradient|',\n    ':svg:rect^:svg:geometry|',\n    ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan',\n    ':svg:script^:svg:|type',\n    ':svg:set^:svg:animation|',\n    ':svg:stop^:svg:|',\n    ':svg:style^:svg:|!disabled,media,title,type',\n    ':svg:switch^:svg:graphics|',\n    ':svg:symbol^:svg:|',\n    ':svg:tspan^:svg:textPositioning|',\n    ':svg:text^:svg:textPositioning|',\n    ':svg:textPath^:svg:textContent|',\n    ':svg:title^:svg:|',\n    ':svg:use^:svg:graphics|',\n    ':svg:view^:svg:|#zoomAndPan',\n    'data^[HTMLElement]|value',\n    'keygen^[HTMLElement]|!autofocus,challenge,!disabled,form,keytype,name',\n    'menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default',\n    'summary^[HTMLElement]|',\n    'time^[HTMLElement]|dateTime',\n    ':svg:cursor^:svg:|',\n];\nconst _ATTR_TO_PROP = {\n    'class': 'className',\n    'for': 'htmlFor',\n    'formaction': 'formAction',\n    'innerHtml': 'innerHTML',\n    'readonly': 'readOnly',\n    'tabindex': 'tabIndex',\n};\nclass DomElementSchemaRegistry extends ElementSchemaRegistry {\n    constructor() {\n        super();\n        this._schema = {};\n        SCHEMA.forEach(encodedType => {\n            const type = {};\n            const [strType, strProperties] = encodedType.split('|');\n            const properties = strProperties.split(',');\n            const [typeNames, superName] = strType.split('^');\n            typeNames.split(',').forEach(tag => this._schema[tag.toLowerCase()] = type);\n            const superType = superName && this._schema[superName.toLowerCase()];\n            if (superType) {\n                Object.keys(superType).forEach((prop) => { type[prop] = superType[prop]; });\n            }\n            properties.forEach((property) => {\n                if (property.length > 0) {\n                    switch (property[0]) {\n                        case '*':\n                            // We don't yet support events.\n                            // If ever allowing to bind to events, GO THROUGH A SECURITY REVIEW, allowing events\n                            // will\n                            // almost certainly introduce bad XSS vulnerabilities.\n                            // type[property.substring(1)] = EVENT;\n                            break;\n                        case '!':\n                            type[property.substring(1)] = BOOLEAN;\n                            break;\n                        case '#':\n                            type[property.substring(1)] = NUMBER;\n                            break;\n                        case '%':\n                            type[property.substring(1)] = OBJECT;\n                            break;\n                        default:\n                            type[property] = STRING;\n                    }\n                }\n            });\n        });\n    }\n    hasProperty(tagName, propName, schemaMetas) {\n        if (schemaMetas.some((schema) => schema.name === NO_ERRORS_SCHEMA.name)) {\n            return true;\n        }\n        if (tagName.indexOf('-') > -1) {\n            if (isNgContainer(tagName) || isNgContent(tagName)) {\n                return false;\n            }\n            if (schemaMetas.some((schema) => schema.name === CUSTOM_ELEMENTS_SCHEMA.name)) {\n                // Can't tell now as we don't know which properties a custom element will get\n                // once it is instantiated\n                return true;\n            }\n        }\n        const elementProperties = this._schema[tagName.toLowerCase()] || this._schema['unknown'];\n        return !!elementProperties[propName];\n    }\n    hasElement(tagName, schemaMetas) {\n        if (schemaMetas.some((schema) => schema.name === NO_ERRORS_SCHEMA.name)) {\n            return true;\n        }\n        if (tagName.indexOf('-') > -1) {\n            if (isNgContainer(tagName) || isNgContent(tagName)) {\n                return true;\n            }\n            if (schemaMetas.some((schema) => schema.name === CUSTOM_ELEMENTS_SCHEMA.name)) {\n                // Allow any custom elements\n                return true;\n            }\n        }\n        return !!this._schema[tagName.toLowerCase()];\n    }\n    /**\n     * securityContext returns the security context for the given property on the given DOM tag.\n     *\n     * Tag and property name are statically known and cannot change at runtime, i.e. it is not\n     * possible to bind a value into a changing attribute or tag name.\n     *\n     * The filtering is based on a list of allowed tags|attributes. All attributes in the schema\n     * above are assumed to have the 'NONE' security context, i.e. that they are safe inert\n     * string values. Only specific well known attack vectors are assigned their appropriate context.\n     */\n    securityContext(tagName, propName, isAttribute) {\n        if (isAttribute) {\n            // NB: For security purposes, use the mapped property name, not the attribute name.\n            propName = this.getMappedPropName(propName);\n        }\n        // Make sure comparisons are case insensitive, so that case differences between attribute and\n        // property names do not have a security impact.\n        tagName = tagName.toLowerCase();\n        propName = propName.toLowerCase();\n        let ctx = SECURITY_SCHEMA()[tagName + '|' + propName];\n        if (ctx) {\n            return ctx;\n        }\n        ctx = SECURITY_SCHEMA()['*|' + propName];\n        return ctx ? ctx : SecurityContext.NONE;\n    }\n    getMappedPropName(propName) { return _ATTR_TO_PROP[propName] || propName; }\n    getDefaultComponentElementName() { return 'ng-component'; }\n    validateProperty(name) {\n        if (name.toLowerCase().startsWith('on')) {\n            const msg = `Binding to event property '${name}' is disallowed for security reasons, ` +\n                `please use (${name.slice(2)})=...` +\n                `\\nIf '${name}' is a directive input, make sure the directive is imported by the` +\n                ` current module.`;\n            return { error: true, msg: msg };\n        }\n        else {\n            return { error: false };\n        }\n    }\n    validateAttribute(name) {\n        if (name.toLowerCase().startsWith('on')) {\n            const msg = `Binding to event attribute '${name}' is disallowed for security reasons, ` +\n                `please use (${name.slice(2)})=...`;\n            return { error: true, msg: msg };\n        }\n        else {\n            return { error: false };\n        }\n    }\n    allKnownElementNames() { return Object.keys(this._schema); }\n    normalizeAnimationStyleProperty(propName) {\n        return dashCaseToCamelCase(propName);\n    }\n    normalizeAnimationStyleValue(camelCaseProp, userProvidedProp, val) {\n        let unit = '';\n        const strVal = val.toString().trim();\n        let errorMsg = null;\n        if (_isPixelDimensionStyle(camelCaseProp) && val !== 0 && val !== '0') {\n            if (typeof val === 'number') {\n                unit = 'px';\n            }\n            else {\n                const valAndSuffixMatch = val.match(/^[+-]?[\\d\\.]+([a-z]*)$/);\n                if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {\n                    errorMsg = `Please provide a CSS unit value for ${userProvidedProp}:${val}`;\n                }\n            }\n        }\n        return { error: errorMsg, value: strVal + unit };\n    }\n}\nfunction _isPixelDimensionStyle(prop) {\n    switch (prop) {\n        case 'width':\n        case 'height':\n        case 'minWidth':\n        case 'minHeight':\n        case 'maxWidth':\n        case 'maxHeight':\n        case 'left':\n        case 'top':\n        case 'bottom':\n        case 'right':\n        case 'fontSize':\n        case 'outlineWidth':\n        case 'outlineOffset':\n        case 'paddingTop':\n        case 'paddingLeft':\n        case 'paddingBottom':\n        case 'paddingRight':\n        case 'marginTop':\n        case 'marginLeft':\n        case 'marginBottom':\n        case 'marginRight':\n        case 'borderRadius':\n        case 'borderWidth':\n        case 'borderTopWidth':\n        case 'borderLeftWidth':\n        case 'borderRightWidth':\n        case 'borderBottomWidth':\n        case 'textIndent':\n            return true;\n        default:\n            return false;\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst BIND_NAME_REGEXP$1 = /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.+))|\\[\\(([^\\)]+)\\)\\]|\\[([^\\]]+)\\]|\\(([^\\)]+)\\))$/;\n// Group 1 = \"bind-\"\nconst KW_BIND_IDX$1 = 1;\n// Group 2 = \"let-\"\nconst KW_LET_IDX$1 = 2;\n// Group 3 = \"ref-/#\"\nconst KW_REF_IDX$1 = 3;\n// Group 4 = \"on-\"\nconst KW_ON_IDX$1 = 4;\n// Group 5 = \"bindon-\"\nconst KW_BINDON_IDX$1 = 5;\n// Group 6 = \"@\"\nconst KW_AT_IDX$1 = 6;\n// Group 7 = the identifier after \"bind-\", \"let-\", \"ref-/#\", \"on-\", \"bindon-\" or \"@\"\nconst IDENT_KW_IDX$1 = 7;\n// Group 8 = identifier inside [()]\nconst IDENT_BANANA_BOX_IDX$1 = 8;\n// Group 9 = identifier inside []\nconst IDENT_PROPERTY_IDX$1 = 9;\n// Group 10 = identifier inside ()\nconst IDENT_EVENT_IDX$1 = 10;\nconst TEMPLATE_ATTR_PREFIX$1 = '*';\nfunction htmlAstToRender3Ast(htmlNodes, bindingParser) {\n    const transformer = new HtmlAstToIvyAst(bindingParser);\n    const ivyNodes = visitAll$1(transformer, htmlNodes);\n    // Errors might originate in either the binding parser or the html to ivy transformer\n    const allErrors = bindingParser.errors.concat(transformer.errors);\n    const errors = allErrors.filter(e => e.level === ParseErrorLevel.ERROR);\n    if (errors.length > 0) {\n        const errorString = errors.join('\\n');\n        throw syntaxError(`Template parse errors:\\n${errorString}`, errors);\n    }\n    return {\n        nodes: ivyNodes,\n        errors: allErrors,\n        styleUrls: transformer.styleUrls,\n        styles: transformer.styles,\n    };\n}\nclass HtmlAstToIvyAst {\n    constructor(bindingParser) {\n        this.bindingParser = bindingParser;\n        this.errors = [];\n        this.styles = [];\n        this.styleUrls = [];\n    }\n    // HTML visitor\n    visitElement(element) {\n        const preparsedElement = preparseElement(element);\n        if (preparsedElement.type === PreparsedElementType.SCRIPT) {\n            return null;\n        }\n        else if (preparsedElement.type === PreparsedElementType.STYLE) {\n            const contents = textContents(element);\n            if (contents !== null) {\n                this.styles.push(contents);\n            }\n            return null;\n        }\n        else if (preparsedElement.type === PreparsedElementType.STYLESHEET &&\n            isStyleUrlResolvable(preparsedElement.hrefAttr)) {\n            this.styleUrls.push(preparsedElement.hrefAttr);\n            return null;\n        }\n        // Whether the element is a `<ng-template>`\n        const isTemplateElement = isNgTemplate(element.name);\n        const parsedProperties = [];\n        const boundEvents = [];\n        const variables = [];\n        const references = [];\n        const attributes = [];\n        const i18nAttrsMeta = {};\n        const templateParsedProperties = [];\n        const templateVariables = [];\n        // Whether the element has any *-attribute\n        let elementHasInlineTemplate = false;\n        for (const attribute of element.attrs) {\n            let hasBinding = false;\n            const normalizedName = normalizeAttributeName(attribute.name);\n            // `*attr` defines template bindings\n            let isTemplateBinding = false;\n            if (attribute.i18n) {\n                i18nAttrsMeta[attribute.name] = attribute.i18n;\n            }\n            if (normalizedName.startsWith(TEMPLATE_ATTR_PREFIX$1)) {\n                // *-attributes\n                if (elementHasInlineTemplate) {\n                    this.reportError(`Can't have multiple template bindings on one element. Use only one attribute prefixed with *`, attribute.sourceSpan);\n                }\n                isTemplateBinding = true;\n                elementHasInlineTemplate = true;\n                const templateValue = attribute.value;\n                const templateKey = normalizedName.substring(TEMPLATE_ATTR_PREFIX$1.length);\n                const parsedVariables = [];\n                this.bindingParser.parseInlineTemplateBinding(templateKey, templateValue, attribute.sourceSpan, [], templateParsedProperties, parsedVariables);\n                templateVariables.push(...parsedVariables.map(v => new Variable(v.name, v.value, v.sourceSpan)));\n            }\n            else {\n                // Check for variables, events, property bindings, interpolation\n                hasBinding = this.parseAttribute(isTemplateElement, attribute, [], parsedProperties, boundEvents, variables, references);\n            }\n            if (!hasBinding && !isTemplateBinding) {\n                // don't include the bindings as attributes as well in the AST\n                attributes.push(this.visitAttribute(attribute));\n            }\n        }\n        const children = visitAll$1(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR$1 : this, element.children);\n        let parsedElement;\n        if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {\n            // `<ng-content>`\n            if (element.children &&\n                !element.children.every((node) => isEmptyTextNode(node) || isCommentNode(node))) {\n                this.reportError(`<ng-content> element cannot have content.`, element.sourceSpan);\n            }\n            const selector = preparsedElement.selectAttr;\n            const attrs = element.attrs.map(attr => this.visitAttribute(attr));\n            parsedElement = new Content(selector, attrs, element.sourceSpan, element.i18n);\n        }\n        else if (isTemplateElement) {\n            // `<ng-template>`\n            const attrs = this.extractAttributes(element.name, parsedProperties, i18nAttrsMeta);\n            parsedElement = new Template(element.name, attributes, attrs.bound, boundEvents, [ /* no template attributes */], children, references, variables, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);\n        }\n        else {\n            const attrs = this.extractAttributes(element.name, parsedProperties, i18nAttrsMeta);\n            parsedElement = new Element(element.name, attributes, attrs.bound, boundEvents, children, references, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);\n        }\n        if (elementHasInlineTemplate) {\n            // If this node is an inline-template (e.g. has *ngFor) then we need to create a template\n            // node that contains this node.\n            // Moreover, if the node is an element, then we need to hoist its attributes to the template\n            // node for matching against content projection selectors.\n            const attrs = this.extractAttributes('ng-template', templateParsedProperties, i18nAttrsMeta);\n            const templateAttrs = [];\n            attrs.literal.forEach(attr => templateAttrs.push(attr));\n            attrs.bound.forEach(attr => templateAttrs.push(attr));\n            const hoistedAttrs = parsedElement instanceof Element ?\n                {\n                    attributes: parsedElement.attributes,\n                    inputs: parsedElement.inputs,\n                    outputs: parsedElement.outputs,\n                } :\n                { attributes: [], inputs: [], outputs: [] };\n            // TODO(pk): test for this case\n            parsedElement = new Template(parsedElement.name, hoistedAttrs.attributes, hoistedAttrs.inputs, hoistedAttrs.outputs, templateAttrs, [parsedElement], [ /* no references */], templateVariables, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);\n        }\n        return parsedElement;\n    }\n    visitAttribute(attribute) {\n        return new TextAttribute(attribute.name, attribute.value, attribute.sourceSpan, attribute.valueSpan, attribute.i18n);\n    }\n    visitText(text) {\n        return this._visitTextWithInterpolation(text.value, text.sourceSpan, text.i18n);\n    }\n    visitExpansion(expansion) {\n        const meta = expansion.i18n;\n        // do not generate Icu in case it was created\n        // outside of i18n block in a template\n        if (!meta) {\n            return null;\n        }\n        const vars = {};\n        const placeholders = {};\n        // extract VARs from ICUs - we process them separately while\n        // assembling resulting message via goog.getMsg function, since\n        // we need to pass them to top-level goog.getMsg call\n        Object.keys(meta.placeholders).forEach(key => {\n            const value = meta.placeholders[key];\n            if (key.startsWith(I18N_ICU_VAR_PREFIX)) {\n                const config = this.bindingParser.interpolationConfig;\n                // ICU expression is a plain string, not wrapped into start\n                // and end tags, so we wrap it before passing to binding parser\n                const wrapped = `${config.start}${value}${config.end}`;\n                vars[key] = this._visitTextWithInterpolation(wrapped, expansion.sourceSpan);\n            }\n            else {\n                placeholders[key] = this._visitTextWithInterpolation(value, expansion.sourceSpan);\n            }\n        });\n        return new Icu(vars, placeholders, expansion.sourceSpan, meta);\n    }\n    visitExpansionCase(expansionCase) { return null; }\n    visitComment(comment) { return null; }\n    // convert view engine `ParsedProperty` to a format suitable for IVY\n    extractAttributes(elementName, properties, i18nPropsMeta) {\n        const bound = [];\n        const literal = [];\n        properties.forEach(prop => {\n            const i18n = i18nPropsMeta[prop.name];\n            if (prop.isLiteral) {\n                literal.push(new TextAttribute(prop.name, prop.expression.source || '', prop.sourceSpan, undefined, i18n));\n            }\n            else {\n                // Note that validation is skipped and property mapping is disabled\n                // due to the fact that we need to make sure a given prop is not an\n                // input of a directive and directive matching happens at runtime.\n                const bep = this.bindingParser.createBoundElementProperty(elementName, prop, /* skipValidation */ true, /* mapPropertyName */ false);\n                bound.push(BoundAttribute.fromBoundElementProperty(bep, i18n));\n            }\n        });\n        return { bound, literal };\n    }\n    parseAttribute(isTemplateElement, attribute, matchableAttributes, parsedProperties, boundEvents, variables, references) {\n        const name = normalizeAttributeName(attribute.name);\n        const value = attribute.value;\n        const srcSpan = attribute.sourceSpan;\n        const bindParts = name.match(BIND_NAME_REGEXP$1);\n        let hasBinding = false;\n        if (bindParts) {\n            hasBinding = true;\n            if (bindParts[KW_BIND_IDX$1] != null) {\n                this.bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX$1], value, false, srcSpan, matchableAttributes, parsedProperties);\n            }\n            else if (bindParts[KW_LET_IDX$1]) {\n                if (isTemplateElement) {\n                    const identifier = bindParts[IDENT_KW_IDX$1];\n                    this.parseVariable(identifier, value, srcSpan, variables);\n                }\n                else {\n                    this.reportError(`\"let-\" is only supported on ng-template elements.`, srcSpan);\n                }\n            }\n            else if (bindParts[KW_REF_IDX$1]) {\n                const identifier = bindParts[IDENT_KW_IDX$1];\n                this.parseReference(identifier, value, srcSpan, references);\n            }\n            else if (bindParts[KW_ON_IDX$1]) {\n                const events = [];\n                this.bindingParser.parseEvent(bindParts[IDENT_KW_IDX$1], value, srcSpan, attribute.valueSpan || srcSpan, matchableAttributes, events);\n                addEvents(events, boundEvents);\n            }\n            else if (bindParts[KW_BINDON_IDX$1]) {\n                this.bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX$1], value, false, srcSpan, matchableAttributes, parsedProperties);\n                this.parseAssignmentEvent(bindParts[IDENT_KW_IDX$1], value, srcSpan, attribute.valueSpan, matchableAttributes, boundEvents);\n            }\n            else if (bindParts[KW_AT_IDX$1]) {\n                this.bindingParser.parseLiteralAttr(name, value, srcSpan, matchableAttributes, parsedProperties);\n            }\n            else if (bindParts[IDENT_BANANA_BOX_IDX$1]) {\n                this.bindingParser.parsePropertyBinding(bindParts[IDENT_BANANA_BOX_IDX$1], value, false, srcSpan, matchableAttributes, parsedProperties);\n                this.parseAssignmentEvent(bindParts[IDENT_BANANA_BOX_IDX$1], value, srcSpan, attribute.valueSpan, matchableAttributes, boundEvents);\n            }\n            else if (bindParts[IDENT_PROPERTY_IDX$1]) {\n                this.bindingParser.parsePropertyBinding(bindParts[IDENT_PROPERTY_IDX$1], value, false, srcSpan, matchableAttributes, parsedProperties);\n            }\n            else if (bindParts[IDENT_EVENT_IDX$1]) {\n                const events = [];\n                this.bindingParser.parseEvent(bindParts[IDENT_EVENT_IDX$1], value, srcSpan, attribute.valueSpan || srcSpan, matchableAttributes, events);\n                addEvents(events, boundEvents);\n            }\n        }\n        else {\n            hasBinding = this.bindingParser.parsePropertyInterpolation(name, value, srcSpan, matchableAttributes, parsedProperties);\n        }\n        return hasBinding;\n    }\n    _visitTextWithInterpolation(value, sourceSpan, i18n) {\n        const valueNoNgsp = replaceNgsp(value);\n        const expr = this.bindingParser.parseInterpolation(valueNoNgsp, sourceSpan);\n        return expr ? new BoundText(expr, sourceSpan, i18n) : new Text(valueNoNgsp, sourceSpan);\n    }\n    parseVariable(identifier, value, sourceSpan, variables) {\n        if (identifier.indexOf('-') > -1) {\n            this.reportError(`\"-\" is not allowed in variable names`, sourceSpan);\n        }\n        variables.push(new Variable(identifier, value, sourceSpan));\n    }\n    parseReference(identifier, value, sourceSpan, references) {\n        if (identifier.indexOf('-') > -1) {\n            this.reportError(`\"-\" is not allowed in reference names`, sourceSpan);\n        }\n        references.push(new Reference(identifier, value, sourceSpan));\n    }\n    parseAssignmentEvent(name, expression, sourceSpan, valueSpan, targetMatchableAttrs, boundEvents) {\n        const events = [];\n        this.bindingParser.parseEvent(`${name}Change`, `${expression}=$event`, sourceSpan, valueSpan || sourceSpan, targetMatchableAttrs, events);\n        addEvents(events, boundEvents);\n    }\n    reportError(message, sourceSpan, level = ParseErrorLevel.ERROR) {\n        this.errors.push(new ParseError(sourceSpan, message, level));\n    }\n}\nclass NonBindableVisitor$1 {\n    visitElement(ast) {\n        const preparsedElement = preparseElement(ast);\n        if (preparsedElement.type === PreparsedElementType.SCRIPT ||\n            preparsedElement.type === PreparsedElementType.STYLE ||\n            preparsedElement.type === PreparsedElementType.STYLESHEET) {\n            // Skipping <script> for security reasons\n            // Skipping <style> and stylesheets as we already processed them\n            // in the StyleCompiler\n            return null;\n        }\n        const children = visitAll$1(this, ast.children, null);\n        return new Element(ast.name, visitAll$1(this, ast.attrs), \n        /* inputs */ [], /* outputs */ [], children, /* references */ [], ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan);\n    }\n    visitComment(comment) { return null; }\n    visitAttribute(attribute) {\n        return new TextAttribute(attribute.name, attribute.value, attribute.sourceSpan, undefined, attribute.i18n);\n    }\n    visitText(text) { return new Text(text.value, text.sourceSpan); }\n    visitExpansion(expansion) { return null; }\n    visitExpansionCase(expansionCase) { return null; }\n}\nconst NON_BINDABLE_VISITOR$1 = new NonBindableVisitor$1();\nfunction normalizeAttributeName(attrName) {\n    return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;\n}\nfunction addEvents(events, boundEvents) {\n    boundEvents.push(...events.map(e => BoundEvent.fromParsedEvent(e)));\n}\nfunction isEmptyTextNode(node) {\n    return node instanceof Text$3 && node.value.trim().length == 0;\n}\nfunction isCommentNode(node) {\n    return node instanceof Comment;\n}\nfunction textContents(node) {\n    if (node.children.length !== 1 || !(node.children[0] instanceof Text$3)) {\n        return null;\n    }\n    else {\n        return node.children[0].value;\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar TagType;\n(function (TagType) {\n    TagType[TagType[\"ELEMENT\"] = 0] = \"ELEMENT\";\n    TagType[TagType[\"TEMPLATE\"] = 1] = \"TEMPLATE\";\n})(TagType || (TagType = {}));\n/**\n * Generates an object that is used as a shared state between parent and all child contexts.\n */\nfunction setupRegistry() {\n    return { getUniqueId: getSeqNumberGenerator(), icus: new Map() };\n}\n/**\n * I18nContext is a helper class which keeps track of all i18n-related aspects\n * (accumulates placeholders, bindings, etc) between i18nStart and i18nEnd instructions.\n *\n * When we enter a nested template, the top-level context is being passed down\n * to the nested component, which uses this context to generate a child instance\n * of I18nContext class (to handle nested template) and at the end, reconciles it back\n * with the parent context.\n *\n * @param index Instruction index of i18nStart, which initiates this context\n * @param ref Reference to a translation const that represents the content if thus context\n * @param level Nestng level defined for child contexts\n * @param templateIndex Instruction index of a template which this context belongs to\n * @param meta Meta information (id, meaning, description, etc) associated with this context\n */\nclass I18nContext {\n    constructor(index, ref, level = 0, templateIndex = null, meta, registry) {\n        this.index = index;\n        this.ref = ref;\n        this.level = level;\n        this.templateIndex = templateIndex;\n        this.meta = meta;\n        this.registry = registry;\n        this.bindings = new Set();\n        this.placeholders = new Map();\n        this.isEmitted = false;\n        this._unresolvedCtxCount = 0;\n        this._registry = registry || setupRegistry();\n        this.id = this._registry.getUniqueId();\n    }\n    appendTag(type, node, index, closed) {\n        if (node.isVoid && closed) {\n            return; // ignore \"close\" for void tags\n        }\n        const ph = node.isVoid || !closed ? node.startName : node.closeName;\n        const content = { type, index, ctx: this.id, isVoid: node.isVoid, closed };\n        updatePlaceholderMap(this.placeholders, ph, content);\n    }\n    get icus() { return this._registry.icus; }\n    get isRoot() { return this.level === 0; }\n    get isResolved() { return this._unresolvedCtxCount === 0; }\n    getSerializedPlaceholders() {\n        const result = new Map();\n        this.placeholders.forEach((values, key) => result.set(key, values.map(serializePlaceholderValue)));\n        return result;\n    }\n    // public API to accumulate i18n-related content\n    appendBinding(binding) { this.bindings.add(binding); }\n    appendIcu(name, ref) {\n        updatePlaceholderMap(this._registry.icus, name, ref);\n    }\n    appendBoundText(node) {\n        const phs = assembleBoundTextPlaceholders(node, this.bindings.size, this.id);\n        phs.forEach((values, key) => updatePlaceholderMap(this.placeholders, key, ...values));\n    }\n    appendTemplate(node, index) {\n        // add open and close tags at the same time,\n        // since we process nested templates separately\n        this.appendTag(TagType.TEMPLATE, node, index, false);\n        this.appendTag(TagType.TEMPLATE, node, index, true);\n        this._unresolvedCtxCount++;\n    }\n    appendElement(node, index, closed) {\n        this.appendTag(TagType.ELEMENT, node, index, closed);\n    }\n    /**\n     * Generates an instance of a child context based on the root one,\n     * when we enter a nested template within I18n section.\n     *\n     * @param index Instruction index of corresponding i18nStart, which initiates this context\n     * @param templateIndex Instruction index of a template which this context belongs to\n     * @param meta Meta information (id, meaning, description, etc) associated with this context\n     *\n     * @returns I18nContext instance\n     */\n    forkChildContext(index, templateIndex, meta) {\n        return new I18nContext(index, this.ref, this.level + 1, templateIndex, meta, this._registry);\n    }\n    /**\n     * Reconciles child context into parent one once the end of the i18n block is reached (i18nEnd).\n     *\n     * @param context Child I18nContext instance to be reconciled with parent context.\n     */\n    reconcileChildContext(context) {\n        // set the right context id for open and close\n        // template tags, so we can use it as sub-block ids\n        ['start', 'close'].forEach((op) => {\n            const key = context.meta[`${op}Name`];\n            const phs = this.placeholders.get(key) || [];\n            const tag = phs.find(findTemplateFn(this.id, context.templateIndex));\n            if (tag) {\n                tag.ctx = context.id;\n            }\n        });\n        // reconcile placeholders\n        const childPhs = context.placeholders;\n        childPhs.forEach((values, key) => {\n            const phs = this.placeholders.get(key);\n            if (!phs) {\n                this.placeholders.set(key, values);\n                return;\n            }\n            // try to find matching template...\n            const tmplIdx = findIndex(phs, findTemplateFn(context.id, context.templateIndex));\n            if (tmplIdx >= 0) {\n                // ... if found - replace it with nested template content\n                const isCloseTag = key.startsWith('CLOSE');\n                const isTemplateTag = key.endsWith('NG-TEMPLATE');\n                if (isTemplateTag) {\n                    // current template's content is placed before or after\n                    // parent template tag, depending on the open/close atrribute\n                    phs.splice(tmplIdx + (isCloseTag ? 0 : 1), 0, ...values);\n                }\n                else {\n                    const idx = isCloseTag ? values.length - 1 : 0;\n                    values[idx].tmpl = phs[tmplIdx];\n                    phs.splice(tmplIdx, 1, ...values);\n                }\n            }\n            else {\n                // ... otherwise just append content to placeholder value\n                phs.push(...values);\n            }\n            this.placeholders.set(key, phs);\n        });\n        this._unresolvedCtxCount--;\n    }\n}\n//\n// Helper methods\n//\nfunction wrap(symbol, index, contextId, closed) {\n    const state = closed ? '/' : '';\n    return wrapI18nPlaceholder(`${state}${symbol}${index}`, contextId);\n}\nfunction wrapTag(symbol, { index, ctx, isVoid }, closed) {\n    return isVoid ? wrap(symbol, index, ctx) + wrap(symbol, index, ctx, true) :\n        wrap(symbol, index, ctx, closed);\n}\nfunction findTemplateFn(ctx, templateIndex) {\n    return (token) => typeof token === 'object' && token.type === TagType.TEMPLATE &&\n        token.index === templateIndex && token.ctx === ctx;\n}\nfunction serializePlaceholderValue(value) {\n    const element = (data, closed) => wrapTag('#', data, closed);\n    const template = (data, closed) => wrapTag('*', data, closed);\n    switch (value.type) {\n        case TagType.ELEMENT:\n            // close element tag\n            if (value.closed) {\n                return element(value, true) + (value.tmpl ? template(value.tmpl, true) : '');\n            }\n            // open element tag that also initiates a template\n            if (value.tmpl) {\n                return template(value.tmpl) + element(value) +\n                    (value.isVoid ? template(value.tmpl, true) : '');\n            }\n            return element(value);\n        case TagType.TEMPLATE:\n            return template(value, value.closed);\n        default:\n            return value;\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst TAG_TO_PLACEHOLDER_NAMES = {\n    'A': 'LINK',\n    'B': 'BOLD_TEXT',\n    'BR': 'LINE_BREAK',\n    'EM': 'EMPHASISED_TEXT',\n    'H1': 'HEADING_LEVEL1',\n    'H2': 'HEADING_LEVEL2',\n    'H3': 'HEADING_LEVEL3',\n    'H4': 'HEADING_LEVEL4',\n    'H5': 'HEADING_LEVEL5',\n    'H6': 'HEADING_LEVEL6',\n    'HR': 'HORIZONTAL_RULE',\n    'I': 'ITALIC_TEXT',\n    'LI': 'LIST_ITEM',\n    'LINK': 'MEDIA_LINK',\n    'OL': 'ORDERED_LIST',\n    'P': 'PARAGRAPH',\n    'Q': 'QUOTATION',\n    'S': 'STRIKETHROUGH_TEXT',\n    'SMALL': 'SMALL_TEXT',\n    'SUB': 'SUBSTRIPT',\n    'SUP': 'SUPERSCRIPT',\n    'TBODY': 'TABLE_BODY',\n    'TD': 'TABLE_CELL',\n    'TFOOT': 'TABLE_FOOTER',\n    'TH': 'TABLE_HEADER_CELL',\n    'THEAD': 'TABLE_HEADER',\n    'TR': 'TABLE_ROW',\n    'TT': 'MONOSPACED_TEXT',\n    'U': 'UNDERLINED_TEXT',\n    'UL': 'UNORDERED_LIST',\n};\n/**\n * Creates unique names for placeholder with different content.\n *\n * Returns the same placeholder name when the content is identical.\n */\nclass PlaceholderRegistry {\n    constructor() {\n        // Count the occurrence of the base name top generate a unique name\n        this._placeHolderNameCounts = {};\n        // Maps signature to placeholder names\n        this._signatureToName = {};\n    }\n    getStartTagPlaceholderName(tag, attrs, isVoid) {\n        const signature = this._hashTag(tag, attrs, isVoid);\n        if (this._signatureToName[signature]) {\n            return this._signatureToName[signature];\n        }\n        const upperTag = tag.toUpperCase();\n        const baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;\n        const name = this._generateUniqueName(isVoid ? baseName : `START_${baseName}`);\n        this._signatureToName[signature] = name;\n        return name;\n    }\n    getCloseTagPlaceholderName(tag) {\n        const signature = this._hashClosingTag(tag);\n        if (this._signatureToName[signature]) {\n            return this._signatureToName[signature];\n        }\n        const upperTag = tag.toUpperCase();\n        const baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;\n        const name = this._generateUniqueName(`CLOSE_${baseName}`);\n        this._signatureToName[signature] = name;\n        return name;\n    }\n    getPlaceholderName(name, content) {\n        const upperName = name.toUpperCase();\n        const signature = `PH: ${upperName}=${content}`;\n        if (this._signatureToName[signature]) {\n            return this._signatureToName[signature];\n        }\n        const uniqueName = this._generateUniqueName(upperName);\n        this._signatureToName[signature] = uniqueName;\n        return uniqueName;\n    }\n    getUniquePlaceholder(name) {\n        return this._generateUniqueName(name.toUpperCase());\n    }\n    // Generate a hash for a tag - does not take attribute order into account\n    _hashTag(tag, attrs, isVoid) {\n        const start = `<${tag}`;\n        const strAttrs = Object.keys(attrs).sort().map((name) => ` ${name}=${attrs[name]}`).join('');\n        const end = isVoid ? '/>' : `></${tag}>`;\n        return start + strAttrs + end;\n    }\n    _hashClosingTag(tag) { return this._hashTag(`/${tag}`, {}, false); }\n    _generateUniqueName(base) {\n        const seen = this._placeHolderNameCounts.hasOwnProperty(base);\n        if (!seen) {\n            this._placeHolderNameCounts[base] = 1;\n            return base;\n        }\n        const id = this._placeHolderNameCounts[base];\n        this._placeHolderNameCounts[base] = id + 1;\n        return `${base}_${id}`;\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst _expParser = new Parser$1(new Lexer());\n/**\n * Returns a function converting html nodes to an i18n Message given an interpolationConfig\n */\nfunction createI18nMessageFactory(interpolationConfig) {\n    const visitor = new _I18nVisitor(_expParser, interpolationConfig);\n    return (nodes, meaning, description, id, visitNodeFn) => visitor.toI18nMessage(nodes, meaning, description, id, visitNodeFn);\n}\nclass _I18nVisitor {\n    constructor(_expressionParser, _interpolationConfig) {\n        this._expressionParser = _expressionParser;\n        this._interpolationConfig = _interpolationConfig;\n    }\n    toI18nMessage(nodes, meaning, description, id, visitNodeFn) {\n        this._isIcu = nodes.length == 1 && nodes[0] instanceof Expansion;\n        this._icuDepth = 0;\n        this._placeholderRegistry = new PlaceholderRegistry();\n        this._placeholderToContent = {};\n        this._placeholderToMessage = {};\n        this._visitNodeFn = visitNodeFn;\n        const i18nodes = visitAll$1(this, nodes, {});\n        return new Message(i18nodes, this._placeholderToContent, this._placeholderToMessage, meaning, description, id);\n    }\n    _visitNode(html, i18n) {\n        if (this._visitNodeFn) {\n            this._visitNodeFn(html, i18n);\n        }\n        return i18n;\n    }\n    visitElement(el, context) {\n        const children = visitAll$1(this, el.children);\n        const attrs = {};\n        el.attrs.forEach(attr => {\n            // Do not visit the attributes, translatable ones are top-level ASTs\n            attrs[attr.name] = attr.value;\n        });\n        const isVoid = getHtmlTagDefinition(el.name).isVoid;\n        const startPhName = this._placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);\n        this._placeholderToContent[startPhName] = el.sourceSpan.toString();\n        let closePhName = '';\n        if (!isVoid) {\n            closePhName = this._placeholderRegistry.getCloseTagPlaceholderName(el.name);\n            this._placeholderToContent[closePhName] = `</${el.name}>`;\n        }\n        const node = new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan);\n        return this._visitNode(el, node);\n    }\n    visitAttribute(attribute, context) {\n        const node = this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan);\n        return this._visitNode(attribute, node);\n    }\n    visitText(text, context) {\n        const node = this._visitTextWithInterpolation(text.value, text.sourceSpan);\n        return this._visitNode(text, node);\n    }\n    visitComment(comment, context) { return null; }\n    visitExpansion(icu, context) {\n        this._icuDepth++;\n        const i18nIcuCases = {};\n        const i18nIcu = new Icu$1(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);\n        icu.cases.forEach((caze) => {\n            i18nIcuCases[caze.value] = new Container(caze.expression.map((node) => node.visit(this, {})), caze.expSourceSpan);\n        });\n        this._icuDepth--;\n        if (this._isIcu || this._icuDepth > 0) {\n            // Returns an ICU node when:\n            // - the message (vs a part of the message) is an ICU message, or\n            // - the ICU message is nested.\n            const expPh = this._placeholderRegistry.getUniquePlaceholder(`VAR_${icu.type}`);\n            i18nIcu.expressionPlaceholder = expPh;\n            this._placeholderToContent[expPh] = icu.switchValue;\n            return this._visitNode(icu, i18nIcu);\n        }\n        // Else returns a placeholder\n        // ICU placeholders should not be replaced with their original content but with the their\n        // translations. We need to create a new visitor (they are not re-entrant) to compute the\n        // message id.\n        // TODO(vicb): add a html.Node -> i18n.Message cache to avoid having to re-create the msg\n        const phName = this._placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());\n        const visitor = new _I18nVisitor(this._expressionParser, this._interpolationConfig);\n        this._placeholderToMessage[phName] = visitor.toI18nMessage([icu], '', '', '');\n        const node = new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);\n        return this._visitNode(icu, node);\n    }\n    visitExpansionCase(icuCase, context) {\n        throw new Error('Unreachable code');\n    }\n    _visitTextWithInterpolation(text, sourceSpan) {\n        const splitInterpolation = this._expressionParser.splitInterpolation(text, sourceSpan.start.toString(), this._interpolationConfig);\n        if (!splitInterpolation) {\n            // No expression, return a single text\n            return new Text$1(text, sourceSpan);\n        }\n        // Return a group of text + expressions\n        const nodes = [];\n        const container = new Container(nodes, sourceSpan);\n        const { start: sDelimiter, end: eDelimiter } = this._interpolationConfig;\n        for (let i = 0; i < splitInterpolation.strings.length - 1; i++) {\n            const expression = splitInterpolation.expressions[i];\n            const baseName = _extractPlaceholderName(expression) || 'INTERPOLATION';\n            const phName = this._placeholderRegistry.getPlaceholderName(baseName, expression);\n            if (splitInterpolation.strings[i].length) {\n                // No need to add empty strings\n                nodes.push(new Text$1(splitInterpolation.strings[i], sourceSpan));\n            }\n            nodes.push(new Placeholder(expression, phName, sourceSpan));\n            this._placeholderToContent[phName] = sDelimiter + expression + eDelimiter;\n        }\n        // The last index contains no expression\n        const lastStringIdx = splitInterpolation.strings.length - 1;\n        if (splitInterpolation.strings[lastStringIdx].length) {\n            nodes.push(new Text$1(splitInterpolation.strings[lastStringIdx], sourceSpan));\n        }\n        return container;\n    }\n}\nconst _CUSTOM_PH_EXP = /\\/\\/[\\s\\S]*i18n[\\s\\S]*\\([\\s\\S]*ph[\\s\\S]*=[\\s\\S]*(\"|')([\\s\\S]*?)\\1[\\s\\S]*\\)/g;\nfunction _extractPlaceholderName(input) {\n    return input.split(_CUSTOM_PH_EXP)[2];\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction setI18nRefs(html, i18n) {\n    html.i18n = i18n;\n}\n/**\n * This visitor walks over HTML parse tree and converts information stored in\n * i18n-related attributes (\"i18n\" and \"i18n-*\") into i18n meta object that is\n * stored with other element's and attribute's information.\n */\nclass I18nMetaVisitor {\n    constructor(interpolationConfig = DEFAULT_INTERPOLATION_CONFIG, keepI18nAttrs = false) {\n        this.interpolationConfig = interpolationConfig;\n        this.keepI18nAttrs = keepI18nAttrs;\n        // i18n message generation factory\n        this._createI18nMessage = createI18nMessageFactory(interpolationConfig);\n    }\n    _generateI18nMessage(nodes, meta = '', visitNodeFn) {\n        const parsed = typeof meta === 'string' ? parseI18nMeta(meta) : metaFromI18nMessage(meta);\n        const message = this._createI18nMessage(nodes, parsed.meaning || '', parsed.description || '', parsed.id || '', visitNodeFn);\n        if (!message.id) {\n            // generate (or restore) message id if not specified in template\n            message.id = typeof meta !== 'string' && meta.id || decimalDigest(message);\n        }\n        return message;\n    }\n    visitElement(element, context) {\n        if (hasI18nAttrs(element)) {\n            const attrs = [];\n            const attrsMeta = {};\n            for (const attr of element.attrs) {\n                if (attr.name === I18N_ATTR) {\n                    // root 'i18n' node attribute\n                    const i18n = element.i18n || attr.value;\n                    const message = this._generateI18nMessage(element.children, i18n, setI18nRefs);\n                    // do not assign empty i18n meta\n                    if (message.nodes.length) {\n                        element.i18n = message;\n                    }\n                }\n                else if (attr.name.startsWith(I18N_ATTR_PREFIX)) {\n                    // 'i18n-*' attributes\n                    const key = attr.name.slice(I18N_ATTR_PREFIX.length);\n                    attrsMeta[key] = attr.value;\n                }\n                else {\n                    // non-i18n attributes\n                    attrs.push(attr);\n                }\n            }\n            // set i18n meta for attributes\n            if (Object.keys(attrsMeta).length) {\n                for (const attr of attrs) {\n                    const meta = attrsMeta[attr.name];\n                    // do not create translation for empty attributes\n                    if (meta !== undefined && attr.value) {\n                        attr.i18n = this._generateI18nMessage([attr], attr.i18n || meta);\n                    }\n                }\n            }\n            if (!this.keepI18nAttrs) {\n                // update element's attributes,\n                // keeping only non-i18n related ones\n                element.attrs = attrs;\n            }\n        }\n        visitAll$1(this, element.children);\n        return element;\n    }\n    visitExpansion(expansion, context) {\n        let message;\n        const meta = expansion.i18n;\n        if (meta instanceof IcuPlaceholder) {\n            // set ICU placeholder name (e.g. \"ICU_1\"),\n            // generated while processing root element contents,\n            // so we can reference it when we output translation\n            const name = meta.name;\n            message = this._generateI18nMessage([expansion], meta);\n            const icu = icuFromI18nMessage(message);\n            icu.name = name;\n        }\n        else {\n            // when ICU is a root level translation\n            message = this._generateI18nMessage([expansion], meta);\n        }\n        expansion.i18n = message;\n        return expansion;\n    }\n    visitText(text, context) { return text; }\n    visitAttribute(attribute, context) { return attribute; }\n    visitComment(comment, context) { return comment; }\n    visitExpansionCase(expansionCase, context) { return expansionCase; }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst formatPh = (value) => `{$${formatI18nPlaceholderName(value)}}`;\n/**\n * This visitor walks over i18n tree and generates its string representation,\n * including ICUs and placeholders in {$PLACEHOLDER} format.\n */\nclass SerializerVisitor {\n    visitText(text, context) { return text.value; }\n    visitContainer(container, context) {\n        return container.children.map(child => child.visit(this)).join('');\n    }\n    visitIcu(icu, context) {\n        const strCases = Object.keys(icu.cases).map((k) => `${k} {${icu.cases[k].visit(this)}}`);\n        return `{${icu.expressionPlaceholder}, ${icu.type}, ${strCases.join(' ')}}`;\n    }\n    visitTagPlaceholder(ph, context) {\n        return ph.isVoid ?\n            formatPh(ph.startName) :\n            `${formatPh(ph.startName)}${ph.children.map(child => child.visit(this)).join('')}${formatPh(ph.closeName)}`;\n    }\n    visitPlaceholder(ph, context) { return formatPh(ph.name); }\n    visitIcuPlaceholder(ph, context) { return formatPh(ph.name); }\n}\nconst serializerVisitor$1 = new SerializerVisitor();\nfunction getSerializedI18nContent(message) {\n    return message.nodes.map(node => node.visit(serializerVisitor$1, null)).join('');\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Default selector used by `<ng-content>` if none specified\nconst DEFAULT_NG_CONTENT_SELECTOR = '*';\n// Selector attribute name of `<ng-content>`\nconst NG_CONTENT_SELECT_ATTR$1 = 'select';\n// Attribute name of `ngProjectAs`.\nconst NG_PROJECT_AS_ATTR_NAME = 'ngProjectAs';\n// List of supported global targets for event listeners\nconst GLOBAL_TARGET_RESOLVERS = new Map([['window', Identifiers$1.resolveWindow], ['document', Identifiers$1.resolveDocument], ['body', Identifiers$1.resolveBody]]);\nconst LEADING_TRIVIA_CHARS = [' ', '\\n', '\\r', '\\t'];\n//  if (rf & flags) { .. }\nfunction renderFlagCheckIfStmt(flags, statements) {\n    return ifStmt(variable(RENDER_FLAGS).bitwiseAnd(literal(flags), null, false), statements);\n}\nfunction prepareEventListenerParameters(eventAst, bindingContext, handlerName = null, scope = null) {\n    const { type, name, target, phase, handler } = eventAst;\n    if (target && !GLOBAL_TARGET_RESOLVERS.has(target)) {\n        throw new Error(`Unexpected global target '${target}' defined for '${name}' event.\n        Supported list of global targets: ${Array.from(GLOBAL_TARGET_RESOLVERS.keys())}.`);\n    }\n    const bindingExpr = convertActionBinding(scope, bindingContext, handler, 'b', () => error('Unexpected interpolation'), eventAst.handlerSpan);\n    const statements = [];\n    if (scope) {\n        statements.push(...scope.restoreViewStatement());\n        statements.push(...scope.variableDeclarations());\n    }\n    statements.push(...bindingExpr.render3Stmts);\n    const eventName = type === 1 /* Animation */ ? prepareSyntheticListenerName(name, phase) : name;\n    const fnName = handlerName && sanitizeIdentifier(handlerName);\n    const fnArgs = [new FnParam('$event', DYNAMIC_TYPE)];\n    const handlerFn = fn(fnArgs, statements, INFERRED_TYPE, null, fnName);\n    const params = [literal(eventName), handlerFn];\n    if (target) {\n        params.push(literal(false), // `useCapture` flag, defaults to `false`\n        importExpr(GLOBAL_TARGET_RESOLVERS.get(target)));\n    }\n    return params;\n}\nclass TemplateDefinitionBuilder {\n    constructor(constantPool, parentBindingScope, level = 0, contextName, i18nContext, templateIndex, templateName, directiveMatcher, directives, pipeTypeByName, pipes, _namespace, relativeContextFilePath, i18nUseExternalIds) {\n        this.constantPool = constantPool;\n        this.level = level;\n        this.contextName = contextName;\n        this.i18nContext = i18nContext;\n        this.templateIndex = templateIndex;\n        this.templateName = templateName;\n        this.directiveMatcher = directiveMatcher;\n        this.directives = directives;\n        this.pipeTypeByName = pipeTypeByName;\n        this.pipes = pipes;\n        this._namespace = _namespace;\n        this.relativeContextFilePath = relativeContextFilePath;\n        this.i18nUseExternalIds = i18nUseExternalIds;\n        this._dataIndex = 0;\n        this._bindingContext = 0;\n        this._prefixCode = [];\n        /**\n         * List of callbacks to generate creation mode instructions. We store them here as we process\n         * the template so bindings in listeners are resolved only once all nodes have been visited.\n         * This ensures all local refs and context variables are available for matching.\n         */\n        this._creationCodeFns = [];\n        /**\n         * List of callbacks to generate update mode instructions. We store them here as we process\n         * the template so bindings are resolved only once all nodes have been visited. This ensures\n         * all local refs and context variables are available for matching.\n         */\n        this._updateCodeFns = [];\n        /**\n         * Memorizes the last node index for which a select instruction has been generated.\n         * We're initializing this to -1 to ensure the `select(0)` instruction is generated before any\n         * relevant update instructions.\n         */\n        this._lastNodeIndexWithFlush = -1;\n        /** Temporary variable declarations generated from visiting pipes, literals, etc. */\n        this._tempVariables = [];\n        /**\n         * List of callbacks to build nested templates. Nested templates must not be visited until\n         * after the parent template has finished visiting all of its nodes. This ensures that all\n         * local ref bindings in nested templates are able to find local ref values if the refs\n         * are defined after the template declaration.\n         */\n        this._nestedTemplateFns = [];\n        this._unsupported = unsupported;\n        // i18n context local to this template\n        this.i18n = null;\n        // Number of slots to reserve for pureFunctions\n        this._pureFunctionSlots = 0;\n        // Number of binding slots\n        this._bindingSlots = 0;\n        // Whether the template includes <ng-content> tags.\n        this._hasNgContent = false;\n        // Selectors found in the <ng-content> tags in the template.\n        this._ngContentSelectors = [];\n        // Number of non-default selectors found in all parent templates of this template. We need to\n        // track it to properly adjust projection bucket index in the `projection` instruction.\n        this._ngContentSelectorsOffset = 0;\n        // These should be handled in the template or element directly.\n        this.visitReference = invalid$1;\n        this.visitVariable = invalid$1;\n        this.visitTextAttribute = invalid$1;\n        this.visitBoundAttribute = invalid$1;\n        this.visitBoundEvent = invalid$1;\n        this._bindingScope = parentBindingScope.nestedScope(level);\n        // Turn the relative context file path into an identifier by replacing non-alphanumeric\n        // characters with underscores.\n        this.fileBasedI18nSuffix = relativeContextFilePath.replace(/[^A-Za-z0-9]/g, '_') + '_';\n        this._valueConverter = new ValueConverter(constantPool, () => this.allocateDataSlot(), (numSlots) => this.allocatePureFunctionSlots(numSlots), (name, localName, slot, value) => {\n            const pipeType = pipeTypeByName.get(name);\n            if (pipeType) {\n                this.pipes.add(pipeType);\n            }\n            this._bindingScope.set(this.level, localName, value);\n            this.creationInstruction(null, Identifiers$1.pipe, [literal(slot), literal(name)]);\n        });\n    }\n    registerContextVariables(variable$1) {\n        const scopedName = this._bindingScope.freshReferenceName();\n        const retrievalLevel = this.level;\n        const lhs = variable(variable$1.name + scopedName);\n        this._bindingScope.set(retrievalLevel, variable$1.name, lhs, 1 /* CONTEXT */, (scope, relativeLevel) => {\n            let rhs;\n            if (scope.bindingLevel === retrievalLevel) {\n                // e.g. ctx\n                rhs = variable(CONTEXT_NAME);\n            }\n            else {\n                const sharedCtxVar = scope.getSharedContextName(retrievalLevel);\n                // e.g. ctx_r0   OR  x(2);\n                rhs = sharedCtxVar ? sharedCtxVar : generateNextContextExpr(relativeLevel);\n            }\n            // e.g. const $item$ = x(2).$implicit;\n            return [lhs.set(rhs.prop(variable$1.value || IMPLICIT_REFERENCE)).toConstDecl()];\n        });\n    }\n    buildTemplateFunction(nodes, variables, ngContentSelectorsOffset = 0, i18n) {\n        this._ngContentSelectorsOffset = ngContentSelectorsOffset;\n        if (this._namespace !== Identifiers$1.namespaceHTML) {\n            this.creationInstruction(null, this._namespace);\n        }\n        // Create variable bindings\n        variables.forEach(v => this.registerContextVariables(v));\n        // Initiate i18n context in case:\n        // - this template has parent i18n context\n        // - or the template has i18n meta associated with it,\n        //   but it's not initiated by the Element (e.g. <ng-template i18n>)\n        const initI18nContext = this.i18nContext || (isI18nRootNode(i18n) && !isSingleI18nIcu(i18n) &&\n            !(isSingleElementTemplate(nodes) && nodes[0].i18n === i18n));\n        const selfClosingI18nInstruction = hasTextChildrenOnly(nodes);\n        if (initI18nContext) {\n            this.i18nStart(null, i18n, selfClosingI18nInstruction);\n        }\n        // This is the initial pass through the nodes of this template. In this pass, we\n        // queue all creation mode and update mode instructions for generation in the second\n        // pass. It's necessary to separate the passes to ensure local refs are defined before\n        // resolving bindings. We also count bindings in this pass as we walk bound expressions.\n        visitAll(this, nodes);\n        // Add total binding count to pure function count so pure function instructions are\n        // generated with the correct slot offset when update instructions are processed.\n        this._pureFunctionSlots += this._bindingSlots;\n        // Pipes are walked in the first pass (to enqueue `pipe()` creation instructions and\n        // `pipeBind` update instructions), so we have to update the slot offsets manually\n        // to account for bindings.\n        this._valueConverter.updatePipeSlotOffsets(this._bindingSlots);\n        // Nested templates must be processed before creation instructions so template()\n        // instructions can be generated with the correct internal const count.\n        this._nestedTemplateFns.forEach(buildTemplateFn => buildTemplateFn());\n        // Output the `projectionDef` instruction when some `<ng-content>` are present.\n        // The `projectionDef` instruction only emitted for the component template and it is skipped for\n        // nested templates (<ng-template> tags).\n        if (this.level === 0 && this._hasNgContent) {\n            const parameters = [];\n            // Only selectors with a non-default value are generated\n            if (this._ngContentSelectors.length) {\n                const r3Selectors = this._ngContentSelectors.map(s => parseSelectorToR3Selector(s));\n                parameters.push(this.constantPool.getConstLiteral(asLiteral(r3Selectors), true));\n            }\n            // Since we accumulate ngContent selectors while processing template elements,\n            // we *prepend* `projectionDef` to creation instructions block, to put it before\n            // any `projection` instructions\n            this.creationInstruction(null, Identifiers$1.projectionDef, parameters, /* prepend */ true);\n        }\n        if (initI18nContext) {\n            this.i18nEnd(null, selfClosingI18nInstruction);\n        }\n        // Generate all the creation mode instructions (e.g. resolve bindings in listeners)\n        const creationStatements = this._creationCodeFns.map((fn) => fn());\n        // Generate all the update mode instructions (e.g. resolve property or text bindings)\n        const updateStatements = this._updateCodeFns.map((fn) => fn());\n        //  Variable declaration must occur after binding resolution so we can generate context\n        //  instructions that build on each other.\n        // e.g. const b = nextContext().$implicit(); const b = nextContext();\n        const creationVariables = this._bindingScope.viewSnapshotStatements();\n        const updateVariables = this._bindingScope.variableDeclarations().concat(this._tempVariables);\n        const creationBlock = creationStatements.length > 0 ?\n            [renderFlagCheckIfStmt(1 /* Create */, creationVariables.concat(creationStatements))] :\n            [];\n        const updateBlock = updateStatements.length > 0 ?\n            [renderFlagCheckIfStmt(2 /* Update */, updateVariables.concat(updateStatements))] :\n            [];\n        return fn(\n        // i.e. (rf: RenderFlags, ctx: any)\n        [new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null)], [\n            // Temporary variable declarations for query refresh (i.e. let _t: any;)\n            ...this._prefixCode,\n            // Creating mode (i.e. if (rf & RenderFlags.Create) { ... })\n            ...creationBlock,\n            // Binding and refresh mode (i.e. if (rf & RenderFlags.Update) {...})\n            ...updateBlock,\n        ], INFERRED_TYPE, null, this.templateName);\n    }\n    // LocalResolver\n    getLocal(name) { return this._bindingScope.get(name); }\n    i18nTranslate(message, params = {}, ref, transformFn) {\n        const _ref = ref || variable(this.constantPool.uniqueName(TRANSLATION_PREFIX));\n        // Closure Compiler requires const names to start with `MSG_` but disallows any other const to\n        // start with `MSG_`. We define a variable starting with `MSG_` just for the `goog.getMsg` call\n        const closureVar = this.i18nGenerateClosureVar(message.id);\n        const _params = {};\n        if (params && Object.keys(params).length) {\n            Object.keys(params).forEach(key => _params[formatI18nPlaceholderName(key)] = params[key]);\n        }\n        const meta = metaFromI18nMessage(message);\n        const content = getSerializedI18nContent(message);\n        const statements = getTranslationDeclStmts(_ref, closureVar, content, meta, _params, transformFn);\n        this.constantPool.statements.push(...statements);\n        return _ref;\n    }\n    i18nAppendBindings(expressions) {\n        if (expressions.length > 0) {\n            expressions.forEach(expression => this.i18n.appendBinding(expression));\n        }\n    }\n    i18nBindProps(props) {\n        const bound = {};\n        Object.keys(props).forEach(key => {\n            const prop = props[key];\n            if (prop instanceof Text) {\n                bound[key] = literal(prop.value);\n            }\n            else {\n                const value = prop.value.visit(this._valueConverter);\n                this.allocateBindingSlots(value);\n                if (value instanceof Interpolation) {\n                    const { strings, expressions } = value;\n                    const { id, bindings } = this.i18n;\n                    const label = assembleI18nBoundString(strings, bindings.size, id);\n                    this.i18nAppendBindings(expressions);\n                    bound[key] = literal(label);\n                }\n            }\n        });\n        return bound;\n    }\n    i18nGenerateClosureVar(messageId) {\n        let name;\n        const suffix = this.fileBasedI18nSuffix.toUpperCase();\n        if (this.i18nUseExternalIds) {\n            const prefix = getTranslationConstPrefix(`EXTERNAL_`);\n            const uniqueSuffix = this.constantPool.uniqueName(suffix);\n            name = `${prefix}${sanitizeIdentifier(messageId)}$$${uniqueSuffix}`;\n        }\n        else {\n            const prefix = getTranslationConstPrefix(suffix);\n            name = this.constantPool.uniqueName(prefix);\n        }\n        return variable(name);\n    }\n    i18nUpdateRef(context) {\n        const { icus, meta, isRoot, isResolved, isEmitted } = context;\n        if (isRoot && isResolved && !isEmitted && !isSingleI18nIcu(meta)) {\n            context.isEmitted = true;\n            const placeholders = context.getSerializedPlaceholders();\n            let icuMapping = {};\n            let params = placeholders.size ? placeholdersToParams(placeholders) : {};\n            if (icus.size) {\n                icus.forEach((refs, key) => {\n                    if (refs.length === 1) {\n                        // if we have one ICU defined for a given\n                        // placeholder - just output its reference\n                        params[key] = refs[0];\n                    }\n                    else {\n                        // ... otherwise we need to activate post-processing\n                        // to replace ICU placeholders with proper values\n                        const placeholder = wrapI18nPlaceholder(`${I18N_ICU_MAPPING_PREFIX}${key}`);\n                        params[key] = literal(placeholder);\n                        icuMapping[key] = literalArr(refs);\n                    }\n                });\n            }\n            // translation requires post processing in 2 cases:\n            // - if we have placeholders with multiple values (ex. `START_DIV`: [�#1�, �#2�, ...])\n            // - if we have multiple ICUs that refer to the same placeholder name\n            const needsPostprocessing = Array.from(placeholders.values()).some((value) => value.length > 1) ||\n                Object.keys(icuMapping).length;\n            let transformFn;\n            if (needsPostprocessing) {\n                transformFn = (raw) => {\n                    const args = [raw];\n                    if (Object.keys(icuMapping).length) {\n                        args.push(mapLiteral(icuMapping, true));\n                    }\n                    return instruction(null, Identifiers$1.i18nPostprocess, args);\n                };\n            }\n            this.i18nTranslate(meta, params, context.ref, transformFn);\n        }\n    }\n    i18nStart(span = null, meta, selfClosing) {\n        const index = this.allocateDataSlot();\n        if (this.i18nContext) {\n            this.i18n = this.i18nContext.forkChildContext(index, this.templateIndex, meta);\n        }\n        else {\n            const ref = variable(this.constantPool.uniqueName(TRANSLATION_PREFIX));\n            this.i18n = new I18nContext(index, ref, 0, this.templateIndex, meta);\n        }\n        // generate i18nStart instruction\n        const { id, ref } = this.i18n;\n        const params = [literal(index), ref];\n        if (id > 0) {\n            // do not push 3rd argument (sub-block id)\n            // into i18nStart call for top level i18n context\n            params.push(literal(id));\n        }\n        this.creationInstruction(span, selfClosing ? Identifiers$1.i18n : Identifiers$1.i18nStart, params);\n    }\n    i18nEnd(span = null, selfClosing) {\n        if (!this.i18n) {\n            throw new Error('i18nEnd is executed with no i18n context present');\n        }\n        if (this.i18nContext) {\n            this.i18nContext.reconcileChildContext(this.i18n);\n            this.i18nUpdateRef(this.i18nContext);\n        }\n        else {\n            this.i18nUpdateRef(this.i18n);\n        }\n        // setup accumulated bindings\n        const { index, bindings } = this.i18n;\n        if (bindings.size) {\n            bindings.forEach(binding => {\n                this.updateInstruction(index, span, Identifiers$1.i18nExp, () => [this.convertPropertyBinding(variable(CONTEXT_NAME), binding)]);\n            });\n            this.updateInstruction(index, span, Identifiers$1.i18nApply, [literal(index)]);\n        }\n        if (!selfClosing) {\n            this.creationInstruction(span, Identifiers$1.i18nEnd);\n        }\n        this.i18n = null; // reset local i18n context\n    }\n    visitContent(ngContent) {\n        this._hasNgContent = true;\n        const slot = this.allocateDataSlot();\n        let selectorIndex = ngContent.selector === DEFAULT_NG_CONTENT_SELECTOR ?\n            0 :\n            this._ngContentSelectors.push(ngContent.selector) + this._ngContentSelectorsOffset;\n        const parameters = [literal(slot)];\n        const attributes = [];\n        ngContent.attributes.forEach((attribute) => {\n            const { name, value } = attribute;\n            if (name === NG_PROJECT_AS_ATTR_NAME) {\n                attributes.push(...getNgProjectAsLiteral(attribute));\n            }\n            else if (name.toLowerCase() !== NG_CONTENT_SELECT_ATTR$1) {\n                attributes.push(literal(name), literal(value));\n            }\n        });\n        if (attributes.length > 0) {\n            parameters.push(literal(selectorIndex), literalArr(attributes));\n        }\n        else if (selectorIndex !== 0) {\n            parameters.push(literal(selectorIndex));\n        }\n        this.creationInstruction(ngContent.sourceSpan, Identifiers$1.projection, parameters);\n    }\n    getNamespaceInstruction(namespaceKey) {\n        switch (namespaceKey) {\n            case 'math':\n                return Identifiers$1.namespaceMathML;\n            case 'svg':\n                return Identifiers$1.namespaceSVG;\n            default:\n                return Identifiers$1.namespaceHTML;\n        }\n    }\n    addNamespaceInstruction(nsInstruction, element) {\n        this._namespace = nsInstruction;\n        this.creationInstruction(element.sourceSpan, nsInstruction);\n    }\n    visitElement(element) {\n        const elementIndex = this.allocateDataSlot();\n        const stylingBuilder = new StylingBuilder(literal(elementIndex), null);\n        let isNonBindableMode = false;\n        const isI18nRootElement = isI18nRootNode(element.i18n) && !isSingleI18nIcu(element.i18n);\n        if (isI18nRootElement && this.i18n) {\n            throw new Error(`Could not mark an element as translatable inside of a translatable section`);\n        }\n        const i18nAttrs = [];\n        const outputAttrs = [];\n        const [namespaceKey, elementName] = splitNsName(element.name);\n        const isNgContainer$1 = isNgContainer(element.name);\n        // Handle styling, i18n, ngNonBindable attributes\n        for (const attr of element.attributes) {\n            const { name, value } = attr;\n            if (name === NON_BINDABLE_ATTR) {\n                isNonBindableMode = true;\n            }\n            else if (name === 'style') {\n                stylingBuilder.registerStyleAttr(value);\n            }\n            else if (name === 'class') {\n                stylingBuilder.registerClassAttr(value);\n            }\n            else {\n                if (attr.i18n) {\n                    // Place attributes into a separate array for i18n processing, but also keep such\n                    // attributes in the main list to make them available for directive matching at runtime.\n                    // TODO(FW-1248): prevent attributes duplication in `i18nAttributes` and `elementStart`\n                    // arguments\n                    i18nAttrs.push(attr);\n                }\n                outputAttrs.push(attr);\n            }\n        }\n        // Match directives on non i18n attributes\n        this.matchDirectives(element.name, element);\n        // Regular element or ng-container creation mode\n        const parameters = [literal(elementIndex)];\n        if (!isNgContainer$1) {\n            parameters.push(literal(elementName));\n        }\n        // Add the attributes\n        const attributes = [];\n        const allOtherInputs = [];\n        element.inputs.forEach((input) => {\n            const stylingInputWasSet = stylingBuilder.registerBoundInput(input);\n            if (!stylingInputWasSet) {\n                if (input.type === 0 /* Property */ && input.i18n) {\n                    // Place attributes into a separate array for i18n processing, but also keep such\n                    // attributes in the main list to make them available for directive matching at runtime.\n                    // TODO(FW-1248): prevent attributes duplication in `i18nAttributes` and `elementStart`\n                    // arguments\n                    i18nAttrs.push(input);\n                }\n                allOtherInputs.push(input);\n            }\n        });\n        outputAttrs.forEach(attr => {\n            if (attr.name === NG_PROJECT_AS_ATTR_NAME) {\n                attributes.push(...getNgProjectAsLiteral(attr));\n            }\n            else {\n                attributes.push(...getAttributeNameLiterals(attr.name), literal(attr.value));\n            }\n        });\n        // add attributes for directive and projection matching purposes\n        attributes.push(...this.prepareNonRenderAttrs(allOtherInputs, element.outputs, stylingBuilder));\n        parameters.push(this.toAttrsParam(attributes));\n        // local refs (ex.: <div #foo #bar=\"baz\">)\n        parameters.push(this.prepareRefsParameter(element.references));\n        const wasInNamespace = this._namespace;\n        const currentNamespace = this.getNamespaceInstruction(namespaceKey);\n        // If the namespace is changing now, include an instruction to change it\n        // during element creation.\n        if (currentNamespace !== wasInNamespace) {\n            this.addNamespaceInstruction(currentNamespace, element);\n        }\n        const implicit = variable(CONTEXT_NAME);\n        if (this.i18n) {\n            this.i18n.appendElement(element.i18n, elementIndex);\n        }\n        const hasChildren = () => {\n            if (!isI18nRootElement && this.i18n) {\n                // we do not append text node instructions and ICUs inside i18n section,\n                // so we exclude them while calculating whether current element has children\n                return !hasTextChildrenOnly(element.children);\n            }\n            return element.children.length > 0;\n        };\n        const createSelfClosingInstruction = !stylingBuilder.hasBindings && !isNgContainer$1 &&\n            element.outputs.length === 0 && i18nAttrs.length === 0 && !hasChildren();\n        const createSelfClosingI18nInstruction = !createSelfClosingInstruction &&\n            !stylingBuilder.hasBindings && hasTextChildrenOnly(element.children);\n        if (createSelfClosingInstruction) {\n            this.creationInstruction(element.sourceSpan, Identifiers$1.element, trimTrailingNulls(parameters));\n        }\n        else {\n            this.creationInstruction(element.sourceSpan, isNgContainer$1 ? Identifiers$1.elementContainerStart : Identifiers$1.elementStart, trimTrailingNulls(parameters));\n            if (isNonBindableMode) {\n                this.creationInstruction(element.sourceSpan, Identifiers$1.disableBindings);\n            }\n            // process i18n element attributes\n            if (i18nAttrs.length) {\n                let hasBindings = false;\n                const i18nAttrArgs = [];\n                i18nAttrs.forEach(attr => {\n                    const message = attr.i18n;\n                    if (attr instanceof TextAttribute) {\n                        i18nAttrArgs.push(literal(attr.name), this.i18nTranslate(message));\n                    }\n                    else {\n                        const converted = attr.value.visit(this._valueConverter);\n                        this.allocateBindingSlots(converted);\n                        if (converted instanceof Interpolation) {\n                            const placeholders = assembleBoundTextPlaceholders(message);\n                            const params = placeholdersToParams(placeholders);\n                            i18nAttrArgs.push(literal(attr.name), this.i18nTranslate(message, params));\n                            converted.expressions.forEach(expression => {\n                                hasBindings = true;\n                                const binding = this.convertExpressionBinding(implicit, expression);\n                                this.updateInstruction(elementIndex, element.sourceSpan, Identifiers$1.i18nExp, [binding]);\n                            });\n                        }\n                    }\n                });\n                if (i18nAttrArgs.length) {\n                    const index = literal(this.allocateDataSlot());\n                    const args = this.constantPool.getConstLiteral(literalArr(i18nAttrArgs), true);\n                    this.creationInstruction(element.sourceSpan, Identifiers$1.i18nAttributes, [index, args]);\n                    if (hasBindings) {\n                        this.updateInstruction(elementIndex, element.sourceSpan, Identifiers$1.i18nApply, [index]);\n                    }\n                }\n            }\n            // The style bindings code is placed into two distinct blocks within the template function AOT\n            // code: creation and update. The creation code contains the `elementStyling` instructions\n            // which will apply the collected binding values to the element. `elementStyling` is\n            // designed to run inside of `elementStart` and `elementEnd`. The update instructions\n            // (things like `elementStyleProp`, `elementClassProp`, etc..) are applied later on in this\n            // file\n            this.processStylingInstruction(implicit, stylingBuilder.buildElementStylingInstruction(element.sourceSpan, this.constantPool), true);\n            // Generate Listeners (outputs)\n            element.outputs.forEach((outputAst) => {\n                this.creationInstruction(outputAst.sourceSpan, Identifiers$1.listener, this.prepareListenerParameter(element.name, outputAst, elementIndex));\n            });\n            // Note: it's important to keep i18n/i18nStart instructions after i18nAttributes and\n            // listeners, to make sure i18nAttributes instruction targets current element at runtime.\n            if (isI18nRootElement) {\n                this.i18nStart(element.sourceSpan, element.i18n, createSelfClosingI18nInstruction);\n            }\n        }\n        // the code here will collect all update-level styling instructions and add them to the\n        // update block of the template function AOT code. Instructions like `elementStyleProp`,\n        // `elementStylingMap`, `elementClassProp` and `elementStylingApply` are all generated\n        // and assign in the code below.\n        stylingBuilder.buildUpdateLevelInstructions(this._valueConverter).forEach(instruction => {\n            this._bindingSlots += instruction.allocateBindingSlots;\n            this.processStylingInstruction(implicit, instruction, false);\n        });\n        // the reason why `undefined` is used is because the renderer understands this as a\n        // special value to symbolize that there is no RHS to this binding\n        // TODO (matsko): revisit this once FW-959 is approached\n        const emptyValueBindInstruction = literal(undefined);\n        // Generate element input bindings\n        allOtherInputs.forEach((input) => {\n            const inputType = input.type;\n            if (inputType === 4 /* Animation */) {\n                const value = input.value.visit(this._valueConverter);\n                // animation bindings can be presented in the following formats:\n                // 1. [@binding]=\"fooExp\"\n                // 2. [@binding]=\"{value:fooExp, params:{...}}\"\n                // 3. [@binding]\n                // 4. @binding\n                // All formats will be valid for when a synthetic binding is created.\n                // The reasoning for this is because the renderer should get each\n                // synthetic binding value in the order of the array that they are\n                // defined in...\n                const hasValue = value instanceof LiteralPrimitive ? !!value.value : true;\n                this.allocateBindingSlots(value);\n                const bindingName = prepareSyntheticPropertyName(input.name);\n                this.updateInstruction(elementIndex, input.sourceSpan, Identifiers$1.property, () => {\n                    return [\n                        literal(bindingName),\n                        (hasValue ? this.convertPropertyBinding(implicit, value, /* skipBindFn */ true) :\n                            emptyValueBindInstruction),\n                    ];\n                });\n            }\n            else {\n                // we must skip attributes with associated i18n context, since these attributes are handled\n                // separately and corresponding `i18nExp` and `i18nApply` instructions will be generated\n                if (input.i18n)\n                    return;\n                const value = input.value.visit(this._valueConverter);\n                if (value !== undefined) {\n                    const params = [];\n                    const [attrNamespace, attrName] = splitNsName(input.name);\n                    const isAttributeBinding = inputType === 1 /* Attribute */;\n                    const sanitizationRef = resolveSanitizationFn(input.securityContext, isAttributeBinding);\n                    if (sanitizationRef)\n                        params.push(sanitizationRef);\n                    if (attrNamespace) {\n                        const namespaceLiteral = literal(attrNamespace);\n                        if (sanitizationRef) {\n                            params.push(namespaceLiteral);\n                        }\n                        else {\n                            // If there wasn't a sanitization ref, we need to add\n                            // an extra param so that we can pass in the namespace.\n                            params.push(literal(null), namespaceLiteral);\n                        }\n                    }\n                    this.allocateBindingSlots(value);\n                    if (inputType === 0 /* Property */) {\n                        if (value instanceof Interpolation) {\n                            this.updateInstruction(elementIndex, input.sourceSpan, getPropertyInterpolationExpression(value), () => [literal(attrName),\n                                ...this.getUpdateInstructionArguments(variable(CONTEXT_NAME), value),\n                                ...params]);\n                        }\n                        else {\n                            // Bound, un-interpolated properties\n                            this.updateInstruction(elementIndex, input.sourceSpan, Identifiers$1.property, () => {\n                                return [\n                                    literal(attrName), this.convertPropertyBinding(implicit, value, true), ...params\n                                ];\n                            });\n                        }\n                    }\n                    else {\n                        let instruction;\n                        if (inputType === 2 /* Class */) {\n                            instruction = Identifiers$1.elementClassProp;\n                        }\n                        else {\n                            instruction = Identifiers$1.elementAttribute;\n                        }\n                        this.updateInstruction(elementIndex, input.sourceSpan, instruction, () => {\n                            return [\n                                literal(elementIndex), literal(attrName),\n                                this.convertPropertyBinding(implicit, value), ...params\n                            ];\n                        });\n                    }\n                }\n            }\n        });\n        // Traverse element child nodes\n        visitAll(this, element.children);\n        if (!isI18nRootElement && this.i18n) {\n            this.i18n.appendElement(element.i18n, elementIndex, true);\n        }\n        if (!createSelfClosingInstruction) {\n            // Finish element construction mode.\n            const span = element.endSourceSpan || element.sourceSpan;\n            if (isI18nRootElement) {\n                this.i18nEnd(span, createSelfClosingI18nInstruction);\n            }\n            if (isNonBindableMode) {\n                this.creationInstruction(span, Identifiers$1.enableBindings);\n            }\n            this.creationInstruction(span, isNgContainer$1 ? Identifiers$1.elementContainerEnd : Identifiers$1.elementEnd);\n        }\n    }\n    visitTemplate(template) {\n        const NG_TEMPLATE_TAG_NAME = 'ng-template';\n        const templateIndex = this.allocateDataSlot();\n        if (this.i18n) {\n            this.i18n.appendTemplate(template.i18n, templateIndex);\n        }\n        const tagName = sanitizeIdentifier(template.tagName || '');\n        const contextName = `${this.contextName}${tagName ? '_' + tagName : ''}_${templateIndex}`;\n        const templateName = `${contextName}_Template`;\n        const parameters = [\n            literal(templateIndex),\n            variable(templateName),\n            // We don't care about the tag's namespace here, because we infer\n            // it based on the parent nodes inside the template instruction.\n            literal(template.tagName ? splitNsName(template.tagName)[1] : template.tagName),\n        ];\n        // find directives matching on a given <ng-template> node\n        this.matchDirectives(NG_TEMPLATE_TAG_NAME, template);\n        // prepare attributes parameter (including attributes used for directive matching)\n        const attrsExprs = [];\n        template.attributes.forEach((a) => { attrsExprs.push(asLiteral(a.name), asLiteral(a.value)); });\n        attrsExprs.push(...this.prepareNonRenderAttrs(template.inputs, template.outputs, undefined, template.templateAttrs));\n        parameters.push(this.toAttrsParam(attrsExprs));\n        // local refs (ex.: <ng-template #foo>)\n        if (template.references && template.references.length) {\n            parameters.push(this.prepareRefsParameter(template.references));\n            parameters.push(importExpr(Identifiers$1.templateRefExtractor));\n        }\n        // Create the template function\n        const templateVisitor = new TemplateDefinitionBuilder(this.constantPool, this._bindingScope, this.level + 1, contextName, this.i18n, templateIndex, templateName, this.directiveMatcher, this.directives, this.pipeTypeByName, this.pipes, this._namespace, this.fileBasedI18nSuffix, this.i18nUseExternalIds);\n        // Nested templates must not be visited until after their parent templates have completed\n        // processing, so they are queued here until after the initial pass. Otherwise, we wouldn't\n        // be able to support bindings in nested templates to local refs that occur after the\n        // template definition. e.g. <div *ngIf=\"showing\">{{ foo }}</div>  <div #foo></div>\n        this._nestedTemplateFns.push(() => {\n            const templateFunctionExpr = templateVisitor.buildTemplateFunction(template.children, template.variables, this._ngContentSelectors.length + this._ngContentSelectorsOffset, template.i18n);\n            this.constantPool.statements.push(templateFunctionExpr.toDeclStmt(templateName, null));\n            if (templateVisitor._hasNgContent) {\n                this._hasNgContent = true;\n                this._ngContentSelectors.push(...templateVisitor._ngContentSelectors);\n            }\n        });\n        // e.g. template(1, MyComp_Template_1)\n        this.creationInstruction(template.sourceSpan, Identifiers$1.templateCreate, () => {\n            parameters.splice(2, 0, literal(templateVisitor.getConstCount()), literal(templateVisitor.getVarCount()));\n            return trimTrailingNulls(parameters);\n        });\n        // handle property bindings e.g. ɵɵproperty('ngForOf', ctx.items), et al;\n        const context = variable(CONTEXT_NAME);\n        this.templatePropertyBindings(template, templateIndex, context, template.templateAttrs);\n        // Only add normal input/output binding instructions on explicit ng-template elements.\n        if (template.tagName === NG_TEMPLATE_TAG_NAME) {\n            // Add the input bindings\n            this.templatePropertyBindings(template, templateIndex, context, template.inputs);\n            // Generate listeners for directive output\n            template.outputs.forEach((outputAst) => {\n                this.creationInstruction(outputAst.sourceSpan, Identifiers$1.listener, this.prepareListenerParameter('ng_template', outputAst, templateIndex));\n            });\n        }\n    }\n    visitBoundText(text) {\n        if (this.i18n) {\n            const value = text.value.visit(this._valueConverter);\n            this.allocateBindingSlots(value);\n            if (value instanceof Interpolation) {\n                this.i18n.appendBoundText(text.i18n);\n                this.i18nAppendBindings(value.expressions);\n            }\n            return;\n        }\n        const nodeIndex = this.allocateDataSlot();\n        this.creationInstruction(text.sourceSpan, Identifiers$1.text, [literal(nodeIndex)]);\n        const value = text.value.visit(this._valueConverter);\n        this.allocateBindingSlots(value);\n        this.updateInstruction(nodeIndex, text.sourceSpan, Identifiers$1.textBinding, () => [literal(nodeIndex), this.convertPropertyBinding(variable(CONTEXT_NAME), value)]);\n    }\n    visitText(text) {\n        // when a text element is located within a translatable\n        // block, we exclude this text element from instructions set,\n        // since it will be captured in i18n content and processed at runtime\n        if (!this.i18n) {\n            this.creationInstruction(text.sourceSpan, Identifiers$1.text, [literal(this.allocateDataSlot()), literal(text.value)]);\n        }\n    }\n    visitIcu(icu) {\n        let initWasInvoked = false;\n        // if an ICU was created outside of i18n block, we still treat\n        // it as a translatable entity and invoke i18nStart and i18nEnd\n        // to generate i18n context and the necessary instructions\n        if (!this.i18n) {\n            initWasInvoked = true;\n            this.i18nStart(null, icu.i18n, true);\n        }\n        const i18n = this.i18n;\n        const vars = this.i18nBindProps(icu.vars);\n        const placeholders = this.i18nBindProps(icu.placeholders);\n        // output ICU directly and keep ICU reference in context\n        const message = icu.i18n;\n        const transformFn = (raw) => instruction(null, Identifiers$1.i18nPostprocess, [raw, mapLiteral(vars, true)]);\n        // in case the whole i18n message is a single ICU - we do not need to\n        // create a separate top-level translation, we can use the root ref instead\n        // and make this ICU a top-level translation\n        if (isSingleI18nIcu(i18n.meta)) {\n            this.i18nTranslate(message, placeholders, i18n.ref, transformFn);\n        }\n        else {\n            // output ICU directly and keep ICU reference in context\n            const ref = this.i18nTranslate(message, placeholders, undefined, transformFn);\n            i18n.appendIcu(icuFromI18nMessage(message).name, ref);\n        }\n        if (initWasInvoked) {\n            this.i18nEnd(null, true);\n        }\n        return null;\n    }\n    allocateDataSlot() { return this._dataIndex++; }\n    getConstCount() { return this._dataIndex; }\n    getVarCount() { return this._pureFunctionSlots; }\n    getNgContentSelectors() {\n        return this._hasNgContent ?\n            this.constantPool.getConstLiteral(asLiteral(this._ngContentSelectors), true) :\n            null;\n    }\n    bindingContext() { return `${this._bindingContext++}`; }\n    templatePropertyBindings(template, templateIndex, context, attrs) {\n        attrs.forEach(input => {\n            if (input instanceof BoundAttribute) {\n                const value = input.value.visit(this._valueConverter);\n                this.allocateBindingSlots(value);\n                this.updateInstruction(templateIndex, template.sourceSpan, Identifiers$1.property, () => [literal(input.name), this.convertPropertyBinding(context, value, true)]);\n            }\n        });\n    }\n    // Bindings must only be resolved after all local refs have been visited, so all\n    // instructions are queued in callbacks that execute once the initial pass has completed.\n    // Otherwise, we wouldn't be able to support local refs that are defined after their\n    // bindings. e.g. {{ foo }} <div #foo></div>\n    instructionFn(fns, span, reference, paramsOrFn, prepend = false) {\n        fns[prepend ? 'unshift' : 'push'](() => {\n            const params = Array.isArray(paramsOrFn) ? paramsOrFn : paramsOrFn();\n            return instruction(span, reference, params).toStmt();\n        });\n    }\n    processStylingInstruction(implicit, instruction, createMode) {\n        if (instruction) {\n            const paramsFn = () => instruction.buildParams(value => this.convertPropertyBinding(implicit, value, true));\n            if (createMode) {\n                this.creationInstruction(instruction.sourceSpan, instruction.reference, paramsFn);\n            }\n            else {\n                this.updateInstruction(-1, instruction.sourceSpan, instruction.reference, paramsFn);\n            }\n        }\n    }\n    creationInstruction(span, reference, paramsOrFn, prepend) {\n        this.instructionFn(this._creationCodeFns, span, reference, paramsOrFn || [], prepend);\n    }\n    updateInstruction(nodeIndex, span, reference, paramsOrFn) {\n        if (this._lastNodeIndexWithFlush < nodeIndex) {\n            this.instructionFn(this._updateCodeFns, span, Identifiers$1.select, [literal(nodeIndex)]);\n            this._lastNodeIndexWithFlush = nodeIndex;\n        }\n        this.instructionFn(this._updateCodeFns, span, reference, paramsOrFn || []);\n    }\n    allocatePureFunctionSlots(numSlots) {\n        const originalSlots = this._pureFunctionSlots;\n        this._pureFunctionSlots += numSlots;\n        return originalSlots;\n    }\n    allocateBindingSlots(value) {\n        this._bindingSlots += value instanceof Interpolation ? value.expressions.length : 1;\n    }\n    convertExpressionBinding(implicit, value) {\n        const convertedPropertyBinding = convertPropertyBinding(this, implicit, value, this.bindingContext(), BindingForm.TrySimple);\n        const valExpr = convertedPropertyBinding.currValExpr;\n        return importExpr(Identifiers$1.bind).callFn([valExpr]);\n    }\n    convertPropertyBinding(implicit, value, skipBindFn) {\n        const interpolationFn = value instanceof Interpolation ? interpolate : () => error('Unexpected interpolation');\n        const convertedPropertyBinding = convertPropertyBinding(this, implicit, value, this.bindingContext(), BindingForm.TrySimple, interpolationFn);\n        this._tempVariables.push(...convertedPropertyBinding.stmts);\n        const valExpr = convertedPropertyBinding.currValExpr;\n        return value instanceof Interpolation || skipBindFn ? valExpr :\n            importExpr(Identifiers$1.bind).callFn([valExpr]);\n    }\n    /**\n     * Gets a list of argument expressions to pass to an update instruction expression. Also updates\n     * the temp variables state with temp variables that were identified as needing to be created\n     * while visiting the arguments.\n     * @param contextExpression The expression for the context variable used to create arguments\n     * @param value The original expression we will be resolving an arguments list from.\n     */\n    getUpdateInstructionArguments(contextExpression, value) {\n        const { args, stmts } = convertUpdateArguments(this, contextExpression, value, this.bindingContext());\n        this._tempVariables.push(...stmts);\n        return args;\n    }\n    matchDirectives(tagName, elOrTpl) {\n        if (this.directiveMatcher) {\n            const selector = createCssSelector(tagName, getAttrsForDirectiveMatching(elOrTpl));\n            this.directiveMatcher.match(selector, (cssSelector, staticType) => { this.directives.add(staticType); });\n        }\n    }\n    /**\n     * Prepares all attribute expression values for the `TAttributes` array.\n     *\n     * The purpose of this function is to properly construct an attributes array that\n     * is passed into the `elementStart` (or just `element`) functions. Because there\n     * are many different types of attributes, the array needs to be constructed in a\n     * special way so that `elementStart` can properly evaluate them.\n     *\n     * The format looks like this:\n     *\n     * ```\n     * attrs = [prop, value, prop2, value2,\n     *   CLASSES, class1, class2,\n     *   STYLES, style1, value1, style2, value2,\n     *   BINDINGS, name1, name2, name3,\n     *   TEMPLATE, name4, name5, ...]\n     * ```\n     *\n     * Note that this function will fully ignore all synthetic (@foo) attribute values\n     * because those values are intended to always be generated as property instructions.\n     */\n    prepareNonRenderAttrs(inputs, outputs, styles, templateAttrs = []) {\n        const alreadySeen = new Set();\n        const attrExprs = [];\n        function addAttrExpr(key, value) {\n            if (typeof key === 'string') {\n                if (!alreadySeen.has(key)) {\n                    attrExprs.push(...getAttributeNameLiterals(key));\n                    value !== undefined && attrExprs.push(value);\n                    alreadySeen.add(key);\n                }\n            }\n            else {\n                attrExprs.push(literal(key));\n            }\n        }\n        // it's important that this occurs before BINDINGS and TEMPLATE because once `elementStart`\n        // comes across the BINDINGS or TEMPLATE markers then it will continue reading each value as\n        // as single property value cell by cell.\n        if (styles) {\n            styles.populateInitialStylingAttrs(attrExprs);\n        }\n        if (inputs.length || outputs.length) {\n            const attrsStartIndex = attrExprs.length;\n            for (let i = 0; i < inputs.length; i++) {\n                const input = inputs[i];\n                if (input.type !== 4 /* Animation */) {\n                    addAttrExpr(input.name);\n                }\n            }\n            for (let i = 0; i < outputs.length; i++) {\n                const output = outputs[i];\n                if (output.type !== 1 /* Animation */) {\n                    addAttrExpr(output.name);\n                }\n            }\n            // this is a cheap way of adding the marker only after all the input/output\n            // values have been filtered (by not including the animation ones) and added\n            // to the expressions. The marker is important because it tells the runtime\n            // code that this is where attributes without values start...\n            if (attrExprs.length) {\n                attrExprs.splice(attrsStartIndex, 0, literal(3 /* Bindings */));\n            }\n        }\n        if (templateAttrs.length) {\n            attrExprs.push(literal(4 /* Template */));\n            templateAttrs.forEach(attr => addAttrExpr(attr.name));\n        }\n        return attrExprs;\n    }\n    toAttrsParam(attrsExprs) {\n        return attrsExprs.length > 0 ?\n            this.constantPool.getConstLiteral(literalArr(attrsExprs), true) :\n            TYPED_NULL_EXPR;\n    }\n    prepareRefsParameter(references) {\n        if (!references || references.length === 0) {\n            return TYPED_NULL_EXPR;\n        }\n        const refsParam = flatten(references.map(reference => {\n            const slot = this.allocateDataSlot();\n            // Generate the update temporary.\n            const variableName = this._bindingScope.freshReferenceName();\n            const retrievalLevel = this.level;\n            const lhs = variable(variableName);\n            this._bindingScope.set(retrievalLevel, reference.name, lhs, 0 /* DEFAULT */, (scope, relativeLevel) => {\n                // e.g. nextContext(2);\n                const nextContextStmt = relativeLevel > 0 ? [generateNextContextExpr(relativeLevel).toStmt()] : [];\n                // e.g. const $foo$ = reference(1);\n                const refExpr = lhs.set(importExpr(Identifiers$1.reference).callFn([literal(slot)]));\n                return nextContextStmt.concat(refExpr.toConstDecl());\n            }, true);\n            return [reference.name, reference.value];\n        }));\n        return this.constantPool.getConstLiteral(asLiteral(refsParam), true);\n    }\n    prepareListenerParameter(tagName, outputAst, index) {\n        return () => {\n            const eventName = outputAst.name;\n            const bindingFnName = outputAst.type === 1 /* Animation */ ?\n                // synthetic @listener.foo values are treated the exact same as are standard listeners\n                prepareSyntheticListenerFunctionName(eventName, outputAst.phase) :\n                sanitizeIdentifier(eventName);\n            const handlerName = `${this.templateName}_${tagName}_${bindingFnName}_${index}_listener`;\n            const scope = this._bindingScope.nestedScope(this._bindingScope.bindingLevel);\n            const context = variable(CONTEXT_NAME);\n            return prepareEventListenerParameters(outputAst, context, handlerName, scope);\n        };\n    }\n}\nclass ValueConverter extends AstMemoryEfficientTransformer {\n    constructor(constantPool, allocateSlot, allocatePureFunctionSlots, definePipe) {\n        super();\n        this.constantPool = constantPool;\n        this.allocateSlot = allocateSlot;\n        this.allocatePureFunctionSlots = allocatePureFunctionSlots;\n        this.definePipe = definePipe;\n        this._pipeBindExprs = [];\n    }\n    // AstMemoryEfficientTransformer\n    visitPipe(pipe, context) {\n        // Allocate a slot to create the pipe\n        const slot = this.allocateSlot();\n        const slotPseudoLocal = `PIPE:${slot}`;\n        // Allocate one slot for the result plus one slot per pipe argument\n        const pureFunctionSlot = this.allocatePureFunctionSlots(2 + pipe.args.length);\n        const target = new PropertyRead(pipe.span, new ImplicitReceiver(pipe.span), slotPseudoLocal);\n        const { identifier, isVarLength } = pipeBindingCallInfo(pipe.args);\n        this.definePipe(pipe.name, slotPseudoLocal, slot, importExpr(identifier));\n        const args = [pipe.exp, ...pipe.args];\n        const convertedArgs = isVarLength ? this.visitAll([new LiteralArray(pipe.span, args)]) : this.visitAll(args);\n        const pipeBindExpr = new FunctionCall(pipe.span, target, [\n            new LiteralPrimitive(pipe.span, slot),\n            new LiteralPrimitive(pipe.span, pureFunctionSlot),\n            ...convertedArgs,\n        ]);\n        this._pipeBindExprs.push(pipeBindExpr);\n        return pipeBindExpr;\n    }\n    updatePipeSlotOffsets(bindingSlots) {\n        this._pipeBindExprs.forEach((pipe) => {\n            // update the slot offset arg (index 1) to account for binding slots\n            const slotOffset = pipe.args[1];\n            slotOffset.value += bindingSlots;\n        });\n    }\n    visitLiteralArray(array, context) {\n        return new BuiltinFunctionCall(array.span, this.visitAll(array.expressions), values => {\n            // If the literal has calculated (non-literal) elements transform it into\n            // calls to literal factories that compose the literal and will cache intermediate\n            // values. Otherwise, just return an literal array that contains the values.\n            const literal = literalArr(values);\n            return values.every(a => a.isConstant()) ?\n                this.constantPool.getConstLiteral(literal, true) :\n                getLiteralFactory(this.constantPool, literal, this.allocatePureFunctionSlots);\n        });\n    }\n    visitLiteralMap(map, context) {\n        return new BuiltinFunctionCall(map.span, this.visitAll(map.values), values => {\n            // If the literal has calculated (non-literal) elements  transform it into\n            // calls to literal factories that compose the literal and will cache intermediate\n            // values. Otherwise, just return an literal array that contains the values.\n            const literal = literalMap(values.map((value, index) => ({ key: map.keys[index].key, value, quoted: map.keys[index].quoted })));\n            return values.every(a => a.isConstant()) ?\n                this.constantPool.getConstLiteral(literal, true) :\n                getLiteralFactory(this.constantPool, literal, this.allocatePureFunctionSlots);\n        });\n    }\n}\n// Pipes always have at least one parameter, the value they operate on\nconst pipeBindingIdentifiers = [Identifiers$1.pipeBind1, Identifiers$1.pipeBind2, Identifiers$1.pipeBind3, Identifiers$1.pipeBind4];\nfunction pipeBindingCallInfo(args) {\n    const identifier = pipeBindingIdentifiers[args.length];\n    return {\n        identifier: identifier || Identifiers$1.pipeBindV,\n        isVarLength: !identifier,\n    };\n}\nconst pureFunctionIdentifiers = [\n    Identifiers$1.pureFunction0, Identifiers$1.pureFunction1, Identifiers$1.pureFunction2, Identifiers$1.pureFunction3, Identifiers$1.pureFunction4,\n    Identifiers$1.pureFunction5, Identifiers$1.pureFunction6, Identifiers$1.pureFunction7, Identifiers$1.pureFunction8\n];\nfunction pureFunctionCallInfo(args) {\n    const identifier = pureFunctionIdentifiers[args.length];\n    return {\n        identifier: identifier || Identifiers$1.pureFunctionV,\n        isVarLength: !identifier,\n    };\n}\nfunction instruction(span, reference, params) {\n    return importExpr(reference, null, span).callFn(params, span);\n}\n// e.g. x(2);\nfunction generateNextContextExpr(relativeLevelDiff) {\n    return importExpr(Identifiers$1.nextContext)\n        .callFn(relativeLevelDiff > 1 ? [literal(relativeLevelDiff)] : []);\n}\nfunction getLiteralFactory(constantPool, literal$1, allocateSlots) {\n    const { literalFactory, literalFactoryArguments } = constantPool.getLiteralFactory(literal$1);\n    // Allocate 1 slot for the result plus 1 per argument\n    const startSlot = allocateSlots(1 + literalFactoryArguments.length);\n    literalFactoryArguments.length > 0 || error(`Expected arguments to a literal factory function`);\n    const { identifier, isVarLength } = pureFunctionCallInfo(literalFactoryArguments);\n    // Literal factories are pure functions that only need to be re-invoked when the parameters\n    // change.\n    const args = [\n        literal(startSlot),\n        literalFactory,\n    ];\n    if (isVarLength) {\n        args.push(literalArr(literalFactoryArguments));\n    }\n    else {\n        args.push(...literalFactoryArguments);\n    }\n    return importExpr(identifier).callFn(args);\n}\n/**\n * Gets an array of literals that can be added to an expression\n * to represent the name and namespace of an attribute. E.g.\n * `:xlink:href` turns into `[AttributeMarker.NamespaceURI, 'xlink', 'href']`.\n *\n * @param name Name of the attribute, including the namespace.\n */\nfunction getAttributeNameLiterals(name) {\n    const [attributeNamespace, attributeName] = splitNsName(name);\n    const nameLiteral = literal(attributeName);\n    if (attributeNamespace) {\n        return [\n            literal(0 /* NamespaceURI */), literal(attributeNamespace), nameLiteral\n        ];\n    }\n    return [nameLiteral];\n}\n/** The prefix used to get a shared context in BindingScope's map. */\nconst SHARED_CONTEXT_KEY = '$$shared_ctx$$';\nclass BindingScope {\n    constructor(bindingLevel = 0, parent = null) {\n        this.bindingLevel = bindingLevel;\n        this.parent = parent;\n        /** Keeps a map from local variables to their BindingData. */\n        this.map = new Map();\n        this.referenceNameIndex = 0;\n        this.restoreViewVariable = null;\n    }\n    static get ROOT_SCOPE() {\n        if (!BindingScope._ROOT_SCOPE) {\n            BindingScope._ROOT_SCOPE = new BindingScope().set(0, '$event', variable('$event'));\n        }\n        return BindingScope._ROOT_SCOPE;\n    }\n    get(name) {\n        let current = this;\n        while (current) {\n            let value = current.map.get(name);\n            if (value != null) {\n                if (current !== this) {\n                    // make a local copy and reset the `declare` state\n                    value = {\n                        retrievalLevel: value.retrievalLevel,\n                        lhs: value.lhs,\n                        declareLocalCallback: value.declareLocalCallback,\n                        declare: false,\n                        priority: value.priority,\n                        localRef: value.localRef\n                    };\n                    // Cache the value locally.\n                    this.map.set(name, value);\n                    // Possibly generate a shared context var\n                    this.maybeGenerateSharedContextVar(value);\n                    this.maybeRestoreView(value.retrievalLevel, value.localRef);\n                }\n                if (value.declareLocalCallback && !value.declare) {\n                    value.declare = true;\n                }\n                return value.lhs;\n            }\n            current = current.parent;\n        }\n        // If we get to this point, we are looking for a property on the top level component\n        // - If level === 0, we are on the top and don't need to re-declare `ctx`.\n        // - If level > 0, we are in an embedded view. We need to retrieve the name of the\n        // local var we used to store the component context, e.g. const $comp$ = x();\n        return this.bindingLevel === 0 ? null : this.getComponentProperty(name);\n    }\n    /**\n     * Create a local variable for later reference.\n     *\n     * @param retrievalLevel The level from which this value can be retrieved\n     * @param name Name of the variable.\n     * @param lhs AST representing the left hand side of the `let lhs = rhs;`.\n     * @param priority The sorting priority of this var\n     * @param declareLocalCallback The callback to invoke when declaring this local var\n     * @param localRef Whether or not this is a local ref\n     */\n    set(retrievalLevel, name, lhs, priority = 0 /* DEFAULT */, declareLocalCallback, localRef) {\n        if (this.map.has(name)) {\n            if (localRef) {\n                // Do not throw an error if it's a local ref and do not update existing value,\n                // so the first defined ref is always returned.\n                return this;\n            }\n            error(`The name ${name} is already defined in scope to be ${this.map.get(name)}`);\n        }\n        this.map.set(name, {\n            retrievalLevel: retrievalLevel,\n            lhs: lhs,\n            declare: false,\n            declareLocalCallback: declareLocalCallback,\n            priority: priority,\n            localRef: localRef || false\n        });\n        return this;\n    }\n    getLocal(name) { return this.get(name); }\n    nestedScope(level) {\n        const newScope = new BindingScope(level, this);\n        if (level > 0)\n            newScope.generateSharedContextVar(0);\n        return newScope;\n    }\n    getSharedContextName(retrievalLevel) {\n        const sharedCtxObj = this.map.get(SHARED_CONTEXT_KEY + retrievalLevel);\n        return sharedCtxObj && sharedCtxObj.declare ? sharedCtxObj.lhs : null;\n    }\n    maybeGenerateSharedContextVar(value) {\n        if (value.priority === 1 /* CONTEXT */ &&\n            value.retrievalLevel < this.bindingLevel) {\n            const sharedCtxObj = this.map.get(SHARED_CONTEXT_KEY + value.retrievalLevel);\n            if (sharedCtxObj) {\n                sharedCtxObj.declare = true;\n            }\n            else {\n                this.generateSharedContextVar(value.retrievalLevel);\n            }\n        }\n    }\n    generateSharedContextVar(retrievalLevel) {\n        const lhs = variable(CONTEXT_NAME + this.freshReferenceName());\n        this.map.set(SHARED_CONTEXT_KEY + retrievalLevel, {\n            retrievalLevel: retrievalLevel,\n            lhs: lhs,\n            declareLocalCallback: (scope, relativeLevel) => {\n                // const ctx_r0 = nextContext(2);\n                return [lhs.set(generateNextContextExpr(relativeLevel)).toConstDecl()];\n            },\n            declare: false,\n            priority: 2 /* SHARED_CONTEXT */,\n            localRef: false\n        });\n    }\n    getComponentProperty(name) {\n        const componentValue = this.map.get(SHARED_CONTEXT_KEY + 0);\n        componentValue.declare = true;\n        this.maybeRestoreView(0, false);\n        return componentValue.lhs.prop(name);\n    }\n    maybeRestoreView(retrievalLevel, localRefLookup) {\n        // We want to restore the current view in listener fns if:\n        // 1 - we are accessing a value in a parent view, which requires walking the view tree rather\n        // than using the ctx arg. In this case, the retrieval and binding level will be different.\n        // 2 - we are looking up a local ref, which requires restoring the view where the local\n        // ref is stored\n        if (this.isListenerScope() && (retrievalLevel < this.bindingLevel || localRefLookup)) {\n            if (!this.parent.restoreViewVariable) {\n                // parent saves variable to generate a shared `const $s$ = getCurrentView();` instruction\n                this.parent.restoreViewVariable = variable(this.parent.freshReferenceName());\n            }\n            this.restoreViewVariable = this.parent.restoreViewVariable;\n        }\n    }\n    restoreViewStatement() {\n        // restoreView($state$);\n        return this.restoreViewVariable ?\n            [instruction(null, Identifiers$1.restoreView, [this.restoreViewVariable]).toStmt()] :\n            [];\n    }\n    viewSnapshotStatements() {\n        // const $state$ = getCurrentView();\n        const getCurrentViewInstruction = instruction(null, Identifiers$1.getCurrentView, []);\n        return this.restoreViewVariable ?\n            [this.restoreViewVariable.set(getCurrentViewInstruction).toConstDecl()] :\n            [];\n    }\n    isListenerScope() { return this.parent && this.parent.bindingLevel === this.bindingLevel; }\n    variableDeclarations() {\n        let currentContextLevel = 0;\n        return Array.from(this.map.values())\n            .filter(value => value.declare)\n            .sort((a, b) => b.retrievalLevel - a.retrievalLevel || b.priority - a.priority)\n            .reduce((stmts, value) => {\n            const levelDiff = this.bindingLevel - value.retrievalLevel;\n            const currStmts = value.declareLocalCallback(this, levelDiff - currentContextLevel);\n            currentContextLevel = levelDiff;\n            return stmts.concat(currStmts);\n        }, []);\n    }\n    freshReferenceName() {\n        let current = this;\n        // Find the top scope as it maintains the global reference count\n        while (current.parent)\n            current = current.parent;\n        const ref = `${REFERENCE_PREFIX}${current.referenceNameIndex++}`;\n        return ref;\n    }\n}\n/**\n * Creates a `CssSelector` given a tag name and a map of attributes\n */\nfunction createCssSelector(tag, attributes) {\n    const cssSelector = new CssSelector();\n    cssSelector.setElement(tag);\n    Object.getOwnPropertyNames(attributes).forEach((name) => {\n        const value = attributes[name];\n        cssSelector.addAttribute(name, value);\n        if (name.toLowerCase() === 'class') {\n            const classes = value.trim().split(/\\s+/);\n            classes.forEach(className => cssSelector.addClassName(className));\n        }\n    });\n    return cssSelector;\n}\n/**\n * Creates an array of expressions out of an `ngProjectAs` attributes\n * which can be added to the instruction parameters.\n */\nfunction getNgProjectAsLiteral(attribute) {\n    // Parse the attribute value into a CssSelectorList. Note that we only take the\n    // first selector, because we don't support multiple selectors in ngProjectAs.\n    const parsedR3Selector = parseSelectorToR3Selector(attribute.value)[0];\n    return [literal(5 /* ProjectAs */), asLiteral(parsedR3Selector)];\n}\nfunction interpolate(args) {\n    args = args.slice(1); // Ignore the length prefix added for render2\n    switch (args.length) {\n        case 3:\n            return importExpr(Identifiers$1.interpolation1).callFn(args);\n        case 5:\n            return importExpr(Identifiers$1.interpolation2).callFn(args);\n        case 7:\n            return importExpr(Identifiers$1.interpolation3).callFn(args);\n        case 9:\n            return importExpr(Identifiers$1.interpolation4).callFn(args);\n        case 11:\n            return importExpr(Identifiers$1.interpolation5).callFn(args);\n        case 13:\n            return importExpr(Identifiers$1.interpolation6).callFn(args);\n        case 15:\n            return importExpr(Identifiers$1.interpolation7).callFn(args);\n        case 17:\n            return importExpr(Identifiers$1.interpolation8).callFn(args);\n    }\n    (args.length >= 19 && args.length % 2 == 1) ||\n        error(`Invalid interpolation argument length ${args.length}`);\n    return importExpr(Identifiers$1.interpolationV).callFn([literalArr(args)]);\n}\n/**\n * Gets the instruction to generate for an interpolated property\n * @param interpolation An Interpolation AST\n */\nfunction getPropertyInterpolationExpression(interpolation) {\n    switch (getInterpolationArgsLength(interpolation)) {\n        case 1:\n            return Identifiers$1.propertyInterpolate;\n        case 3:\n            return Identifiers$1.propertyInterpolate1;\n        case 5:\n            return Identifiers$1.propertyInterpolate2;\n        case 7:\n            return Identifiers$1.propertyInterpolate3;\n        case 9:\n            return Identifiers$1.propertyInterpolate4;\n        case 11:\n            return Identifiers$1.propertyInterpolate5;\n        case 13:\n            return Identifiers$1.propertyInterpolate6;\n        case 15:\n            return Identifiers$1.propertyInterpolate7;\n        case 17:\n            return Identifiers$1.propertyInterpolate8;\n        default:\n            return Identifiers$1.propertyInterpolateV;\n    }\n}\n/**\n * Gets the number of arguments expected to be passed to a generated instruction in the case of\n * interpolation instructions.\n * @param interpolation An interpolation ast\n */\nfunction getInterpolationArgsLength(interpolation) {\n    const { expressions, strings } = interpolation;\n    if (expressions.length === 1 && strings.length === 2 && strings[0] === '' && strings[1] === '') {\n        // If the interpolation has one interpolated value, but the prefix and suffix are both empty\n        // strings, we only pass one argument, to a special instruction like `propertyInterpolate` or\n        // `textInterpolate`.\n        return 1;\n    }\n    else {\n        return expressions.length + strings.length;\n    }\n}\n/**\n * Parse a template into render3 `Node`s and additional metadata, with no other dependencies.\n *\n * @param template text of the template to parse\n * @param templateUrl URL to use for source mapping of the parsed template\n * @param options options to modify how the template is parsed\n */\nfunction parseTemplate(template, templateUrl, options = {}) {\n    const { interpolationConfig, preserveWhitespaces } = options;\n    const bindingParser = makeBindingParser(interpolationConfig);\n    const htmlParser = new HtmlParser();\n    const parseResult = htmlParser.parse(template, templateUrl, Object.assign({}, options, { tokenizeExpansionForms: true, leadingTriviaChars: LEADING_TRIVIA_CHARS }));\n    if (parseResult.errors && parseResult.errors.length > 0) {\n        return { errors: parseResult.errors, nodes: [], styleUrls: [], styles: [] };\n    }\n    let rootNodes = parseResult.rootNodes;\n    // process i18n meta information (scan attributes, generate ids)\n    // before we run whitespace removal process, because existing i18n\n    // extraction process (ng xi18n) relies on a raw content to generate\n    // message ids\n    rootNodes =\n        visitAll$1(new I18nMetaVisitor(interpolationConfig, !preserveWhitespaces), rootNodes);\n    if (!preserveWhitespaces) {\n        rootNodes = visitAll$1(new WhitespaceVisitor(), rootNodes);\n        // run i18n meta visitor again in case we remove whitespaces, because\n        // that might affect generated i18n message content. During this pass\n        // i18n IDs generated at the first pass will be preserved, so we can mimic\n        // existing extraction process (ng xi18n)\n        rootNodes = visitAll$1(new I18nMetaVisitor(interpolationConfig, /* keepI18nAttrs */ false), rootNodes);\n    }\n    const { nodes, errors, styleUrls, styles } = htmlAstToRender3Ast(rootNodes, bindingParser);\n    if (errors && errors.length > 0) {\n        return { errors, nodes: [], styleUrls: [], styles: [] };\n    }\n    return { nodes, styleUrls, styles };\n}\n/**\n * Construct a `BindingParser` with a default configuration.\n */\nfunction makeBindingParser(interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n    return new BindingParser(new Parser$1(new Lexer()), interpolationConfig, new DomElementSchemaRegistry(), null, []);\n}\nfunction resolveSanitizationFn(context, isAttribute) {\n    switch (context) {\n        case SecurityContext.HTML:\n            return importExpr(Identifiers$1.sanitizeHtml);\n        case SecurityContext.SCRIPT:\n            return importExpr(Identifiers$1.sanitizeScript);\n        case SecurityContext.STYLE:\n            // the compiler does not fill in an instruction for [style.prop?] binding\n            // values because the style algorithm knows internally what props are subject\n            // to sanitization (only [attr.style] values are explicitly sanitized)\n            return isAttribute ? importExpr(Identifiers$1.sanitizeStyle) : null;\n        case SecurityContext.URL:\n            return importExpr(Identifiers$1.sanitizeUrl);\n        case SecurityContext.RESOURCE_URL:\n            return importExpr(Identifiers$1.sanitizeResourceUrl);\n        default:\n            return null;\n    }\n}\nfunction isSingleElementTemplate(children) {\n    return children.length === 1 && children[0] instanceof Element;\n}\nfunction isTextNode(node) {\n    return node instanceof Text || node instanceof BoundText || node instanceof Icu;\n}\nfunction hasTextChildrenOnly(children) {\n    return children.every(isTextNode);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EMPTY_ARRAY = [];\n// This regex matches any binding names that contain the \"attr.\" prefix, e.g. \"attr.required\"\n// If there is a match, the first matching group will contain the attribute name to bind.\nconst ATTR_REGEX = /attr\\.([^\\]]+)/;\nfunction getStylingPrefix(name) {\n    return name.substring(0, 5); // style or class\n}\nfunction baseDirectiveFields(meta, constantPool, bindingParser) {\n    const definitionMap = new DefinitionMap();\n    // e.g. `type: MyDirective`\n    definitionMap.set('type', meta.type);\n    // e.g. `selectors: [['', 'someDir', '']]`\n    definitionMap.set('selectors', createDirectiveSelector(meta.selector));\n    // e.g. `factory: () => new MyApp(directiveInject(ElementRef))`\n    const result = compileFactoryFunction({\n        name: meta.name,\n        type: meta.type,\n        deps: meta.deps,\n        injectFn: Identifiers$1.directiveInject,\n    });\n    definitionMap.set('factory', result.factory);\n    if (meta.queries.length > 0) {\n        // e.g. `contentQueries: (rf, ctx, dirIndex) => { ... }\n        definitionMap.set('contentQueries', createContentQueriesFunction(meta.queries, constantPool, meta.name));\n    }\n    if (meta.viewQueries.length) {\n        definitionMap.set('viewQuery', createViewQueriesFunction(meta.viewQueries, constantPool, meta.name));\n    }\n    // Initialize hostVarsCount to number of bound host properties (interpolations illegal),\n    // except 'style' and 'class' properties, since they should *not* allocate host var slots\n    const hostVarsCount = Object.keys(meta.host.properties)\n        .filter(name => {\n        const prefix = getStylingPrefix(name);\n        return prefix !== 'style' && prefix !== 'class';\n    })\n        .length;\n    const elVarExp = variable('elIndex');\n    const contextVarExp = variable(CONTEXT_NAME);\n    const styleBuilder = new StylingBuilder(elVarExp, contextVarExp);\n    const { styleAttr, classAttr } = meta.host.specialAttributes;\n    if (styleAttr !== undefined) {\n        styleBuilder.registerStyleAttr(styleAttr);\n    }\n    if (classAttr !== undefined) {\n        styleBuilder.registerClassAttr(classAttr);\n    }\n    // e.g. `hostBindings: (rf, ctx, elIndex) => { ... }\n    definitionMap.set('hostBindings', createHostBindingsFunction(meta, elVarExp, contextVarExp, meta.host.attributes, styleBuilder, bindingParser, constantPool, hostVarsCount));\n    // e.g 'inputs: {a: 'a'}`\n    definitionMap.set('inputs', conditionallyCreateMapObjectLiteral(meta.inputs, true));\n    // e.g 'outputs: {a: 'a'}`\n    definitionMap.set('outputs', conditionallyCreateMapObjectLiteral(meta.outputs));\n    if (meta.exportAs !== null) {\n        definitionMap.set('exportAs', literalArr(meta.exportAs.map(e => literal(e))));\n    }\n    return { definitionMap, statements: result.statements };\n}\n/**\n * Add features to the definition map.\n */\nfunction addFeatures(definitionMap, meta) {\n    // e.g. `features: [NgOnChangesFeature()]`\n    const features = [];\n    const providers = meta.providers;\n    const viewProviders = meta.viewProviders;\n    if (providers || viewProviders) {\n        const args = [providers || new LiteralArrayExpr([])];\n        if (viewProviders) {\n            args.push(viewProviders);\n        }\n        features.push(importExpr(Identifiers$1.ProvidersFeature).callFn(args));\n    }\n    if (meta.usesInheritance) {\n        features.push(importExpr(Identifiers$1.InheritDefinitionFeature));\n    }\n    if (meta.lifecycle.usesOnChanges) {\n        features.push(importExpr(Identifiers$1.NgOnChangesFeature).callFn(EMPTY_ARRAY));\n    }\n    if (features.length) {\n        definitionMap.set('features', literalArr(features));\n    }\n}\n/**\n * Compile a directive for the render3 runtime as defined by the `R3DirectiveMetadata`.\n */\nfunction compileDirectiveFromMetadata(meta, constantPool, bindingParser) {\n    const { definitionMap, statements } = baseDirectiveFields(meta, constantPool, bindingParser);\n    addFeatures(definitionMap, meta);\n    const expression = importExpr(Identifiers$1.defineDirective).callFn([definitionMap.toLiteralMap()]);\n    if (!meta.selector) {\n        throw new Error(`Directive ${meta.name} has no selector, please add it!`);\n    }\n    const type = createTypeForDef(meta, Identifiers$1.DirectiveDefWithMeta);\n    return { expression, type, statements };\n}\n/**\n * Compile a base definition for the render3 runtime as defined by {@link R3BaseRefMetadata}\n * @param meta the metadata used for compilation.\n */\nfunction compileBaseDefFromMetadata(meta, constantPool) {\n    const definitionMap = new DefinitionMap();\n    if (meta.inputs) {\n        const inputs = meta.inputs;\n        const inputsMap = Object.keys(inputs).map(key => {\n            const v = inputs[key];\n            const value = Array.isArray(v) ? literalArr(v.map(vx => literal(vx))) : literal(v);\n            return { key, value, quoted: false };\n        });\n        definitionMap.set('inputs', literalMap(inputsMap));\n    }\n    if (meta.outputs) {\n        const outputs = meta.outputs;\n        const outputsMap = Object.keys(outputs).map(key => {\n            const value = literal(outputs[key]);\n            return { key, value, quoted: false };\n        });\n        definitionMap.set('outputs', literalMap(outputsMap));\n    }\n    if (meta.viewQueries && meta.viewQueries.length > 0) {\n        definitionMap.set('viewQuery', createViewQueriesFunction(meta.viewQueries, constantPool));\n    }\n    if (meta.queries && meta.queries.length > 0) {\n        definitionMap.set('contentQueries', createContentQueriesFunction(meta.queries, constantPool));\n    }\n    const expression = importExpr(Identifiers$1.defineBase).callFn([definitionMap.toLiteralMap()]);\n    const type = new ExpressionType(importExpr(Identifiers$1.BaseDef));\n    return { expression, type };\n}\n/**\n * Compile a component for the render3 runtime as defined by the `R3ComponentMetadata`.\n */\nfunction compileComponentFromMetadata(meta, constantPool, bindingParser) {\n    const { definitionMap, statements } = baseDirectiveFields(meta, constantPool, bindingParser);\n    addFeatures(definitionMap, meta);\n    const selector = meta.selector && CssSelector.parse(meta.selector);\n    const firstSelector = selector && selector[0];\n    // e.g. `attr: [\"class\", \".my.app\"]`\n    // This is optional an only included if the first selector of a component specifies attributes.\n    if (firstSelector) {\n        const selectorAttributes = firstSelector.getAttrs();\n        if (selectorAttributes.length) {\n            definitionMap.set('attrs', constantPool.getConstLiteral(literalArr(selectorAttributes.map(value => value != null ? literal(value) : literal(undefined))), \n            /* forceShared */ true));\n        }\n    }\n    // Generate the CSS matcher that recognize directive\n    let directiveMatcher = null;\n    if (meta.directives.length > 0) {\n        const matcher = new SelectorMatcher();\n        for (const { selector, expression } of meta.directives) {\n            matcher.addSelectables(CssSelector.parse(selector), expression);\n        }\n        directiveMatcher = matcher;\n    }\n    // e.g. `template: function MyComponent_Template(_ctx, _cm) {...}`\n    const templateTypeName = meta.name;\n    const templateName = templateTypeName ? `${templateTypeName}_Template` : null;\n    const directivesUsed = new Set();\n    const pipesUsed = new Set();\n    const changeDetection = meta.changeDetection;\n    const template = meta.template;\n    const templateBuilder = new TemplateDefinitionBuilder(constantPool, BindingScope.ROOT_SCOPE, 0, templateTypeName, null, null, templateName, directiveMatcher, directivesUsed, meta.pipes, pipesUsed, Identifiers$1.namespaceHTML, meta.relativeContextFilePath, meta.i18nUseExternalIds);\n    const templateFunctionExpression = templateBuilder.buildTemplateFunction(template.nodes, []);\n    // We need to provide this so that dynamically generated components know what\n    // projected content blocks to pass through to the component when it is instantiated.\n    const ngContentSelectors = templateBuilder.getNgContentSelectors();\n    if (ngContentSelectors) {\n        definitionMap.set('ngContentSelectors', ngContentSelectors);\n    }\n    // e.g. `consts: 2`\n    definitionMap.set('consts', literal(templateBuilder.getConstCount()));\n    // e.g. `vars: 2`\n    definitionMap.set('vars', literal(templateBuilder.getVarCount()));\n    definitionMap.set('template', templateFunctionExpression);\n    // e.g. `directives: [MyDirective]`\n    if (directivesUsed.size) {\n        let directivesExpr = literalArr(Array.from(directivesUsed));\n        if (meta.wrapDirectivesAndPipesInClosure) {\n            directivesExpr = fn([], [new ReturnStatement(directivesExpr)]);\n        }\n        definitionMap.set('directives', directivesExpr);\n    }\n    // e.g. `pipes: [MyPipe]`\n    if (pipesUsed.size) {\n        let pipesExpr = literalArr(Array.from(pipesUsed));\n        if (meta.wrapDirectivesAndPipesInClosure) {\n            pipesExpr = fn([], [new ReturnStatement(pipesExpr)]);\n        }\n        definitionMap.set('pipes', pipesExpr);\n    }\n    if (meta.encapsulation === null) {\n        meta.encapsulation = ViewEncapsulation.Emulated;\n    }\n    // e.g. `styles: [str1, str2]`\n    if (meta.styles && meta.styles.length) {\n        const styleValues = meta.encapsulation == ViewEncapsulation.Emulated ?\n            compileStyles(meta.styles, CONTENT_ATTR, HOST_ATTR) :\n            meta.styles;\n        const strings = styleValues.map(str => literal(str));\n        definitionMap.set('styles', literalArr(strings));\n    }\n    else if (meta.encapsulation === ViewEncapsulation.Emulated) {\n        // If there is no style, don't generate css selectors on elements\n        meta.encapsulation = ViewEncapsulation.None;\n    }\n    // Only set view encapsulation if it's not the default value\n    if (meta.encapsulation !== ViewEncapsulation.Emulated) {\n        definitionMap.set('encapsulation', literal(meta.encapsulation));\n    }\n    // e.g. `animation: [trigger('123', [])]`\n    if (meta.animations !== null) {\n        definitionMap.set('data', literalMap([{ key: 'animation', value: meta.animations, quoted: false }]));\n    }\n    // Only set the change detection flag if it's defined and it's not the default.\n    if (changeDetection != null && changeDetection !== ChangeDetectionStrategy.Default) {\n        definitionMap.set('changeDetection', literal(changeDetection));\n    }\n    // On the type side, remove newlines from the selector as it will need to fit into a TypeScript\n    // string literal, which must be on one line.\n    const selectorForType = (meta.selector || '').replace(/\\n/g, '');\n    const expression = importExpr(Identifiers$1.defineComponent).callFn([definitionMap.toLiteralMap()]);\n    const type = createTypeForDef(meta, Identifiers$1.ComponentDefWithMeta);\n    return { expression, type, statements };\n}\n/**\n * A wrapper around `compileDirective` which depends on render2 global analysis data as its input\n * instead of the `R3DirectiveMetadata`.\n *\n * `R3DirectiveMetadata` is computed from `CompileDirectiveMetadata` and other statically reflected\n * information.\n */\nfunction compileDirectiveFromRender2(outputCtx, directive, reflector, bindingParser) {\n    const name = identifierName(directive.type);\n    name || error(`Cannot resolver the name of ${directive.type}`);\n    const definitionField = outputCtx.constantPool.propertyNameOf(1 /* Directive */);\n    const meta = directiveMetadataFromGlobalMetadata(directive, outputCtx, reflector);\n    const res = compileDirectiveFromMetadata(meta, outputCtx.constantPool, bindingParser);\n    // Create the partial class to be merged with the actual class.\n    outputCtx.statements.push(new ClassStmt(name, null, [new ClassField(definitionField, INFERRED_TYPE, [StmtModifier.Static], res.expression)], [], new ClassMethod(null, [], []), []));\n}\n/**\n * A wrapper around `compileComponent` which depends on render2 global analysis data as its input\n * instead of the `R3DirectiveMetadata`.\n *\n * `R3ComponentMetadata` is computed from `CompileDirectiveMetadata` and other statically reflected\n * information.\n */\nfunction compileComponentFromRender2(outputCtx, component, render3Ast, reflector, bindingParser, directiveTypeBySel, pipeTypeByName) {\n    const name = identifierName(component.type);\n    name || error(`Cannot resolver the name of ${component.type}`);\n    const definitionField = outputCtx.constantPool.propertyNameOf(2 /* Component */);\n    const summary = component.toSummary();\n    // Compute the R3ComponentMetadata from the CompileDirectiveMetadata\n    const meta = Object.assign({}, directiveMetadataFromGlobalMetadata(component, outputCtx, reflector), { selector: component.selector, template: { nodes: render3Ast.nodes }, directives: [], pipes: typeMapToExpressionMap(pipeTypeByName, outputCtx), viewQueries: queriesFromGlobalMetadata(component.viewQueries, outputCtx), wrapDirectivesAndPipesInClosure: false, styles: (summary.template && summary.template.styles) || EMPTY_ARRAY, encapsulation: (summary.template && summary.template.encapsulation) || ViewEncapsulation.Emulated, interpolation: DEFAULT_INTERPOLATION_CONFIG, animations: null, viewProviders: component.viewProviders.length > 0 ? new WrappedNodeExpr(component.viewProviders) : null, relativeContextFilePath: '', i18nUseExternalIds: true });\n    const res = compileComponentFromMetadata(meta, outputCtx.constantPool, bindingParser);\n    // Create the partial class to be merged with the actual class.\n    outputCtx.statements.push(new ClassStmt(name, null, [new ClassField(definitionField, INFERRED_TYPE, [StmtModifier.Static], res.expression)], [], new ClassMethod(null, [], []), []));\n}\n/**\n * Compute `R3DirectiveMetadata` given `CompileDirectiveMetadata` and a `CompileReflector`.\n */\nfunction directiveMetadataFromGlobalMetadata(directive, outputCtx, reflector) {\n    // The global-analysis based Ivy mode in ngc is no longer utilized/supported.\n    throw new Error('unsupported');\n}\n/**\n * Convert `CompileQueryMetadata` into `R3QueryMetadata`.\n */\nfunction queriesFromGlobalMetadata(queries, outputCtx) {\n    return queries.map(query => {\n        let read = null;\n        if (query.read && query.read.identifier) {\n            read = outputCtx.importExpr(query.read.identifier.reference);\n        }\n        return {\n            propertyName: query.propertyName,\n            first: query.first,\n            predicate: selectorsFromGlobalMetadata(query.selectors, outputCtx),\n            descendants: query.descendants, read,\n            static: !!query.static\n        };\n    });\n}\n/**\n * Convert `CompileTokenMetadata` for query selectors into either an expression for a predicate\n * type, or a list of string predicates.\n */\nfunction selectorsFromGlobalMetadata(selectors, outputCtx) {\n    if (selectors.length > 1 || (selectors.length == 1 && selectors[0].value)) {\n        const selectorStrings = selectors.map(value => value.value);\n        selectorStrings.some(value => !value) &&\n            error('Found a type among the string selectors expected');\n        return outputCtx.constantPool.getConstLiteral(literalArr(selectorStrings.map(value => literal(value))));\n    }\n    if (selectors.length == 1) {\n        const first = selectors[0];\n        if (first.identifier) {\n            return outputCtx.importExpr(first.identifier.reference);\n        }\n    }\n    error('Unexpected query form');\n    return NULL_EXPR;\n}\nfunction prepareQueryParams(query, constantPool) {\n    const parameters = [\n        getQueryPredicate(query, constantPool),\n        literal(query.descendants),\n        query.read || literal(null),\n    ];\n    return parameters;\n}\n// Turn a directive selector into an R3-compatible selector for directive def\nfunction createDirectiveSelector(selector) {\n    return asLiteral(parseSelectorToR3Selector(selector));\n}\nfunction convertAttributesToExpressions(attributes) {\n    const values = [];\n    for (let key of Object.getOwnPropertyNames(attributes)) {\n        const value = attributes[key];\n        values.push(literal(key), value);\n    }\n    return values;\n}\n// Define and update any content queries\nfunction createContentQueriesFunction(queries, constantPool, name) {\n    const createStatements = [];\n    const updateStatements = [];\n    const tempAllocator = temporaryAllocator(updateStatements, TEMPORARY_NAME);\n    for (const query of queries) {\n        // creation, e.g. r3.contentQuery(dirIndex, somePredicate, true, null);\n        const args = [variable('dirIndex'), ...prepareQueryParams(query, constantPool)];\n        const queryInstruction = query.static ? Identifiers$1.staticContentQuery : Identifiers$1.contentQuery;\n        createStatements.push(importExpr(queryInstruction).callFn(args).toStmt());\n        // update, e.g. (r3.queryRefresh(tmp = r3.loadContentQuery()) && (ctx.someDir = tmp));\n        const temporary = tempAllocator();\n        const getQueryList = importExpr(Identifiers$1.loadContentQuery).callFn([]);\n        const refresh = importExpr(Identifiers$1.queryRefresh).callFn([temporary.set(getQueryList)]);\n        const updateDirective = variable(CONTEXT_NAME)\n            .prop(query.propertyName)\n            .set(query.first ? temporary.prop('first') : temporary);\n        updateStatements.push(refresh.and(updateDirective).toStmt());\n    }\n    const contentQueriesFnName = name ? `${name}_ContentQueries` : null;\n    return fn([\n        new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null),\n        new FnParam('dirIndex', null)\n    ], [\n        renderFlagCheckIfStmt(1 /* Create */, createStatements),\n        renderFlagCheckIfStmt(2 /* Update */, updateStatements)\n    ], INFERRED_TYPE, null, contentQueriesFnName);\n}\nfunction stringAsType(str) {\n    return expressionType(literal(str));\n}\nfunction stringMapAsType(map) {\n    const mapValues = Object.keys(map).map(key => {\n        const value = Array.isArray(map[key]) ? map[key][0] : map[key];\n        return {\n            key,\n            value: literal(value),\n            quoted: true,\n        };\n    });\n    return expressionType(literalMap(mapValues));\n}\nfunction stringArrayAsType(arr) {\n    return arr.length > 0 ? expressionType(literalArr(arr.map(value => literal(value)))) :\n        NONE_TYPE;\n}\nfunction createTypeForDef(meta, typeBase) {\n    // On the type side, remove newlines from the selector as it will need to fit into a TypeScript\n    // string literal, which must be on one line.\n    const selectorForType = (meta.selector || '').replace(/\\n/g, '');\n    return expressionType(importExpr(typeBase, [\n        typeWithParameters(meta.type, meta.typeArgumentCount),\n        stringAsType(selectorForType),\n        meta.exportAs !== null ? stringArrayAsType(meta.exportAs) : NONE_TYPE,\n        stringMapAsType(meta.inputs),\n        stringMapAsType(meta.outputs),\n        stringArrayAsType(meta.queries.map(q => q.propertyName)),\n    ]));\n}\n// Define and update any view queries\nfunction createViewQueriesFunction(viewQueries, constantPool, name) {\n    const createStatements = [];\n    const updateStatements = [];\n    const tempAllocator = temporaryAllocator(updateStatements, TEMPORARY_NAME);\n    viewQueries.forEach((query) => {\n        const queryInstruction = query.static ? Identifiers$1.staticViewQuery : Identifiers$1.viewQuery;\n        // creation, e.g. r3.viewQuery(somePredicate, true);\n        const queryDefinition = importExpr(queryInstruction).callFn(prepareQueryParams(query, constantPool));\n        createStatements.push(queryDefinition.toStmt());\n        // update, e.g. (r3.queryRefresh(tmp = r3.loadViewQuery()) && (ctx.someDir = tmp));\n        const temporary = tempAllocator();\n        const getQueryList = importExpr(Identifiers$1.loadViewQuery).callFn([]);\n        const refresh = importExpr(Identifiers$1.queryRefresh).callFn([temporary.set(getQueryList)]);\n        const updateDirective = variable(CONTEXT_NAME)\n            .prop(query.propertyName)\n            .set(query.first ? temporary.prop('first') : temporary);\n        updateStatements.push(refresh.and(updateDirective).toStmt());\n    });\n    const viewQueryFnName = name ? `${name}_Query` : null;\n    return fn([new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null)], [\n        renderFlagCheckIfStmt(1 /* Create */, createStatements),\n        renderFlagCheckIfStmt(2 /* Update */, updateStatements)\n    ], INFERRED_TYPE, null, viewQueryFnName);\n}\n// Return a host binding function or null if one is not necessary.\nfunction createHostBindingsFunction(meta, elVarExp, bindingContext, staticAttributesAndValues, styleBuilder, bindingParser, constantPool, hostVarsCount) {\n    const createStatements = [];\n    const updateStatements = [];\n    let totalHostVarsCount = hostVarsCount;\n    const hostBindingSourceSpan = meta.typeSourceSpan;\n    const directiveSummary = metadataAsSummary(meta);\n    let valueConverter;\n    const getValueConverter = () => {\n        if (!valueConverter) {\n            const hostVarsCountFn = (numSlots) => {\n                const originalVarsCount = totalHostVarsCount;\n                totalHostVarsCount += numSlots;\n                return originalVarsCount;\n            };\n            valueConverter = new ValueConverter(constantPool, () => error('Unexpected node'), // new nodes are illegal here\n            hostVarsCountFn, () => error('Unexpected pipe')); // pipes are illegal here\n        }\n        return valueConverter;\n    };\n    // Calculate host event bindings\n    const eventBindings = bindingParser.createDirectiveHostEventAsts(directiveSummary, hostBindingSourceSpan);\n    if (eventBindings && eventBindings.length) {\n        const listeners = createHostListeners(bindingContext, eventBindings, meta);\n        createStatements.push(...listeners);\n    }\n    // Calculate the host property bindings\n    const bindings = bindingParser.createBoundHostProperties(directiveSummary, hostBindingSourceSpan);\n    (bindings || []).forEach((binding) => {\n        const name = binding.name;\n        const stylingInputWasSet = styleBuilder.registerInputBasedOnName(name, binding.expression, binding.sourceSpan);\n        if (!stylingInputWasSet) {\n            // resolve literal arrays and literal objects\n            const value = binding.expression.visit(getValueConverter());\n            const bindingExpr = bindingFn(bindingContext, value);\n            const { bindingName, instruction, isAttribute } = getBindingNameAndInstruction(binding);\n            const securityContexts = bindingParser.calcPossibleSecurityContexts(meta.selector || '', bindingName, isAttribute)\n                .filter(context => context !== SecurityContext.NONE);\n            let sanitizerFn = null;\n            if (securityContexts.length) {\n                if (securityContexts.length === 2 &&\n                    securityContexts.indexOf(SecurityContext.URL) > -1 &&\n                    securityContexts.indexOf(SecurityContext.RESOURCE_URL) > -1) {\n                    // Special case for some URL attributes (such as \"src\" and \"href\") that may be a part\n                    // of different security contexts. In this case we use special santitization function and\n                    // select the actual sanitizer at runtime based on a tag name that is provided while\n                    // invoking sanitization function.\n                    sanitizerFn = importExpr(Identifiers$1.sanitizeUrlOrResourceUrl);\n                }\n                else {\n                    sanitizerFn = resolveSanitizationFn(securityContexts[0], isAttribute);\n                }\n            }\n            const isPropertyInstruction = instruction === Identifiers$1.property;\n            const instructionParams = isPropertyInstruction ?\n                [\n                    literal(bindingName),\n                    bindingExpr.currValExpr,\n                ] :\n                [\n                    elVarExp,\n                    literal(bindingName),\n                    importExpr(Identifiers$1.bind).callFn([bindingExpr.currValExpr]),\n                ];\n            if (sanitizerFn) {\n                instructionParams.push(sanitizerFn);\n            }\n            if (!isAttribute) {\n                if (!sanitizerFn) {\n                    // append `null` in front of `nativeOnly` flag if no sanitizer fn defined\n                    instructionParams.push(literal(null));\n                }\n                // host bindings must have nativeOnly prop set to true\n                instructionParams.push(literal(true));\n            }\n            updateStatements.push(...bindingExpr.stmts);\n            updateStatements.push(importExpr(instruction).callFn(instructionParams).toStmt());\n        }\n    });\n    // since we're dealing with directives/components and both have hostBinding\n    // functions, we need to generate a special hostAttrs instruction that deals\n    // with both the assignment of styling as well as static attributes to the host\n    // element. The instruction below will instruct all initial styling (styling\n    // that is inside of a host binding within a directive/component) to be attached\n    // to the host element alongside any of the provided host attributes that were\n    // collected earlier.\n    const hostAttrs = convertAttributesToExpressions(staticAttributesAndValues);\n    const hostInstruction = styleBuilder.buildHostAttrsInstruction(null, hostAttrs, constantPool);\n    if (hostInstruction) {\n        createStatements.push(createStylingStmt(hostInstruction, bindingContext, bindingFn));\n    }\n    if (styleBuilder.hasBindings) {\n        // singular style/class bindings (things like `[style.prop]` and `[class.name]`)\n        // MUST be registered on a given element within the component/directive\n        // templateFn/hostBindingsFn functions. The instruction below will figure out\n        // what all the bindings are and then generate the statements required to register\n        // those bindings to the element via `elementStyling`.\n        const elementStylingInstruction = styleBuilder.buildElementStylingInstruction(null, constantPool);\n        if (elementStylingInstruction) {\n            createStatements.push(createStylingStmt(elementStylingInstruction, bindingContext, bindingFn));\n        }\n        // finally each binding that was registered in the statement above will need to be added to\n        // the update block of a component/directive templateFn/hostBindingsFn so that the bindings\n        // are evaluated and updated for the element.\n        styleBuilder.buildUpdateLevelInstructions(getValueConverter()).forEach(instruction => {\n            updateStatements.push(createStylingStmt(instruction, bindingContext, bindingFn));\n        });\n    }\n    if (totalHostVarsCount) {\n        createStatements.unshift(importExpr(Identifiers$1.allocHostVars).callFn([literal(totalHostVarsCount)]).toStmt());\n    }\n    if (createStatements.length > 0 || updateStatements.length > 0) {\n        const hostBindingsFnName = meta.name ? `${meta.name}_HostBindings` : null;\n        const statements = [];\n        if (createStatements.length > 0) {\n            statements.push(renderFlagCheckIfStmt(1 /* Create */, createStatements));\n        }\n        if (updateStatements.length > 0) {\n            statements.push(renderFlagCheckIfStmt(2 /* Update */, updateStatements));\n        }\n        return fn([\n            new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null),\n            new FnParam(elVarExp.name, NUMBER_TYPE)\n        ], statements, INFERRED_TYPE, null, hostBindingsFnName);\n    }\n    return null;\n}\nfunction bindingFn(implicit, value) {\n    return convertPropertyBinding(null, implicit, value, 'b', BindingForm.TrySimple, () => error('Unexpected interpolation'));\n}\nfunction createStylingStmt(instruction, bindingContext, bindingFn) {\n    const params = instruction.buildParams(value => bindingFn(bindingContext, value).currValExpr);\n    return importExpr(instruction.reference, null, instruction.sourceSpan)\n        .callFn(params, instruction.sourceSpan)\n        .toStmt();\n}\nfunction getBindingNameAndInstruction(binding) {\n    let bindingName = binding.name;\n    let instruction;\n    // Check to see if this is an attr binding or a property binding\n    const attrMatches = bindingName.match(ATTR_REGEX);\n    if (attrMatches) {\n        bindingName = attrMatches[1];\n        instruction = Identifiers$1.elementAttribute;\n    }\n    else {\n        if (binding.isAnimation) {\n            bindingName = prepareSyntheticPropertyName(bindingName);\n            // host bindings that have a synthetic property (e.g. @foo) should always be rendered\n            // in the context of the component and not the parent. Therefore there is a special\n            // compatibility instruction available for this purpose.\n            instruction = Identifiers$1.componentHostSyntheticProperty;\n        }\n        else {\n            instruction = Identifiers$1.property;\n        }\n    }\n    return { bindingName, instruction, isAttribute: !!attrMatches };\n}\nfunction createHostListeners(bindingContext, eventBindings, meta) {\n    return eventBindings.map(binding => {\n        let bindingName = binding.name && sanitizeIdentifier(binding.name);\n        const bindingFnName = binding.type === 1 /* Animation */ ?\n            prepareSyntheticListenerFunctionName(bindingName, binding.targetOrPhase) :\n            bindingName;\n        const handlerName = meta.name && bindingName ? `${meta.name}_${bindingFnName}_HostBindingHandler` : null;\n        const params = prepareEventListenerParameters(BoundEvent.fromParsedEvent(binding), bindingContext, handlerName);\n        const instruction = binding.type == 1 /* Animation */ ? Identifiers$1.componentHostSyntheticListener : Identifiers$1.listener;\n        return importExpr(instruction).callFn(params).toStmt();\n    });\n}\nfunction metadataAsSummary(meta) {\n    // clang-format off\n    return {\n        // This is used by the BindingParser, which only deals with listeners and properties. There's no\n        // need to pass attributes to it.\n        hostAttributes: {},\n        hostListeners: meta.host.listeners,\n        hostProperties: meta.host.properties,\n    };\n    // clang-format on\n}\nfunction typeMapToExpressionMap(map, outputCtx) {\n    // Convert each map entry into another entry where the value is an expression importing the type.\n    const entries = Array.from(map).map(([key, type]) => [key, outputCtx.importExpr(type)]);\n    return new Map(entries);\n}\nconst HOST_REG_EXP$1 = /^(?:\\[([^\\]]+)\\])|(?:\\(([^\\)]+)\\))$/;\nfunction parseHostBindings(host) {\n    const attributes = {};\n    const listeners = {};\n    const properties = {};\n    const specialAttributes = {};\n    for (const key of Object.keys(host)) {\n        const value = host[key];\n        const matches = key.match(HOST_REG_EXP$1);\n        if (matches === null) {\n            switch (key) {\n                case 'class':\n                    if (typeof value !== 'string') {\n                        // TODO(alxhub): make this a diagnostic.\n                        throw new Error(`Class binding must be string`);\n                    }\n                    specialAttributes.classAttr = value;\n                    break;\n                case 'style':\n                    if (typeof value !== 'string') {\n                        // TODO(alxhub): make this a diagnostic.\n                        throw new Error(`Style binding must be string`);\n                    }\n                    specialAttributes.styleAttr = value;\n                    break;\n                default:\n                    if (typeof value === 'string') {\n                        attributes[key] = literal(value);\n                    }\n                    else {\n                        attributes[key] = value;\n                    }\n            }\n        }\n        else if (matches[1 /* Binding */] != null) {\n            if (typeof value !== 'string') {\n                // TODO(alxhub): make this a diagnostic.\n                throw new Error(`Property binding must be string`);\n            }\n            // synthetic properties (the ones that have a `@` as a prefix)\n            // are still treated the same as regular properties. Therefore\n            // there is no point in storing them in a separate map.\n            properties[matches[1 /* Binding */]] = value;\n        }\n        else if (matches[2 /* Event */] != null) {\n            if (typeof value !== 'string') {\n                // TODO(alxhub): make this a diagnostic.\n                throw new Error(`Event binding must be string`);\n            }\n            listeners[matches[2 /* Event */]] = value;\n        }\n    }\n    return { attributes, listeners, properties, specialAttributes };\n}\n/**\n * Verifies host bindings and returns the list of errors (if any). Empty array indicates that a\n * given set of host bindings has no errors.\n *\n * @param bindings set of host bindings to verify.\n * @param sourceSpan source span where host bindings were defined.\n * @returns array of errors associated with a given set of host bindings.\n */\nfunction verifyHostBindings(bindings, sourceSpan) {\n    const summary = metadataAsSummary({ host: bindings });\n    // TODO: abstract out host bindings verification logic and use it instead of\n    // creating events and properties ASTs to detect errors (FW-996)\n    const bindingParser = makeBindingParser();\n    bindingParser.createDirectiveHostEventAsts(summary, sourceSpan);\n    bindingParser.createBoundHostProperties(summary, sourceSpan);\n    return bindingParser.errors;\n}\nfunction compileStyles(styles, selector, hostSelector) {\n    const shadowCss = new ShadowCss();\n    return styles.map(style => { return shadowCss.shimCssText(style, selector, hostSelector); });\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An interface for retrieving documents by URL that the compiler uses\n * to load templates.\n */\nclass ResourceLoader {\n    get(url) { return ''; }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass CompilerFacadeImpl {\n    constructor(jitEvaluator = new JitEvaluator()) {\n        this.jitEvaluator = jitEvaluator;\n        this.R3ResolvedDependencyType = R3ResolvedDependencyType;\n        this.ResourceLoader = ResourceLoader;\n        this.elementSchemaRegistry = new DomElementSchemaRegistry();\n    }\n    compilePipe(angularCoreEnv, sourceMapUrl, facade) {\n        const res = compilePipeFromMetadata({\n            name: facade.name,\n            type: new WrappedNodeExpr(facade.type),\n            typeArgumentCount: facade.typeArgumentCount,\n            deps: convertR3DependencyMetadataArray(facade.deps),\n            pipeName: facade.pipeName,\n            pure: facade.pure,\n        });\n        return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, res.statements);\n    }\n    compileInjectable(angularCoreEnv, sourceMapUrl, facade) {\n        const { expression, statements } = compileInjectable({\n            name: facade.name,\n            type: new WrappedNodeExpr(facade.type),\n            typeArgumentCount: facade.typeArgumentCount,\n            providedIn: computeProvidedIn(facade.providedIn),\n            useClass: wrapExpression(facade, USE_CLASS),\n            useFactory: wrapExpression(facade, USE_FACTORY),\n            useValue: wrapExpression(facade, USE_VALUE),\n            useExisting: wrapExpression(facade, USE_EXISTING),\n            ctorDeps: convertR3DependencyMetadataArray(facade.ctorDeps),\n            userDeps: convertR3DependencyMetadataArray(facade.userDeps) || undefined,\n        });\n        return this.jitExpression(expression, angularCoreEnv, sourceMapUrl, statements);\n    }\n    compileInjector(angularCoreEnv, sourceMapUrl, facade) {\n        const meta = {\n            name: facade.name,\n            type: new WrappedNodeExpr(facade.type),\n            deps: convertR3DependencyMetadataArray(facade.deps),\n            providers: new WrappedNodeExpr(facade.providers),\n            imports: facade.imports.map(i => new WrappedNodeExpr(i)),\n        };\n        const res = compileInjector(meta);\n        return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, res.statements);\n    }\n    compileNgModule(angularCoreEnv, sourceMapUrl, facade) {\n        const meta = {\n            type: new WrappedNodeExpr(facade.type),\n            bootstrap: facade.bootstrap.map(wrapReference),\n            declarations: facade.declarations.map(wrapReference),\n            imports: facade.imports.map(wrapReference),\n            exports: facade.exports.map(wrapReference),\n            emitInline: true,\n            containsForwardDecls: false,\n            schemas: facade.schemas ? facade.schemas.map(wrapReference) : null,\n        };\n        const res = compileNgModule(meta);\n        return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);\n    }\n    compileDirective(angularCoreEnv, sourceMapUrl, facade) {\n        const constantPool = new ConstantPool();\n        const bindingParser = makeBindingParser();\n        const meta = convertDirectiveFacadeToMetadata(facade);\n        const res = compileDirectiveFromMetadata(meta, constantPool, bindingParser);\n        const preStatements = [...constantPool.statements, ...res.statements];\n        return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, preStatements);\n    }\n    compileComponent(angularCoreEnv, sourceMapUrl, facade) {\n        // The ConstantPool is a requirement of the JIT'er.\n        const constantPool = new ConstantPool();\n        const interpolationConfig = facade.interpolation ?\n            InterpolationConfig.fromArray(facade.interpolation) :\n            DEFAULT_INTERPOLATION_CONFIG;\n        // Parse the template and check for errors.\n        const template = parseTemplate(facade.template, sourceMapUrl, { preserveWhitespaces: facade.preserveWhitespaces, interpolationConfig });\n        if (template.errors !== undefined) {\n            const errors = template.errors.map(err => err.toString()).join(', ');\n            throw new Error(`Errors during JIT compilation of template for ${facade.name}: ${errors}`);\n        }\n        // Compile the component metadata, including template, into an expression.\n        // TODO(alxhub): implement inputs, outputs, queries, etc.\n        const res = compileComponentFromMetadata(Object.assign({}, facade, convertDirectiveFacadeToMetadata(facade), { selector: facade.selector || this.elementSchemaRegistry.getDefaultComponentElementName(), template, wrapDirectivesAndPipesInClosure: false, styles: facade.styles || [], encapsulation: facade.encapsulation, interpolation: interpolationConfig, changeDetection: facade.changeDetection, animations: facade.animations != null ? new WrappedNodeExpr(facade.animations) : null, viewProviders: facade.viewProviders != null ? new WrappedNodeExpr(facade.viewProviders) :\n                null, relativeContextFilePath: '', i18nUseExternalIds: true }), constantPool, makeBindingParser(interpolationConfig));\n        const preStatements = [...constantPool.statements, ...res.statements];\n        return this.jitExpression(res.expression, angularCoreEnv, `ng:///${facade.name}.js`, preStatements);\n    }\n    compileBase(angularCoreEnv, sourceMapUrl, facade) {\n        const constantPool = new ConstantPool();\n        const meta = Object.assign({}, facade, { viewQueries: facade.viewQueries ? facade.viewQueries.map(convertToR3QueryMetadata) :\n                facade.viewQueries, queries: facade.queries ? facade.queries.map(convertToR3QueryMetadata) : facade.queries });\n        const res = compileBaseDefFromMetadata(meta, constantPool);\n        return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, constantPool.statements);\n    }\n    createParseSourceSpan(kind, typeName, sourceUrl) {\n        return r3JitTypeSourceSpan(kind, typeName, sourceUrl);\n    }\n    /**\n     * JIT compiles an expression and returns the result of executing that expression.\n     *\n     * @param def the definition which will be compiled and executed to get the value to patch\n     * @param context an object map of @angular/core symbol names to symbols which will be available\n     * in the context of the compiled expression\n     * @param sourceUrl a URL to use for the source map of the compiled expression\n     * @param preStatements a collection of statements that should be evaluated before the expression.\n     */\n    jitExpression(def, context, sourceUrl, preStatements) {\n        // The ConstantPool may contain Statements which declare variables used in the final expression.\n        // Therefore, its statements need to precede the actual JIT operation. The final statement is a\n        // declaration of $def which is set to the expression being compiled.\n        const statements = [\n            ...preStatements,\n            new DeclareVarStmt('$def', def, undefined, [StmtModifier.Exported]),\n        ];\n        const res = this.jitEvaluator.evaluateStatements(sourceUrl, statements, new R3JitReflector(context), /* enableSourceMaps */ true);\n        return res['$def'];\n    }\n}\nconst USE_CLASS = Object.keys({ useClass: null })[0];\nconst USE_FACTORY = Object.keys({ useFactory: null })[0];\nconst USE_VALUE = Object.keys({ useValue: null })[0];\nconst USE_EXISTING = Object.keys({ useExisting: null })[0];\nconst wrapReference = function (value) {\n    const wrapped = new WrappedNodeExpr(value);\n    return { value: wrapped, type: wrapped };\n};\nfunction convertToR3QueryMetadata(facade) {\n    return Object.assign({}, facade, { predicate: Array.isArray(facade.predicate) ? facade.predicate :\n            new WrappedNodeExpr(facade.predicate), read: facade.read ? new WrappedNodeExpr(facade.read) : null, static: facade.static });\n}\nfunction convertDirectiveFacadeToMetadata(facade) {\n    const inputsFromMetadata = parseInputOutputs(facade.inputs || []);\n    const outputsFromMetadata = parseInputOutputs(facade.outputs || []);\n    const propMetadata = facade.propMetadata;\n    const inputsFromType = {};\n    const outputsFromType = {};\n    for (const field in propMetadata) {\n        if (propMetadata.hasOwnProperty(field)) {\n            propMetadata[field].forEach(ann => {\n                if (isInput(ann)) {\n                    inputsFromType[field] =\n                        ann.bindingPropertyName ? [ann.bindingPropertyName, field] : field;\n                }\n                else if (isOutput(ann)) {\n                    outputsFromType[field] = ann.bindingPropertyName || field;\n                }\n            });\n        }\n    }\n    return Object.assign({}, facade, { typeSourceSpan: facade.typeSourceSpan, type: new WrappedNodeExpr(facade.type), deps: convertR3DependencyMetadataArray(facade.deps), host: extractHostBindings(facade.host, facade.propMetadata, facade.typeSourceSpan), inputs: Object.assign({}, inputsFromMetadata, inputsFromType), outputs: Object.assign({}, outputsFromMetadata, outputsFromType), queries: facade.queries.map(convertToR3QueryMetadata), providers: facade.providers != null ? new WrappedNodeExpr(facade.providers) : null, viewQueries: facade.viewQueries.map(convertToR3QueryMetadata) });\n}\nfunction wrapExpression(obj, property) {\n    if (obj.hasOwnProperty(property)) {\n        return new WrappedNodeExpr(obj[property]);\n    }\n    else {\n        return undefined;\n    }\n}\nfunction computeProvidedIn(providedIn) {\n    if (providedIn == null || typeof providedIn === 'string') {\n        return new LiteralExpr(providedIn);\n    }\n    else {\n        return new WrappedNodeExpr(providedIn);\n    }\n}\nfunction convertR3DependencyMetadata(facade) {\n    let tokenExpr;\n    if (facade.token === null) {\n        tokenExpr = new LiteralExpr(null);\n    }\n    else if (facade.resolved === R3ResolvedDependencyType.Attribute) {\n        tokenExpr = new LiteralExpr(facade.token);\n    }\n    else {\n        tokenExpr = new WrappedNodeExpr(facade.token);\n    }\n    return {\n        token: tokenExpr,\n        resolved: facade.resolved,\n        host: facade.host,\n        optional: facade.optional,\n        self: facade.self,\n        skipSelf: facade.skipSelf\n    };\n}\nfunction convertR3DependencyMetadataArray(facades) {\n    return facades == null ? null : facades.map(convertR3DependencyMetadata);\n}\nfunction extractHostBindings(host, propMetadata, sourceSpan) {\n    // First parse the declarations from the metadata.\n    const bindings = parseHostBindings(host || {});\n    // After that check host bindings for errors\n    const errors = verifyHostBindings(bindings, sourceSpan);\n    if (errors.length) {\n        throw new Error(errors.map((error) => error.msg).join('\\n'));\n    }\n    // Next, loop over the properties of the object, looking for @HostBinding and @HostListener.\n    for (const field in propMetadata) {\n        if (propMetadata.hasOwnProperty(field)) {\n            propMetadata[field].forEach(ann => {\n                if (isHostBinding(ann)) {\n                    bindings.properties[ann.hostPropertyName || field] = field;\n                }\n                else if (isHostListener(ann)) {\n                    bindings.listeners[ann.eventName || field] = `${field}(${(ann.args || []).join(',')})`;\n                }\n            });\n        }\n    }\n    return bindings;\n}\nfunction isHostBinding(value) {\n    return value.ngMetadataName === 'HostBinding';\n}\nfunction isHostListener(value) {\n    return value.ngMetadataName === 'HostListener';\n}\nfunction isInput(value) {\n    return value.ngMetadataName === 'Input';\n}\nfunction isOutput(value) {\n    return value.ngMetadataName === 'Output';\n}\nfunction parseInputOutputs(values) {\n    return values.reduce((map, value) => {\n        const [field, property] = value.split(',').map(piece => piece.trim());\n        map[field] = property || field;\n        return map;\n    }, {});\n}\nfunction publishFacade(global) {\n    const ng = global.ng || (global.ng = {});\n    ng.ɵcompilerFacade = new CompilerFacadeImpl();\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst VERSION$1 = new Version('8.0.0');\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass CompilerConfig {\n    constructor({ defaultEncapsulation = ViewEncapsulation.Emulated, useJit = true, jitDevMode = false, missingTranslation = null, preserveWhitespaces, strictInjectionParameters } = {}) {\n        this.defaultEncapsulation = defaultEncapsulation;\n        this.useJit = !!useJit;\n        this.jitDevMode = !!jitDevMode;\n        this.missingTranslation = missingTranslation;\n        this.preserveWhitespaces = preserveWhitespacesDefault(noUndefined(preserveWhitespaces));\n        this.strictInjectionParameters = strictInjectionParameters === true;\n    }\n}\nfunction preserveWhitespacesDefault(preserveWhitespacesOption, defaultSetting = false) {\n    return preserveWhitespacesOption === null ? defaultSetting : preserveWhitespacesOption;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass DirectiveNormalizer {\n    constructor(_resourceLoader, _urlResolver, _htmlParser, _config) {\n        this._resourceLoader = _resourceLoader;\n        this._urlResolver = _urlResolver;\n        this._htmlParser = _htmlParser;\n        this._config = _config;\n        this._resourceLoaderCache = new Map();\n    }\n    clearCache() { this._resourceLoaderCache.clear(); }\n    clearCacheFor(normalizedDirective) {\n        if (!normalizedDirective.isComponent) {\n            return;\n        }\n        const template = normalizedDirective.template;\n        this._resourceLoaderCache.delete(template.templateUrl);\n        template.externalStylesheets.forEach((stylesheet) => { this._resourceLoaderCache.delete(stylesheet.moduleUrl); });\n    }\n    _fetch(url) {\n        let result = this._resourceLoaderCache.get(url);\n        if (!result) {\n            result = this._resourceLoader.get(url);\n            this._resourceLoaderCache.set(url, result);\n        }\n        return result;\n    }\n    normalizeTemplate(prenormData) {\n        if (isDefined(prenormData.template)) {\n            if (isDefined(prenormData.templateUrl)) {\n                throw syntaxError(`'${stringify(prenormData.componentType)}' component cannot define both template and templateUrl`);\n            }\n            if (typeof prenormData.template !== 'string') {\n                throw syntaxError(`The template specified for component ${stringify(prenormData.componentType)} is not a string`);\n            }\n        }\n        else if (isDefined(prenormData.templateUrl)) {\n            if (typeof prenormData.templateUrl !== 'string') {\n                throw syntaxError(`The templateUrl specified for component ${stringify(prenormData.componentType)} is not a string`);\n            }\n        }\n        else {\n            throw syntaxError(`No template specified for component ${stringify(prenormData.componentType)}`);\n        }\n        if (isDefined(prenormData.preserveWhitespaces) &&\n            typeof prenormData.preserveWhitespaces !== 'boolean') {\n            throw syntaxError(`The preserveWhitespaces option for component ${stringify(prenormData.componentType)} must be a boolean`);\n        }\n        return SyncAsync.then(this._preParseTemplate(prenormData), (preparsedTemplate) => this._normalizeTemplateMetadata(prenormData, preparsedTemplate));\n    }\n    _preParseTemplate(prenomData) {\n        let template;\n        let templateUrl;\n        if (prenomData.template != null) {\n            template = prenomData.template;\n            templateUrl = prenomData.moduleUrl;\n        }\n        else {\n            templateUrl = this._urlResolver.resolve(prenomData.moduleUrl, prenomData.templateUrl);\n            template = this._fetch(templateUrl);\n        }\n        return SyncAsync.then(template, (template) => this._preparseLoadedTemplate(prenomData, template, templateUrl));\n    }\n    _preparseLoadedTemplate(prenormData, template, templateAbsUrl) {\n        const isInline = !!prenormData.template;\n        const interpolationConfig = InterpolationConfig.fromArray(prenormData.interpolation);\n        const templateUrl = templateSourceUrl({ reference: prenormData.ngModuleType }, { type: { reference: prenormData.componentType } }, { isInline, templateUrl: templateAbsUrl });\n        const rootNodesAndErrors = this._htmlParser.parse(template, templateUrl, { tokenizeExpansionForms: true, interpolationConfig });\n        if (rootNodesAndErrors.errors.length > 0) {\n            const errorString = rootNodesAndErrors.errors.join('\\n');\n            throw syntaxError(`Template parse errors:\\n${errorString}`);\n        }\n        const templateMetadataStyles = this._normalizeStylesheet(new CompileStylesheetMetadata({ styles: prenormData.styles, moduleUrl: prenormData.moduleUrl }));\n        const visitor = new TemplatePreparseVisitor();\n        visitAll$1(visitor, rootNodesAndErrors.rootNodes);\n        const templateStyles = this._normalizeStylesheet(new CompileStylesheetMetadata({ styles: visitor.styles, styleUrls: visitor.styleUrls, moduleUrl: templateAbsUrl }));\n        const styles = templateMetadataStyles.styles.concat(templateStyles.styles);\n        const inlineStyleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);\n        const styleUrls = this\n            ._normalizeStylesheet(new CompileStylesheetMetadata({ styleUrls: prenormData.styleUrls, moduleUrl: prenormData.moduleUrl }))\n            .styleUrls;\n        return {\n            template,\n            templateUrl: templateAbsUrl, isInline,\n            htmlAst: rootNodesAndErrors, styles, inlineStyleUrls, styleUrls,\n            ngContentSelectors: visitor.ngContentSelectors,\n        };\n    }\n    _normalizeTemplateMetadata(prenormData, preparsedTemplate) {\n        return SyncAsync.then(this._loadMissingExternalStylesheets(preparsedTemplate.styleUrls.concat(preparsedTemplate.inlineStyleUrls)), (externalStylesheets) => this._normalizeLoadedTemplateMetadata(prenormData, preparsedTemplate, externalStylesheets));\n    }\n    _normalizeLoadedTemplateMetadata(prenormData, preparsedTemplate, stylesheets) {\n        // Algorithm:\n        // - produce exactly 1 entry per original styleUrl in\n        // CompileTemplateMetadata.externalStylesheets with all styles inlined\n        // - inline all styles that are referenced by the template into CompileTemplateMetadata.styles.\n        // Reason: be able to determine how many stylesheets there are even without loading\n        // the template nor the stylesheets, so we can create a stub for TypeScript always synchronously\n        // (as resource loading may be async)\n        const styles = [...preparsedTemplate.styles];\n        this._inlineStyles(preparsedTemplate.inlineStyleUrls, stylesheets, styles);\n        const styleUrls = preparsedTemplate.styleUrls;\n        const externalStylesheets = styleUrls.map(styleUrl => {\n            const stylesheet = stylesheets.get(styleUrl);\n            const styles = [...stylesheet.styles];\n            this._inlineStyles(stylesheet.styleUrls, stylesheets, styles);\n            return new CompileStylesheetMetadata({ moduleUrl: styleUrl, styles: styles });\n        });\n        let encapsulation = prenormData.encapsulation;\n        if (encapsulation == null) {\n            encapsulation = this._config.defaultEncapsulation;\n        }\n        if (encapsulation === ViewEncapsulation.Emulated && styles.length === 0 &&\n            styleUrls.length === 0) {\n            encapsulation = ViewEncapsulation.None;\n        }\n        return new CompileTemplateMetadata({\n            encapsulation,\n            template: preparsedTemplate.template,\n            templateUrl: preparsedTemplate.templateUrl,\n            htmlAst: preparsedTemplate.htmlAst, styles, styleUrls,\n            ngContentSelectors: preparsedTemplate.ngContentSelectors,\n            animations: prenormData.animations,\n            interpolation: prenormData.interpolation,\n            isInline: preparsedTemplate.isInline, externalStylesheets,\n            preserveWhitespaces: preserveWhitespacesDefault(prenormData.preserveWhitespaces, this._config.preserveWhitespaces),\n        });\n    }\n    _inlineStyles(styleUrls, stylesheets, targetStyles) {\n        styleUrls.forEach(styleUrl => {\n            const stylesheet = stylesheets.get(styleUrl);\n            stylesheet.styles.forEach(style => targetStyles.push(style));\n            this._inlineStyles(stylesheet.styleUrls, stylesheets, targetStyles);\n        });\n    }\n    _loadMissingExternalStylesheets(styleUrls, loadedStylesheets = new Map()) {\n        return SyncAsync.then(SyncAsync.all(styleUrls.filter((styleUrl) => !loadedStylesheets.has(styleUrl))\n            .map(styleUrl => SyncAsync.then(this._fetch(styleUrl), (loadedStyle) => {\n            const stylesheet = this._normalizeStylesheet(new CompileStylesheetMetadata({ styles: [loadedStyle], moduleUrl: styleUrl }));\n            loadedStylesheets.set(styleUrl, stylesheet);\n            return this._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets);\n        }))), (_) => loadedStylesheets);\n    }\n    _normalizeStylesheet(stylesheet) {\n        const moduleUrl = stylesheet.moduleUrl;\n        const allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable)\n            .map(url => this._urlResolver.resolve(moduleUrl, url));\n        const allStyles = stylesheet.styles.map(style => {\n            const styleWithImports = extractStyleUrls(this._urlResolver, moduleUrl, style);\n            allStyleUrls.push(...styleWithImports.styleUrls);\n            return styleWithImports.style;\n        });\n        return new CompileStylesheetMetadata({ styles: allStyles, styleUrls: allStyleUrls, moduleUrl: moduleUrl });\n    }\n}\nclass TemplatePreparseVisitor {\n    constructor() {\n        this.ngContentSelectors = [];\n        this.styles = [];\n        this.styleUrls = [];\n        this.ngNonBindableStackCount = 0;\n    }\n    visitElement(ast, context) {\n        const preparsedElement = preparseElement(ast);\n        switch (preparsedElement.type) {\n            case PreparsedElementType.NG_CONTENT:\n                if (this.ngNonBindableStackCount === 0) {\n                    this.ngContentSelectors.push(preparsedElement.selectAttr);\n                }\n                break;\n            case PreparsedElementType.STYLE:\n                let textContent = '';\n                ast.children.forEach(child => {\n                    if (child instanceof Text$3) {\n                        textContent += child.value;\n                    }\n                });\n                this.styles.push(textContent);\n                break;\n            case PreparsedElementType.STYLESHEET:\n                this.styleUrls.push(preparsedElement.hrefAttr);\n                break;\n            default:\n                break;\n        }\n        if (preparsedElement.nonBindable) {\n            this.ngNonBindableStackCount++;\n        }\n        visitAll$1(this, ast.children);\n        if (preparsedElement.nonBindable) {\n            this.ngNonBindableStackCount--;\n        }\n        return null;\n    }\n    visitExpansion(ast, context) { visitAll$1(this, ast.cases); }\n    visitExpansionCase(ast, context) {\n        visitAll$1(this, ast.expression);\n    }\n    visitComment(ast, context) { return null; }\n    visitAttribute(ast, context) { return null; }\n    visitText(ast, context) { return null; }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst QUERY_METADATA_IDENTIFIERS = [\n    createViewChild,\n    createViewChildren,\n    createContentChild,\n    createContentChildren,\n];\n/*\n * Resolve a `Type` for {@link Directive}.\n *\n * This interface can be overridden by the application developer to create custom behavior.\n *\n * See {@link Compiler}\n */\nclass DirectiveResolver {\n    constructor(_reflector) {\n        this._reflector = _reflector;\n    }\n    isDirective(type) {\n        const typeMetadata = this._reflector.annotations(resolveForwardRef(type));\n        return typeMetadata && typeMetadata.some(isDirectiveMetadata);\n    }\n    resolve(type, throwIfNotFound = true) {\n        const typeMetadata = this._reflector.annotations(resolveForwardRef(type));\n        if (typeMetadata) {\n            const metadata = findLast(typeMetadata, isDirectiveMetadata);\n            if (metadata) {\n                const propertyMetadata = this._reflector.propMetadata(type);\n                const guards = this._reflector.guards(type);\n                return this._mergeWithPropertyMetadata(metadata, propertyMetadata, guards, type);\n            }\n        }\n        if (throwIfNotFound) {\n            throw new Error(`No Directive annotation found on ${stringify(type)}`);\n        }\n        return null;\n    }\n    _mergeWithPropertyMetadata(dm, propertyMetadata, guards, directiveType) {\n        const inputs = [];\n        const outputs = [];\n        const host = {};\n        const queries = {};\n        Object.keys(propertyMetadata).forEach((propName) => {\n            const input = findLast(propertyMetadata[propName], (a) => createInput.isTypeOf(a));\n            if (input) {\n                if (input.bindingPropertyName) {\n                    inputs.push(`${propName}: ${input.bindingPropertyName}`);\n                }\n                else {\n                    inputs.push(propName);\n                }\n            }\n            const output = findLast(propertyMetadata[propName], (a) => createOutput.isTypeOf(a));\n            if (output) {\n                if (output.bindingPropertyName) {\n                    outputs.push(`${propName}: ${output.bindingPropertyName}`);\n                }\n                else {\n                    outputs.push(propName);\n                }\n            }\n            const hostBindings = propertyMetadata[propName].filter(a => createHostBinding.isTypeOf(a));\n            hostBindings.forEach(hostBinding => {\n                if (hostBinding.hostPropertyName) {\n                    const startWith = hostBinding.hostPropertyName[0];\n                    if (startWith === '(') {\n                        throw new Error(`@HostBinding can not bind to events. Use @HostListener instead.`);\n                    }\n                    else if (startWith === '[') {\n                        throw new Error(`@HostBinding parameter should be a property name, 'class.<name>', or 'attr.<name>'.`);\n                    }\n                    host[`[${hostBinding.hostPropertyName}]`] = propName;\n                }\n                else {\n                    host[`[${propName}]`] = propName;\n                }\n            });\n            const hostListeners = propertyMetadata[propName].filter(a => createHostListener.isTypeOf(a));\n            hostListeners.forEach(hostListener => {\n                const args = hostListener.args || [];\n                host[`(${hostListener.eventName})`] = `${propName}(${args.join(',')})`;\n            });\n            const query = findLast(propertyMetadata[propName], (a) => QUERY_METADATA_IDENTIFIERS.some(i => i.isTypeOf(a)));\n            if (query) {\n                queries[propName] = query;\n            }\n        });\n        return this._merge(dm, inputs, outputs, host, queries, guards, directiveType);\n    }\n    _extractPublicName(def) { return splitAtColon(def, [null, def])[1].trim(); }\n    _dedupeBindings(bindings) {\n        const names = new Set();\n        const publicNames = new Set();\n        const reversedResult = [];\n        // go last to first to allow later entries to overwrite previous entries\n        for (let i = bindings.length - 1; i >= 0; i--) {\n            const binding = bindings[i];\n            const name = this._extractPublicName(binding);\n            publicNames.add(name);\n            if (!names.has(name)) {\n                names.add(name);\n                reversedResult.push(binding);\n            }\n        }\n        return reversedResult.reverse();\n    }\n    _merge(directive, inputs, outputs, host, queries, guards, directiveType) {\n        const mergedInputs = this._dedupeBindings(directive.inputs ? directive.inputs.concat(inputs) : inputs);\n        const mergedOutputs = this._dedupeBindings(directive.outputs ? directive.outputs.concat(outputs) : outputs);\n        const mergedHost = directive.host ? Object.assign({}, directive.host, host) : host;\n        const mergedQueries = directive.queries ? Object.assign({}, directive.queries, queries) : queries;\n        if (createComponent.isTypeOf(directive)) {\n            const comp = directive;\n            return createComponent({\n                selector: comp.selector,\n                inputs: mergedInputs,\n                outputs: mergedOutputs,\n                host: mergedHost,\n                exportAs: comp.exportAs,\n                moduleId: comp.moduleId,\n                queries: mergedQueries,\n                changeDetection: comp.changeDetection,\n                providers: comp.providers,\n                viewProviders: comp.viewProviders,\n                entryComponents: comp.entryComponents,\n                template: comp.template,\n                templateUrl: comp.templateUrl,\n                styles: comp.styles,\n                styleUrls: comp.styleUrls,\n                encapsulation: comp.encapsulation,\n                animations: comp.animations,\n                interpolation: comp.interpolation,\n                preserveWhitespaces: directive.preserveWhitespaces,\n            });\n        }\n        else {\n            return createDirective({\n                selector: directive.selector,\n                inputs: mergedInputs,\n                outputs: mergedOutputs,\n                host: mergedHost,\n                exportAs: directive.exportAs,\n                queries: mergedQueries,\n                providers: directive.providers, guards\n            });\n        }\n    }\n}\nfunction isDirectiveMetadata(type) {\n    return createDirective.isTypeOf(type) || createComponent.isTypeOf(type);\n}\nfunction findLast(arr, condition) {\n    for (let i = arr.length - 1; i >= 0; i--) {\n        if (condition(arr[i])) {\n            return arr[i];\n        }\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An i18n error.\n */\nclass I18nError extends ParseError {\n    constructor(span, msg) { super(span, msg); }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst _I18N_ATTR = 'i18n';\nconst _I18N_ATTR_PREFIX = 'i18n-';\nconst _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;\nconst MEANING_SEPARATOR = '|';\nconst ID_SEPARATOR = '@@';\nlet i18nCommentsWarned = false;\n/**\n * Extract translatable messages from an html AST\n */\nfunction extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) {\n    const visitor = new _Visitor$2(implicitTags, implicitAttrs);\n    return visitor.extract(nodes, interpolationConfig);\n}\nfunction mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) {\n    const visitor = new _Visitor$2(implicitTags, implicitAttrs);\n    return visitor.merge(nodes, translations, interpolationConfig);\n}\nclass ExtractionResult {\n    constructor(messages, errors) {\n        this.messages = messages;\n        this.errors = errors;\n    }\n}\nvar _VisitorMode;\n(function (_VisitorMode) {\n    _VisitorMode[_VisitorMode[\"Extract\"] = 0] = \"Extract\";\n    _VisitorMode[_VisitorMode[\"Merge\"] = 1] = \"Merge\";\n})(_VisitorMode || (_VisitorMode = {}));\n/**\n * This Visitor is used:\n * 1. to extract all the translatable strings from an html AST (see `extract()`),\n * 2. to replace the translatable strings with the actual translations (see `merge()`)\n *\n * @internal\n */\nclass _Visitor$2 {\n    constructor(_implicitTags, _implicitAttrs) {\n        this._implicitTags = _implicitTags;\n        this._implicitAttrs = _implicitAttrs;\n    }\n    /**\n     * Extracts the messages from the tree\n     */\n    extract(nodes, interpolationConfig) {\n        this._init(_VisitorMode.Extract, interpolationConfig);\n        nodes.forEach(node => node.visit(this, null));\n        if (this._inI18nBlock) {\n            this._reportError(nodes[nodes.length - 1], 'Unclosed block');\n        }\n        return new ExtractionResult(this._messages, this._errors);\n    }\n    /**\n     * Returns a tree where all translatable nodes are translated\n     */\n    merge(nodes, translations, interpolationConfig) {\n        this._init(_VisitorMode.Merge, interpolationConfig);\n        this._translations = translations;\n        // Construct a single fake root element\n        const wrapper = new Element$1('wrapper', [], nodes, undefined, undefined, undefined);\n        const translatedNode = wrapper.visit(this, null);\n        if (this._inI18nBlock) {\n            this._reportError(nodes[nodes.length - 1], 'Unclosed block');\n        }\n        return new ParseTreeResult(translatedNode.children, this._errors);\n    }\n    visitExpansionCase(icuCase, context) {\n        // Parse cases for translatable html attributes\n        const expression = visitAll$1(this, icuCase.expression, context);\n        if (this._mode === _VisitorMode.Merge) {\n            return new ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);\n        }\n    }\n    visitExpansion(icu, context) {\n        this._mayBeAddBlockChildren(icu);\n        const wasInIcu = this._inIcu;\n        if (!this._inIcu) {\n            // nested ICU messages should not be extracted but top-level translated as a whole\n            if (this._isInTranslatableSection) {\n                this._addMessage([icu]);\n            }\n            this._inIcu = true;\n        }\n        const cases = visitAll$1(this, icu.cases, context);\n        if (this._mode === _VisitorMode.Merge) {\n            icu = new Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);\n        }\n        this._inIcu = wasInIcu;\n        return icu;\n    }\n    visitComment(comment, context) {\n        const isOpening = _isOpeningComment(comment);\n        if (isOpening && this._isInTranslatableSection) {\n            this._reportError(comment, 'Could not start a block inside a translatable section');\n            return;\n        }\n        const isClosing = _isClosingComment(comment);\n        if (isClosing && !this._inI18nBlock) {\n            this._reportError(comment, 'Trying to close an unopened block');\n            return;\n        }\n        if (!this._inI18nNode && !this._inIcu) {\n            if (!this._inI18nBlock) {\n                if (isOpening) {\n                    // deprecated from v5 you should use <ng-container i18n> instead of i18n comments\n                    if (!i18nCommentsWarned && console && console.warn) {\n                        i18nCommentsWarned = true;\n                        const details = comment.sourceSpan.details ? `, ${comment.sourceSpan.details}` : '';\n                        // TODO(ocombe): use a log service once there is a public one available\n                        console.warn(`I18n comments are deprecated, use an <ng-container> element instead (${comment.sourceSpan.start}${details})`);\n                    }\n                    this._inI18nBlock = true;\n                    this._blockStartDepth = this._depth;\n                    this._blockChildren = [];\n                    this._blockMeaningAndDesc =\n                        comment.value.replace(_I18N_COMMENT_PREFIX_REGEXP, '').trim();\n                    this._openTranslatableSection(comment);\n                }\n            }\n            else {\n                if (isClosing) {\n                    if (this._depth == this._blockStartDepth) {\n                        this._closeTranslatableSection(comment, this._blockChildren);\n                        this._inI18nBlock = false;\n                        const message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc);\n                        // merge attributes in sections\n                        const nodes = this._translateMessage(comment, message);\n                        return visitAll$1(this, nodes);\n                    }\n                    else {\n                        this._reportError(comment, 'I18N blocks should not cross element boundaries');\n                        return;\n                    }\n                }\n            }\n        }\n    }\n    visitText(text, context) {\n        if (this._isInTranslatableSection) {\n            this._mayBeAddBlockChildren(text);\n        }\n        return text;\n    }\n    visitElement(el, context) {\n        this._mayBeAddBlockChildren(el);\n        this._depth++;\n        const wasInI18nNode = this._inI18nNode;\n        const wasInImplicitNode = this._inImplicitNode;\n        let childNodes = [];\n        let translatedChildNodes = undefined;\n        // Extract:\n        // - top level nodes with the (implicit) \"i18n\" attribute if not already in a section\n        // - ICU messages\n        const i18nAttr = _getI18nAttr(el);\n        const i18nMeta = i18nAttr ? i18nAttr.value : '';\n        const isImplicit = this._implicitTags.some(tag => el.name === tag) && !this._inIcu &&\n            !this._isInTranslatableSection;\n        const isTopLevelImplicit = !wasInImplicitNode && isImplicit;\n        this._inImplicitNode = wasInImplicitNode || isImplicit;\n        if (!this._isInTranslatableSection && !this._inIcu) {\n            if (i18nAttr || isTopLevelImplicit) {\n                this._inI18nNode = true;\n                const message = this._addMessage(el.children, i18nMeta);\n                translatedChildNodes = this._translateMessage(el, message);\n            }\n            if (this._mode == _VisitorMode.Extract) {\n                const isTranslatable = i18nAttr || isTopLevelImplicit;\n                if (isTranslatable)\n                    this._openTranslatableSection(el);\n                visitAll$1(this, el.children);\n                if (isTranslatable)\n                    this._closeTranslatableSection(el, el.children);\n            }\n        }\n        else {\n            if (i18nAttr || isTopLevelImplicit) {\n                this._reportError(el, 'Could not mark an element as translatable inside a translatable section');\n            }\n            if (this._mode == _VisitorMode.Extract) {\n                // Descend into child nodes for extraction\n                visitAll$1(this, el.children);\n            }\n        }\n        if (this._mode === _VisitorMode.Merge) {\n            const visitNodes = translatedChildNodes || el.children;\n            visitNodes.forEach(child => {\n                const visited = child.visit(this, context);\n                if (visited && !this._isInTranslatableSection) {\n                    // Do not add the children from translatable sections (= i18n blocks here)\n                    // They will be added later in this loop when the block closes (i.e. on `<!-- /i18n -->`)\n                    childNodes = childNodes.concat(visited);\n                }\n            });\n        }\n        this._visitAttributesOf(el);\n        this._depth--;\n        this._inI18nNode = wasInI18nNode;\n        this._inImplicitNode = wasInImplicitNode;\n        if (this._mode === _VisitorMode.Merge) {\n            const translatedAttrs = this._translateAttributes(el);\n            return new Element$1(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);\n        }\n        return null;\n    }\n    visitAttribute(attribute, context) {\n        throw new Error('unreachable code');\n    }\n    _init(mode, interpolationConfig) {\n        this._mode = mode;\n        this._inI18nBlock = false;\n        this._inI18nNode = false;\n        this._depth = 0;\n        this._inIcu = false;\n        this._msgCountAtSectionStart = undefined;\n        this._errors = [];\n        this._messages = [];\n        this._inImplicitNode = false;\n        this._createI18nMessage = createI18nMessageFactory(interpolationConfig);\n    }\n    // looks for translatable attributes\n    _visitAttributesOf(el) {\n        const explicitAttrNameToValue = {};\n        const implicitAttrNames = this._implicitAttrs[el.name] || [];\n        el.attrs.filter(attr => attr.name.startsWith(_I18N_ATTR_PREFIX))\n            .forEach(attr => explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] =\n            attr.value);\n        el.attrs.forEach(attr => {\n            if (attr.name in explicitAttrNameToValue) {\n                this._addMessage([attr], explicitAttrNameToValue[attr.name]);\n            }\n            else if (implicitAttrNames.some(name => attr.name === name)) {\n                this._addMessage([attr]);\n            }\n        });\n    }\n    // add a translatable message\n    _addMessage(ast, msgMeta) {\n        if (ast.length == 0 ||\n            ast.length == 1 && ast[0] instanceof Attribute && !ast[0].value) {\n            // Do not create empty messages\n            return null;\n        }\n        const { meaning, description, id } = _parseMessageMeta(msgMeta);\n        const message = this._createI18nMessage(ast, meaning, description, id);\n        this._messages.push(message);\n        return message;\n    }\n    // Translates the given message given the `TranslationBundle`\n    // This is used for translating elements / blocks - see `_translateAttributes` for attributes\n    // no-op when called in extraction mode (returns [])\n    _translateMessage(el, message) {\n        if (message && this._mode === _VisitorMode.Merge) {\n            const nodes = this._translations.get(message);\n            if (nodes) {\n                return nodes;\n            }\n            this._reportError(el, `Translation unavailable for message id=\"${this._translations.digest(message)}\"`);\n        }\n        return [];\n    }\n    // translate the attributes of an element and remove i18n specific attributes\n    _translateAttributes(el) {\n        const attributes = el.attrs;\n        const i18nParsedMessageMeta = {};\n        attributes.forEach(attr => {\n            if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {\n                i18nParsedMessageMeta[attr.name.slice(_I18N_ATTR_PREFIX.length)] =\n                    _parseMessageMeta(attr.value);\n            }\n        });\n        const translatedAttributes = [];\n        attributes.forEach((attr) => {\n            if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {\n                // strip i18n specific attributes\n                return;\n            }\n            if (attr.value && attr.value != '' && i18nParsedMessageMeta.hasOwnProperty(attr.name)) {\n                const { meaning, description, id } = i18nParsedMessageMeta[attr.name];\n                const message = this._createI18nMessage([attr], meaning, description, id);\n                const nodes = this._translations.get(message);\n                if (nodes) {\n                    if (nodes.length == 0) {\n                        translatedAttributes.push(new Attribute(attr.name, '', attr.sourceSpan));\n                    }\n                    else if (nodes[0] instanceof Text$3) {\n                        const value = nodes[0].value;\n                        translatedAttributes.push(new Attribute(attr.name, value, attr.sourceSpan));\n                    }\n                    else {\n                        this._reportError(el, `Unexpected translation for attribute \"${attr.name}\" (id=\"${id || this._translations.digest(message)}\")`);\n                    }\n                }\n                else {\n                    this._reportError(el, `Translation unavailable for attribute \"${attr.name}\" (id=\"${id || this._translations.digest(message)}\")`);\n                }\n            }\n            else {\n                translatedAttributes.push(attr);\n            }\n        });\n        return translatedAttributes;\n    }\n    /**\n     * Add the node as a child of the block when:\n     * - we are in a block,\n     * - we are not inside a ICU message (those are handled separately),\n     * - the node is a \"direct child\" of the block\n     */\n    _mayBeAddBlockChildren(node) {\n        if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {\n            this._blockChildren.push(node);\n        }\n    }\n    /**\n     * Marks the start of a section, see `_closeTranslatableSection`\n     */\n    _openTranslatableSection(node) {\n        if (this._isInTranslatableSection) {\n            this._reportError(node, 'Unexpected section start');\n        }\n        else {\n            this._msgCountAtSectionStart = this._messages.length;\n        }\n    }\n    /**\n     * A translatable section could be:\n     * - the content of translatable element,\n     * - nodes between `<!-- i18n -->` and `<!-- /i18n -->` comments\n     */\n    get _isInTranslatableSection() {\n        return this._msgCountAtSectionStart !== void 0;\n    }\n    /**\n     * Terminates a section.\n     *\n     * If a section has only one significant children (comments not significant) then we should not\n     * keep the message from this children:\n     *\n     * `<p i18n=\"meaning|description\">{ICU message}</p>` would produce two messages:\n     * - one for the <p> content with meaning and description,\n     * - another one for the ICU message.\n     *\n     * In this case the last message is discarded as it contains less information (the AST is\n     * otherwise identical).\n     *\n     * Note that we should still keep messages extracted from attributes inside the section (ie in the\n     * ICU message here)\n     */\n    _closeTranslatableSection(node, directChildren) {\n        if (!this._isInTranslatableSection) {\n            this._reportError(node, 'Unexpected section end');\n            return;\n        }\n        const startIndex = this._msgCountAtSectionStart;\n        const significantChildren = directChildren.reduce((count, node) => count + (node instanceof Comment ? 0 : 1), 0);\n        if (significantChildren == 1) {\n            for (let i = this._messages.length - 1; i >= startIndex; i--) {\n                const ast = this._messages[i].nodes;\n                if (!(ast.length == 1 && ast[0] instanceof Text$1)) {\n                    this._messages.splice(i, 1);\n                    break;\n                }\n            }\n        }\n        this._msgCountAtSectionStart = undefined;\n    }\n    _reportError(node, msg) {\n        this._errors.push(new I18nError(node.sourceSpan, msg));\n    }\n}\nfunction _isOpeningComment(n) {\n    return !!(n instanceof Comment && n.value && n.value.startsWith('i18n'));\n}\nfunction _isClosingComment(n) {\n    return !!(n instanceof Comment && n.value && n.value === '/i18n');\n}\nfunction _getI18nAttr(p) {\n    return p.attrs.find(attr => attr.name === _I18N_ATTR) || null;\n}\nfunction _parseMessageMeta(i18n) {\n    if (!i18n)\n        return { meaning: '', description: '', id: '' };\n    const idIndex = i18n.indexOf(ID_SEPARATOR);\n    const descIndex = i18n.indexOf(MEANING_SEPARATOR);\n    const [meaningAndDesc, id] = (idIndex > -1) ? [i18n.slice(0, idIndex), i18n.slice(idIndex + 2)] : [i18n, ''];\n    const [meaning, description] = (descIndex > -1) ?\n        [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] :\n        ['', meaningAndDesc];\n    return { meaning, description, id };\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass XmlTagDefinition {\n    constructor() {\n        this.closedByParent = false;\n        this.contentType = TagContentType.PARSABLE_DATA;\n        this.isVoid = false;\n        this.ignoreFirstLf = false;\n        this.canSelfClose = true;\n    }\n    requireExtraParent(currentParent) { return false; }\n    isClosedByChild(name) { return false; }\n}\nconst _TAG_DEFINITION = new XmlTagDefinition();\nfunction getXmlTagDefinition(tagName) {\n    return _TAG_DEFINITION;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass XmlParser extends Parser {\n    constructor() { super(getXmlTagDefinition); }\n    parse(source, url, options) {\n        return super.parse(source, url, options);\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst _VERSION = '1.2';\nconst _XMLNS = 'urn:oasis:names:tc:xliff:document:1.2';\n// TODO(vicb): make this a param (s/_/-/)\nconst _DEFAULT_SOURCE_LANG = 'en';\nconst _PLACEHOLDER_TAG$1 = 'x';\nconst _MARKER_TAG = 'mrk';\nconst _FILE_TAG = 'file';\nconst _SOURCE_TAG$1 = 'source';\nconst _SEGMENT_SOURCE_TAG = 'seg-source';\nconst _TARGET_TAG = 'target';\nconst _UNIT_TAG = 'trans-unit';\nconst _CONTEXT_GROUP_TAG = 'context-group';\nconst _CONTEXT_TAG = 'context';\n// http://docs.oasis-open.org/xliff/v1.2/os/xliff-core.html\n// http://docs.oasis-open.org/xliff/v1.2/xliff-profile-html/xliff-profile-html-1.2.html\nclass Xliff extends Serializer {\n    write(messages, locale) {\n        const visitor = new _WriteVisitor();\n        const transUnits = [];\n        messages.forEach(message => {\n            let contextTags = [];\n            message.sources.forEach((source) => {\n                let contextGroupTag = new Tag(_CONTEXT_GROUP_TAG, { purpose: 'location' });\n                contextGroupTag.children.push(new CR(10), new Tag(_CONTEXT_TAG, { 'context-type': 'sourcefile' }, [new Text$2(source.filePath)]), new CR(10), new Tag(_CONTEXT_TAG, { 'context-type': 'linenumber' }, [new Text$2(`${source.startLine}`)]), new CR(8));\n                contextTags.push(new CR(8), contextGroupTag);\n            });\n            const transUnit = new Tag(_UNIT_TAG, { id: message.id, datatype: 'html' });\n            transUnit.children.push(new CR(8), new Tag(_SOURCE_TAG$1, {}, visitor.serialize(message.nodes)), ...contextTags);\n            if (message.description) {\n                transUnit.children.push(new CR(8), new Tag('note', { priority: '1', from: 'description' }, [new Text$2(message.description)]));\n            }\n            if (message.meaning) {\n                transUnit.children.push(new CR(8), new Tag('note', { priority: '1', from: 'meaning' }, [new Text$2(message.meaning)]));\n            }\n            transUnit.children.push(new CR(6));\n            transUnits.push(new CR(6), transUnit);\n        });\n        const body = new Tag('body', {}, [...transUnits, new CR(4)]);\n        const file = new Tag('file', {\n            'source-language': locale || _DEFAULT_SOURCE_LANG,\n            datatype: 'plaintext',\n            original: 'ng2.template',\n        }, [new CR(4), body, new CR(2)]);\n        const xliff = new Tag('xliff', { version: _VERSION, xmlns: _XMLNS }, [new CR(2), file, new CR()]);\n        return serialize([\n            new Declaration({ version: '1.0', encoding: 'UTF-8' }), new CR(), xliff, new CR()\n        ]);\n    }\n    load(content, url) {\n        // xliff to xml nodes\n        const xliffParser = new XliffParser();\n        const { locale, msgIdToHtml, errors } = xliffParser.parse(content, url);\n        // xml nodes to i18n nodes\n        const i18nNodesByMsgId = {};\n        const converter = new XmlToI18n();\n        Object.keys(msgIdToHtml).forEach(msgId => {\n            const { i18nNodes, errors: e } = converter.convert(msgIdToHtml[msgId], url);\n            errors.push(...e);\n            i18nNodesByMsgId[msgId] = i18nNodes;\n        });\n        if (errors.length) {\n            throw new Error(`xliff parse errors:\\n${errors.join('\\n')}`);\n        }\n        return { locale: locale, i18nNodesByMsgId };\n    }\n    digest(message) { return digest(message); }\n}\nclass _WriteVisitor {\n    visitText(text, context) { return [new Text$2(text.value)]; }\n    visitContainer(container, context) {\n        const nodes = [];\n        container.children.forEach((node) => nodes.push(...node.visit(this)));\n        return nodes;\n    }\n    visitIcu(icu, context) {\n        const nodes = [new Text$2(`{${icu.expressionPlaceholder}, ${icu.type}, `)];\n        Object.keys(icu.cases).forEach((c) => {\n            nodes.push(new Text$2(`${c} {`), ...icu.cases[c].visit(this), new Text$2(`} `));\n        });\n        nodes.push(new Text$2(`}`));\n        return nodes;\n    }\n    visitTagPlaceholder(ph, context) {\n        const ctype = getCtypeForTag(ph.tag);\n        if (ph.isVoid) {\n            // void tags have no children nor closing tags\n            return [new Tag(_PLACEHOLDER_TAG$1, { id: ph.startName, ctype, 'equiv-text': `<${ph.tag}/>` })];\n        }\n        const startTagPh = new Tag(_PLACEHOLDER_TAG$1, { id: ph.startName, ctype, 'equiv-text': `<${ph.tag}>` });\n        const closeTagPh = new Tag(_PLACEHOLDER_TAG$1, { id: ph.closeName, ctype, 'equiv-text': `</${ph.tag}>` });\n        return [startTagPh, ...this.serialize(ph.children), closeTagPh];\n    }\n    visitPlaceholder(ph, context) {\n        return [new Tag(_PLACEHOLDER_TAG$1, { id: ph.name, 'equiv-text': `{{${ph.value}}}` })];\n    }\n    visitIcuPlaceholder(ph, context) {\n        const equivText = `{${ph.value.expression}, ${ph.value.type}, ${Object.keys(ph.value.cases).map((value) => value + ' {...}').join(' ')}}`;\n        return [new Tag(_PLACEHOLDER_TAG$1, { id: ph.name, 'equiv-text': equivText })];\n    }\n    serialize(nodes) {\n        return [].concat(...nodes.map(node => node.visit(this)));\n    }\n}\n// TODO(vicb): add error management (structure)\n// Extract messages as xml nodes from the xliff file\nclass XliffParser {\n    constructor() {\n        this._locale = null;\n    }\n    parse(xliff, url) {\n        this._unitMlString = null;\n        this._msgIdToHtml = {};\n        const xml = new XmlParser().parse(xliff, url);\n        this._errors = xml.errors;\n        visitAll$1(this, xml.rootNodes, null);\n        return {\n            msgIdToHtml: this._msgIdToHtml,\n            errors: this._errors,\n            locale: this._locale,\n        };\n    }\n    visitElement(element, context) {\n        switch (element.name) {\n            case _UNIT_TAG:\n                this._unitMlString = null;\n                const idAttr = element.attrs.find((attr) => attr.name === 'id');\n                if (!idAttr) {\n                    this._addError(element, `<${_UNIT_TAG}> misses the \"id\" attribute`);\n                }\n                else {\n                    const id = idAttr.value;\n                    if (this._msgIdToHtml.hasOwnProperty(id)) {\n                        this._addError(element, `Duplicated translations for msg ${id}`);\n                    }\n                    else {\n                        visitAll$1(this, element.children, null);\n                        if (typeof this._unitMlString === 'string') {\n                            this._msgIdToHtml[id] = this._unitMlString;\n                        }\n                        else {\n                            this._addError(element, `Message ${id} misses a translation`);\n                        }\n                    }\n                }\n                break;\n            // ignore those tags\n            case _SOURCE_TAG$1:\n            case _SEGMENT_SOURCE_TAG:\n                break;\n            case _TARGET_TAG:\n                const innerTextStart = element.startSourceSpan.end.offset;\n                const innerTextEnd = element.endSourceSpan.start.offset;\n                const content = element.startSourceSpan.start.file.content;\n                const innerText = content.slice(innerTextStart, innerTextEnd);\n                this._unitMlString = innerText;\n                break;\n            case _FILE_TAG:\n                const localeAttr = element.attrs.find((attr) => attr.name === 'target-language');\n                if (localeAttr) {\n                    this._locale = localeAttr.value;\n                }\n                visitAll$1(this, element.children, null);\n                break;\n            default:\n                // TODO(vicb): assert file structure, xliff version\n                // For now only recurse on unhandled nodes\n                visitAll$1(this, element.children, null);\n        }\n    }\n    visitAttribute(attribute, context) { }\n    visitText(text, context) { }\n    visitComment(comment, context) { }\n    visitExpansion(expansion, context) { }\n    visitExpansionCase(expansionCase, context) { }\n    _addError(node, message) {\n        this._errors.push(new I18nError(node.sourceSpan, message));\n    }\n}\n// Convert ml nodes (xliff syntax) to i18n nodes\nclass XmlToI18n {\n    convert(message, url) {\n        const xmlIcu = new XmlParser().parse(message, url, { tokenizeExpansionForms: true });\n        this._errors = xmlIcu.errors;\n        const i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ?\n            [] :\n            [].concat(...visitAll$1(this, xmlIcu.rootNodes));\n        return {\n            i18nNodes: i18nNodes,\n            errors: this._errors,\n        };\n    }\n    visitText(text, context) { return new Text$1(text.value, text.sourceSpan); }\n    visitElement(el, context) {\n        if (el.name === _PLACEHOLDER_TAG$1) {\n            const nameAttr = el.attrs.find((attr) => attr.name === 'id');\n            if (nameAttr) {\n                return new Placeholder('', nameAttr.value, el.sourceSpan);\n            }\n            this._addError(el, `<${_PLACEHOLDER_TAG$1}> misses the \"id\" attribute`);\n            return null;\n        }\n        if (el.name === _MARKER_TAG) {\n            return [].concat(...visitAll$1(this, el.children));\n        }\n        this._addError(el, `Unexpected tag`);\n        return null;\n    }\n    visitExpansion(icu, context) {\n        const caseMap = {};\n        visitAll$1(this, icu.cases).forEach((c) => {\n            caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);\n        });\n        return new Icu$1(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\n    }\n    visitExpansionCase(icuCase, context) {\n        return {\n            value: icuCase.value,\n            nodes: visitAll$1(this, icuCase.expression),\n        };\n    }\n    visitComment(comment, context) { }\n    visitAttribute(attribute, context) { }\n    _addError(node, message) {\n        this._errors.push(new I18nError(node.sourceSpan, message));\n    }\n}\nfunction getCtypeForTag(tag) {\n    switch (tag.toLowerCase()) {\n        case 'br':\n            return 'lb';\n        case 'img':\n            return 'image';\n        default:\n            return `x-${tag}`;\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst _VERSION$1 = '2.0';\nconst _XMLNS$1 = 'urn:oasis:names:tc:xliff:document:2.0';\n// TODO(vicb): make this a param (s/_/-/)\nconst _DEFAULT_SOURCE_LANG$1 = 'en';\nconst _PLACEHOLDER_TAG$2 = 'ph';\nconst _PLACEHOLDER_SPANNING_TAG = 'pc';\nconst _MARKER_TAG$1 = 'mrk';\nconst _XLIFF_TAG = 'xliff';\nconst _SOURCE_TAG$2 = 'source';\nconst _TARGET_TAG$1 = 'target';\nconst _UNIT_TAG$1 = 'unit';\n// http://docs.oasis-open.org/xliff/xliff-core/v2.0/os/xliff-core-v2.0-os.html\nclass Xliff2 extends Serializer {\n    write(messages, locale) {\n        const visitor = new _WriteVisitor$1();\n        const units = [];\n        messages.forEach(message => {\n            const unit = new Tag(_UNIT_TAG$1, { id: message.id });\n            const notes = new Tag('notes');\n            if (message.description || message.meaning) {\n                if (message.description) {\n                    notes.children.push(new CR(8), new Tag('note', { category: 'description' }, [new Text$2(message.description)]));\n                }\n                if (message.meaning) {\n                    notes.children.push(new CR(8), new Tag('note', { category: 'meaning' }, [new Text$2(message.meaning)]));\n                }\n            }\n            message.sources.forEach((source) => {\n                notes.children.push(new CR(8), new Tag('note', { category: 'location' }, [\n                    new Text$2(`${source.filePath}:${source.startLine}${source.endLine !== source.startLine ? ',' + source.endLine : ''}`)\n                ]));\n            });\n            notes.children.push(new CR(6));\n            unit.children.push(new CR(6), notes);\n            const segment = new Tag('segment');\n            segment.children.push(new CR(8), new Tag(_SOURCE_TAG$2, {}, visitor.serialize(message.nodes)), new CR(6));\n            unit.children.push(new CR(6), segment, new CR(4));\n            units.push(new CR(4), unit);\n        });\n        const file = new Tag('file', { 'original': 'ng.template', id: 'ngi18n' }, [...units, new CR(2)]);\n        const xliff = new Tag(_XLIFF_TAG, { version: _VERSION$1, xmlns: _XMLNS$1, srcLang: locale || _DEFAULT_SOURCE_LANG$1 }, [new CR(2), file, new CR()]);\n        return serialize([\n            new Declaration({ version: '1.0', encoding: 'UTF-8' }), new CR(), xliff, new CR()\n        ]);\n    }\n    load(content, url) {\n        // xliff to xml nodes\n        const xliff2Parser = new Xliff2Parser();\n        const { locale, msgIdToHtml, errors } = xliff2Parser.parse(content, url);\n        // xml nodes to i18n nodes\n        const i18nNodesByMsgId = {};\n        const converter = new XmlToI18n$1();\n        Object.keys(msgIdToHtml).forEach(msgId => {\n            const { i18nNodes, errors: e } = converter.convert(msgIdToHtml[msgId], url);\n            errors.push(...e);\n            i18nNodesByMsgId[msgId] = i18nNodes;\n        });\n        if (errors.length) {\n            throw new Error(`xliff2 parse errors:\\n${errors.join('\\n')}`);\n        }\n        return { locale: locale, i18nNodesByMsgId };\n    }\n    digest(message) { return decimalDigest(message); }\n}\nclass _WriteVisitor$1 {\n    visitText(text, context) { return [new Text$2(text.value)]; }\n    visitContainer(container, context) {\n        const nodes = [];\n        container.children.forEach((node) => nodes.push(...node.visit(this)));\n        return nodes;\n    }\n    visitIcu(icu, context) {\n        const nodes = [new Text$2(`{${icu.expressionPlaceholder}, ${icu.type}, `)];\n        Object.keys(icu.cases).forEach((c) => {\n            nodes.push(new Text$2(`${c} {`), ...icu.cases[c].visit(this), new Text$2(`} `));\n        });\n        nodes.push(new Text$2(`}`));\n        return nodes;\n    }\n    visitTagPlaceholder(ph, context) {\n        const type = getTypeForTag(ph.tag);\n        if (ph.isVoid) {\n            const tagPh = new Tag(_PLACEHOLDER_TAG$2, {\n                id: (this._nextPlaceholderId++).toString(),\n                equiv: ph.startName,\n                type: type,\n                disp: `<${ph.tag}/>`,\n            });\n            return [tagPh];\n        }\n        const tagPc = new Tag(_PLACEHOLDER_SPANNING_TAG, {\n            id: (this._nextPlaceholderId++).toString(),\n            equivStart: ph.startName,\n            equivEnd: ph.closeName,\n            type: type,\n            dispStart: `<${ph.tag}>`,\n            dispEnd: `</${ph.tag}>`,\n        });\n        const nodes = [].concat(...ph.children.map(node => node.visit(this)));\n        if (nodes.length) {\n            nodes.forEach((node) => tagPc.children.push(node));\n        }\n        else {\n            tagPc.children.push(new Text$2(''));\n        }\n        return [tagPc];\n    }\n    visitPlaceholder(ph, context) {\n        const idStr = (this._nextPlaceholderId++).toString();\n        return [new Tag(_PLACEHOLDER_TAG$2, {\n                id: idStr,\n                equiv: ph.name,\n                disp: `{{${ph.value}}}`,\n            })];\n    }\n    visitIcuPlaceholder(ph, context) {\n        const cases = Object.keys(ph.value.cases).map((value) => value + ' {...}').join(' ');\n        const idStr = (this._nextPlaceholderId++).toString();\n        return [new Tag(_PLACEHOLDER_TAG$2, { id: idStr, equiv: ph.name, disp: `{${ph.value.expression}, ${ph.value.type}, ${cases}}` })];\n    }\n    serialize(nodes) {\n        this._nextPlaceholderId = 0;\n        return [].concat(...nodes.map(node => node.visit(this)));\n    }\n}\n// Extract messages as xml nodes from the xliff file\nclass Xliff2Parser {\n    constructor() {\n        this._locale = null;\n    }\n    parse(xliff, url) {\n        this._unitMlString = null;\n        this._msgIdToHtml = {};\n        const xml = new XmlParser().parse(xliff, url);\n        this._errors = xml.errors;\n        visitAll$1(this, xml.rootNodes, null);\n        return {\n            msgIdToHtml: this._msgIdToHtml,\n            errors: this._errors,\n            locale: this._locale,\n        };\n    }\n    visitElement(element, context) {\n        switch (element.name) {\n            case _UNIT_TAG$1:\n                this._unitMlString = null;\n                const idAttr = element.attrs.find((attr) => attr.name === 'id');\n                if (!idAttr) {\n                    this._addError(element, `<${_UNIT_TAG$1}> misses the \"id\" attribute`);\n                }\n                else {\n                    const id = idAttr.value;\n                    if (this._msgIdToHtml.hasOwnProperty(id)) {\n                        this._addError(element, `Duplicated translations for msg ${id}`);\n                    }\n                    else {\n                        visitAll$1(this, element.children, null);\n                        if (typeof this._unitMlString === 'string') {\n                            this._msgIdToHtml[id] = this._unitMlString;\n                        }\n                        else {\n                            this._addError(element, `Message ${id} misses a translation`);\n                        }\n                    }\n                }\n                break;\n            case _SOURCE_TAG$2:\n                // ignore source message\n                break;\n            case _TARGET_TAG$1:\n                const innerTextStart = element.startSourceSpan.end.offset;\n                const innerTextEnd = element.endSourceSpan.start.offset;\n                const content = element.startSourceSpan.start.file.content;\n                const innerText = content.slice(innerTextStart, innerTextEnd);\n                this._unitMlString = innerText;\n                break;\n            case _XLIFF_TAG:\n                const localeAttr = element.attrs.find((attr) => attr.name === 'trgLang');\n                if (localeAttr) {\n                    this._locale = localeAttr.value;\n                }\n                const versionAttr = element.attrs.find((attr) => attr.name === 'version');\n                if (versionAttr) {\n                    const version = versionAttr.value;\n                    if (version !== '2.0') {\n                        this._addError(element, `The XLIFF file version ${version} is not compatible with XLIFF 2.0 serializer`);\n                    }\n                    else {\n                        visitAll$1(this, element.children, null);\n                    }\n                }\n                break;\n            default:\n                visitAll$1(this, element.children, null);\n        }\n    }\n    visitAttribute(attribute, context) { }\n    visitText(text, context) { }\n    visitComment(comment, context) { }\n    visitExpansion(expansion, context) { }\n    visitExpansionCase(expansionCase, context) { }\n    _addError(node, message) {\n        this._errors.push(new I18nError(node.sourceSpan, message));\n    }\n}\n// Convert ml nodes (xliff syntax) to i18n nodes\nclass XmlToI18n$1 {\n    convert(message, url) {\n        const xmlIcu = new XmlParser().parse(message, url, { tokenizeExpansionForms: true });\n        this._errors = xmlIcu.errors;\n        const i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ?\n            [] :\n            [].concat(...visitAll$1(this, xmlIcu.rootNodes));\n        return {\n            i18nNodes,\n            errors: this._errors,\n        };\n    }\n    visitText(text, context) { return new Text$1(text.value, text.sourceSpan); }\n    visitElement(el, context) {\n        switch (el.name) {\n            case _PLACEHOLDER_TAG$2:\n                const nameAttr = el.attrs.find((attr) => attr.name === 'equiv');\n                if (nameAttr) {\n                    return [new Placeholder('', nameAttr.value, el.sourceSpan)];\n                }\n                this._addError(el, `<${_PLACEHOLDER_TAG$2}> misses the \"equiv\" attribute`);\n                break;\n            case _PLACEHOLDER_SPANNING_TAG:\n                const startAttr = el.attrs.find((attr) => attr.name === 'equivStart');\n                const endAttr = el.attrs.find((attr) => attr.name === 'equivEnd');\n                if (!startAttr) {\n                    this._addError(el, `<${_PLACEHOLDER_TAG$2}> misses the \"equivStart\" attribute`);\n                }\n                else if (!endAttr) {\n                    this._addError(el, `<${_PLACEHOLDER_TAG$2}> misses the \"equivEnd\" attribute`);\n                }\n                else {\n                    const startId = startAttr.value;\n                    const endId = endAttr.value;\n                    const nodes = [];\n                    return nodes.concat(new Placeholder('', startId, el.sourceSpan), ...el.children.map(node => node.visit(this, null)), new Placeholder('', endId, el.sourceSpan));\n                }\n                break;\n            case _MARKER_TAG$1:\n                return [].concat(...visitAll$1(this, el.children));\n            default:\n                this._addError(el, `Unexpected tag`);\n        }\n        return null;\n    }\n    visitExpansion(icu, context) {\n        const caseMap = {};\n        visitAll$1(this, icu.cases).forEach((c) => {\n            caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);\n        });\n        return new Icu$1(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\n    }\n    visitExpansionCase(icuCase, context) {\n        return {\n            value: icuCase.value,\n            nodes: [].concat(...visitAll$1(this, icuCase.expression)),\n        };\n    }\n    visitComment(comment, context) { }\n    visitAttribute(attribute, context) { }\n    _addError(node, message) {\n        this._errors.push(new I18nError(node.sourceSpan, message));\n    }\n}\nfunction getTypeForTag(tag) {\n    switch (tag.toLowerCase()) {\n        case 'br':\n        case 'b':\n        case 'i':\n        case 'u':\n            return 'fmt';\n        case 'img':\n            return 'image';\n        case 'a':\n            return 'link';\n        default:\n            return 'other';\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst _TRANSLATIONS_TAG = 'translationbundle';\nconst _TRANSLATION_TAG = 'translation';\nconst _PLACEHOLDER_TAG$3 = 'ph';\nclass Xtb extends Serializer {\n    write(messages, locale) { throw new Error('Unsupported'); }\n    load(content, url) {\n        // xtb to xml nodes\n        const xtbParser = new XtbParser();\n        const { locale, msgIdToHtml, errors } = xtbParser.parse(content, url);\n        // xml nodes to i18n nodes\n        const i18nNodesByMsgId = {};\n        const converter = new XmlToI18n$2();\n        // Because we should be able to load xtb files that rely on features not supported by angular,\n        // we need to delay the conversion of html to i18n nodes so that non angular messages are not\n        // converted\n        Object.keys(msgIdToHtml).forEach(msgId => {\n            const valueFn = function () {\n                const { i18nNodes, errors } = converter.convert(msgIdToHtml[msgId], url);\n                if (errors.length) {\n                    throw new Error(`xtb parse errors:\\n${errors.join('\\n')}`);\n                }\n                return i18nNodes;\n            };\n            createLazyProperty(i18nNodesByMsgId, msgId, valueFn);\n        });\n        if (errors.length) {\n            throw new Error(`xtb parse errors:\\n${errors.join('\\n')}`);\n        }\n        return { locale: locale, i18nNodesByMsgId };\n    }\n    digest(message) { return digest$1(message); }\n    createNameMapper(message) {\n        return new SimplePlaceholderMapper(message, toPublicName);\n    }\n}\nfunction createLazyProperty(messages, id, valueFn) {\n    Object.defineProperty(messages, id, {\n        configurable: true,\n        enumerable: true,\n        get: function () {\n            const value = valueFn();\n            Object.defineProperty(messages, id, { enumerable: true, value });\n            return value;\n        },\n        set: _ => { throw new Error('Could not overwrite an XTB translation'); },\n    });\n}\n// Extract messages as xml nodes from the xtb file\nclass XtbParser {\n    constructor() {\n        this._locale = null;\n    }\n    parse(xtb, url) {\n        this._bundleDepth = 0;\n        this._msgIdToHtml = {};\n        // We can not parse the ICU messages at this point as some messages might not originate\n        // from Angular that could not be lex'd.\n        const xml = new XmlParser().parse(xtb, url);\n        this._errors = xml.errors;\n        visitAll$1(this, xml.rootNodes);\n        return {\n            msgIdToHtml: this._msgIdToHtml,\n            errors: this._errors,\n            locale: this._locale,\n        };\n    }\n    visitElement(element, context) {\n        switch (element.name) {\n            case _TRANSLATIONS_TAG:\n                this._bundleDepth++;\n                if (this._bundleDepth > 1) {\n                    this._addError(element, `<${_TRANSLATIONS_TAG}> elements can not be nested`);\n                }\n                const langAttr = element.attrs.find((attr) => attr.name === 'lang');\n                if (langAttr) {\n                    this._locale = langAttr.value;\n                }\n                visitAll$1(this, element.children, null);\n                this._bundleDepth--;\n                break;\n            case _TRANSLATION_TAG:\n                const idAttr = element.attrs.find((attr) => attr.name === 'id');\n                if (!idAttr) {\n                    this._addError(element, `<${_TRANSLATION_TAG}> misses the \"id\" attribute`);\n                }\n                else {\n                    const id = idAttr.value;\n                    if (this._msgIdToHtml.hasOwnProperty(id)) {\n                        this._addError(element, `Duplicated translations for msg ${id}`);\n                    }\n                    else {\n                        const innerTextStart = element.startSourceSpan.end.offset;\n                        const innerTextEnd = element.endSourceSpan.start.offset;\n                        const content = element.startSourceSpan.start.file.content;\n                        const innerText = content.slice(innerTextStart, innerTextEnd);\n                        this._msgIdToHtml[id] = innerText;\n                    }\n                }\n                break;\n            default:\n                this._addError(element, 'Unexpected tag');\n        }\n    }\n    visitAttribute(attribute, context) { }\n    visitText(text, context) { }\n    visitComment(comment, context) { }\n    visitExpansion(expansion, context) { }\n    visitExpansionCase(expansionCase, context) { }\n    _addError(node, message) {\n        this._errors.push(new I18nError(node.sourceSpan, message));\n    }\n}\n// Convert ml nodes (xtb syntax) to i18n nodes\nclass XmlToI18n$2 {\n    convert(message, url) {\n        const xmlIcu = new XmlParser().parse(message, url, { tokenizeExpansionForms: true });\n        this._errors = xmlIcu.errors;\n        const i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ?\n            [] :\n            visitAll$1(this, xmlIcu.rootNodes);\n        return {\n            i18nNodes,\n            errors: this._errors,\n        };\n    }\n    visitText(text, context) { return new Text$1(text.value, text.sourceSpan); }\n    visitExpansion(icu, context) {\n        const caseMap = {};\n        visitAll$1(this, icu.cases).forEach(c => {\n            caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);\n        });\n        return new Icu$1(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\n    }\n    visitExpansionCase(icuCase, context) {\n        return {\n            value: icuCase.value,\n            nodes: visitAll$1(this, icuCase.expression),\n        };\n    }\n    visitElement(el, context) {\n        if (el.name === _PLACEHOLDER_TAG$3) {\n            const nameAttr = el.attrs.find((attr) => attr.name === 'name');\n            if (nameAttr) {\n                return new Placeholder('', nameAttr.value, el.sourceSpan);\n            }\n            this._addError(el, `<${_PLACEHOLDER_TAG$3}> misses the \"name\" attribute`);\n        }\n        else {\n            this._addError(el, `Unexpected tag`);\n        }\n        return null;\n    }\n    visitComment(comment, context) { }\n    visitAttribute(attribute, context) { }\n    _addError(node, message) {\n        this._errors.push(new I18nError(node.sourceSpan, message));\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A container for translated messages\n */\nclass TranslationBundle {\n    constructor(_i18nNodesByMsgId = {}, locale, digest, mapperFactory, missingTranslationStrategy = MissingTranslationStrategy.Warning, console) {\n        this._i18nNodesByMsgId = _i18nNodesByMsgId;\n        this.digest = digest;\n        this.mapperFactory = mapperFactory;\n        this._i18nToHtml = new I18nToHtmlVisitor(_i18nNodesByMsgId, locale, digest, mapperFactory, missingTranslationStrategy, console);\n    }\n    // Creates a `TranslationBundle` by parsing the given `content` with the `serializer`.\n    static load(content, url, serializer, missingTranslationStrategy, console) {\n        const { locale, i18nNodesByMsgId } = serializer.load(content, url);\n        const digestFn = (m) => serializer.digest(m);\n        const mapperFactory = (m) => serializer.createNameMapper(m);\n        return new TranslationBundle(i18nNodesByMsgId, locale, digestFn, mapperFactory, missingTranslationStrategy, console);\n    }\n    // Returns the translation as HTML nodes from the given source message.\n    get(srcMsg) {\n        const html = this._i18nToHtml.convert(srcMsg);\n        if (html.errors.length) {\n            throw new Error(html.errors.join('\\n'));\n        }\n        return html.nodes;\n    }\n    has(srcMsg) { return this.digest(srcMsg) in this._i18nNodesByMsgId; }\n}\nclass I18nToHtmlVisitor {\n    constructor(_i18nNodesByMsgId = {}, _locale, _digest, _mapperFactory, _missingTranslationStrategy, _console) {\n        this._i18nNodesByMsgId = _i18nNodesByMsgId;\n        this._locale = _locale;\n        this._digest = _digest;\n        this._mapperFactory = _mapperFactory;\n        this._missingTranslationStrategy = _missingTranslationStrategy;\n        this._console = _console;\n        this._contextStack = [];\n        this._errors = [];\n    }\n    convert(srcMsg) {\n        this._contextStack.length = 0;\n        this._errors.length = 0;\n        // i18n to text\n        const text = this._convertToText(srcMsg);\n        // text to html\n        const url = srcMsg.nodes[0].sourceSpan.start.file.url;\n        const html = new HtmlParser().parse(text, url, { tokenizeExpansionForms: true });\n        return {\n            nodes: html.rootNodes,\n            errors: [...this._errors, ...html.errors],\n        };\n    }\n    visitText(text, context) {\n        // `convert()` uses an `HtmlParser` to return `html.Node`s\n        // we should then make sure that any special characters are escaped\n        return escapeXml(text.value);\n    }\n    visitContainer(container, context) {\n        return container.children.map(n => n.visit(this)).join('');\n    }\n    visitIcu(icu, context) {\n        const cases = Object.keys(icu.cases).map(k => `${k} {${icu.cases[k].visit(this)}}`);\n        // TODO(vicb): Once all format switch to using expression placeholders\n        // we should throw when the placeholder is not in the source message\n        const exp = this._srcMsg.placeholders.hasOwnProperty(icu.expression) ?\n            this._srcMsg.placeholders[icu.expression] :\n            icu.expression;\n        return `{${exp}, ${icu.type}, ${cases.join(' ')}}`;\n    }\n    visitPlaceholder(ph, context) {\n        const phName = this._mapper(ph.name);\n        if (this._srcMsg.placeholders.hasOwnProperty(phName)) {\n            return this._srcMsg.placeholders[phName];\n        }\n        if (this._srcMsg.placeholderToMessage.hasOwnProperty(phName)) {\n            return this._convertToText(this._srcMsg.placeholderToMessage[phName]);\n        }\n        this._addError(ph, `Unknown placeholder \"${ph.name}\"`);\n        return '';\n    }\n    // Loaded message contains only placeholders (vs tag and icu placeholders).\n    // However when a translation can not be found, we need to serialize the source message\n    // which can contain tag placeholders\n    visitTagPlaceholder(ph, context) {\n        const tag = `${ph.tag}`;\n        const attrs = Object.keys(ph.attrs).map(name => `${name}=\"${ph.attrs[name]}\"`).join(' ');\n        if (ph.isVoid) {\n            return `<${tag} ${attrs}/>`;\n        }\n        const children = ph.children.map((c) => c.visit(this)).join('');\n        return `<${tag} ${attrs}>${children}</${tag}>`;\n    }\n    // Loaded message contains only placeholders (vs tag and icu placeholders).\n    // However when a translation can not be found, we need to serialize the source message\n    // which can contain tag placeholders\n    visitIcuPlaceholder(ph, context) {\n        // An ICU placeholder references the source message to be serialized\n        return this._convertToText(this._srcMsg.placeholderToMessage[ph.name]);\n    }\n    /**\n     * Convert a source message to a translated text string:\n     * - text nodes are replaced with their translation,\n     * - placeholders are replaced with their content,\n     * - ICU nodes are converted to ICU expressions.\n     */\n    _convertToText(srcMsg) {\n        const id = this._digest(srcMsg);\n        const mapper = this._mapperFactory ? this._mapperFactory(srcMsg) : null;\n        let nodes;\n        this._contextStack.push({ msg: this._srcMsg, mapper: this._mapper });\n        this._srcMsg = srcMsg;\n        if (this._i18nNodesByMsgId.hasOwnProperty(id)) {\n            // When there is a translation use its nodes as the source\n            // And create a mapper to convert serialized placeholder names to internal names\n            nodes = this._i18nNodesByMsgId[id];\n            this._mapper = (name) => mapper ? mapper.toInternalName(name) : name;\n        }\n        else {\n            // When no translation has been found\n            // - report an error / a warning / nothing,\n            // - use the nodes from the original message\n            // - placeholders are already internal and need no mapper\n            if (this._missingTranslationStrategy === MissingTranslationStrategy.Error) {\n                const ctx = this._locale ? ` for locale \"${this._locale}\"` : '';\n                this._addError(srcMsg.nodes[0], `Missing translation for message \"${id}\"${ctx}`);\n            }\n            else if (this._console &&\n                this._missingTranslationStrategy === MissingTranslationStrategy.Warning) {\n                const ctx = this._locale ? ` for locale \"${this._locale}\"` : '';\n                this._console.warn(`Missing translation for message \"${id}\"${ctx}`);\n            }\n            nodes = srcMsg.nodes;\n            this._mapper = (name) => name;\n        }\n        const text = nodes.map(node => node.visit(this)).join('');\n        const context = this._contextStack.pop();\n        this._srcMsg = context.msg;\n        this._mapper = context.mapper;\n        return text;\n    }\n    _addError(el, msg) {\n        this._errors.push(new I18nError(el.sourceSpan, msg));\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass I18NHtmlParser {\n    constructor(_htmlParser, translations, translationsFormat, missingTranslation = MissingTranslationStrategy.Warning, console) {\n        this._htmlParser = _htmlParser;\n        if (translations) {\n            const serializer = createSerializer(translationsFormat);\n            this._translationBundle =\n                TranslationBundle.load(translations, 'i18n', serializer, missingTranslation, console);\n        }\n        else {\n            this._translationBundle =\n                new TranslationBundle({}, null, digest, undefined, missingTranslation, console);\n        }\n    }\n    parse(source, url, options = {}) {\n        const interpolationConfig = options.interpolationConfig || DEFAULT_INTERPOLATION_CONFIG;\n        const parseResult = this._htmlParser.parse(source, url, Object.assign({ interpolationConfig }, options));\n        if (parseResult.errors.length) {\n            return new ParseTreeResult(parseResult.rootNodes, parseResult.errors);\n        }\n        return mergeTranslations(parseResult.rootNodes, this._translationBundle, interpolationConfig, [], {});\n    }\n}\nfunction createSerializer(format) {\n    format = (format || 'xlf').toLowerCase();\n    switch (format) {\n        case 'xmb':\n            return new Xmb();\n        case 'xtb':\n            return new Xtb();\n        case 'xliff2':\n        case 'xlf2':\n            return new Xliff2();\n        case 'xliff':\n        case 'xlf':\n        default:\n            return new Xliff();\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst QUOTED_KEYS = '$quoted$';\nfunction convertValueToOutputAst(ctx, value, type = null) {\n    return visitValue(value, new _ValueOutputAstTransformer(ctx), type);\n}\nclass _ValueOutputAstTransformer {\n    constructor(ctx) {\n        this.ctx = ctx;\n    }\n    visitArray(arr, type) {\n        return literalArr(arr.map(value => visitValue(value, this, null)), type);\n    }\n    visitStringMap(map, type) {\n        const entries = [];\n        const quotedSet = new Set(map && map[QUOTED_KEYS]);\n        Object.keys(map).forEach(key => {\n            entries.push(new LiteralMapEntry(key, visitValue(map[key], this, null), quotedSet.has(key)));\n        });\n        return new LiteralMapExpr(entries, type);\n    }\n    visitPrimitive(value, type) { return literal(value, type); }\n    visitOther(value, type) {\n        if (value instanceof Expression) {\n            return value;\n        }\n        else {\n            return this.ctx.importExpr(value);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction mapEntry(key, value) {\n    return { key, value, quoted: false };\n}\nclass InjectableCompiler {\n    constructor(reflector, alwaysGenerateDef) {\n        this.reflector = reflector;\n        this.alwaysGenerateDef = alwaysGenerateDef;\n        this.tokenInjector = reflector.resolveExternalReference(Identifiers.Injector);\n    }\n    depsArray(deps, ctx) {\n        return deps.map(dep => {\n            let token = dep;\n            let args = [token];\n            let flags = 0 /* Default */;\n            if (Array.isArray(dep)) {\n                for (let i = 0; i < dep.length; i++) {\n                    const v = dep[i];\n                    if (v) {\n                        if (v.ngMetadataName === 'Optional') {\n                            flags |= 8 /* Optional */;\n                        }\n                        else if (v.ngMetadataName === 'SkipSelf') {\n                            flags |= 4 /* SkipSelf */;\n                        }\n                        else if (v.ngMetadataName === 'Self') {\n                            flags |= 2 /* Self */;\n                        }\n                        else if (v.ngMetadataName === 'Inject') {\n                            token = v.token;\n                        }\n                        else {\n                            token = v;\n                        }\n                    }\n                }\n            }\n            let tokenExpr;\n            if (typeof token === 'string') {\n                tokenExpr = literal(token);\n            }\n            else if (token === this.tokenInjector) {\n                tokenExpr = importExpr(Identifiers.INJECTOR);\n            }\n            else {\n                tokenExpr = ctx.importExpr(token);\n            }\n            if (flags !== 0 /* Default */) {\n                args = [tokenExpr, literal(flags)];\n            }\n            else {\n                args = [tokenExpr];\n            }\n            return importExpr(Identifiers.inject).callFn(args);\n        });\n    }\n    factoryFor(injectable, ctx) {\n        let retValue;\n        if (injectable.useExisting) {\n            retValue = importExpr(Identifiers.inject).callFn([ctx.importExpr(injectable.useExisting)]);\n        }\n        else if (injectable.useFactory) {\n            const deps = injectable.deps || [];\n            if (deps.length > 0) {\n                retValue = ctx.importExpr(injectable.useFactory).callFn(this.depsArray(deps, ctx));\n            }\n            else {\n                return ctx.importExpr(injectable.useFactory);\n            }\n        }\n        else if (injectable.useValue) {\n            retValue = convertValueToOutputAst(ctx, injectable.useValue);\n        }\n        else {\n            const clazz = injectable.useClass || injectable.symbol;\n            const depArgs = this.depsArray(this.reflector.parameters(clazz), ctx);\n            retValue = new InstantiateExpr(ctx.importExpr(clazz), depArgs);\n        }\n        return fn([], [new ReturnStatement(retValue)], undefined, undefined, injectable.symbol.name + '_Factory');\n    }\n    injectableDef(injectable, ctx) {\n        let providedIn = NULL_EXPR;\n        if (injectable.providedIn !== undefined) {\n            if (injectable.providedIn === null) {\n                providedIn = NULL_EXPR;\n            }\n            else if (typeof injectable.providedIn === 'string') {\n                providedIn = literal(injectable.providedIn);\n            }\n            else {\n                providedIn = ctx.importExpr(injectable.providedIn);\n            }\n        }\n        const def = [\n            mapEntry('factory', this.factoryFor(injectable, ctx)),\n            mapEntry('token', ctx.importExpr(injectable.type.reference)),\n            mapEntry('providedIn', providedIn),\n        ];\n        return importExpr(Identifiers.ɵɵdefineInjectable).callFn([literalMap(def)]);\n    }\n    compile(injectable, ctx) {\n        if (this.alwaysGenerateDef || injectable.providedIn !== undefined) {\n            const className = identifierName(injectable.type);\n            const clazz = new ClassStmt(className, null, [\n                new ClassField('ngInjectableDef', INFERRED_TYPE, [StmtModifier.Static], this.injectableDef(injectable, ctx)),\n            ], [], new ClassMethod(null, [], []), []);\n            ctx.statements.push(clazz);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst STRIP_SRC_FILE_SUFFIXES = /(\\.ts|\\.d\\.ts|\\.js|\\.jsx|\\.tsx)$/;\nconst GENERATED_FILE = /\\.ngfactory\\.|\\.ngsummary\\./;\nconst JIT_SUMMARY_FILE = /\\.ngsummary\\./;\nconst JIT_SUMMARY_NAME = /NgSummary$/;\nfunction ngfactoryFilePath(filePath, forceSourceFile = false) {\n    const urlWithSuffix = splitTypescriptSuffix(filePath, forceSourceFile);\n    return `${urlWithSuffix[0]}.ngfactory${normalizeGenFileSuffix(urlWithSuffix[1])}`;\n}\nfunction stripGeneratedFileSuffix(filePath) {\n    return filePath.replace(GENERATED_FILE, '.');\n}\nfunction isGeneratedFile(filePath) {\n    return GENERATED_FILE.test(filePath);\n}\nfunction splitTypescriptSuffix(path, forceSourceFile = false) {\n    if (path.endsWith('.d.ts')) {\n        return [path.slice(0, -5), forceSourceFile ? '.ts' : '.d.ts'];\n    }\n    const lastDot = path.lastIndexOf('.');\n    if (lastDot !== -1) {\n        return [path.substring(0, lastDot), path.substring(lastDot)];\n    }\n    return [path, ''];\n}\nfunction normalizeGenFileSuffix(srcFileSuffix) {\n    return srcFileSuffix === '.tsx' ? '.ts' : srcFileSuffix;\n}\nfunction summaryFileName(fileName) {\n    const fileNameWithoutSuffix = fileName.replace(STRIP_SRC_FILE_SUFFIXES, '');\n    return `${fileNameWithoutSuffix}.ngsummary.json`;\n}\nfunction summaryForJitFileName(fileName, forceSourceFile = false) {\n    const urlWithSuffix = splitTypescriptSuffix(stripGeneratedFileSuffix(fileName), forceSourceFile);\n    return `${urlWithSuffix[0]}.ngsummary${urlWithSuffix[1]}`;\n}\nfunction stripSummaryForJitFileSuffix(filePath) {\n    return filePath.replace(JIT_SUMMARY_FILE, '.');\n}\nfunction summaryForJitName(symbolName) {\n    return `${symbolName}NgSummary`;\n}\nfunction stripSummaryForJitNameSuffix(symbolName) {\n    return symbolName.replace(JIT_SUMMARY_NAME, '');\n}\nconst LOWERED_SYMBOL = /\\u0275\\d+/;\nfunction isLoweredSymbol(name) {\n    return LOWERED_SYMBOL.test(name);\n}\nfunction createLoweredSymbol(id) {\n    return `\\u0275${id}`;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar LifecycleHooks;\n(function (LifecycleHooks) {\n    LifecycleHooks[LifecycleHooks[\"OnInit\"] = 0] = \"OnInit\";\n    LifecycleHooks[LifecycleHooks[\"OnDestroy\"] = 1] = \"OnDestroy\";\n    LifecycleHooks[LifecycleHooks[\"DoCheck\"] = 2] = \"DoCheck\";\n    LifecycleHooks[LifecycleHooks[\"OnChanges\"] = 3] = \"OnChanges\";\n    LifecycleHooks[LifecycleHooks[\"AfterContentInit\"] = 4] = \"AfterContentInit\";\n    LifecycleHooks[LifecycleHooks[\"AfterContentChecked\"] = 5] = \"AfterContentChecked\";\n    LifecycleHooks[LifecycleHooks[\"AfterViewInit\"] = 6] = \"AfterViewInit\";\n    LifecycleHooks[LifecycleHooks[\"AfterViewChecked\"] = 7] = \"AfterViewChecked\";\n})(LifecycleHooks || (LifecycleHooks = {}));\nconst LIFECYCLE_HOOKS_VALUES = [\n    LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges,\n    LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit,\n    LifecycleHooks.AfterViewChecked\n];\nfunction hasLifecycleHook(reflector, hook, token) {\n    return reflector.hasLifecycleHook(token, getHookName(hook));\n}\nfunction getAllLifecycleHooks(reflector, token) {\n    return LIFECYCLE_HOOKS_VALUES.filter(hook => hasLifecycleHook(reflector, hook, token));\n}\nfunction getHookName(hook) {\n    switch (hook) {\n        case LifecycleHooks.OnInit:\n            return 'ngOnInit';\n        case LifecycleHooks.OnDestroy:\n            return 'ngOnDestroy';\n        case LifecycleHooks.DoCheck:\n            return 'ngDoCheck';\n        case LifecycleHooks.OnChanges:\n            return 'ngOnChanges';\n        case LifecycleHooks.AfterContentInit:\n            return 'ngAfterContentInit';\n        case LifecycleHooks.AfterContentChecked:\n            return 'ngAfterContentChecked';\n        case LifecycleHooks.AfterViewInit:\n            return 'ngAfterViewInit';\n        case LifecycleHooks.AfterViewChecked:\n            return 'ngAfterViewChecked';\n        default:\n            // This default case is not needed by TypeScript compiler, as the switch is exhaustive.\n            // However Closure Compiler does not understand that and reports an error in typed mode.\n            // The `throw new Error` below works around the problem, and the unexpected: never variable\n            // makes sure tsc still checks this code is unreachable.\n            const unexpected = hook;\n            throw new Error(`unexpected ${unexpected}`);\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst ERROR_COMPONENT_TYPE = 'ngComponentType';\n// Design notes:\n// - don't lazily create metadata:\n//   For some metadata, we need to do async work sometimes,\n//   so the user has to kick off this loading.\n//   But we want to report errors even when the async work is\n//   not required to check that the user would have been able\n//   to wait correctly.\nclass CompileMetadataResolver {\n    constructor(_config, _htmlParser, _ngModuleResolver, _directiveResolver, _pipeResolver, _summaryResolver, _schemaRegistry, _directiveNormalizer, _console, _staticSymbolCache, _reflector, _errorCollector) {\n        this._config = _config;\n        this._htmlParser = _htmlParser;\n        this._ngModuleResolver = _ngModuleResolver;\n        this._directiveResolver = _directiveResolver;\n        this._pipeResolver = _pipeResolver;\n        this._summaryResolver = _summaryResolver;\n        this._schemaRegistry = _schemaRegistry;\n        this._directiveNormalizer = _directiveNormalizer;\n        this._console = _console;\n        this._staticSymbolCache = _staticSymbolCache;\n        this._reflector = _reflector;\n        this._errorCollector = _errorCollector;\n        this._nonNormalizedDirectiveCache = new Map();\n        this._directiveCache = new Map();\n        this._summaryCache = new Map();\n        this._pipeCache = new Map();\n        this._ngModuleCache = new Map();\n        this._ngModuleOfTypes = new Map();\n        this._shallowModuleCache = new Map();\n    }\n    getReflector() { return this._reflector; }\n    clearCacheFor(type) {\n        const dirMeta = this._directiveCache.get(type);\n        this._directiveCache.delete(type);\n        this._nonNormalizedDirectiveCache.delete(type);\n        this._summaryCache.delete(type);\n        this._pipeCache.delete(type);\n        this._ngModuleOfTypes.delete(type);\n        // Clear all of the NgModule as they contain transitive information!\n        this._ngModuleCache.clear();\n        if (dirMeta) {\n            this._directiveNormalizer.clearCacheFor(dirMeta);\n        }\n    }\n    clearCache() {\n        this._directiveCache.clear();\n        this._nonNormalizedDirectiveCache.clear();\n        this._summaryCache.clear();\n        this._pipeCache.clear();\n        this._ngModuleCache.clear();\n        this._ngModuleOfTypes.clear();\n        this._directiveNormalizer.clearCache();\n    }\n    _createProxyClass(baseType, name) {\n        let delegate = null;\n        const proxyClass = function () {\n            if (!delegate) {\n                throw new Error(`Illegal state: Class ${name} for type ${stringify(baseType)} is not compiled yet!`);\n            }\n            return delegate.apply(this, arguments);\n        };\n        proxyClass.setDelegate = (d) => {\n            delegate = d;\n            proxyClass.prototype = d.prototype;\n        };\n        // Make stringify work correctly\n        proxyClass.overriddenName = name;\n        return proxyClass;\n    }\n    getGeneratedClass(dirType, name) {\n        if (dirType instanceof StaticSymbol) {\n            return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), name);\n        }\n        else {\n            return this._createProxyClass(dirType, name);\n        }\n    }\n    getComponentViewClass(dirType) {\n        return this.getGeneratedClass(dirType, viewClassName(dirType, 0));\n    }\n    getHostComponentViewClass(dirType) {\n        return this.getGeneratedClass(dirType, hostViewClassName(dirType));\n    }\n    getHostComponentType(dirType) {\n        const name = `${identifierName({ reference: dirType })}_Host`;\n        if (dirType instanceof StaticSymbol) {\n            return this._staticSymbolCache.get(dirType.filePath, name);\n        }\n        return this._createProxyClass(dirType, name);\n    }\n    getRendererType(dirType) {\n        if (dirType instanceof StaticSymbol) {\n            return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), rendererTypeName(dirType));\n        }\n        else {\n            // returning an object as proxy,\n            // that we fill later during runtime compilation.\n            return {};\n        }\n    }\n    getComponentFactory(selector, dirType, inputs, outputs) {\n        if (dirType instanceof StaticSymbol) {\n            return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), componentFactoryName(dirType));\n        }\n        else {\n            const hostView = this.getHostComponentViewClass(dirType);\n            // Note: ngContentSelectors will be filled later once the template is\n            // loaded.\n            const createComponentFactory = this._reflector.resolveExternalReference(Identifiers.createComponentFactory);\n            return createComponentFactory(selector, dirType, hostView, inputs, outputs, []);\n        }\n    }\n    initComponentFactory(factory, ngContentSelectors) {\n        if (!(factory instanceof StaticSymbol)) {\n            factory.ngContentSelectors.push(...ngContentSelectors);\n        }\n    }\n    _loadSummary(type, kind) {\n        let typeSummary = this._summaryCache.get(type);\n        if (!typeSummary) {\n            const summary = this._summaryResolver.resolveSummary(type);\n            typeSummary = summary ? summary.type : null;\n            this._summaryCache.set(type, typeSummary || null);\n        }\n        return typeSummary && typeSummary.summaryKind === kind ? typeSummary : null;\n    }\n    getHostComponentMetadata(compMeta, hostViewType) {\n        const hostType = this.getHostComponentType(compMeta.type.reference);\n        if (!hostViewType) {\n            hostViewType = this.getHostComponentViewClass(hostType);\n        }\n        // Note: ! is ok here as this method should only be called with normalized directive\n        // metadata, which always fills in the selector.\n        const template = CssSelector.parse(compMeta.selector)[0].getMatchingElementTemplate();\n        const templateUrl = '';\n        const htmlAst = this._htmlParser.parse(template, templateUrl);\n        return CompileDirectiveMetadata.create({\n            isHost: true,\n            type: { reference: hostType, diDeps: [], lifecycleHooks: [] },\n            template: new CompileTemplateMetadata({\n                encapsulation: ViewEncapsulation.None,\n                template,\n                templateUrl,\n                htmlAst,\n                styles: [],\n                styleUrls: [],\n                ngContentSelectors: [],\n                animations: [],\n                isInline: true,\n                externalStylesheets: [],\n                interpolation: null,\n                preserveWhitespaces: false,\n            }),\n            exportAs: null,\n            changeDetection: ChangeDetectionStrategy.Default,\n            inputs: [],\n            outputs: [],\n            host: {},\n            isComponent: true,\n            selector: '*',\n            providers: [],\n            viewProviders: [],\n            queries: [],\n            guards: {},\n            viewQueries: [],\n            componentViewType: hostViewType,\n            rendererType: { id: '__Host__', encapsulation: ViewEncapsulation.None, styles: [], data: {} },\n            entryComponents: [],\n            componentFactory: null\n        });\n    }\n    loadDirectiveMetadata(ngModuleType, directiveType, isSync) {\n        if (this._directiveCache.has(directiveType)) {\n            return null;\n        }\n        directiveType = resolveForwardRef(directiveType);\n        const { annotation, metadata } = this.getNonNormalizedDirectiveMetadata(directiveType);\n        const createDirectiveMetadata = (templateMetadata) => {\n            const normalizedDirMeta = new CompileDirectiveMetadata({\n                isHost: false,\n                type: metadata.type,\n                isComponent: metadata.isComponent,\n                selector: metadata.selector,\n                exportAs: metadata.exportAs,\n                changeDetection: metadata.changeDetection,\n                inputs: metadata.inputs,\n                outputs: metadata.outputs,\n                hostListeners: metadata.hostListeners,\n                hostProperties: metadata.hostProperties,\n                hostAttributes: metadata.hostAttributes,\n                providers: metadata.providers,\n                viewProviders: metadata.viewProviders,\n                queries: metadata.queries,\n                guards: metadata.guards,\n                viewQueries: metadata.viewQueries,\n                entryComponents: metadata.entryComponents,\n                componentViewType: metadata.componentViewType,\n                rendererType: metadata.rendererType,\n                componentFactory: metadata.componentFactory,\n                template: templateMetadata\n            });\n            if (templateMetadata) {\n                this.initComponentFactory(metadata.componentFactory, templateMetadata.ngContentSelectors);\n            }\n            this._directiveCache.set(directiveType, normalizedDirMeta);\n            this._summaryCache.set(directiveType, normalizedDirMeta.toSummary());\n            return null;\n        };\n        if (metadata.isComponent) {\n            const template = metadata.template;\n            const templateMeta = this._directiveNormalizer.normalizeTemplate({\n                ngModuleType,\n                componentType: directiveType,\n                moduleUrl: this._reflector.componentModuleUrl(directiveType, annotation),\n                encapsulation: template.encapsulation,\n                template: template.template,\n                templateUrl: template.templateUrl,\n                styles: template.styles,\n                styleUrls: template.styleUrls,\n                animations: template.animations,\n                interpolation: template.interpolation,\n                preserveWhitespaces: template.preserveWhitespaces\n            });\n            if (isPromise(templateMeta) && isSync) {\n                this._reportError(componentStillLoadingError(directiveType), directiveType);\n                return null;\n            }\n            return SyncAsync.then(templateMeta, createDirectiveMetadata);\n        }\n        else {\n            // directive\n            createDirectiveMetadata(null);\n            return null;\n        }\n    }\n    getNonNormalizedDirectiveMetadata(directiveType) {\n        directiveType = resolveForwardRef(directiveType);\n        if (!directiveType) {\n            return null;\n        }\n        let cacheEntry = this._nonNormalizedDirectiveCache.get(directiveType);\n        if (cacheEntry) {\n            return cacheEntry;\n        }\n        const dirMeta = this._directiveResolver.resolve(directiveType, false);\n        if (!dirMeta) {\n            return null;\n        }\n        let nonNormalizedTemplateMetadata = undefined;\n        if (createComponent.isTypeOf(dirMeta)) {\n            // component\n            const compMeta = dirMeta;\n            assertArrayOfStrings('styles', compMeta.styles);\n            assertArrayOfStrings('styleUrls', compMeta.styleUrls);\n            assertInterpolationSymbols('interpolation', compMeta.interpolation);\n            const animations = compMeta.animations;\n            nonNormalizedTemplateMetadata = new CompileTemplateMetadata({\n                encapsulation: noUndefined(compMeta.encapsulation),\n                template: noUndefined(compMeta.template),\n                templateUrl: noUndefined(compMeta.templateUrl),\n                htmlAst: null,\n                styles: compMeta.styles || [],\n                styleUrls: compMeta.styleUrls || [],\n                animations: animations || [],\n                interpolation: noUndefined(compMeta.interpolation),\n                isInline: !!compMeta.template,\n                externalStylesheets: [],\n                ngContentSelectors: [],\n                preserveWhitespaces: noUndefined(dirMeta.preserveWhitespaces),\n            });\n        }\n        let changeDetectionStrategy = null;\n        let viewProviders = [];\n        let entryComponentMetadata = [];\n        let selector = dirMeta.selector;\n        if (createComponent.isTypeOf(dirMeta)) {\n            // Component\n            const compMeta = dirMeta;\n            changeDetectionStrategy = compMeta.changeDetection;\n            if (compMeta.viewProviders) {\n                viewProviders = this._getProvidersMetadata(compMeta.viewProviders, entryComponentMetadata, `viewProviders for \"${stringifyType(directiveType)}\"`, [], directiveType);\n            }\n            if (compMeta.entryComponents) {\n                entryComponentMetadata = flattenAndDedupeArray(compMeta.entryComponents)\n                    .map((type) => this._getEntryComponentMetadata(type))\n                    .concat(entryComponentMetadata);\n            }\n            if (!selector) {\n                selector = this._schemaRegistry.getDefaultComponentElementName();\n            }\n        }\n        else {\n            // Directive\n            if (!selector) {\n                this._reportError(syntaxError(`Directive ${stringifyType(directiveType)} has no selector, please add it!`), directiveType);\n                selector = 'error';\n            }\n        }\n        let providers = [];\n        if (dirMeta.providers != null) {\n            providers = this._getProvidersMetadata(dirMeta.providers, entryComponentMetadata, `providers for \"${stringifyType(directiveType)}\"`, [], directiveType);\n        }\n        let queries = [];\n        let viewQueries = [];\n        if (dirMeta.queries != null) {\n            queries = this._getQueriesMetadata(dirMeta.queries, false, directiveType);\n            viewQueries = this._getQueriesMetadata(dirMeta.queries, true, directiveType);\n        }\n        const metadata = CompileDirectiveMetadata.create({\n            isHost: false,\n            selector: selector,\n            exportAs: noUndefined(dirMeta.exportAs),\n            isComponent: !!nonNormalizedTemplateMetadata,\n            type: this._getTypeMetadata(directiveType),\n            template: nonNormalizedTemplateMetadata,\n            changeDetection: changeDetectionStrategy,\n            inputs: dirMeta.inputs || [],\n            outputs: dirMeta.outputs || [],\n            host: dirMeta.host || {},\n            providers: providers || [],\n            viewProviders: viewProviders || [],\n            queries: queries || [],\n            guards: dirMeta.guards || {},\n            viewQueries: viewQueries || [],\n            entryComponents: entryComponentMetadata,\n            componentViewType: nonNormalizedTemplateMetadata ? this.getComponentViewClass(directiveType) :\n                null,\n            rendererType: nonNormalizedTemplateMetadata ? this.getRendererType(directiveType) : null,\n            componentFactory: null\n        });\n        if (nonNormalizedTemplateMetadata) {\n            metadata.componentFactory =\n                this.getComponentFactory(selector, directiveType, metadata.inputs, metadata.outputs);\n        }\n        cacheEntry = { metadata, annotation: dirMeta };\n        this._nonNormalizedDirectiveCache.set(directiveType, cacheEntry);\n        return cacheEntry;\n    }\n    /**\n     * Gets the metadata for the given directive.\n     * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.\n     */\n    getDirectiveMetadata(directiveType) {\n        const dirMeta = this._directiveCache.get(directiveType);\n        if (!dirMeta) {\n            this._reportError(syntaxError(`Illegal state: getDirectiveMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Directive ${stringifyType(directiveType)}.`), directiveType);\n        }\n        return dirMeta;\n    }\n    getDirectiveSummary(dirType) {\n        const dirSummary = this._loadSummary(dirType, CompileSummaryKind.Directive);\n        if (!dirSummary) {\n            this._reportError(syntaxError(`Illegal state: Could not load the summary for directive ${stringifyType(dirType)}.`), dirType);\n        }\n        return dirSummary;\n    }\n    isDirective(type) {\n        return !!this._loadSummary(type, CompileSummaryKind.Directive) ||\n            this._directiveResolver.isDirective(type);\n    }\n    isPipe(type) {\n        return !!this._loadSummary(type, CompileSummaryKind.Pipe) ||\n            this._pipeResolver.isPipe(type);\n    }\n    isNgModule(type) {\n        return !!this._loadSummary(type, CompileSummaryKind.NgModule) ||\n            this._ngModuleResolver.isNgModule(type);\n    }\n    getNgModuleSummary(moduleType, alreadyCollecting = null) {\n        let moduleSummary = this._loadSummary(moduleType, CompileSummaryKind.NgModule);\n        if (!moduleSummary) {\n            const moduleMeta = this.getNgModuleMetadata(moduleType, false, alreadyCollecting);\n            moduleSummary = moduleMeta ? moduleMeta.toSummary() : null;\n            if (moduleSummary) {\n                this._summaryCache.set(moduleType, moduleSummary);\n            }\n        }\n        return moduleSummary;\n    }\n    /**\n     * Loads the declared directives and pipes of an NgModule.\n     */\n    loadNgModuleDirectiveAndPipeMetadata(moduleType, isSync, throwIfNotFound = true) {\n        const ngModule = this.getNgModuleMetadata(moduleType, throwIfNotFound);\n        const loading = [];\n        if (ngModule) {\n            ngModule.declaredDirectives.forEach((id) => {\n                const promise = this.loadDirectiveMetadata(moduleType, id.reference, isSync);\n                if (promise) {\n                    loading.push(promise);\n                }\n            });\n            ngModule.declaredPipes.forEach((id) => this._loadPipeMetadata(id.reference));\n        }\n        return Promise.all(loading);\n    }\n    getShallowModuleMetadata(moduleType) {\n        let compileMeta = this._shallowModuleCache.get(moduleType);\n        if (compileMeta) {\n            return compileMeta;\n        }\n        const ngModuleMeta = findLast(this._reflector.shallowAnnotations(moduleType), createNgModule.isTypeOf);\n        compileMeta = {\n            type: this._getTypeMetadata(moduleType),\n            rawExports: ngModuleMeta.exports,\n            rawImports: ngModuleMeta.imports,\n            rawProviders: ngModuleMeta.providers,\n        };\n        this._shallowModuleCache.set(moduleType, compileMeta);\n        return compileMeta;\n    }\n    getNgModuleMetadata(moduleType, throwIfNotFound = true, alreadyCollecting = null) {\n        moduleType = resolveForwardRef(moduleType);\n        let compileMeta = this._ngModuleCache.get(moduleType);\n        if (compileMeta) {\n            return compileMeta;\n        }\n        const meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);\n        if (!meta) {\n            return null;\n        }\n        const declaredDirectives = [];\n        const exportedNonModuleIdentifiers = [];\n        const declaredPipes = [];\n        const importedModules = [];\n        const exportedModules = [];\n        const providers = [];\n        const entryComponents = [];\n        const bootstrapComponents = [];\n        const schemas = [];\n        if (meta.imports) {\n            flattenAndDedupeArray(meta.imports).forEach((importedType) => {\n                let importedModuleType = undefined;\n                if (isValidType(importedType)) {\n                    importedModuleType = importedType;\n                }\n                else if (importedType && importedType.ngModule) {\n                    const moduleWithProviders = importedType;\n                    importedModuleType = moduleWithProviders.ngModule;\n                    if (moduleWithProviders.providers) {\n                        providers.push(...this._getProvidersMetadata(moduleWithProviders.providers, entryComponents, `provider for the NgModule '${stringifyType(importedModuleType)}'`, [], importedType));\n                    }\n                }\n                if (importedModuleType) {\n                    if (this._checkSelfImport(moduleType, importedModuleType))\n                        return;\n                    if (!alreadyCollecting)\n                        alreadyCollecting = new Set();\n                    if (alreadyCollecting.has(importedModuleType)) {\n                        this._reportError(syntaxError(`${this._getTypeDescriptor(importedModuleType)} '${stringifyType(importedType)}' is imported recursively by the module '${stringifyType(moduleType)}'.`), moduleType);\n                        return;\n                    }\n                    alreadyCollecting.add(importedModuleType);\n                    const importedModuleSummary = this.getNgModuleSummary(importedModuleType, alreadyCollecting);\n                    alreadyCollecting.delete(importedModuleType);\n                    if (!importedModuleSummary) {\n                        this._reportError(syntaxError(`Unexpected ${this._getTypeDescriptor(importedType)} '${stringifyType(importedType)}' imported by the module '${stringifyType(moduleType)}'. Please add a @NgModule annotation.`), moduleType);\n                        return;\n                    }\n                    importedModules.push(importedModuleSummary);\n                }\n                else {\n                    this._reportError(syntaxError(`Unexpected value '${stringifyType(importedType)}' imported by the module '${stringifyType(moduleType)}'`), moduleType);\n                    return;\n                }\n            });\n        }\n        if (meta.exports) {\n            flattenAndDedupeArray(meta.exports).forEach((exportedType) => {\n                if (!isValidType(exportedType)) {\n                    this._reportError(syntaxError(`Unexpected value '${stringifyType(exportedType)}' exported by the module '${stringifyType(moduleType)}'`), moduleType);\n                    return;\n                }\n                if (!alreadyCollecting)\n                    alreadyCollecting = new Set();\n                if (alreadyCollecting.has(exportedType)) {\n                    this._reportError(syntaxError(`${this._getTypeDescriptor(exportedType)} '${stringify(exportedType)}' is exported recursively by the module '${stringifyType(moduleType)}'`), moduleType);\n                    return;\n                }\n                alreadyCollecting.add(exportedType);\n                const exportedModuleSummary = this.getNgModuleSummary(exportedType, alreadyCollecting);\n                alreadyCollecting.delete(exportedType);\n                if (exportedModuleSummary) {\n                    exportedModules.push(exportedModuleSummary);\n                }\n                else {\n                    exportedNonModuleIdentifiers.push(this._getIdentifierMetadata(exportedType));\n                }\n            });\n        }\n        // Note: This will be modified later, so we rely on\n        // getting a new instance every time!\n        const transitiveModule = this._getTransitiveNgModuleMetadata(importedModules, exportedModules);\n        if (meta.declarations) {\n            flattenAndDedupeArray(meta.declarations).forEach((declaredType) => {\n                if (!isValidType(declaredType)) {\n                    this._reportError(syntaxError(`Unexpected value '${stringifyType(declaredType)}' declared by the module '${stringifyType(moduleType)}'`), moduleType);\n                    return;\n                }\n                const declaredIdentifier = this._getIdentifierMetadata(declaredType);\n                if (this.isDirective(declaredType)) {\n                    transitiveModule.addDirective(declaredIdentifier);\n                    declaredDirectives.push(declaredIdentifier);\n                    this._addTypeToModule(declaredType, moduleType);\n                }\n                else if (this.isPipe(declaredType)) {\n                    transitiveModule.addPipe(declaredIdentifier);\n                    transitiveModule.pipes.push(declaredIdentifier);\n                    declaredPipes.push(declaredIdentifier);\n                    this._addTypeToModule(declaredType, moduleType);\n                }\n                else {\n                    this._reportError(syntaxError(`Unexpected ${this._getTypeDescriptor(declaredType)} '${stringifyType(declaredType)}' declared by the module '${stringifyType(moduleType)}'. Please add a @Pipe/@Directive/@Component annotation.`), moduleType);\n                    return;\n                }\n            });\n        }\n        const exportedDirectives = [];\n        const exportedPipes = [];\n        exportedNonModuleIdentifiers.forEach((exportedId) => {\n            if (transitiveModule.directivesSet.has(exportedId.reference)) {\n                exportedDirectives.push(exportedId);\n                transitiveModule.addExportedDirective(exportedId);\n            }\n            else if (transitiveModule.pipesSet.has(exportedId.reference)) {\n                exportedPipes.push(exportedId);\n                transitiveModule.addExportedPipe(exportedId);\n            }\n            else {\n                this._reportError(syntaxError(`Can't export ${this._getTypeDescriptor(exportedId.reference)} ${stringifyType(exportedId.reference)} from ${stringifyType(moduleType)} as it was neither declared nor imported!`), moduleType);\n                return;\n            }\n        });\n        // The providers of the module have to go last\n        // so that they overwrite any other provider we already added.\n        if (meta.providers) {\n            providers.push(...this._getProvidersMetadata(meta.providers, entryComponents, `provider for the NgModule '${stringifyType(moduleType)}'`, [], moduleType));\n        }\n        if (meta.entryComponents) {\n            entryComponents.push(...flattenAndDedupeArray(meta.entryComponents)\n                .map(type => this._getEntryComponentMetadata(type)));\n        }\n        if (meta.bootstrap) {\n            flattenAndDedupeArray(meta.bootstrap).forEach(type => {\n                if (!isValidType(type)) {\n                    this._reportError(syntaxError(`Unexpected value '${stringifyType(type)}' used in the bootstrap property of module '${stringifyType(moduleType)}'`), moduleType);\n                    return;\n                }\n                bootstrapComponents.push(this._getIdentifierMetadata(type));\n            });\n        }\n        entryComponents.push(...bootstrapComponents.map(type => this._getEntryComponentMetadata(type.reference)));\n        if (meta.schemas) {\n            schemas.push(...flattenAndDedupeArray(meta.schemas));\n        }\n        compileMeta = new CompileNgModuleMetadata({\n            type: this._getTypeMetadata(moduleType),\n            providers,\n            entryComponents,\n            bootstrapComponents,\n            schemas,\n            declaredDirectives,\n            exportedDirectives,\n            declaredPipes,\n            exportedPipes,\n            importedModules,\n            exportedModules,\n            transitiveModule,\n            id: meta.id || null,\n        });\n        entryComponents.forEach((id) => transitiveModule.addEntryComponent(id));\n        providers.forEach((provider) => transitiveModule.addProvider(provider, compileMeta.type));\n        transitiveModule.addModule(compileMeta.type);\n        this._ngModuleCache.set(moduleType, compileMeta);\n        return compileMeta;\n    }\n    _checkSelfImport(moduleType, importedModuleType) {\n        if (moduleType === importedModuleType) {\n            this._reportError(syntaxError(`'${stringifyType(moduleType)}' module can't import itself`), moduleType);\n            return true;\n        }\n        return false;\n    }\n    _getTypeDescriptor(type) {\n        if (isValidType(type)) {\n            if (this.isDirective(type)) {\n                return 'directive';\n            }\n            if (this.isPipe(type)) {\n                return 'pipe';\n            }\n            if (this.isNgModule(type)) {\n                return 'module';\n            }\n        }\n        if (type.provide) {\n            return 'provider';\n        }\n        return 'value';\n    }\n    _addTypeToModule(type, moduleType) {\n        const oldModule = this._ngModuleOfTypes.get(type);\n        if (oldModule && oldModule !== moduleType) {\n            this._reportError(syntaxError(`Type ${stringifyType(type)} is part of the declarations of 2 modules: ${stringifyType(oldModule)} and ${stringifyType(moduleType)}! ` +\n                `Please consider moving ${stringifyType(type)} to a higher module that imports ${stringifyType(oldModule)} and ${stringifyType(moduleType)}. ` +\n                `You can also create a new NgModule that exports and includes ${stringifyType(type)} then import that NgModule in ${stringifyType(oldModule)} and ${stringifyType(moduleType)}.`), moduleType);\n            return;\n        }\n        this._ngModuleOfTypes.set(type, moduleType);\n    }\n    _getTransitiveNgModuleMetadata(importedModules, exportedModules) {\n        // collect `providers` / `entryComponents` from all imported and all exported modules\n        const result = new TransitiveCompileNgModuleMetadata();\n        const modulesByToken = new Map();\n        importedModules.concat(exportedModules).forEach((modSummary) => {\n            modSummary.modules.forEach((mod) => result.addModule(mod));\n            modSummary.entryComponents.forEach((comp) => result.addEntryComponent(comp));\n            const addedTokens = new Set();\n            modSummary.providers.forEach((entry) => {\n                const tokenRef = tokenReference(entry.provider.token);\n                let prevModules = modulesByToken.get(tokenRef);\n                if (!prevModules) {\n                    prevModules = new Set();\n                    modulesByToken.set(tokenRef, prevModules);\n                }\n                const moduleRef = entry.module.reference;\n                // Note: the providers of one module may still contain multiple providers\n                // per token (e.g. for multi providers), and we need to preserve these.\n                if (addedTokens.has(tokenRef) || !prevModules.has(moduleRef)) {\n                    prevModules.add(moduleRef);\n                    addedTokens.add(tokenRef);\n                    result.addProvider(entry.provider, entry.module);\n                }\n            });\n        });\n        exportedModules.forEach((modSummary) => {\n            modSummary.exportedDirectives.forEach((id) => result.addExportedDirective(id));\n            modSummary.exportedPipes.forEach((id) => result.addExportedPipe(id));\n        });\n        importedModules.forEach((modSummary) => {\n            modSummary.exportedDirectives.forEach((id) => result.addDirective(id));\n            modSummary.exportedPipes.forEach((id) => result.addPipe(id));\n        });\n        return result;\n    }\n    _getIdentifierMetadata(type) {\n        type = resolveForwardRef(type);\n        return { reference: type };\n    }\n    isInjectable(type) {\n        const annotations = this._reflector.tryAnnotations(type);\n        return annotations.some(ann => createInjectable.isTypeOf(ann));\n    }\n    getInjectableSummary(type) {\n        return {\n            summaryKind: CompileSummaryKind.Injectable,\n            type: this._getTypeMetadata(type, null, false)\n        };\n    }\n    getInjectableMetadata(type, dependencies = null, throwOnUnknownDeps = true) {\n        const typeSummary = this._loadSummary(type, CompileSummaryKind.Injectable);\n        const typeMetadata = typeSummary ?\n            typeSummary.type :\n            this._getTypeMetadata(type, dependencies, throwOnUnknownDeps);\n        const annotations = this._reflector.annotations(type).filter(ann => createInjectable.isTypeOf(ann));\n        if (annotations.length === 0) {\n            return null;\n        }\n        const meta = annotations[annotations.length - 1];\n        return {\n            symbol: type,\n            type: typeMetadata,\n            providedIn: meta.providedIn,\n            useValue: meta.useValue,\n            useClass: meta.useClass,\n            useExisting: meta.useExisting,\n            useFactory: meta.useFactory,\n            deps: meta.deps,\n        };\n    }\n    _getTypeMetadata(type, dependencies = null, throwOnUnknownDeps = true) {\n        const identifier = this._getIdentifierMetadata(type);\n        return {\n            reference: identifier.reference,\n            diDeps: this._getDependenciesMetadata(identifier.reference, dependencies, throwOnUnknownDeps),\n            lifecycleHooks: getAllLifecycleHooks(this._reflector, identifier.reference),\n        };\n    }\n    _getFactoryMetadata(factory, dependencies = null) {\n        factory = resolveForwardRef(factory);\n        return { reference: factory, diDeps: this._getDependenciesMetadata(factory, dependencies) };\n    }\n    /**\n     * Gets the metadata for the given pipe.\n     * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.\n     */\n    getPipeMetadata(pipeType) {\n        const pipeMeta = this._pipeCache.get(pipeType);\n        if (!pipeMeta) {\n            this._reportError(syntaxError(`Illegal state: getPipeMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Pipe ${stringifyType(pipeType)}.`), pipeType);\n        }\n        return pipeMeta || null;\n    }\n    getPipeSummary(pipeType) {\n        const pipeSummary = this._loadSummary(pipeType, CompileSummaryKind.Pipe);\n        if (!pipeSummary) {\n            this._reportError(syntaxError(`Illegal state: Could not load the summary for pipe ${stringifyType(pipeType)}.`), pipeType);\n        }\n        return pipeSummary;\n    }\n    getOrLoadPipeMetadata(pipeType) {\n        let pipeMeta = this._pipeCache.get(pipeType);\n        if (!pipeMeta) {\n            pipeMeta = this._loadPipeMetadata(pipeType);\n        }\n        return pipeMeta;\n    }\n    _loadPipeMetadata(pipeType) {\n        pipeType = resolveForwardRef(pipeType);\n        const pipeAnnotation = this._pipeResolver.resolve(pipeType);\n        const pipeMeta = new CompilePipeMetadata({\n            type: this._getTypeMetadata(pipeType),\n            name: pipeAnnotation.name,\n            pure: !!pipeAnnotation.pure\n        });\n        this._pipeCache.set(pipeType, pipeMeta);\n        this._summaryCache.set(pipeType, pipeMeta.toSummary());\n        return pipeMeta;\n    }\n    _getDependenciesMetadata(typeOrFunc, dependencies, throwOnUnknownDeps = true) {\n        let hasUnknownDeps = false;\n        const params = dependencies || this._reflector.parameters(typeOrFunc) || [];\n        const dependenciesMetadata = params.map((param) => {\n            let isAttribute = false;\n            let isHost = false;\n            let isSelf = false;\n            let isSkipSelf = false;\n            let isOptional = false;\n            let token = null;\n            if (Array.isArray(param)) {\n                param.forEach((paramEntry) => {\n                    if (createHost.isTypeOf(paramEntry)) {\n                        isHost = true;\n                    }\n                    else if (createSelf.isTypeOf(paramEntry)) {\n                        isSelf = true;\n                    }\n                    else if (createSkipSelf.isTypeOf(paramEntry)) {\n                        isSkipSelf = true;\n                    }\n                    else if (createOptional.isTypeOf(paramEntry)) {\n                        isOptional = true;\n                    }\n                    else if (createAttribute.isTypeOf(paramEntry)) {\n                        isAttribute = true;\n                        token = paramEntry.attributeName;\n                    }\n                    else if (createInject.isTypeOf(paramEntry)) {\n                        token = paramEntry.token;\n                    }\n                    else if (createInjectionToken.isTypeOf(paramEntry) || paramEntry instanceof StaticSymbol) {\n                        token = paramEntry;\n                    }\n                    else if (isValidType(paramEntry) && token == null) {\n                        token = paramEntry;\n                    }\n                });\n            }\n            else {\n                token = param;\n            }\n            if (token == null) {\n                hasUnknownDeps = true;\n                return {};\n            }\n            return {\n                isAttribute,\n                isHost,\n                isSelf,\n                isSkipSelf,\n                isOptional,\n                token: this._getTokenMetadata(token)\n            };\n        });\n        if (hasUnknownDeps) {\n            const depsTokens = dependenciesMetadata.map((dep) => dep.token ? stringifyType(dep.token) : '?').join(', ');\n            const message = `Can't resolve all parameters for ${stringifyType(typeOrFunc)}: (${depsTokens}).`;\n            if (throwOnUnknownDeps || this._config.strictInjectionParameters) {\n                this._reportError(syntaxError(message), typeOrFunc);\n            }\n            else {\n                this._console.warn(`Warning: ${message} This will become an error in Angular v6.x`);\n            }\n        }\n        return dependenciesMetadata;\n    }\n    _getTokenMetadata(token) {\n        token = resolveForwardRef(token);\n        let compileToken;\n        if (typeof token === 'string') {\n            compileToken = { value: token };\n        }\n        else {\n            compileToken = { identifier: { reference: token } };\n        }\n        return compileToken;\n    }\n    _getProvidersMetadata(providers, targetEntryComponents, debugInfo, compileProviders = [], type) {\n        providers.forEach((provider, providerIdx) => {\n            if (Array.isArray(provider)) {\n                this._getProvidersMetadata(provider, targetEntryComponents, debugInfo, compileProviders);\n            }\n            else {\n                provider = resolveForwardRef(provider);\n                let providerMeta = undefined;\n                if (provider && typeof provider === 'object' && provider.hasOwnProperty('provide')) {\n                    this._validateProvider(provider);\n                    providerMeta = new ProviderMeta(provider.provide, provider);\n                }\n                else if (isValidType(provider)) {\n                    providerMeta = new ProviderMeta(provider, { useClass: provider });\n                }\n                else if (provider === void 0) {\n                    this._reportError(syntaxError(`Encountered undefined provider! Usually this means you have a circular dependencies. This might be caused by using 'barrel' index.ts files.`));\n                    return;\n                }\n                else {\n                    const providersInfo = providers.reduce((soFar, seenProvider, seenProviderIdx) => {\n                        if (seenProviderIdx < providerIdx) {\n                            soFar.push(`${stringifyType(seenProvider)}`);\n                        }\n                        else if (seenProviderIdx == providerIdx) {\n                            soFar.push(`?${stringifyType(seenProvider)}?`);\n                        }\n                        else if (seenProviderIdx == providerIdx + 1) {\n                            soFar.push('...');\n                        }\n                        return soFar;\n                    }, [])\n                        .join(', ');\n                    this._reportError(syntaxError(`Invalid ${debugInfo ? debugInfo : 'provider'} - only instances of Provider and Type are allowed, got: [${providersInfo}]`), type);\n                    return;\n                }\n                if (providerMeta.token ===\n                    this._reflector.resolveExternalReference(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS)) {\n                    targetEntryComponents.push(...this._getEntryComponentsFromProvider(providerMeta, type));\n                }\n                else {\n                    compileProviders.push(this.getProviderMetadata(providerMeta));\n                }\n            }\n        });\n        return compileProviders;\n    }\n    _validateProvider(provider) {\n        if (provider.hasOwnProperty('useClass') && provider.useClass == null) {\n            this._reportError(syntaxError(`Invalid provider for ${stringifyType(provider.provide)}. useClass cannot be ${provider.useClass}.\n           Usually it happens when:\n           1. There's a circular dependency (might be caused by using index.ts (barrel) files).\n           2. Class was used before it was declared. Use forwardRef in this case.`));\n        }\n    }\n    _getEntryComponentsFromProvider(provider, type) {\n        const components = [];\n        const collectedIdentifiers = [];\n        if (provider.useFactory || provider.useExisting || provider.useClass) {\n            this._reportError(syntaxError(`The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!`), type);\n            return [];\n        }\n        if (!provider.multi) {\n            this._reportError(syntaxError(`The ANALYZE_FOR_ENTRY_COMPONENTS token only supports 'multi = true'!`), type);\n            return [];\n        }\n        extractIdentifiers(provider.useValue, collectedIdentifiers);\n        collectedIdentifiers.forEach((identifier) => {\n            const entry = this._getEntryComponentMetadata(identifier.reference, false);\n            if (entry) {\n                components.push(entry);\n            }\n        });\n        return components;\n    }\n    _getEntryComponentMetadata(dirType, throwIfNotFound = true) {\n        const dirMeta = this.getNonNormalizedDirectiveMetadata(dirType);\n        if (dirMeta && dirMeta.metadata.isComponent) {\n            return { componentType: dirType, componentFactory: dirMeta.metadata.componentFactory };\n        }\n        const dirSummary = this._loadSummary(dirType, CompileSummaryKind.Directive);\n        if (dirSummary && dirSummary.isComponent) {\n            return { componentType: dirType, componentFactory: dirSummary.componentFactory };\n        }\n        if (throwIfNotFound) {\n            throw syntaxError(`${dirType.name} cannot be used as an entry component.`);\n        }\n        return null;\n    }\n    _getInjectableTypeMetadata(type, dependencies = null) {\n        const typeSummary = this._loadSummary(type, CompileSummaryKind.Injectable);\n        if (typeSummary) {\n            return typeSummary.type;\n        }\n        return this._getTypeMetadata(type, dependencies);\n    }\n    getProviderMetadata(provider) {\n        let compileDeps = undefined;\n        let compileTypeMetadata = null;\n        let compileFactoryMetadata = null;\n        let token = this._getTokenMetadata(provider.token);\n        if (provider.useClass) {\n            compileTypeMetadata =\n                this._getInjectableTypeMetadata(provider.useClass, provider.dependencies);\n            compileDeps = compileTypeMetadata.diDeps;\n            if (provider.token === provider.useClass) {\n                // use the compileTypeMetadata as it contains information about lifecycleHooks...\n                token = { identifier: compileTypeMetadata };\n            }\n        }\n        else if (provider.useFactory) {\n            compileFactoryMetadata = this._getFactoryMetadata(provider.useFactory, provider.dependencies);\n            compileDeps = compileFactoryMetadata.diDeps;\n        }\n        return {\n            token: token,\n            useClass: compileTypeMetadata,\n            useValue: provider.useValue,\n            useFactory: compileFactoryMetadata,\n            useExisting: provider.useExisting ? this._getTokenMetadata(provider.useExisting) : undefined,\n            deps: compileDeps,\n            multi: provider.multi\n        };\n    }\n    _getQueriesMetadata(queries, isViewQuery, directiveType) {\n        const res = [];\n        Object.keys(queries).forEach((propertyName) => {\n            const query = queries[propertyName];\n            if (query.isViewQuery === isViewQuery) {\n                res.push(this._getQueryMetadata(query, propertyName, directiveType));\n            }\n        });\n        return res;\n    }\n    _queryVarBindings(selector) { return selector.split(/\\s*,\\s*/); }\n    _getQueryMetadata(q, propertyName, typeOrFunc) {\n        let selectors;\n        if (typeof q.selector === 'string') {\n            selectors =\n                this._queryVarBindings(q.selector).map(varName => this._getTokenMetadata(varName));\n        }\n        else {\n            if (!q.selector) {\n                this._reportError(syntaxError(`Can't construct a query for the property \"${propertyName}\" of \"${stringifyType(typeOrFunc)}\" since the query selector wasn't defined.`), typeOrFunc);\n                selectors = [];\n            }\n            else {\n                selectors = [this._getTokenMetadata(q.selector)];\n            }\n        }\n        return {\n            selectors,\n            first: q.first,\n            descendants: q.descendants, propertyName,\n            read: q.read ? this._getTokenMetadata(q.read) : null,\n            static: q.static\n        };\n    }\n    _reportError(error, type, otherType) {\n        if (this._errorCollector) {\n            this._errorCollector(error, type);\n            if (otherType) {\n                this._errorCollector(error, otherType);\n            }\n        }\n        else {\n            throw error;\n        }\n    }\n}\nfunction flattenArray(tree, out = []) {\n    if (tree) {\n        for (let i = 0; i < tree.length; i++) {\n            const item = resolveForwardRef(tree[i]);\n            if (Array.isArray(item)) {\n                flattenArray(item, out);\n            }\n            else {\n                out.push(item);\n            }\n        }\n    }\n    return out;\n}\nfunction dedupeArray(array) {\n    if (array) {\n        return Array.from(new Set(array));\n    }\n    return [];\n}\nfunction flattenAndDedupeArray(tree) {\n    return dedupeArray(flattenArray(tree));\n}\nfunction isValidType(value) {\n    return (value instanceof StaticSymbol) || (value instanceof Type);\n}\nfunction extractIdentifiers(value, targetIdentifiers) {\n    visitValue(value, new _CompileValueConverter(), targetIdentifiers);\n}\nclass _CompileValueConverter extends ValueTransformer {\n    visitOther(value, targetIdentifiers) {\n        targetIdentifiers.push({ reference: value });\n    }\n}\nfunction stringifyType(type) {\n    if (type instanceof StaticSymbol) {\n        return `${type.name} in ${type.filePath}`;\n    }\n    else {\n        return stringify(type);\n    }\n}\n/**\n * Indicates that a component is still being loaded in a synchronous compile.\n */\nfunction componentStillLoadingError(compType) {\n    const error = Error(`Can't compile synchronously as ${stringify(compType)} is still being loaded!`);\n    error[ERROR_COMPONENT_TYPE] = compType;\n    return error;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction providerDef(ctx, providerAst) {\n    let flags = 0 /* None */;\n    if (!providerAst.eager) {\n        flags |= 4096 /* LazyProvider */;\n    }\n    if (providerAst.providerType === ProviderAstType.PrivateService) {\n        flags |= 8192 /* PrivateProvider */;\n    }\n    if (providerAst.isModule) {\n        flags |= 1073741824 /* TypeModuleProvider */;\n    }\n    providerAst.lifecycleHooks.forEach((lifecycleHook) => {\n        // for regular providers, we only support ngOnDestroy\n        if (lifecycleHook === LifecycleHooks.OnDestroy ||\n            providerAst.providerType === ProviderAstType.Directive ||\n            providerAst.providerType === ProviderAstType.Component) {\n            flags |= lifecycleHookToNodeFlag(lifecycleHook);\n        }\n    });\n    const { providerExpr, flags: providerFlags, depsExpr } = providerAst.multiProvider ?\n        multiProviderDef(ctx, flags, providerAst.providers) :\n        singleProviderDef(ctx, flags, providerAst.providerType, providerAst.providers[0]);\n    return {\n        providerExpr,\n        flags: providerFlags, depsExpr,\n        tokenExpr: tokenExpr(ctx, providerAst.token),\n    };\n}\nfunction multiProviderDef(ctx, flags, providers) {\n    const allDepDefs = [];\n    const allParams = [];\n    const exprs = providers.map((provider, providerIndex) => {\n        let expr;\n        if (provider.useClass) {\n            const depExprs = convertDeps(providerIndex, provider.deps || provider.useClass.diDeps);\n            expr = ctx.importExpr(provider.useClass.reference).instantiate(depExprs);\n        }\n        else if (provider.useFactory) {\n            const depExprs = convertDeps(providerIndex, provider.deps || provider.useFactory.diDeps);\n            expr = ctx.importExpr(provider.useFactory.reference).callFn(depExprs);\n        }\n        else if (provider.useExisting) {\n            const depExprs = convertDeps(providerIndex, [{ token: provider.useExisting }]);\n            expr = depExprs[0];\n        }\n        else {\n            expr = convertValueToOutputAst(ctx, provider.useValue);\n        }\n        return expr;\n    });\n    const providerExpr = fn(allParams, [new ReturnStatement(literalArr(exprs))], INFERRED_TYPE);\n    return {\n        providerExpr,\n        flags: flags | 1024 /* TypeFactoryProvider */,\n        depsExpr: literalArr(allDepDefs)\n    };\n    function convertDeps(providerIndex, deps) {\n        return deps.map((dep, depIndex) => {\n            const paramName = `p${providerIndex}_${depIndex}`;\n            allParams.push(new FnParam(paramName, DYNAMIC_TYPE));\n            allDepDefs.push(depDef(ctx, dep));\n            return variable(paramName);\n        });\n    }\n}\nfunction singleProviderDef(ctx, flags, providerType, providerMeta) {\n    let providerExpr;\n    let deps;\n    if (providerType === ProviderAstType.Directive || providerType === ProviderAstType.Component) {\n        providerExpr = ctx.importExpr(providerMeta.useClass.reference);\n        flags |= 16384 /* TypeDirective */;\n        deps = providerMeta.deps || providerMeta.useClass.diDeps;\n    }\n    else {\n        if (providerMeta.useClass) {\n            providerExpr = ctx.importExpr(providerMeta.useClass.reference);\n            flags |= 512 /* TypeClassProvider */;\n            deps = providerMeta.deps || providerMeta.useClass.diDeps;\n        }\n        else if (providerMeta.useFactory) {\n            providerExpr = ctx.importExpr(providerMeta.useFactory.reference);\n            flags |= 1024 /* TypeFactoryProvider */;\n            deps = providerMeta.deps || providerMeta.useFactory.diDeps;\n        }\n        else if (providerMeta.useExisting) {\n            providerExpr = NULL_EXPR;\n            flags |= 2048 /* TypeUseExistingProvider */;\n            deps = [{ token: providerMeta.useExisting }];\n        }\n        else {\n            providerExpr = convertValueToOutputAst(ctx, providerMeta.useValue);\n            flags |= 256 /* TypeValueProvider */;\n            deps = [];\n        }\n    }\n    const depsExpr = literalArr(deps.map(dep => depDef(ctx, dep)));\n    return { providerExpr, flags, depsExpr };\n}\nfunction tokenExpr(ctx, tokenMeta) {\n    return tokenMeta.identifier ? ctx.importExpr(tokenMeta.identifier.reference) :\n        literal(tokenMeta.value);\n}\nfunction depDef(ctx, dep) {\n    // Note: the following fields have already been normalized out by provider_analyzer:\n    // - isAttribute, isHost\n    const expr = dep.isValue ? convertValueToOutputAst(ctx, dep.value) : tokenExpr(ctx, dep.token);\n    let flags = 0 /* None */;\n    if (dep.isSkipSelf) {\n        flags |= 1 /* SkipSelf */;\n    }\n    if (dep.isOptional) {\n        flags |= 2 /* Optional */;\n    }\n    if (dep.isSelf) {\n        flags |= 4 /* Self */;\n    }\n    if (dep.isValue) {\n        flags |= 8 /* Value */;\n    }\n    return flags === 0 /* None */ ? expr : literalArr([literal(flags), expr]);\n}\nfunction lifecycleHookToNodeFlag(lifecycleHook) {\n    let nodeFlag = 0 /* None */;\n    switch (lifecycleHook) {\n        case LifecycleHooks.AfterContentChecked:\n            nodeFlag = 2097152 /* AfterContentChecked */;\n            break;\n        case LifecycleHooks.AfterContentInit:\n            nodeFlag = 1048576 /* AfterContentInit */;\n            break;\n        case LifecycleHooks.AfterViewChecked:\n            nodeFlag = 8388608 /* AfterViewChecked */;\n            break;\n        case LifecycleHooks.AfterViewInit:\n            nodeFlag = 4194304 /* AfterViewInit */;\n            break;\n        case LifecycleHooks.DoCheck:\n            nodeFlag = 262144 /* DoCheck */;\n            break;\n        case LifecycleHooks.OnChanges:\n            nodeFlag = 524288 /* OnChanges */;\n            break;\n        case LifecycleHooks.OnDestroy:\n            nodeFlag = 131072 /* OnDestroy */;\n            break;\n        case LifecycleHooks.OnInit:\n            nodeFlag = 65536 /* OnInit */;\n            break;\n    }\n    return nodeFlag;\n}\nfunction componentFactoryResolverProviderDef(reflector, ctx, flags, entryComponents) {\n    const entryComponentFactories = entryComponents.map((entryComponent) => ctx.importExpr(entryComponent.componentFactory));\n    const token = createTokenForExternalReference(reflector, Identifiers.ComponentFactoryResolver);\n    const classMeta = {\n        diDeps: [\n            { isValue: true, value: literalArr(entryComponentFactories) },\n            { token: token, isSkipSelf: true, isOptional: true },\n            { token: createTokenForExternalReference(reflector, Identifiers.NgModuleRef) },\n        ],\n        lifecycleHooks: [],\n        reference: reflector.resolveExternalReference(Identifiers.CodegenComponentFactoryResolver)\n    };\n    const { providerExpr, flags: providerFlags, depsExpr } = singleProviderDef(ctx, flags, ProviderAstType.PrivateService, {\n        token,\n        multi: false,\n        useClass: classMeta,\n    });\n    return { providerExpr, flags: providerFlags, depsExpr, tokenExpr: tokenExpr(ctx, token) };\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass NgModuleCompileResult {\n    constructor(ngModuleFactoryVar) {\n        this.ngModuleFactoryVar = ngModuleFactoryVar;\n    }\n}\nconst LOG_VAR = variable('_l');\nclass NgModuleCompiler {\n    constructor(reflector) {\n        this.reflector = reflector;\n    }\n    compile(ctx, ngModuleMeta, extraProviders) {\n        const sourceSpan = typeSourceSpan('NgModule', ngModuleMeta.type);\n        const entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents;\n        const bootstrapComponents = ngModuleMeta.bootstrapComponents;\n        const providerParser = new NgModuleProviderAnalyzer(this.reflector, ngModuleMeta, extraProviders, sourceSpan);\n        const providerDefs = [componentFactoryResolverProviderDef(this.reflector, ctx, 0 /* None */, entryComponentFactories)]\n            .concat(providerParser.parse().map((provider) => providerDef(ctx, provider)))\n            .map(({ providerExpr, depsExpr, flags, tokenExpr }) => {\n            return importExpr(Identifiers.moduleProviderDef).callFn([\n                literal(flags), tokenExpr, providerExpr, depsExpr\n            ]);\n        });\n        const ngModuleDef = importExpr(Identifiers.moduleDef).callFn([literalArr(providerDefs)]);\n        const ngModuleDefFactory = fn([new FnParam(LOG_VAR.name)], [new ReturnStatement(ngModuleDef)], INFERRED_TYPE);\n        const ngModuleFactoryVar = `${identifierName(ngModuleMeta.type)}NgFactory`;\n        this._createNgModuleFactory(ctx, ngModuleMeta.type.reference, importExpr(Identifiers.createModuleFactory).callFn([\n            ctx.importExpr(ngModuleMeta.type.reference),\n            literalArr(bootstrapComponents.map(id => ctx.importExpr(id.reference))),\n            ngModuleDefFactory\n        ]));\n        if (ngModuleMeta.id) {\n            const id = typeof ngModuleMeta.id === 'string' ? literal(ngModuleMeta.id) :\n                ctx.importExpr(ngModuleMeta.id);\n            const registerFactoryStmt = importExpr(Identifiers.RegisterModuleFactoryFn)\n                .callFn([id, variable(ngModuleFactoryVar)])\n                .toStmt();\n            ctx.statements.push(registerFactoryStmt);\n        }\n        return new NgModuleCompileResult(ngModuleFactoryVar);\n    }\n    createStub(ctx, ngModuleReference) {\n        this._createNgModuleFactory(ctx, ngModuleReference, NULL_EXPR);\n    }\n    _createNgModuleFactory(ctx, reference, value) {\n        const ngModuleFactoryVar = `${identifierName({ reference: reference })}NgFactory`;\n        const ngModuleFactoryStmt = variable(ngModuleFactoryVar)\n            .set(value)\n            .toDeclStmt(importType(Identifiers.NgModuleFactory, [expressionType(ctx.importExpr(reference))], [TypeModifier.Const]), [StmtModifier.Final, StmtModifier.Exported]);\n        ctx.statements.push(ngModuleFactoryStmt);\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Resolves types to {@link NgModule}.\n */\nclass NgModuleResolver {\n    constructor(_reflector) {\n        this._reflector = _reflector;\n    }\n    isNgModule(type) { return this._reflector.annotations(type).some(createNgModule.isTypeOf); }\n    resolve(type, throwIfNotFound = true) {\n        const ngModuleMeta = findLast(this._reflector.annotations(type), createNgModule.isTypeOf);\n        if (ngModuleMeta) {\n            return ngModuleMeta;\n        }\n        else {\n            if (throwIfNotFound) {\n                throw new Error(`No NgModule metadata found for '${stringify(type)}'.`);\n            }\n            return null;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction debugOutputAstAsTypeScript(ast) {\n    const converter = new _TsEmitterVisitor();\n    const ctx = EmitterVisitorContext.createRoot();\n    const asts = Array.isArray(ast) ? ast : [ast];\n    asts.forEach((ast) => {\n        if (ast instanceof Statement) {\n            ast.visitStatement(converter, ctx);\n        }\n        else if (ast instanceof Expression) {\n            ast.visitExpression(converter, ctx);\n        }\n        else if (ast instanceof Type$1) {\n            ast.visitType(converter, ctx);\n        }\n        else {\n            throw new Error(`Don't know how to print debug info for ${ast}`);\n        }\n    });\n    return ctx.toSource();\n}\nclass TypeScriptEmitter {\n    emitStatementsAndContext(genFilePath, stmts, preamble = '', emitSourceMaps = true, referenceFilter, importFilter) {\n        const converter = new _TsEmitterVisitor(referenceFilter, importFilter);\n        const ctx = EmitterVisitorContext.createRoot();\n        converter.visitAllStatements(stmts, ctx);\n        const preambleLines = preamble ? preamble.split('\\n') : [];\n        converter.reexports.forEach((reexports, exportedModuleName) => {\n            const reexportsCode = reexports.map(reexport => `${reexport.name} as ${reexport.as}`).join(',');\n            preambleLines.push(`export {${reexportsCode}} from '${exportedModuleName}';`);\n        });\n        converter.importsWithPrefixes.forEach((prefix, importedModuleName) => {\n            // Note: can't write the real word for import as it screws up system.js auto detection...\n            preambleLines.push(`imp` +\n                `ort * as ${prefix} from '${importedModuleName}';`);\n        });\n        const sm = emitSourceMaps ?\n            ctx.toSourceMapGenerator(genFilePath, preambleLines.length).toJsComment() :\n            '';\n        const lines = [...preambleLines, ctx.toSource(), sm];\n        if (sm) {\n            // always add a newline at the end, as some tools have bugs without it.\n            lines.push('');\n        }\n        ctx.setPreambleLineCount(preambleLines.length);\n        return { sourceText: lines.join('\\n'), context: ctx };\n    }\n    emitStatements(genFilePath, stmts, preamble = '') {\n        return this.emitStatementsAndContext(genFilePath, stmts, preamble).sourceText;\n    }\n}\nclass _TsEmitterVisitor extends AbstractEmitterVisitor {\n    constructor(referenceFilter, importFilter) {\n        super(false);\n        this.referenceFilter = referenceFilter;\n        this.importFilter = importFilter;\n        this.typeExpression = 0;\n        this.importsWithPrefixes = new Map();\n        this.reexports = new Map();\n    }\n    visitType(t, ctx, defaultType = 'any') {\n        if (t) {\n            this.typeExpression++;\n            t.visitType(this, ctx);\n            this.typeExpression--;\n        }\n        else {\n            ctx.print(null, defaultType);\n        }\n    }\n    visitLiteralExpr(ast, ctx) {\n        const value = ast.value;\n        if (value == null && ast.type != INFERRED_TYPE) {\n            ctx.print(ast, `(${value} as any)`);\n            return null;\n        }\n        return super.visitLiteralExpr(ast, ctx);\n    }\n    // Temporary workaround to support strictNullCheck enabled consumers of ngc emit.\n    // In SNC mode, [] have the type never[], so we cast here to any[].\n    // TODO: narrow the cast to a more explicit type, or use a pattern that does not\n    // start with [].concat. see https://github.com/angular/angular/pull/11846\n    visitLiteralArrayExpr(ast, ctx) {\n        if (ast.entries.length === 0) {\n            ctx.print(ast, '(');\n        }\n        const result = super.visitLiteralArrayExpr(ast, ctx);\n        if (ast.entries.length === 0) {\n            ctx.print(ast, ' as any[])');\n        }\n        return result;\n    }\n    visitExternalExpr(ast, ctx) {\n        this._visitIdentifier(ast.value, ast.typeParams, ctx);\n        return null;\n    }\n    visitAssertNotNullExpr(ast, ctx) {\n        const result = super.visitAssertNotNullExpr(ast, ctx);\n        ctx.print(ast, '!');\n        return result;\n    }\n    visitDeclareVarStmt(stmt, ctx) {\n        if (stmt.hasModifier(StmtModifier.Exported) && stmt.value instanceof ExternalExpr &&\n            !stmt.type) {\n            // check for a reexport\n            const { name, moduleName } = stmt.value.value;\n            if (moduleName) {\n                let reexports = this.reexports.get(moduleName);\n                if (!reexports) {\n                    reexports = [];\n                    this.reexports.set(moduleName, reexports);\n                }\n                reexports.push({ name: name, as: stmt.name });\n                return null;\n            }\n        }\n        if (stmt.hasModifier(StmtModifier.Exported)) {\n            ctx.print(stmt, `export `);\n        }\n        if (stmt.hasModifier(StmtModifier.Final)) {\n            ctx.print(stmt, `const`);\n        }\n        else {\n            ctx.print(stmt, `var`);\n        }\n        ctx.print(stmt, ` ${stmt.name}`);\n        this._printColonType(stmt.type, ctx);\n        if (stmt.value) {\n            ctx.print(stmt, ` = `);\n            stmt.value.visitExpression(this, ctx);\n        }\n        ctx.println(stmt, `;`);\n        return null;\n    }\n    visitWrappedNodeExpr(ast, ctx) {\n        throw new Error('Cannot visit a WrappedNodeExpr when outputting Typescript.');\n    }\n    visitCastExpr(ast, ctx) {\n        ctx.print(ast, `(<`);\n        ast.type.visitType(this, ctx);\n        ctx.print(ast, `>`);\n        ast.value.visitExpression(this, ctx);\n        ctx.print(ast, `)`);\n        return null;\n    }\n    visitInstantiateExpr(ast, ctx) {\n        ctx.print(ast, `new `);\n        this.typeExpression++;\n        ast.classExpr.visitExpression(this, ctx);\n        this.typeExpression--;\n        ctx.print(ast, `(`);\n        this.visitAllExpressions(ast.args, ctx, ',');\n        ctx.print(ast, `)`);\n        return null;\n    }\n    visitDeclareClassStmt(stmt, ctx) {\n        ctx.pushClass(stmt);\n        if (stmt.hasModifier(StmtModifier.Exported)) {\n            ctx.print(stmt, `export `);\n        }\n        ctx.print(stmt, `class ${stmt.name}`);\n        if (stmt.parent != null) {\n            ctx.print(stmt, ` extends `);\n            this.typeExpression++;\n            stmt.parent.visitExpression(this, ctx);\n            this.typeExpression--;\n        }\n        ctx.println(stmt, ` {`);\n        ctx.incIndent();\n        stmt.fields.forEach((field) => this._visitClassField(field, ctx));\n        if (stmt.constructorMethod != null) {\n            this._visitClassConstructor(stmt, ctx);\n        }\n        stmt.getters.forEach((getter) => this._visitClassGetter(getter, ctx));\n        stmt.methods.forEach((method) => this._visitClassMethod(method, ctx));\n        ctx.decIndent();\n        ctx.println(stmt, `}`);\n        ctx.popClass();\n        return null;\n    }\n    _visitClassField(field, ctx) {\n        if (field.hasModifier(StmtModifier.Private)) {\n            // comment out as a workaround for #10967\n            ctx.print(null, `/*private*/ `);\n        }\n        if (field.hasModifier(StmtModifier.Static)) {\n            ctx.print(null, 'static ');\n        }\n        ctx.print(null, field.name);\n        this._printColonType(field.type, ctx);\n        if (field.initializer) {\n            ctx.print(null, ' = ');\n            field.initializer.visitExpression(this, ctx);\n        }\n        ctx.println(null, `;`);\n    }\n    _visitClassGetter(getter, ctx) {\n        if (getter.hasModifier(StmtModifier.Private)) {\n            ctx.print(null, `private `);\n        }\n        ctx.print(null, `get ${getter.name}()`);\n        this._printColonType(getter.type, ctx);\n        ctx.println(null, ` {`);\n        ctx.incIndent();\n        this.visitAllStatements(getter.body, ctx);\n        ctx.decIndent();\n        ctx.println(null, `}`);\n    }\n    _visitClassConstructor(stmt, ctx) {\n        ctx.print(stmt, `constructor(`);\n        this._visitParams(stmt.constructorMethod.params, ctx);\n        ctx.println(stmt, `) {`);\n        ctx.incIndent();\n        this.visitAllStatements(stmt.constructorMethod.body, ctx);\n        ctx.decIndent();\n        ctx.println(stmt, `}`);\n    }\n    _visitClassMethod(method, ctx) {\n        if (method.hasModifier(StmtModifier.Private)) {\n            ctx.print(null, `private `);\n        }\n        ctx.print(null, `${method.name}(`);\n        this._visitParams(method.params, ctx);\n        ctx.print(null, `)`);\n        this._printColonType(method.type, ctx, 'void');\n        ctx.println(null, ` {`);\n        ctx.incIndent();\n        this.visitAllStatements(method.body, ctx);\n        ctx.decIndent();\n        ctx.println(null, `}`);\n    }\n    visitFunctionExpr(ast, ctx) {\n        if (ast.name) {\n            ctx.print(ast, 'function ');\n            ctx.print(ast, ast.name);\n        }\n        ctx.print(ast, `(`);\n        this._visitParams(ast.params, ctx);\n        ctx.print(ast, `)`);\n        this._printColonType(ast.type, ctx, 'void');\n        if (!ast.name) {\n            ctx.print(ast, ` => `);\n        }\n        ctx.println(ast, '{');\n        ctx.incIndent();\n        this.visitAllStatements(ast.statements, ctx);\n        ctx.decIndent();\n        ctx.print(ast, `}`);\n        return null;\n    }\n    visitDeclareFunctionStmt(stmt, ctx) {\n        if (stmt.hasModifier(StmtModifier.Exported)) {\n            ctx.print(stmt, `export `);\n        }\n        ctx.print(stmt, `function ${stmt.name}(`);\n        this._visitParams(stmt.params, ctx);\n        ctx.print(stmt, `)`);\n        this._printColonType(stmt.type, ctx, 'void');\n        ctx.println(stmt, ` {`);\n        ctx.incIndent();\n        this.visitAllStatements(stmt.statements, ctx);\n        ctx.decIndent();\n        ctx.println(stmt, `}`);\n        return null;\n    }\n    visitTryCatchStmt(stmt, ctx) {\n        ctx.println(stmt, `try {`);\n        ctx.incIndent();\n        this.visitAllStatements(stmt.bodyStmts, ctx);\n        ctx.decIndent();\n        ctx.println(stmt, `} catch (${CATCH_ERROR_VAR$1.name}) {`);\n        ctx.incIndent();\n        const catchStmts = [CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop('stack', null)).toDeclStmt(null, [\n                StmtModifier.Final\n            ])].concat(stmt.catchStmts);\n        this.visitAllStatements(catchStmts, ctx);\n        ctx.decIndent();\n        ctx.println(stmt, `}`);\n        return null;\n    }\n    visitBuiltinType(type, ctx) {\n        let typeStr;\n        switch (type.name) {\n            case BuiltinTypeName.Bool:\n                typeStr = 'boolean';\n                break;\n            case BuiltinTypeName.Dynamic:\n                typeStr = 'any';\n                break;\n            case BuiltinTypeName.Function:\n                typeStr = 'Function';\n                break;\n            case BuiltinTypeName.Number:\n                typeStr = 'number';\n                break;\n            case BuiltinTypeName.Int:\n                typeStr = 'number';\n                break;\n            case BuiltinTypeName.String:\n                typeStr = 'string';\n                break;\n            case BuiltinTypeName.None:\n                typeStr = 'never';\n                break;\n            default:\n                throw new Error(`Unsupported builtin type ${type.name}`);\n        }\n        ctx.print(null, typeStr);\n        return null;\n    }\n    visitExpressionType(ast, ctx) {\n        ast.value.visitExpression(this, ctx);\n        if (ast.typeParams !== null) {\n            ctx.print(null, '<');\n            this.visitAllObjects(type => this.visitType(type, ctx), ast.typeParams, ctx, ',');\n            ctx.print(null, '>');\n        }\n        return null;\n    }\n    visitArrayType(type, ctx) {\n        this.visitType(type.of, ctx);\n        ctx.print(null, `[]`);\n        return null;\n    }\n    visitMapType(type, ctx) {\n        ctx.print(null, `{[key: string]:`);\n        this.visitType(type.valueType, ctx);\n        ctx.print(null, `}`);\n        return null;\n    }\n    getBuiltinMethodName(method) {\n        let name;\n        switch (method) {\n            case BuiltinMethod.ConcatArray:\n                name = 'concat';\n                break;\n            case BuiltinMethod.SubscribeObservable:\n                name = 'subscribe';\n                break;\n            case BuiltinMethod.Bind:\n                name = 'bind';\n                break;\n            default:\n                throw new Error(`Unknown builtin method: ${method}`);\n        }\n        return name;\n    }\n    _visitParams(params, ctx) {\n        this.visitAllObjects(param => {\n            ctx.print(null, param.name);\n            this._printColonType(param.type, ctx);\n        }, params, ctx, ',');\n    }\n    _visitIdentifier(value, typeParams, ctx) {\n        const { name, moduleName } = value;\n        if (this.referenceFilter && this.referenceFilter(value)) {\n            ctx.print(null, '(null as any)');\n            return;\n        }\n        if (moduleName && (!this.importFilter || !this.importFilter(value))) {\n            let prefix = this.importsWithPrefixes.get(moduleName);\n            if (prefix == null) {\n                prefix = `i${this.importsWithPrefixes.size}`;\n                this.importsWithPrefixes.set(moduleName, prefix);\n            }\n            ctx.print(null, `${prefix}.`);\n        }\n        ctx.print(null, name);\n        if (this.typeExpression > 0) {\n            // If we are in a type expression that refers to a generic type then supply\n            // the required type parameters. If there were not enough type parameters\n            // supplied, supply any as the type. Outside a type expression the reference\n            // should not supply type parameters and be treated as a simple value reference\n            // to the constructor function itself.\n            const suppliedParameters = typeParams || [];\n            if (suppliedParameters.length > 0) {\n                ctx.print(null, `<`);\n                this.visitAllObjects(type => type.visitType(this, ctx), typeParams, ctx, ',');\n                ctx.print(null, `>`);\n            }\n        }\n    }\n    _printColonType(type, ctx, defaultType) {\n        if (type !== INFERRED_TYPE) {\n            ctx.print(null, ':');\n            this.visitType(type, ctx, defaultType);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Resolve a `Type` for {@link Pipe}.\n *\n * This interface can be overridden by the application developer to create custom behavior.\n *\n * See {@link Compiler}\n */\nclass PipeResolver {\n    constructor(_reflector) {\n        this._reflector = _reflector;\n    }\n    isPipe(type) {\n        const typeMetadata = this._reflector.annotations(resolveForwardRef(type));\n        return typeMetadata && typeMetadata.some(createPipe.isTypeOf);\n    }\n    /**\n     * Return {@link Pipe} for a given `Type`.\n     */\n    resolve(type, throwIfNotFound = true) {\n        const metas = this._reflector.annotations(resolveForwardRef(type));\n        if (metas) {\n            const annotation = findLast(metas, createPipe.isTypeOf);\n            if (annotation) {\n                return annotation;\n            }\n        }\n        if (throwIfNotFound) {\n            throw new Error(`No Pipe decorator found on ${stringify(type)}`);\n        }\n        return null;\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Generates code that is used to type check templates.\n */\nclass TypeCheckCompiler {\n    constructor(options, reflector) {\n        this.options = options;\n        this.reflector = reflector;\n    }\n    /**\n     * Important notes:\n     * - This must not produce new `import` statements, but only refer to types outside\n     *   of the file via the variables provided via externalReferenceVars.\n     *   This allows Typescript to reuse the old program's structure as no imports have changed.\n     * - This must not produce any exports, as this would pollute the .d.ts file\n     *   and also violate the point above.\n     */\n    compileComponent(componentId, component, template, usedPipes, externalReferenceVars, ctx) {\n        const pipes = new Map();\n        usedPipes.forEach(p => pipes.set(p.name, p.type.reference));\n        let embeddedViewCount = 0;\n        const viewBuilderFactory = (parent, guards) => {\n            const embeddedViewIndex = embeddedViewCount++;\n            return new ViewBuilder(this.options, this.reflector, externalReferenceVars, parent, component.type.reference, component.isHost, embeddedViewIndex, pipes, guards, ctx, viewBuilderFactory);\n        };\n        const visitor = viewBuilderFactory(null, []);\n        visitor.visitAll([], template);\n        return visitor.build(componentId);\n    }\n}\nconst DYNAMIC_VAR_NAME = '_any';\nclass TypeCheckLocalResolver {\n    getLocal(name) {\n        if (name === EventHandlerVars.event.name) {\n            // References to the event should not be type-checked.\n            // TODO(chuckj): determine a better type for the event.\n            return variable(DYNAMIC_VAR_NAME);\n        }\n        return null;\n    }\n}\nconst defaultResolver = new TypeCheckLocalResolver();\nclass ViewBuilder {\n    constructor(options, reflector, externalReferenceVars, parent, component, isHostComponent, embeddedViewIndex, pipes, guards, ctx, viewBuilderFactory) {\n        this.options = options;\n        this.reflector = reflector;\n        this.externalReferenceVars = externalReferenceVars;\n        this.parent = parent;\n        this.component = component;\n        this.isHostComponent = isHostComponent;\n        this.embeddedViewIndex = embeddedViewIndex;\n        this.pipes = pipes;\n        this.guards = guards;\n        this.ctx = ctx;\n        this.viewBuilderFactory = viewBuilderFactory;\n        this.refOutputVars = new Map();\n        this.variables = [];\n        this.children = [];\n        this.updates = [];\n        this.actions = [];\n    }\n    getOutputVar(type) {\n        let varName;\n        if (type === this.component && this.isHostComponent) {\n            varName = DYNAMIC_VAR_NAME;\n        }\n        else if (type instanceof StaticSymbol) {\n            varName = this.externalReferenceVars.get(type);\n        }\n        else {\n            varName = DYNAMIC_VAR_NAME;\n        }\n        if (!varName) {\n            throw new Error(`Illegal State: referring to a type without a variable ${JSON.stringify(type)}`);\n        }\n        return varName;\n    }\n    getTypeGuardExpressions(ast) {\n        const result = [...this.guards];\n        for (let directive of ast.directives) {\n            for (let input of directive.inputs) {\n                const guard = directive.directive.guards[input.directiveName];\n                if (guard) {\n                    const useIf = guard === 'UseIf';\n                    result.push({\n                        guard,\n                        useIf,\n                        expression: { context: this.component, value: input.value }\n                    });\n                }\n            }\n        }\n        return result;\n    }\n    visitAll(variables, astNodes) {\n        this.variables = variables;\n        templateVisitAll(this, astNodes);\n    }\n    build(componentId, targetStatements = []) {\n        this.children.forEach((child) => child.build(componentId, targetStatements));\n        let viewStmts = [variable(DYNAMIC_VAR_NAME).set(NULL_EXPR).toDeclStmt(DYNAMIC_TYPE)];\n        let bindingCount = 0;\n        this.updates.forEach((expression) => {\n            const { sourceSpan, context, value } = this.preprocessUpdateExpression(expression);\n            const bindingId = `${bindingCount++}`;\n            const nameResolver = context === this.component ? this : defaultResolver;\n            const { stmts, currValExpr } = convertPropertyBinding(nameResolver, variable(this.getOutputVar(context)), value, bindingId, BindingForm.General);\n            stmts.push(new ExpressionStatement(currValExpr));\n            viewStmts.push(...stmts.map((stmt) => applySourceSpanToStatementIfNeeded(stmt, sourceSpan)));\n        });\n        this.actions.forEach(({ sourceSpan, context, value }) => {\n            const bindingId = `${bindingCount++}`;\n            const nameResolver = context === this.component ? this : defaultResolver;\n            const { stmts } = convertActionBinding(nameResolver, variable(this.getOutputVar(context)), value, bindingId);\n            viewStmts.push(...stmts.map((stmt) => applySourceSpanToStatementIfNeeded(stmt, sourceSpan)));\n        });\n        if (this.guards.length) {\n            let guardExpression = undefined;\n            for (const guard of this.guards) {\n                const { context, value } = this.preprocessUpdateExpression(guard.expression);\n                const bindingId = `${bindingCount++}`;\n                const nameResolver = context === this.component ? this : defaultResolver;\n                // We only support support simple expressions and ignore others as they\n                // are unlikely to affect type narrowing.\n                const { stmts, currValExpr } = convertPropertyBinding(nameResolver, variable(this.getOutputVar(context)), value, bindingId, BindingForm.TrySimple);\n                if (stmts.length == 0) {\n                    const guardClause = guard.useIf ? currValExpr : this.ctx.importExpr(guard.guard).callFn([currValExpr]);\n                    guardExpression = guardExpression ? guardExpression.and(guardClause) : guardClause;\n                }\n            }\n            if (guardExpression) {\n                viewStmts = [new IfStmt(guardExpression, viewStmts)];\n            }\n        }\n        const viewName = `_View_${componentId}_${this.embeddedViewIndex}`;\n        const viewFactory = new DeclareFunctionStmt(viewName, [], viewStmts);\n        targetStatements.push(viewFactory);\n        return targetStatements;\n    }\n    visitBoundText(ast, context) {\n        const astWithSource = ast.value;\n        const inter = astWithSource.ast;\n        inter.expressions.forEach((expr) => this.updates.push({ context: this.component, value: expr, sourceSpan: ast.sourceSpan }));\n    }\n    visitEmbeddedTemplate(ast, context) {\n        this.visitElementOrTemplate(ast);\n        // Note: The old view compiler used to use an `any` type\n        // for the context in any embedded view.\n        // We keep this behaivor behind a flag for now.\n        if (this.options.fullTemplateTypeCheck) {\n            // Find any applicable type guards. For example, NgIf has a type guard on ngIf\n            // (see NgIf.ngIfTypeGuard) that can be used to indicate that a template is only\n            // stamped out if ngIf is truthy so any bindings in the template can assume that,\n            // if a nullable type is used for ngIf, that expression is not null or undefined.\n            const guards = this.getTypeGuardExpressions(ast);\n            const childVisitor = this.viewBuilderFactory(this, guards);\n            this.children.push(childVisitor);\n            childVisitor.visitAll(ast.variables, ast.children);\n        }\n    }\n    visitElement(ast, context) {\n        this.visitElementOrTemplate(ast);\n        ast.inputs.forEach((inputAst) => {\n            this.updates.push({ context: this.component, value: inputAst.value, sourceSpan: inputAst.sourceSpan });\n        });\n        templateVisitAll(this, ast.children);\n    }\n    visitElementOrTemplate(ast) {\n        ast.directives.forEach((dirAst) => { this.visitDirective(dirAst); });\n        ast.references.forEach((ref) => {\n            let outputVarType = null;\n            // Note: The old view compiler used to use an `any` type\n            // for directives exposed via `exportAs`.\n            // We keep this behaivor behind a flag for now.\n            if (ref.value && ref.value.identifier && this.options.fullTemplateTypeCheck) {\n                outputVarType = ref.value.identifier.reference;\n            }\n            else {\n                outputVarType = BuiltinTypeName.Dynamic;\n            }\n            this.refOutputVars.set(ref.name, outputVarType);\n        });\n        ast.outputs.forEach((outputAst) => {\n            this.actions.push({ context: this.component, value: outputAst.handler, sourceSpan: outputAst.sourceSpan });\n        });\n    }\n    visitDirective(dirAst) {\n        const dirType = dirAst.directive.type.reference;\n        dirAst.inputs.forEach((input) => this.updates.push({ context: this.component, value: input.value, sourceSpan: input.sourceSpan }));\n        // Note: The old view compiler used to use an `any` type\n        // for expressions in host properties / events.\n        // We keep this behaivor behind a flag for now.\n        if (this.options.fullTemplateTypeCheck) {\n            dirAst.hostProperties.forEach((inputAst) => this.updates.push({ context: dirType, value: inputAst.value, sourceSpan: inputAst.sourceSpan }));\n            dirAst.hostEvents.forEach((hostEventAst) => this.actions.push({\n                context: dirType,\n                value: hostEventAst.handler,\n                sourceSpan: hostEventAst.sourceSpan\n            }));\n        }\n    }\n    getLocal(name) {\n        if (name == EventHandlerVars.event.name) {\n            return variable(this.getOutputVar(BuiltinTypeName.Dynamic));\n        }\n        for (let currBuilder = this; currBuilder; currBuilder = currBuilder.parent) {\n            let outputVarType;\n            // check references\n            outputVarType = currBuilder.refOutputVars.get(name);\n            if (outputVarType == null) {\n                // check variables\n                const varAst = currBuilder.variables.find((varAst) => varAst.name === name);\n                if (varAst) {\n                    outputVarType = BuiltinTypeName.Dynamic;\n                }\n            }\n            if (outputVarType != null) {\n                return variable(this.getOutputVar(outputVarType));\n            }\n        }\n        return null;\n    }\n    pipeOutputVar(name) {\n        const pipe = this.pipes.get(name);\n        if (!pipe) {\n            throw new Error(`Illegal State: Could not find pipe ${name} in template of ${this.component}`);\n        }\n        return this.getOutputVar(pipe);\n    }\n    preprocessUpdateExpression(expression) {\n        return {\n            sourceSpan: expression.sourceSpan,\n            context: expression.context,\n            value: convertPropertyBindingBuiltins({\n                createLiteralArrayConverter: (argCount) => (args) => {\n                    const arr = literalArr(args);\n                    // Note: The old view compiler used to use an `any` type\n                    // for arrays.\n                    return this.options.fullTemplateTypeCheck ? arr : arr.cast(DYNAMIC_TYPE);\n                },\n                createLiteralMapConverter: (keys) => (values) => {\n                    const entries = keys.map((k, i) => ({\n                        key: k.key,\n                        value: values[i],\n                        quoted: k.quoted,\n                    }));\n                    const map = literalMap(entries);\n                    // Note: The old view compiler used to use an `any` type\n                    // for maps.\n                    return this.options.fullTemplateTypeCheck ? map : map.cast(DYNAMIC_TYPE);\n                },\n                createPipeConverter: (name, argCount) => (args) => {\n                    // Note: The old view compiler used to use an `any` type\n                    // for pipes.\n                    const pipeExpr = this.options.fullTemplateTypeCheck ?\n                        variable(this.pipeOutputVar(name)) :\n                        variable(this.getOutputVar(BuiltinTypeName.Dynamic));\n                    return pipeExpr.callMethod('transform', args);\n                },\n            }, expression.value)\n        };\n    }\n    visitNgContent(ast, context) { }\n    visitText(ast, context) { }\n    visitDirectiveProperty(ast, context) { }\n    visitReference(ast, context) { }\n    visitVariable(ast, context) { }\n    visitEvent(ast, context) { }\n    visitElementProperty(ast, context) { }\n    visitAttr(ast, context) { }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst CLASS_ATTR$1 = 'class';\nconst STYLE_ATTR = 'style';\nconst IMPLICIT_TEMPLATE_VAR = '\\$implicit';\nclass ViewCompileResult {\n    constructor(viewClassVar, rendererTypeVar) {\n        this.viewClassVar = viewClassVar;\n        this.rendererTypeVar = rendererTypeVar;\n    }\n}\nclass ViewCompiler {\n    constructor(_reflector) {\n        this._reflector = _reflector;\n    }\n    compileComponent(outputCtx, component, template, styles, usedPipes) {\n        let embeddedViewCount = 0;\n        const staticQueryIds = findStaticQueryIds(template);\n        let renderComponentVarName = undefined;\n        if (!component.isHost) {\n            const template = component.template;\n            const customRenderData = [];\n            if (template.animations && template.animations.length) {\n                customRenderData.push(new LiteralMapEntry('animation', convertValueToOutputAst(outputCtx, template.animations), true));\n            }\n            const renderComponentVar = variable(rendererTypeName(component.type.reference));\n            renderComponentVarName = renderComponentVar.name;\n            outputCtx.statements.push(renderComponentVar\n                .set(importExpr(Identifiers.createRendererType2).callFn([new LiteralMapExpr([\n                    new LiteralMapEntry('encapsulation', literal(template.encapsulation), false),\n                    new LiteralMapEntry('styles', styles, false),\n                    new LiteralMapEntry('data', new LiteralMapExpr(customRenderData), false)\n                ])]))\n                .toDeclStmt(importType(Identifiers.RendererType2), [StmtModifier.Final, StmtModifier.Exported]));\n        }\n        const viewBuilderFactory = (parent) => {\n            const embeddedViewIndex = embeddedViewCount++;\n            return new ViewBuilder$1(this._reflector, outputCtx, parent, component, embeddedViewIndex, usedPipes, staticQueryIds, viewBuilderFactory);\n        };\n        const visitor = viewBuilderFactory(null);\n        visitor.visitAll([], template);\n        outputCtx.statements.push(...visitor.build());\n        return new ViewCompileResult(visitor.viewName, renderComponentVarName);\n    }\n}\nconst LOG_VAR$1 = variable('_l');\nconst VIEW_VAR = variable('_v');\nconst CHECK_VAR = variable('_ck');\nconst COMP_VAR = variable('_co');\nconst EVENT_NAME_VAR = variable('en');\nconst ALLOW_DEFAULT_VAR = variable(`ad`);\nclass ViewBuilder$1 {\n    constructor(reflector, outputCtx, parent, component, embeddedViewIndex, usedPipes, staticQueryIds, viewBuilderFactory) {\n        this.reflector = reflector;\n        this.outputCtx = outputCtx;\n        this.parent = parent;\n        this.component = component;\n        this.embeddedViewIndex = embeddedViewIndex;\n        this.usedPipes = usedPipes;\n        this.staticQueryIds = staticQueryIds;\n        this.viewBuilderFactory = viewBuilderFactory;\n        this.nodes = [];\n        this.purePipeNodeIndices = Object.create(null);\n        // Need Object.create so that we don't have builtin values...\n        this.refNodeIndices = Object.create(null);\n        this.variables = [];\n        this.children = [];\n        // TODO(tbosch): The old view compiler used to use an `any` type\n        // for the context in any embedded view. We keep this behaivor for now\n        // to be able to introduce the new view compiler without too many errors.\n        this.compType = this.embeddedViewIndex > 0 ?\n            DYNAMIC_TYPE :\n            expressionType(outputCtx.importExpr(this.component.type.reference));\n        this.viewName = viewClassName(this.component.type.reference, this.embeddedViewIndex);\n    }\n    visitAll(variables, astNodes) {\n        this.variables = variables;\n        // create the pipes for the pure pipes immediately, so that we know their indices.\n        if (!this.parent) {\n            this.usedPipes.forEach((pipe) => {\n                if (pipe.pure) {\n                    this.purePipeNodeIndices[pipe.name] = this._createPipe(null, pipe);\n                }\n            });\n        }\n        if (!this.parent) {\n            const queryIds = staticViewQueryIds(this.staticQueryIds);\n            this.component.viewQueries.forEach((query, queryIndex) => {\n                // Note: queries start with id 1 so we can use the number in a Bloom filter!\n                const queryId = queryIndex + 1;\n                const bindingType = query.first ? 0 /* First */ : 1 /* All */;\n                const flags = 134217728 /* TypeViewQuery */ | calcStaticDynamicQueryFlags(queryIds, queryId, query);\n                this.nodes.push(() => ({\n                    sourceSpan: null,\n                    nodeFlags: flags,\n                    nodeDef: importExpr(Identifiers.queryDef).callFn([\n                        literal(flags), literal(queryId),\n                        new LiteralMapExpr([new LiteralMapEntry(query.propertyName, literal(bindingType), false)])\n                    ])\n                }));\n            });\n        }\n        templateVisitAll(this, astNodes);\n        if (this.parent && (astNodes.length === 0 || needsAdditionalRootNode(astNodes))) {\n            // if the view is an embedded view, then we need to add an additional root node in some cases\n            this.nodes.push(() => ({\n                sourceSpan: null,\n                nodeFlags: 1 /* TypeElement */,\n                nodeDef: importExpr(Identifiers.anchorDef).callFn([\n                    literal(0 /* None */), NULL_EXPR, NULL_EXPR, literal(0)\n                ])\n            }));\n        }\n    }\n    build(targetStatements = []) {\n        this.children.forEach((child) => child.build(targetStatements));\n        const { updateRendererStmts, updateDirectivesStmts, nodeDefExprs } = this._createNodeExpressions();\n        const updateRendererFn = this._createUpdateFn(updateRendererStmts);\n        const updateDirectivesFn = this._createUpdateFn(updateDirectivesStmts);\n        let viewFlags = 0 /* None */;\n        if (!this.parent && this.component.changeDetection === ChangeDetectionStrategy.OnPush) {\n            viewFlags |= 2 /* OnPush */;\n        }\n        const viewFactory = new DeclareFunctionStmt(this.viewName, [new FnParam(LOG_VAR$1.name)], [new ReturnStatement(importExpr(Identifiers.viewDef).callFn([\n                literal(viewFlags),\n                literalArr(nodeDefExprs),\n                updateDirectivesFn,\n                updateRendererFn,\n            ]))], importType(Identifiers.ViewDefinition), this.embeddedViewIndex === 0 ? [StmtModifier.Exported] : []);\n        targetStatements.push(viewFactory);\n        return targetStatements;\n    }\n    _createUpdateFn(updateStmts) {\n        let updateFn;\n        if (updateStmts.length > 0) {\n            const preStmts = [];\n            if (!this.component.isHost && findReadVarNames(updateStmts).has(COMP_VAR.name)) {\n                preStmts.push(COMP_VAR.set(VIEW_VAR.prop('component')).toDeclStmt(this.compType));\n            }\n            updateFn = fn([\n                new FnParam(CHECK_VAR.name, INFERRED_TYPE),\n                new FnParam(VIEW_VAR.name, INFERRED_TYPE)\n            ], [...preStmts, ...updateStmts], INFERRED_TYPE);\n        }\n        else {\n            updateFn = NULL_EXPR;\n        }\n        return updateFn;\n    }\n    visitNgContent(ast, context) {\n        // ngContentDef(ngContentIndex: number, index: number): NodeDef;\n        this.nodes.push(() => ({\n            sourceSpan: ast.sourceSpan,\n            nodeFlags: 8 /* TypeNgContent */,\n            nodeDef: importExpr(Identifiers.ngContentDef).callFn([\n                literal(ast.ngContentIndex), literal(ast.index)\n            ])\n        }));\n    }\n    visitText(ast, context) {\n        // Static text nodes have no check function\n        const checkIndex = -1;\n        this.nodes.push(() => ({\n            sourceSpan: ast.sourceSpan,\n            nodeFlags: 2 /* TypeText */,\n            nodeDef: importExpr(Identifiers.textDef).callFn([\n                literal(checkIndex),\n                literal(ast.ngContentIndex),\n                literalArr([literal(ast.value)]),\n            ])\n        }));\n    }\n    visitBoundText(ast, context) {\n        const nodeIndex = this.nodes.length;\n        // reserve the space in the nodeDefs array\n        this.nodes.push(null);\n        const astWithSource = ast.value;\n        const inter = astWithSource.ast;\n        const updateRendererExpressions = inter.expressions.map((expr, bindingIndex) => this._preprocessUpdateExpression({ nodeIndex, bindingIndex, sourceSpan: ast.sourceSpan, context: COMP_VAR, value: expr }));\n        // Check index is the same as the node index during compilation\n        // They might only differ at runtime\n        const checkIndex = nodeIndex;\n        this.nodes[nodeIndex] = () => ({\n            sourceSpan: ast.sourceSpan,\n            nodeFlags: 2 /* TypeText */,\n            nodeDef: importExpr(Identifiers.textDef).callFn([\n                literal(checkIndex),\n                literal(ast.ngContentIndex),\n                literalArr(inter.strings.map(s => literal(s))),\n            ]),\n            updateRenderer: updateRendererExpressions\n        });\n    }\n    visitEmbeddedTemplate(ast, context) {\n        const nodeIndex = this.nodes.length;\n        // reserve the space in the nodeDefs array\n        this.nodes.push(null);\n        const { flags, queryMatchesExpr, hostEvents } = this._visitElementOrTemplate(nodeIndex, ast);\n        const childVisitor = this.viewBuilderFactory(this);\n        this.children.push(childVisitor);\n        childVisitor.visitAll(ast.variables, ast.children);\n        const childCount = this.nodes.length - nodeIndex - 1;\n        // anchorDef(\n        //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], ngContentIndex: number,\n        //   childCount: number, handleEventFn?: ElementHandleEventFn, templateFactory?:\n        //   ViewDefinitionFactory): NodeDef;\n        this.nodes[nodeIndex] = () => ({\n            sourceSpan: ast.sourceSpan,\n            nodeFlags: 1 /* TypeElement */ | flags,\n            nodeDef: importExpr(Identifiers.anchorDef).callFn([\n                literal(flags),\n                queryMatchesExpr,\n                literal(ast.ngContentIndex),\n                literal(childCount),\n                this._createElementHandleEventFn(nodeIndex, hostEvents),\n                variable(childVisitor.viewName),\n            ])\n        });\n    }\n    visitElement(ast, context) {\n        const nodeIndex = this.nodes.length;\n        // reserve the space in the nodeDefs array so we can add children\n        this.nodes.push(null);\n        // Using a null element name creates an anchor.\n        const elName = isNgContainer(ast.name) ? null : ast.name;\n        const { flags, usedEvents, queryMatchesExpr, hostBindings: dirHostBindings, hostEvents } = this._visitElementOrTemplate(nodeIndex, ast);\n        let inputDefs = [];\n        let updateRendererExpressions = [];\n        let outputDefs = [];\n        if (elName) {\n            const hostBindings = ast.inputs\n                .map((inputAst) => ({\n                context: COMP_VAR,\n                inputAst,\n                dirAst: null,\n            }))\n                .concat(dirHostBindings);\n            if (hostBindings.length) {\n                updateRendererExpressions =\n                    hostBindings.map((hostBinding, bindingIndex) => this._preprocessUpdateExpression({\n                        context: hostBinding.context,\n                        nodeIndex,\n                        bindingIndex,\n                        sourceSpan: hostBinding.inputAst.sourceSpan,\n                        value: hostBinding.inputAst.value\n                    }));\n                inputDefs = hostBindings.map(hostBinding => elementBindingDef(hostBinding.inputAst, hostBinding.dirAst));\n            }\n            outputDefs = usedEvents.map(([target, eventName]) => literalArr([literal(target), literal(eventName)]));\n        }\n        templateVisitAll(this, ast.children);\n        const childCount = this.nodes.length - nodeIndex - 1;\n        const compAst = ast.directives.find(dirAst => dirAst.directive.isComponent);\n        let compRendererType = NULL_EXPR;\n        let compView = NULL_EXPR;\n        if (compAst) {\n            compView = this.outputCtx.importExpr(compAst.directive.componentViewType);\n            compRendererType = this.outputCtx.importExpr(compAst.directive.rendererType);\n        }\n        // Check index is the same as the node index during compilation\n        // They might only differ at runtime\n        const checkIndex = nodeIndex;\n        this.nodes[nodeIndex] = () => ({\n            sourceSpan: ast.sourceSpan,\n            nodeFlags: 1 /* TypeElement */ | flags,\n            nodeDef: importExpr(Identifiers.elementDef).callFn([\n                literal(checkIndex),\n                literal(flags),\n                queryMatchesExpr,\n                literal(ast.ngContentIndex),\n                literal(childCount),\n                literal(elName),\n                elName ? fixedAttrsDef(ast) : NULL_EXPR,\n                inputDefs.length ? literalArr(inputDefs) : NULL_EXPR,\n                outputDefs.length ? literalArr(outputDefs) : NULL_EXPR,\n                this._createElementHandleEventFn(nodeIndex, hostEvents),\n                compView,\n                compRendererType,\n            ]),\n            updateRenderer: updateRendererExpressions\n        });\n    }\n    _visitElementOrTemplate(nodeIndex, ast) {\n        let flags = 0 /* None */;\n        if (ast.hasViewContainer) {\n            flags |= 16777216 /* EmbeddedViews */;\n        }\n        const usedEvents = new Map();\n        ast.outputs.forEach((event) => {\n            const { name, target } = elementEventNameAndTarget(event, null);\n            usedEvents.set(elementEventFullName(target, name), [target, name]);\n        });\n        ast.directives.forEach((dirAst) => {\n            dirAst.hostEvents.forEach((event) => {\n                const { name, target } = elementEventNameAndTarget(event, dirAst);\n                usedEvents.set(elementEventFullName(target, name), [target, name]);\n            });\n        });\n        const hostBindings = [];\n        const hostEvents = [];\n        this._visitComponentFactoryResolverProvider(ast.directives);\n        ast.providers.forEach((providerAst, providerIndex) => {\n            let dirAst = undefined;\n            let dirIndex = undefined;\n            ast.directives.forEach((localDirAst, i) => {\n                if (localDirAst.directive.type.reference === tokenReference(providerAst.token)) {\n                    dirAst = localDirAst;\n                    dirIndex = i;\n                }\n            });\n            if (dirAst) {\n                const { hostBindings: dirHostBindings, hostEvents: dirHostEvents } = this._visitDirective(providerAst, dirAst, dirIndex, nodeIndex, ast.references, ast.queryMatches, usedEvents, this.staticQueryIds.get(ast));\n                hostBindings.push(...dirHostBindings);\n                hostEvents.push(...dirHostEvents);\n            }\n            else {\n                this._visitProvider(providerAst, ast.queryMatches);\n            }\n        });\n        let queryMatchExprs = [];\n        ast.queryMatches.forEach((match) => {\n            let valueType = undefined;\n            if (tokenReference(match.value) ===\n                this.reflector.resolveExternalReference(Identifiers.ElementRef)) {\n                valueType = 0 /* ElementRef */;\n            }\n            else if (tokenReference(match.value) ===\n                this.reflector.resolveExternalReference(Identifiers.ViewContainerRef)) {\n                valueType = 3 /* ViewContainerRef */;\n            }\n            else if (tokenReference(match.value) ===\n                this.reflector.resolveExternalReference(Identifiers.TemplateRef)) {\n                valueType = 2 /* TemplateRef */;\n            }\n            if (valueType != null) {\n                queryMatchExprs.push(literalArr([literal(match.queryId), literal(valueType)]));\n            }\n        });\n        ast.references.forEach((ref) => {\n            let valueType = undefined;\n            if (!ref.value) {\n                valueType = 1 /* RenderElement */;\n            }\n            else if (tokenReference(ref.value) ===\n                this.reflector.resolveExternalReference(Identifiers.TemplateRef)) {\n                valueType = 2 /* TemplateRef */;\n            }\n            if (valueType != null) {\n                this.refNodeIndices[ref.name] = nodeIndex;\n                queryMatchExprs.push(literalArr([literal(ref.name), literal(valueType)]));\n            }\n        });\n        ast.outputs.forEach((outputAst) => {\n            hostEvents.push({ context: COMP_VAR, eventAst: outputAst, dirAst: null });\n        });\n        return {\n            flags,\n            usedEvents: Array.from(usedEvents.values()),\n            queryMatchesExpr: queryMatchExprs.length ? literalArr(queryMatchExprs) : NULL_EXPR,\n            hostBindings,\n            hostEvents: hostEvents\n        };\n    }\n    _visitDirective(providerAst, dirAst, directiveIndex, elementNodeIndex, refs, queryMatches, usedEvents, queryIds) {\n        const nodeIndex = this.nodes.length;\n        // reserve the space in the nodeDefs array so we can add children\n        this.nodes.push(null);\n        dirAst.directive.queries.forEach((query, queryIndex) => {\n            const queryId = dirAst.contentQueryStartId + queryIndex;\n            const flags = 67108864 /* TypeContentQuery */ | calcStaticDynamicQueryFlags(queryIds, queryId, query);\n            const bindingType = query.first ? 0 /* First */ : 1 /* All */;\n            this.nodes.push(() => ({\n                sourceSpan: dirAst.sourceSpan,\n                nodeFlags: flags,\n                nodeDef: importExpr(Identifiers.queryDef).callFn([\n                    literal(flags), literal(queryId),\n                    new LiteralMapExpr([new LiteralMapEntry(query.propertyName, literal(bindingType), false)])\n                ]),\n            }));\n        });\n        // Note: the operation below might also create new nodeDefs,\n        // but we don't want them to be a child of a directive,\n        // as they might be a provider/pipe on their own.\n        // I.e. we only allow queries as children of directives nodes.\n        const childCount = this.nodes.length - nodeIndex - 1;\n        let { flags, queryMatchExprs, providerExpr, depsExpr } = this._visitProviderOrDirective(providerAst, queryMatches);\n        refs.forEach((ref) => {\n            if (ref.value && tokenReference(ref.value) === tokenReference(providerAst.token)) {\n                this.refNodeIndices[ref.name] = nodeIndex;\n                queryMatchExprs.push(literalArr([literal(ref.name), literal(4 /* Provider */)]));\n            }\n        });\n        if (dirAst.directive.isComponent) {\n            flags |= 32768 /* Component */;\n        }\n        const inputDefs = dirAst.inputs.map((inputAst, inputIndex) => {\n            const mapValue = literalArr([literal(inputIndex), literal(inputAst.directiveName)]);\n            // Note: it's important to not quote the key so that we can capture renames by minifiers!\n            return new LiteralMapEntry(inputAst.directiveName, mapValue, false);\n        });\n        const outputDefs = [];\n        const dirMeta = dirAst.directive;\n        Object.keys(dirMeta.outputs).forEach((propName) => {\n            const eventName = dirMeta.outputs[propName];\n            if (usedEvents.has(eventName)) {\n                // Note: it's important to not quote the key so that we can capture renames by minifiers!\n                outputDefs.push(new LiteralMapEntry(propName, literal(eventName), false));\n            }\n        });\n        let updateDirectiveExpressions = [];\n        if (dirAst.inputs.length || (flags & (262144 /* DoCheck */ | 65536 /* OnInit */)) > 0) {\n            updateDirectiveExpressions =\n                dirAst.inputs.map((input, bindingIndex) => this._preprocessUpdateExpression({\n                    nodeIndex,\n                    bindingIndex,\n                    sourceSpan: input.sourceSpan,\n                    context: COMP_VAR,\n                    value: input.value\n                }));\n        }\n        const dirContextExpr = importExpr(Identifiers.nodeValue).callFn([VIEW_VAR, literal(nodeIndex)]);\n        const hostBindings = dirAst.hostProperties.map((inputAst) => ({\n            context: dirContextExpr,\n            dirAst,\n            inputAst,\n        }));\n        const hostEvents = dirAst.hostEvents.map((hostEventAst) => ({\n            context: dirContextExpr,\n            eventAst: hostEventAst, dirAst,\n        }));\n        // Check index is the same as the node index during compilation\n        // They might only differ at runtime\n        const checkIndex = nodeIndex;\n        this.nodes[nodeIndex] = () => ({\n            sourceSpan: dirAst.sourceSpan,\n            nodeFlags: 16384 /* TypeDirective */ | flags,\n            nodeDef: importExpr(Identifiers.directiveDef).callFn([\n                literal(checkIndex),\n                literal(flags),\n                queryMatchExprs.length ? literalArr(queryMatchExprs) : NULL_EXPR,\n                literal(childCount),\n                providerExpr,\n                depsExpr,\n                inputDefs.length ? new LiteralMapExpr(inputDefs) : NULL_EXPR,\n                outputDefs.length ? new LiteralMapExpr(outputDefs) : NULL_EXPR,\n            ]),\n            updateDirectives: updateDirectiveExpressions,\n            directive: dirAst.directive.type,\n        });\n        return { hostBindings, hostEvents };\n    }\n    _visitProvider(providerAst, queryMatches) {\n        this._addProviderNode(this._visitProviderOrDirective(providerAst, queryMatches));\n    }\n    _visitComponentFactoryResolverProvider(directives) {\n        const componentDirMeta = directives.find(dirAst => dirAst.directive.isComponent);\n        if (componentDirMeta && componentDirMeta.directive.entryComponents.length) {\n            const { providerExpr, depsExpr, flags, tokenExpr } = componentFactoryResolverProviderDef(this.reflector, this.outputCtx, 8192 /* PrivateProvider */, componentDirMeta.directive.entryComponents);\n            this._addProviderNode({\n                providerExpr,\n                depsExpr,\n                flags,\n                tokenExpr,\n                queryMatchExprs: [],\n                sourceSpan: componentDirMeta.sourceSpan\n            });\n        }\n    }\n    _addProviderNode(data) {\n        const nodeIndex = this.nodes.length;\n        // providerDef(\n        //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], token:any,\n        //   value: any, deps: ([DepFlags, any] | any)[]): NodeDef;\n        this.nodes.push(() => ({\n            sourceSpan: data.sourceSpan,\n            nodeFlags: data.flags,\n            nodeDef: importExpr(Identifiers.providerDef).callFn([\n                literal(data.flags),\n                data.queryMatchExprs.length ? literalArr(data.queryMatchExprs) : NULL_EXPR,\n                data.tokenExpr, data.providerExpr, data.depsExpr\n            ])\n        }));\n    }\n    _visitProviderOrDirective(providerAst, queryMatches) {\n        let flags = 0 /* None */;\n        let queryMatchExprs = [];\n        queryMatches.forEach((match) => {\n            if (tokenReference(match.value) === tokenReference(providerAst.token)) {\n                queryMatchExprs.push(literalArr([literal(match.queryId), literal(4 /* Provider */)]));\n            }\n        });\n        const { providerExpr, depsExpr, flags: providerFlags, tokenExpr } = providerDef(this.outputCtx, providerAst);\n        return {\n            flags: flags | providerFlags,\n            queryMatchExprs,\n            providerExpr,\n            depsExpr,\n            tokenExpr,\n            sourceSpan: providerAst.sourceSpan\n        };\n    }\n    getLocal(name) {\n        if (name == EventHandlerVars.event.name) {\n            return EventHandlerVars.event;\n        }\n        let currViewExpr = VIEW_VAR;\n        for (let currBuilder = this; currBuilder; currBuilder = currBuilder.parent,\n            currViewExpr = currViewExpr.prop('parent').cast(DYNAMIC_TYPE)) {\n            // check references\n            const refNodeIndex = currBuilder.refNodeIndices[name];\n            if (refNodeIndex != null) {\n                return importExpr(Identifiers.nodeValue).callFn([currViewExpr, literal(refNodeIndex)]);\n            }\n            // check variables\n            const varAst = currBuilder.variables.find((varAst) => varAst.name === name);\n            if (varAst) {\n                const varValue = varAst.value || IMPLICIT_TEMPLATE_VAR;\n                return currViewExpr.prop('context').prop(varValue);\n            }\n        }\n        return null;\n    }\n    _createLiteralArrayConverter(sourceSpan, argCount) {\n        if (argCount === 0) {\n            const valueExpr = importExpr(Identifiers.EMPTY_ARRAY);\n            return () => valueExpr;\n        }\n        const checkIndex = this.nodes.length;\n        this.nodes.push(() => ({\n            sourceSpan,\n            nodeFlags: 32 /* TypePureArray */,\n            nodeDef: importExpr(Identifiers.pureArrayDef).callFn([\n                literal(checkIndex),\n                literal(argCount),\n            ])\n        }));\n        return (args) => callCheckStmt(checkIndex, args);\n    }\n    _createLiteralMapConverter(sourceSpan, keys) {\n        if (keys.length === 0) {\n            const valueExpr = importExpr(Identifiers.EMPTY_MAP);\n            return () => valueExpr;\n        }\n        const map = literalMap(keys.map((e, i) => (Object.assign({}, e, { value: literal(i) }))));\n        const checkIndex = this.nodes.length;\n        this.nodes.push(() => ({\n            sourceSpan,\n            nodeFlags: 64 /* TypePureObject */,\n            nodeDef: importExpr(Identifiers.pureObjectDef).callFn([\n                literal(checkIndex),\n                map,\n            ])\n        }));\n        return (args) => callCheckStmt(checkIndex, args);\n    }\n    _createPipeConverter(expression, name, argCount) {\n        const pipe = this.usedPipes.find((pipeSummary) => pipeSummary.name === name);\n        if (pipe.pure) {\n            const checkIndex = this.nodes.length;\n            this.nodes.push(() => ({\n                sourceSpan: expression.sourceSpan,\n                nodeFlags: 128 /* TypePurePipe */,\n                nodeDef: importExpr(Identifiers.purePipeDef).callFn([\n                    literal(checkIndex),\n                    literal(argCount),\n                ])\n            }));\n            // find underlying pipe in the component view\n            let compViewExpr = VIEW_VAR;\n            let compBuilder = this;\n            while (compBuilder.parent) {\n                compBuilder = compBuilder.parent;\n                compViewExpr = compViewExpr.prop('parent').cast(DYNAMIC_TYPE);\n            }\n            const pipeNodeIndex = compBuilder.purePipeNodeIndices[name];\n            const pipeValueExpr = importExpr(Identifiers.nodeValue).callFn([compViewExpr, literal(pipeNodeIndex)]);\n            return (args) => callUnwrapValue(expression.nodeIndex, expression.bindingIndex, callCheckStmt(checkIndex, [pipeValueExpr].concat(args)));\n        }\n        else {\n            const nodeIndex = this._createPipe(expression.sourceSpan, pipe);\n            const nodeValueExpr = importExpr(Identifiers.nodeValue).callFn([VIEW_VAR, literal(nodeIndex)]);\n            return (args) => callUnwrapValue(expression.nodeIndex, expression.bindingIndex, nodeValueExpr.callMethod('transform', args));\n        }\n    }\n    _createPipe(sourceSpan, pipe) {\n        const nodeIndex = this.nodes.length;\n        let flags = 0 /* None */;\n        pipe.type.lifecycleHooks.forEach((lifecycleHook) => {\n            // for pipes, we only support ngOnDestroy\n            if (lifecycleHook === LifecycleHooks.OnDestroy) {\n                flags |= lifecycleHookToNodeFlag(lifecycleHook);\n            }\n        });\n        const depExprs = pipe.type.diDeps.map((diDep) => depDef(this.outputCtx, diDep));\n        // function pipeDef(\n        //   flags: NodeFlags, ctor: any, deps: ([DepFlags, any] | any)[]): NodeDef\n        this.nodes.push(() => ({\n            sourceSpan,\n            nodeFlags: 16 /* TypePipe */,\n            nodeDef: importExpr(Identifiers.pipeDef).callFn([\n                literal(flags), this.outputCtx.importExpr(pipe.type.reference), literalArr(depExprs)\n            ])\n        }));\n        return nodeIndex;\n    }\n    /**\n     * For the AST in `UpdateExpression.value`:\n     * - create nodes for pipes, literal arrays and, literal maps,\n     * - update the AST to replace pipes, literal arrays and, literal maps with calls to check fn.\n     *\n     * WARNING: This might create new nodeDefs (for pipes and literal arrays and literal maps)!\n     */\n    _preprocessUpdateExpression(expression) {\n        return {\n            nodeIndex: expression.nodeIndex,\n            bindingIndex: expression.bindingIndex,\n            sourceSpan: expression.sourceSpan,\n            context: expression.context,\n            value: convertPropertyBindingBuiltins({\n                createLiteralArrayConverter: (argCount) => this._createLiteralArrayConverter(expression.sourceSpan, argCount),\n                createLiteralMapConverter: (keys) => this._createLiteralMapConverter(expression.sourceSpan, keys),\n                createPipeConverter: (name, argCount) => this._createPipeConverter(expression, name, argCount)\n            }, expression.value)\n        };\n    }\n    _createNodeExpressions() {\n        const self = this;\n        let updateBindingCount = 0;\n        const updateRendererStmts = [];\n        const updateDirectivesStmts = [];\n        const nodeDefExprs = this.nodes.map((factory, nodeIndex) => {\n            const { nodeDef, nodeFlags, updateDirectives, updateRenderer, sourceSpan } = factory();\n            if (updateRenderer) {\n                updateRendererStmts.push(...createUpdateStatements(nodeIndex, sourceSpan, updateRenderer, false));\n            }\n            if (updateDirectives) {\n                updateDirectivesStmts.push(...createUpdateStatements(nodeIndex, sourceSpan, updateDirectives, (nodeFlags & (262144 /* DoCheck */ | 65536 /* OnInit */)) > 0));\n            }\n            // We use a comma expression to call the log function before\n            // the nodeDef function, but still use the result of the nodeDef function\n            // as the value.\n            // Note: We only add the logger to elements / text nodes,\n            // so we don't generate too much code.\n            const logWithNodeDef = nodeFlags & 3 /* CatRenderNode */ ?\n                new CommaExpr([LOG_VAR$1.callFn([]).callFn([]), nodeDef]) :\n                nodeDef;\n            return applySourceSpanToExpressionIfNeeded(logWithNodeDef, sourceSpan);\n        });\n        return { updateRendererStmts, updateDirectivesStmts, nodeDefExprs };\n        function createUpdateStatements(nodeIndex, sourceSpan, expressions, allowEmptyExprs) {\n            const updateStmts = [];\n            const exprs = expressions.map(({ sourceSpan, context, value }) => {\n                const bindingId = `${updateBindingCount++}`;\n                const nameResolver = context === COMP_VAR ? self : null;\n                const { stmts, currValExpr } = convertPropertyBinding(nameResolver, context, value, bindingId, BindingForm.General);\n                updateStmts.push(...stmts.map((stmt) => applySourceSpanToStatementIfNeeded(stmt, sourceSpan)));\n                return applySourceSpanToExpressionIfNeeded(currValExpr, sourceSpan);\n            });\n            if (expressions.length || allowEmptyExprs) {\n                updateStmts.push(applySourceSpanToStatementIfNeeded(callCheckStmt(nodeIndex, exprs).toStmt(), sourceSpan));\n            }\n            return updateStmts;\n        }\n    }\n    _createElementHandleEventFn(nodeIndex, handlers) {\n        const handleEventStmts = [];\n        let handleEventBindingCount = 0;\n        handlers.forEach(({ context, eventAst, dirAst }) => {\n            const bindingId = `${handleEventBindingCount++}`;\n            const nameResolver = context === COMP_VAR ? this : null;\n            const { stmts, allowDefault } = convertActionBinding(nameResolver, context, eventAst.handler, bindingId);\n            const trueStmts = stmts;\n            if (allowDefault) {\n                trueStmts.push(ALLOW_DEFAULT_VAR.set(allowDefault.and(ALLOW_DEFAULT_VAR)).toStmt());\n            }\n            const { target: eventTarget, name: eventName } = elementEventNameAndTarget(eventAst, dirAst);\n            const fullEventName = elementEventFullName(eventTarget, eventName);\n            handleEventStmts.push(applySourceSpanToStatementIfNeeded(new IfStmt(literal(fullEventName).identical(EVENT_NAME_VAR), trueStmts), eventAst.sourceSpan));\n        });\n        let handleEventFn;\n        if (handleEventStmts.length > 0) {\n            const preStmts = [ALLOW_DEFAULT_VAR.set(literal(true)).toDeclStmt(BOOL_TYPE)];\n            if (!this.component.isHost && findReadVarNames(handleEventStmts).has(COMP_VAR.name)) {\n                preStmts.push(COMP_VAR.set(VIEW_VAR.prop('component')).toDeclStmt(this.compType));\n            }\n            handleEventFn = fn([\n                new FnParam(VIEW_VAR.name, INFERRED_TYPE),\n                new FnParam(EVENT_NAME_VAR.name, INFERRED_TYPE),\n                new FnParam(EventHandlerVars.event.name, INFERRED_TYPE)\n            ], [...preStmts, ...handleEventStmts, new ReturnStatement(ALLOW_DEFAULT_VAR)], INFERRED_TYPE);\n        }\n        else {\n            handleEventFn = NULL_EXPR;\n        }\n        return handleEventFn;\n    }\n    visitDirective(ast, context) { }\n    visitDirectiveProperty(ast, context) { }\n    visitReference(ast, context) { }\n    visitVariable(ast, context) { }\n    visitEvent(ast, context) { }\n    visitElementProperty(ast, context) { }\n    visitAttr(ast, context) { }\n}\nfunction needsAdditionalRootNode(astNodes) {\n    const lastAstNode = astNodes[astNodes.length - 1];\n    if (lastAstNode instanceof EmbeddedTemplateAst) {\n        return lastAstNode.hasViewContainer;\n    }\n    if (lastAstNode instanceof ElementAst) {\n        if (isNgContainer(lastAstNode.name) && lastAstNode.children.length) {\n            return needsAdditionalRootNode(lastAstNode.children);\n        }\n        return lastAstNode.hasViewContainer;\n    }\n    return lastAstNode instanceof NgContentAst;\n}\nfunction elementBindingDef(inputAst, dirAst) {\n    const inputType = inputAst.type;\n    switch (inputType) {\n        case 1 /* Attribute */:\n            return literalArr([\n                literal(1 /* TypeElementAttribute */), literal(inputAst.name),\n                literal(inputAst.securityContext)\n            ]);\n        case 0 /* Property */:\n            return literalArr([\n                literal(8 /* TypeProperty */), literal(inputAst.name),\n                literal(inputAst.securityContext)\n            ]);\n        case 4 /* Animation */:\n            const bindingType = 8 /* TypeProperty */ |\n                (dirAst && dirAst.directive.isComponent ? 32 /* SyntheticHostProperty */ :\n                    16 /* SyntheticProperty */);\n            return literalArr([\n                literal(bindingType), literal('@' + inputAst.name), literal(inputAst.securityContext)\n            ]);\n        case 2 /* Class */:\n            return literalArr([literal(2 /* TypeElementClass */), literal(inputAst.name), NULL_EXPR]);\n        case 3 /* Style */:\n            return literalArr([\n                literal(4 /* TypeElementStyle */), literal(inputAst.name), literal(inputAst.unit)\n            ]);\n        default:\n            // This default case is not needed by TypeScript compiler, as the switch is exhaustive.\n            // However Closure Compiler does not understand that and reports an error in typed mode.\n            // The `throw new Error` below works around the problem, and the unexpected: never variable\n            // makes sure tsc still checks this code is unreachable.\n            const unexpected = inputType;\n            throw new Error(`unexpected ${unexpected}`);\n    }\n}\nfunction fixedAttrsDef(elementAst) {\n    const mapResult = Object.create(null);\n    elementAst.attrs.forEach(attrAst => { mapResult[attrAst.name] = attrAst.value; });\n    elementAst.directives.forEach(dirAst => {\n        Object.keys(dirAst.directive.hostAttributes).forEach(name => {\n            const value = dirAst.directive.hostAttributes[name];\n            const prevValue = mapResult[name];\n            mapResult[name] = prevValue != null ? mergeAttributeValue(name, prevValue, value) : value;\n        });\n    });\n    // Note: We need to sort to get a defined output order\n    // for tests and for caching generated artifacts...\n    return literalArr(Object.keys(mapResult).sort().map((attrName) => literalArr([literal(attrName), literal(mapResult[attrName])])));\n}\nfunction mergeAttributeValue(attrName, attrValue1, attrValue2) {\n    if (attrName == CLASS_ATTR$1 || attrName == STYLE_ATTR) {\n        return `${attrValue1} ${attrValue2}`;\n    }\n    else {\n        return attrValue2;\n    }\n}\nfunction callCheckStmt(nodeIndex, exprs) {\n    if (exprs.length > 10) {\n        return CHECK_VAR.callFn([VIEW_VAR, literal(nodeIndex), literal(1 /* Dynamic */), literalArr(exprs)]);\n    }\n    else {\n        return CHECK_VAR.callFn([VIEW_VAR, literal(nodeIndex), literal(0 /* Inline */), ...exprs]);\n    }\n}\nfunction callUnwrapValue(nodeIndex, bindingIdx, expr) {\n    return importExpr(Identifiers.unwrapValue).callFn([\n        VIEW_VAR, literal(nodeIndex), literal(bindingIdx), expr\n    ]);\n}\nfunction findStaticQueryIds(nodes, result = new Map()) {\n    nodes.forEach((node) => {\n        const staticQueryIds = new Set();\n        const dynamicQueryIds = new Set();\n        let queryMatches = undefined;\n        if (node instanceof ElementAst) {\n            findStaticQueryIds(node.children, result);\n            node.children.forEach((child) => {\n                const childData = result.get(child);\n                childData.staticQueryIds.forEach(queryId => staticQueryIds.add(queryId));\n                childData.dynamicQueryIds.forEach(queryId => dynamicQueryIds.add(queryId));\n            });\n            queryMatches = node.queryMatches;\n        }\n        else if (node instanceof EmbeddedTemplateAst) {\n            findStaticQueryIds(node.children, result);\n            node.children.forEach((child) => {\n                const childData = result.get(child);\n                childData.staticQueryIds.forEach(queryId => dynamicQueryIds.add(queryId));\n                childData.dynamicQueryIds.forEach(queryId => dynamicQueryIds.add(queryId));\n            });\n            queryMatches = node.queryMatches;\n        }\n        if (queryMatches) {\n            queryMatches.forEach((match) => staticQueryIds.add(match.queryId));\n        }\n        dynamicQueryIds.forEach(queryId => staticQueryIds.delete(queryId));\n        result.set(node, { staticQueryIds, dynamicQueryIds });\n    });\n    return result;\n}\nfunction staticViewQueryIds(nodeStaticQueryIds) {\n    const staticQueryIds = new Set();\n    const dynamicQueryIds = new Set();\n    Array.from(nodeStaticQueryIds.values()).forEach((entry) => {\n        entry.staticQueryIds.forEach(queryId => staticQueryIds.add(queryId));\n        entry.dynamicQueryIds.forEach(queryId => dynamicQueryIds.add(queryId));\n    });\n    dynamicQueryIds.forEach(queryId => staticQueryIds.delete(queryId));\n    return { staticQueryIds, dynamicQueryIds };\n}\nfunction elementEventNameAndTarget(eventAst, dirAst) {\n    if (eventAst.isAnimation) {\n        return {\n            name: `@${eventAst.name}.${eventAst.phase}`,\n            target: dirAst && dirAst.directive.isComponent ? 'component' : null\n        };\n    }\n    else {\n        return eventAst;\n    }\n}\nfunction calcStaticDynamicQueryFlags(queryIds, queryId, query) {\n    let flags = 0 /* None */;\n    // Note: We only make queries static that query for a single item.\n    // This is because of backwards compatibility with the old view compiler...\n    if (query.first && shouldResolveAsStaticQuery(queryIds, queryId, query)) {\n        flags |= 268435456 /* StaticQuery */;\n    }\n    else {\n        flags |= 536870912 /* DynamicQuery */;\n    }\n    return flags;\n}\nfunction shouldResolveAsStaticQuery(queryIds, queryId, query) {\n    // If query.static has been set by the user, use that value to determine whether\n    // the query is static. If none has been set, sort the query into static/dynamic\n    // based on query results (i.e. dynamic if CD needs to run to get all results).\n    return query.static ||\n        query.static == null &&\n            (queryIds.staticQueryIds.has(queryId) || !queryIds.dynamicQueryIds.has(queryId));\n}\nfunction elementEventFullName(target, name) {\n    return target ? `${target}:${name}` : name;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A container for message extracted from the templates.\n */\nclass MessageBundle {\n    constructor(_htmlParser, _implicitTags, _implicitAttrs, _locale = null) {\n        this._htmlParser = _htmlParser;\n        this._implicitTags = _implicitTags;\n        this._implicitAttrs = _implicitAttrs;\n        this._locale = _locale;\n        this._messages = [];\n    }\n    updateFromTemplate(html, url, interpolationConfig) {\n        const htmlParserResult = this._htmlParser.parse(html, url, { tokenizeExpansionForms: true, interpolationConfig });\n        if (htmlParserResult.errors.length) {\n            return htmlParserResult.errors;\n        }\n        const i18nParserResult = extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);\n        if (i18nParserResult.errors.length) {\n            return i18nParserResult.errors;\n        }\n        this._messages.push(...i18nParserResult.messages);\n        return [];\n    }\n    // Return the message in the internal format\n    // The public (serialized) format might be different, see the `write` method.\n    getMessages() { return this._messages; }\n    write(serializer, filterSources) {\n        const messages = {};\n        const mapperVisitor = new MapPlaceholderNames();\n        // Deduplicate messages based on their ID\n        this._messages.forEach(message => {\n            const id = serializer.digest(message);\n            if (!messages.hasOwnProperty(id)) {\n                messages[id] = message;\n            }\n            else {\n                messages[id].sources.push(...message.sources);\n            }\n        });\n        // Transform placeholder names using the serializer mapping\n        const msgList = Object.keys(messages).map(id => {\n            const mapper = serializer.createNameMapper(messages[id]);\n            const src = messages[id];\n            const nodes = mapper ? mapperVisitor.convert(src.nodes, mapper) : src.nodes;\n            let transformedMessage = new Message(nodes, {}, {}, src.meaning, src.description, id);\n            transformedMessage.sources = src.sources;\n            if (filterSources) {\n                transformedMessage.sources.forEach((source) => source.filePath = filterSources(source.filePath));\n            }\n            return transformedMessage;\n        });\n        return serializer.write(msgList, this._locale);\n    }\n}\n// Transform an i18n AST by renaming the placeholder nodes with the given mapper\nclass MapPlaceholderNames extends CloneVisitor {\n    convert(nodes, mapper) {\n        return mapper ? nodes.map(n => n.visit(this, mapper)) : nodes;\n    }\n    visitTagPlaceholder(ph, mapper) {\n        const startName = mapper.toPublicName(ph.startName);\n        const closeName = ph.closeName ? mapper.toPublicName(ph.closeName) : ph.closeName;\n        const children = ph.children.map(n => n.visit(this, mapper));\n        return new TagPlaceholder(ph.tag, ph.attrs, startName, closeName, children, ph.isVoid, ph.sourceSpan);\n    }\n    visitPlaceholder(ph, mapper) {\n        return new Placeholder(ph.value, mapper.toPublicName(ph.name), ph.sourceSpan);\n    }\n    visitIcuPlaceholder(ph, mapper) {\n        return new IcuPlaceholder(ph.value, mapper.toPublicName(ph.name), ph.sourceSpan);\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass GeneratedFile {\n    constructor(srcFileUrl, genFileUrl, sourceOrStmts) {\n        this.srcFileUrl = srcFileUrl;\n        this.genFileUrl = genFileUrl;\n        if (typeof sourceOrStmts === 'string') {\n            this.source = sourceOrStmts;\n            this.stmts = null;\n        }\n        else {\n            this.source = null;\n            this.stmts = sourceOrStmts;\n        }\n    }\n    isEquivalent(other) {\n        if (this.genFileUrl !== other.genFileUrl) {\n            return false;\n        }\n        if (this.source) {\n            return this.source === other.source;\n        }\n        if (other.stmts == null) {\n            return false;\n        }\n        // Note: the constructor guarantees that if this.source is not filled,\n        // then this.stmts is.\n        return areAllEquivalent(this.stmts, other.stmts);\n    }\n}\nfunction toTypeScript(file, preamble = '') {\n    if (!file.stmts) {\n        throw new Error(`Illegal state: No stmts present on GeneratedFile ${file.genFileUrl}`);\n    }\n    return new TypeScriptEmitter().emitStatements(file.genFileUrl, file.stmts, preamble);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction listLazyRoutes(moduleMeta, reflector) {\n    const allLazyRoutes = [];\n    for (const { provider, module } of moduleMeta.transitiveModule.providers) {\n        if (tokenReference(provider.token) === reflector.ROUTES) {\n            const loadChildren = _collectLoadChildren(provider.useValue);\n            for (const route of loadChildren) {\n                allLazyRoutes.push(parseLazyRoute(route, reflector, module.reference));\n            }\n        }\n    }\n    return allLazyRoutes;\n}\nfunction _collectLoadChildren(routes, target = []) {\n    if (typeof routes === 'string') {\n        target.push(routes);\n    }\n    else if (Array.isArray(routes)) {\n        for (const route of routes) {\n            _collectLoadChildren(route, target);\n        }\n    }\n    else if (routes.loadChildren) {\n        _collectLoadChildren(routes.loadChildren, target);\n    }\n    else if (routes.children) {\n        _collectLoadChildren(routes.children, target);\n    }\n    return target;\n}\nfunction parseLazyRoute(route, reflector, module) {\n    const [routePath, routeName] = route.split('#');\n    const referencedModule = reflector.resolveExternalReference({\n        moduleName: routePath,\n        name: routeName,\n    }, module ? module.filePath : undefined);\n    return { route: route, module: module || referencedModule, referencedModule };\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst TS = /^(?!.*\\.d\\.ts$).*\\.ts$/;\nclass ResolvedStaticSymbol {\n    constructor(symbol, metadata) {\n        this.symbol = symbol;\n        this.metadata = metadata;\n    }\n}\nconst SUPPORTED_SCHEMA_VERSION = 4;\n/**\n * This class is responsible for loading metadata per symbol,\n * and normalizing references between symbols.\n *\n * Internally, it only uses symbols without members,\n * and deduces the values for symbols with members based\n * on these symbols.\n */\nclass StaticSymbolResolver {\n    constructor(host, staticSymbolCache, summaryResolver, errorRecorder) {\n        this.host = host;\n        this.staticSymbolCache = staticSymbolCache;\n        this.summaryResolver = summaryResolver;\n        this.errorRecorder = errorRecorder;\n        this.metadataCache = new Map();\n        // Note: this will only contain StaticSymbols without members!\n        this.resolvedSymbols = new Map();\n        this.resolvedFilePaths = new Set();\n        // Note: this will only contain StaticSymbols without members!\n        this.importAs = new Map();\n        this.symbolResourcePaths = new Map();\n        this.symbolFromFile = new Map();\n        this.knownFileNameToModuleNames = new Map();\n    }\n    resolveSymbol(staticSymbol) {\n        if (staticSymbol.members.length > 0) {\n            return this._resolveSymbolMembers(staticSymbol);\n        }\n        // Note: always ask for a summary first,\n        // as we might have read shallow metadata via a .d.ts file\n        // for the symbol.\n        const resultFromSummary = this._resolveSymbolFromSummary(staticSymbol);\n        if (resultFromSummary) {\n            return resultFromSummary;\n        }\n        const resultFromCache = this.resolvedSymbols.get(staticSymbol);\n        if (resultFromCache) {\n            return resultFromCache;\n        }\n        // Note: Some users use libraries that were not compiled with ngc, i.e. they don't\n        // have summaries, only .d.ts files. So we always need to check both, the summary\n        // and metadata.\n        this._createSymbolsOf(staticSymbol.filePath);\n        return this.resolvedSymbols.get(staticSymbol);\n    }\n    /**\n     * getImportAs produces a symbol that can be used to import the given symbol.\n     * The import might be different than the symbol if the symbol is exported from\n     * a library with a summary; in which case we want to import the symbol from the\n     * ngfactory re-export instead of directly to avoid introducing a direct dependency\n     * on an otherwise indirect dependency.\n     *\n     * @param staticSymbol the symbol for which to generate a import symbol\n     */\n    getImportAs(staticSymbol, useSummaries = true) {\n        if (staticSymbol.members.length) {\n            const baseSymbol = this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name);\n            const baseImportAs = this.getImportAs(baseSymbol, useSummaries);\n            return baseImportAs ?\n                this.getStaticSymbol(baseImportAs.filePath, baseImportAs.name, staticSymbol.members) :\n                null;\n        }\n        const summarizedFileName = stripSummaryForJitFileSuffix(staticSymbol.filePath);\n        if (summarizedFileName !== staticSymbol.filePath) {\n            const summarizedName = stripSummaryForJitNameSuffix(staticSymbol.name);\n            const baseSymbol = this.getStaticSymbol(summarizedFileName, summarizedName, staticSymbol.members);\n            const baseImportAs = this.getImportAs(baseSymbol, useSummaries);\n            return baseImportAs ?\n                this.getStaticSymbol(summaryForJitFileName(baseImportAs.filePath), summaryForJitName(baseImportAs.name), baseSymbol.members) :\n                null;\n        }\n        let result = (useSummaries && this.summaryResolver.getImportAs(staticSymbol)) || null;\n        if (!result) {\n            result = this.importAs.get(staticSymbol);\n        }\n        return result;\n    }\n    /**\n     * getResourcePath produces the path to the original location of the symbol and should\n     * be used to determine the relative location of resource references recorded in\n     * symbol metadata.\n     */\n    getResourcePath(staticSymbol) {\n        return this.symbolResourcePaths.get(staticSymbol) || staticSymbol.filePath;\n    }\n    /**\n     * getTypeArity returns the number of generic type parameters the given symbol\n     * has. If the symbol is not a type the result is null.\n     */\n    getTypeArity(staticSymbol) {\n        // If the file is a factory/ngsummary file, don't resolve the symbol as doing so would\n        // cause the metadata for an factory/ngsummary file to be loaded which doesn't exist.\n        // All references to generated classes must include the correct arity whenever\n        // generating code.\n        if (isGeneratedFile(staticSymbol.filePath)) {\n            return null;\n        }\n        let resolvedSymbol = unwrapResolvedMetadata(this.resolveSymbol(staticSymbol));\n        while (resolvedSymbol && resolvedSymbol.metadata instanceof StaticSymbol) {\n            resolvedSymbol = unwrapResolvedMetadata(this.resolveSymbol(resolvedSymbol.metadata));\n        }\n        return (resolvedSymbol && resolvedSymbol.metadata && resolvedSymbol.metadata.arity) || null;\n    }\n    getKnownModuleName(filePath) {\n        return this.knownFileNameToModuleNames.get(filePath) || null;\n    }\n    recordImportAs(sourceSymbol, targetSymbol) {\n        sourceSymbol.assertNoMembers();\n        targetSymbol.assertNoMembers();\n        this.importAs.set(sourceSymbol, targetSymbol);\n    }\n    recordModuleNameForFileName(fileName, moduleName) {\n        this.knownFileNameToModuleNames.set(fileName, moduleName);\n    }\n    /**\n     * Invalidate all information derived from the given file.\n     *\n     * @param fileName the file to invalidate\n     */\n    invalidateFile(fileName) {\n        this.metadataCache.delete(fileName);\n        this.resolvedFilePaths.delete(fileName);\n        const symbols = this.symbolFromFile.get(fileName);\n        if (symbols) {\n            this.symbolFromFile.delete(fileName);\n            for (const symbol of symbols) {\n                this.resolvedSymbols.delete(symbol);\n                this.importAs.delete(symbol);\n                this.symbolResourcePaths.delete(symbol);\n            }\n        }\n    }\n    /** @internal */\n    ignoreErrorsFor(cb) {\n        const recorder = this.errorRecorder;\n        this.errorRecorder = () => { };\n        try {\n            return cb();\n        }\n        finally {\n            this.errorRecorder = recorder;\n        }\n    }\n    _resolveSymbolMembers(staticSymbol) {\n        const members = staticSymbol.members;\n        const baseResolvedSymbol = this.resolveSymbol(this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name));\n        if (!baseResolvedSymbol) {\n            return null;\n        }\n        let baseMetadata = unwrapResolvedMetadata(baseResolvedSymbol.metadata);\n        if (baseMetadata instanceof StaticSymbol) {\n            return new ResolvedStaticSymbol(staticSymbol, this.getStaticSymbol(baseMetadata.filePath, baseMetadata.name, members));\n        }\n        else if (baseMetadata && baseMetadata.__symbolic === 'class') {\n            if (baseMetadata.statics && members.length === 1) {\n                return new ResolvedStaticSymbol(staticSymbol, baseMetadata.statics[members[0]]);\n            }\n        }\n        else {\n            let value = baseMetadata;\n            for (let i = 0; i < members.length && value; i++) {\n                value = value[members[i]];\n            }\n            return new ResolvedStaticSymbol(staticSymbol, value);\n        }\n        return null;\n    }\n    _resolveSymbolFromSummary(staticSymbol) {\n        const summary = this.summaryResolver.resolveSummary(staticSymbol);\n        return summary ? new ResolvedStaticSymbol(staticSymbol, summary.metadata) : null;\n    }\n    /**\n     * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.\n     * All types passed to the StaticResolver should be pseudo-types returned by this method.\n     *\n     * @param declarationFile the absolute path of the file where the symbol is declared\n     * @param name the name of the type.\n     * @param members a symbol for a static member of the named type\n     */\n    getStaticSymbol(declarationFile, name, members) {\n        return this.staticSymbolCache.get(declarationFile, name, members);\n    }\n    /**\n     * hasDecorators checks a file's metadata for the presence of decorators without evaluating the\n     * metadata.\n     *\n     * @param filePath the absolute path to examine for decorators.\n     * @returns true if any class in the file has a decorator.\n     */\n    hasDecorators(filePath) {\n        const metadata = this.getModuleMetadata(filePath);\n        if (metadata['metadata']) {\n            return Object.keys(metadata['metadata']).some((metadataKey) => {\n                const entry = metadata['metadata'][metadataKey];\n                return entry && entry.__symbolic === 'class' && entry.decorators;\n            });\n        }\n        return false;\n    }\n    getSymbolsOf(filePath) {\n        const summarySymbols = this.summaryResolver.getSymbolsOf(filePath);\n        if (summarySymbols) {\n            return summarySymbols;\n        }\n        // Note: Some users use libraries that were not compiled with ngc, i.e. they don't\n        // have summaries, only .d.ts files, but `summaryResolver.isLibraryFile` returns true.\n        this._createSymbolsOf(filePath);\n        const metadataSymbols = [];\n        this.resolvedSymbols.forEach((resolvedSymbol) => {\n            if (resolvedSymbol.symbol.filePath === filePath) {\n                metadataSymbols.push(resolvedSymbol.symbol);\n            }\n        });\n        return metadataSymbols;\n    }\n    _createSymbolsOf(filePath) {\n        if (this.resolvedFilePaths.has(filePath)) {\n            return;\n        }\n        this.resolvedFilePaths.add(filePath);\n        const resolvedSymbols = [];\n        const metadata = this.getModuleMetadata(filePath);\n        if (metadata['importAs']) {\n            // Index bundle indices should use the importAs module name defined\n            // in the bundle.\n            this.knownFileNameToModuleNames.set(filePath, metadata['importAs']);\n        }\n        // handle the symbols in one of the re-export location\n        if (metadata['exports']) {\n            for (const moduleExport of metadata['exports']) {\n                // handle the symbols in the list of explicitly re-exported symbols.\n                if (moduleExport.export) {\n                    moduleExport.export.forEach((exportSymbol) => {\n                        let symbolName;\n                        if (typeof exportSymbol === 'string') {\n                            symbolName = exportSymbol;\n                        }\n                        else {\n                            symbolName = exportSymbol.as;\n                        }\n                        symbolName = unescapeIdentifier(symbolName);\n                        let symName = symbolName;\n                        if (typeof exportSymbol !== 'string') {\n                            symName = unescapeIdentifier(exportSymbol.name);\n                        }\n                        const resolvedModule = this.resolveModule(moduleExport.from, filePath);\n                        if (resolvedModule) {\n                            const targetSymbol = this.getStaticSymbol(resolvedModule, symName);\n                            const sourceSymbol = this.getStaticSymbol(filePath, symbolName);\n                            resolvedSymbols.push(this.createExport(sourceSymbol, targetSymbol));\n                        }\n                    });\n                }\n                else {\n                    // handle the symbols via export * directives.\n                    const resolvedModule = this.resolveModule(moduleExport.from, filePath);\n                    if (resolvedModule) {\n                        const nestedExports = this.getSymbolsOf(resolvedModule);\n                        nestedExports.forEach((targetSymbol) => {\n                            const sourceSymbol = this.getStaticSymbol(filePath, targetSymbol.name);\n                            resolvedSymbols.push(this.createExport(sourceSymbol, targetSymbol));\n                        });\n                    }\n                }\n            }\n        }\n        // handle the actual metadata. Has to be after the exports\n        // as there might be collisions in the names, and we want the symbols\n        // of the current module to win ofter reexports.\n        if (metadata['metadata']) {\n            // handle direct declarations of the symbol\n            const topLevelSymbolNames = new Set(Object.keys(metadata['metadata']).map(unescapeIdentifier));\n            const origins = metadata['origins'] || {};\n            Object.keys(metadata['metadata']).forEach((metadataKey) => {\n                const symbolMeta = metadata['metadata'][metadataKey];\n                const name = unescapeIdentifier(metadataKey);\n                const symbol = this.getStaticSymbol(filePath, name);\n                const origin = origins.hasOwnProperty(metadataKey) && origins[metadataKey];\n                if (origin) {\n                    // If the symbol is from a bundled index, use the declaration location of the\n                    // symbol so relative references (such as './my.html') will be calculated\n                    // correctly.\n                    const originFilePath = this.resolveModule(origin, filePath);\n                    if (!originFilePath) {\n                        this.reportError(new Error(`Couldn't resolve original symbol for ${origin} from ${this.host.getOutputName(filePath)}`));\n                    }\n                    else {\n                        this.symbolResourcePaths.set(symbol, originFilePath);\n                    }\n                }\n                resolvedSymbols.push(this.createResolvedSymbol(symbol, filePath, topLevelSymbolNames, symbolMeta));\n            });\n        }\n        resolvedSymbols.forEach((resolvedSymbol) => this.resolvedSymbols.set(resolvedSymbol.symbol, resolvedSymbol));\n        this.symbolFromFile.set(filePath, resolvedSymbols.map(resolvedSymbol => resolvedSymbol.symbol));\n    }\n    createResolvedSymbol(sourceSymbol, topLevelPath, topLevelSymbolNames, metadata) {\n        // For classes that don't have Angular summaries / metadata,\n        // we only keep their arity, but nothing else\n        // (e.g. their constructor parameters).\n        // We do this to prevent introducing deep imports\n        // as we didn't generate .ngfactory.ts files with proper reexports.\n        const isTsFile = TS.test(sourceSymbol.filePath);\n        if (this.summaryResolver.isLibraryFile(sourceSymbol.filePath) && !isTsFile && metadata &&\n            metadata['__symbolic'] === 'class') {\n            const transformedMeta = { __symbolic: 'class', arity: metadata.arity };\n            return new ResolvedStaticSymbol(sourceSymbol, transformedMeta);\n        }\n        let _originalFileMemo;\n        const getOriginalName = () => {\n            if (!_originalFileMemo) {\n                // Guess what the original file name is from the reference. If it has a `.d.ts` extension\n                // replace it with `.ts`. If it already has `.ts` just leave it in place. If it doesn't have\n                // .ts or .d.ts, append `.ts'. Also, if it is in `node_modules`, trim the `node_module`\n                // location as it is not important to finding the file.\n                _originalFileMemo =\n                    this.host.getOutputName(topLevelPath.replace(/((\\.ts)|(\\.d\\.ts)|)$/, '.ts')\n                        .replace(/^.*node_modules[/\\\\]/, ''));\n            }\n            return _originalFileMemo;\n        };\n        const self = this;\n        class ReferenceTransformer extends ValueTransformer {\n            visitStringMap(map, functionParams) {\n                const symbolic = map['__symbolic'];\n                if (symbolic === 'function') {\n                    const oldLen = functionParams.length;\n                    functionParams.push(...(map['parameters'] || []));\n                    const result = super.visitStringMap(map, functionParams);\n                    functionParams.length = oldLen;\n                    return result;\n                }\n                else if (symbolic === 'reference') {\n                    const module = map['module'];\n                    const name = map['name'] ? unescapeIdentifier(map['name']) : map['name'];\n                    if (!name) {\n                        return null;\n                    }\n                    let filePath;\n                    if (module) {\n                        filePath = self.resolveModule(module, sourceSymbol.filePath);\n                        if (!filePath) {\n                            return {\n                                __symbolic: 'error',\n                                message: `Could not resolve ${module} relative to ${self.host.getMetadataFor(sourceSymbol.filePath)}.`,\n                                line: map['line'],\n                                character: map['character'],\n                                fileName: getOriginalName()\n                            };\n                        }\n                        return {\n                            __symbolic: 'resolved',\n                            symbol: self.getStaticSymbol(filePath, name),\n                            line: map['line'],\n                            character: map['character'],\n                            fileName: getOriginalName()\n                        };\n                    }\n                    else if (functionParams.indexOf(name) >= 0) {\n                        // reference to a function parameter\n                        return { __symbolic: 'reference', name: name };\n                    }\n                    else {\n                        if (topLevelSymbolNames.has(name)) {\n                            return self.getStaticSymbol(topLevelPath, name);\n                        }\n                    }\n                }\n                else if (symbolic === 'error') {\n                    return Object.assign({}, map, { fileName: getOriginalName() });\n                }\n                else {\n                    return super.visitStringMap(map, functionParams);\n                }\n            }\n        }\n        const transformedMeta = visitValue(metadata, new ReferenceTransformer(), []);\n        let unwrappedTransformedMeta = unwrapResolvedMetadata(transformedMeta);\n        if (unwrappedTransformedMeta instanceof StaticSymbol) {\n            return this.createExport(sourceSymbol, unwrappedTransformedMeta);\n        }\n        return new ResolvedStaticSymbol(sourceSymbol, transformedMeta);\n    }\n    createExport(sourceSymbol, targetSymbol) {\n        sourceSymbol.assertNoMembers();\n        targetSymbol.assertNoMembers();\n        if (this.summaryResolver.isLibraryFile(sourceSymbol.filePath) &&\n            this.summaryResolver.isLibraryFile(targetSymbol.filePath)) {\n            // This case is for an ng library importing symbols from a plain ts library\n            // transitively.\n            // Note: We rely on the fact that we discover symbols in the direction\n            // from source files to library files\n            this.importAs.set(targetSymbol, this.getImportAs(sourceSymbol) || sourceSymbol);\n        }\n        return new ResolvedStaticSymbol(sourceSymbol, targetSymbol);\n    }\n    reportError(error, context, path) {\n        if (this.errorRecorder) {\n            this.errorRecorder(error, (context && context.filePath) || path);\n        }\n        else {\n            throw error;\n        }\n    }\n    /**\n     * @param module an absolute path to a module file.\n     */\n    getModuleMetadata(module) {\n        let moduleMetadata = this.metadataCache.get(module);\n        if (!moduleMetadata) {\n            const moduleMetadatas = this.host.getMetadataFor(module);\n            if (moduleMetadatas) {\n                let maxVersion = -1;\n                moduleMetadatas.forEach((md) => {\n                    if (md && md['version'] > maxVersion) {\n                        maxVersion = md['version'];\n                        moduleMetadata = md;\n                    }\n                });\n            }\n            if (!moduleMetadata) {\n                moduleMetadata =\n                    { __symbolic: 'module', version: SUPPORTED_SCHEMA_VERSION, module: module, metadata: {} };\n            }\n            if (moduleMetadata['version'] != SUPPORTED_SCHEMA_VERSION) {\n                const errorMessage = moduleMetadata['version'] == 2 ?\n                    `Unsupported metadata version ${moduleMetadata['version']} for module ${module}. This module should be compiled with a newer version of ngc` :\n                    `Metadata version mismatch for module ${this.host.getOutputName(module)}, found version ${moduleMetadata['version']}, expected ${SUPPORTED_SCHEMA_VERSION}`;\n                this.reportError(new Error(errorMessage));\n            }\n            this.metadataCache.set(module, moduleMetadata);\n        }\n        return moduleMetadata;\n    }\n    getSymbolByModule(module, symbolName, containingFile) {\n        const filePath = this.resolveModule(module, containingFile);\n        if (!filePath) {\n            this.reportError(new Error(`Could not resolve module ${module}${containingFile ? ' relative to ' +\n                this.host.getOutputName(containingFile) : ''}`));\n            return this.getStaticSymbol(`ERROR:${module}`, symbolName);\n        }\n        return this.getStaticSymbol(filePath, symbolName);\n    }\n    resolveModule(module, containingFile) {\n        try {\n            return this.host.moduleNameToFileName(module, containingFile);\n        }\n        catch (e) {\n            console.error(`Could not resolve module '${module}' relative to file ${containingFile}`);\n            this.reportError(e, undefined, containingFile);\n        }\n        return null;\n    }\n}\n// Remove extra underscore from escaped identifier.\n// See https://github.com/Microsoft/TypeScript/blob/master/src/compiler/utilities.ts\nfunction unescapeIdentifier(identifier) {\n    return identifier.startsWith('___') ? identifier.substr(1) : identifier;\n}\nfunction unwrapResolvedMetadata(metadata) {\n    if (metadata && metadata.__symbolic === 'resolved') {\n        return metadata.symbol;\n    }\n    return metadata;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction serializeSummaries(srcFileName, forJitCtx, summaryResolver, symbolResolver, symbols, types, createExternalSymbolReexports = false) {\n    const toJsonSerializer = new ToJsonSerializer(symbolResolver, summaryResolver, srcFileName);\n    // for symbols, we use everything except for the class metadata itself\n    // (we keep the statics though), as the class metadata is contained in the\n    // CompileTypeSummary.\n    symbols.forEach((resolvedSymbol) => toJsonSerializer.addSummary({ symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata }));\n    // Add type summaries.\n    types.forEach(({ summary, metadata }) => {\n        toJsonSerializer.addSummary({ symbol: summary.type.reference, metadata: undefined, type: summary });\n    });\n    const { json, exportAs } = toJsonSerializer.serialize(createExternalSymbolReexports);\n    if (forJitCtx) {\n        const forJitSerializer = new ForJitSerializer(forJitCtx, symbolResolver, summaryResolver);\n        types.forEach(({ summary, metadata }) => { forJitSerializer.addSourceType(summary, metadata); });\n        toJsonSerializer.unprocessedSymbolSummariesBySymbol.forEach((summary) => {\n            if (summaryResolver.isLibraryFile(summary.symbol.filePath) && summary.type) {\n                forJitSerializer.addLibType(summary.type);\n            }\n        });\n        forJitSerializer.serialize(exportAs);\n    }\n    return { json, exportAs };\n}\nfunction deserializeSummaries(symbolCache, summaryResolver, libraryFileName, json) {\n    const deserializer = new FromJsonDeserializer(symbolCache, summaryResolver);\n    return deserializer.deserialize(libraryFileName, json);\n}\nfunction createForJitStub(outputCtx, reference) {\n    return createSummaryForJitFunction(outputCtx, reference, NULL_EXPR);\n}\nfunction createSummaryForJitFunction(outputCtx, reference, value) {\n    const fnName = summaryForJitName(reference.name);\n    outputCtx.statements.push(fn([], [new ReturnStatement(value)], new ArrayType(DYNAMIC_TYPE)).toDeclStmt(fnName, [\n        StmtModifier.Final, StmtModifier.Exported\n    ]));\n}\nclass ToJsonSerializer extends ValueTransformer {\n    constructor(symbolResolver, summaryResolver, srcFileName) {\n        super();\n        this.symbolResolver = symbolResolver;\n        this.summaryResolver = summaryResolver;\n        this.srcFileName = srcFileName;\n        // Note: This only contains symbols without members.\n        this.symbols = [];\n        this.indexBySymbol = new Map();\n        this.reexportedBy = new Map();\n        // This now contains a `__symbol: number` in the place of\n        // StaticSymbols, but otherwise has the same shape as the original objects.\n        this.processedSummaryBySymbol = new Map();\n        this.processedSummaries = [];\n        this.unprocessedSymbolSummariesBySymbol = new Map();\n        this.moduleName = symbolResolver.getKnownModuleName(srcFileName);\n    }\n    addSummary(summary) {\n        let unprocessedSummary = this.unprocessedSymbolSummariesBySymbol.get(summary.symbol);\n        let processedSummary = this.processedSummaryBySymbol.get(summary.symbol);\n        if (!unprocessedSummary) {\n            unprocessedSummary = { symbol: summary.symbol, metadata: undefined };\n            this.unprocessedSymbolSummariesBySymbol.set(summary.symbol, unprocessedSummary);\n            processedSummary = { symbol: this.processValue(summary.symbol, 0 /* None */) };\n            this.processedSummaries.push(processedSummary);\n            this.processedSummaryBySymbol.set(summary.symbol, processedSummary);\n        }\n        if (!unprocessedSummary.metadata && summary.metadata) {\n            let metadata = summary.metadata || {};\n            if (metadata.__symbolic === 'class') {\n                // For classes, we keep everything except their class decorators.\n                // We need to keep e.g. the ctor args, method names, method decorators\n                // so that the class can be extended in another compilation unit.\n                // We don't keep the class decorators as\n                // 1) they refer to data\n                //   that should not cause a rebuild of downstream compilation units\n                //   (e.g. inline templates of @Component, or @NgModule.declarations)\n                // 2) their data is already captured in TypeSummaries, e.g. DirectiveSummary.\n                const clone = {};\n                Object.keys(metadata).forEach((propName) => {\n                    if (propName !== 'decorators') {\n                        clone[propName] = metadata[propName];\n                    }\n                });\n                metadata = clone;\n            }\n            else if (isCall(metadata)) {\n                if (!isFunctionCall(metadata) && !isMethodCallOnVariable(metadata)) {\n                    // Don't store complex calls as we won't be able to simplify them anyways later on.\n                    metadata = {\n                        __symbolic: 'error',\n                        message: 'Complex function calls are not supported.',\n                    };\n                }\n            }\n            // Note: We need to keep storing ctor calls for e.g.\n            // `export const x = new InjectionToken(...)`\n            unprocessedSummary.metadata = metadata;\n            processedSummary.metadata = this.processValue(metadata, 1 /* ResolveValue */);\n            if (metadata instanceof StaticSymbol &&\n                this.summaryResolver.isLibraryFile(metadata.filePath)) {\n                const declarationSymbol = this.symbols[this.indexBySymbol.get(metadata)];\n                if (!isLoweredSymbol(declarationSymbol.name)) {\n                    // Note: symbols that were introduced during codegen in the user file can have a reexport\n                    // if a user used `export *`. However, we can't rely on this as tsickle will change\n                    // `export *` into named exports, using only the information from the typechecker.\n                    // As we introduce the new symbols after typecheck, Tsickle does not know about them,\n                    // and omits them when expanding `export *`.\n                    // So we have to keep reexporting these symbols manually via .ngfactory files.\n                    this.reexportedBy.set(declarationSymbol, summary.symbol);\n                }\n            }\n        }\n        if (!unprocessedSummary.type && summary.type) {\n            unprocessedSummary.type = summary.type;\n            // Note: We don't add the summaries of all referenced symbols as for the ResolvedSymbols,\n            // as the type summaries already contain the transitive data that they require\n            // (in a minimal way).\n            processedSummary.type = this.processValue(summary.type, 0 /* None */);\n            // except for reexported directives / pipes, so we need to store\n            // their summaries explicitly.\n            if (summary.type.summaryKind === CompileSummaryKind.NgModule) {\n                const ngModuleSummary = summary.type;\n                ngModuleSummary.exportedDirectives.concat(ngModuleSummary.exportedPipes).forEach((id) => {\n                    const symbol = id.reference;\n                    if (this.summaryResolver.isLibraryFile(symbol.filePath) &&\n                        !this.unprocessedSymbolSummariesBySymbol.has(symbol)) {\n                        const summary = this.summaryResolver.resolveSummary(symbol);\n                        if (summary) {\n                            this.addSummary(summary);\n                        }\n                    }\n                });\n            }\n        }\n    }\n    /**\n     * @param createExternalSymbolReexports Whether external static symbols should be re-exported.\n     * This can be enabled if external symbols should be re-exported by the current module in\n     * order to avoid dynamically generated module dependencies which can break strict dependency\n     * enforcements (as in Google3). Read more here: https://github.com/angular/angular/issues/25644\n     */\n    serialize(createExternalSymbolReexports) {\n        const exportAs = [];\n        const json = JSON.stringify({\n            moduleName: this.moduleName,\n            summaries: this.processedSummaries,\n            symbols: this.symbols.map((symbol, index) => {\n                symbol.assertNoMembers();\n                let importAs = undefined;\n                if (this.summaryResolver.isLibraryFile(symbol.filePath)) {\n                    const reexportSymbol = this.reexportedBy.get(symbol);\n                    if (reexportSymbol) {\n                        // In case the given external static symbol is already manually exported by the\n                        // user, we just proxy the external static symbol reference to the manual export.\n                        // This ensures that the AOT compiler imports the external symbol through the\n                        // user export and does not introduce another dependency which is not needed.\n                        importAs = this.indexBySymbol.get(reexportSymbol);\n                    }\n                    else if (createExternalSymbolReexports) {\n                        // In this case, the given external static symbol is *not* manually exported by\n                        // the user, and we manually create a re-export in the factory file so that we\n                        // don't introduce another module dependency. This is useful when running within\n                        // Bazel so that the AOT compiler does not introduce any module dependencies\n                        // which can break the strict dependency enforcement. (e.g. as in Google3)\n                        // Read more about this here: https://github.com/angular/angular/issues/25644\n                        const summary = this.unprocessedSymbolSummariesBySymbol.get(symbol);\n                        if (!summary || !summary.metadata || summary.metadata.__symbolic !== 'interface') {\n                            importAs = `${symbol.name}_${index}`;\n                            exportAs.push({ symbol, exportAs: importAs });\n                        }\n                    }\n                }\n                return {\n                    __symbol: index,\n                    name: symbol.name,\n                    filePath: this.summaryResolver.toSummaryFileName(symbol.filePath, this.srcFileName),\n                    importAs: importAs\n                };\n            })\n        });\n        return { json, exportAs };\n    }\n    processValue(value, flags) {\n        return visitValue(value, this, flags);\n    }\n    visitOther(value, context) {\n        if (value instanceof StaticSymbol) {\n            let baseSymbol = this.symbolResolver.getStaticSymbol(value.filePath, value.name);\n            const index = this.visitStaticSymbol(baseSymbol, context);\n            return { __symbol: index, members: value.members };\n        }\n    }\n    /**\n     * Strip line and character numbers from ngsummaries.\n     * Emitting them causes white spaces changes to retrigger upstream\n     * recompilations in bazel.\n     * TODO: find out a way to have line and character numbers in errors without\n     * excessive recompilation in bazel.\n     */\n    visitStringMap(map, context) {\n        if (map['__symbolic'] === 'resolved') {\n            return visitValue(map['symbol'], this, context);\n        }\n        if (map['__symbolic'] === 'error') {\n            delete map['line'];\n            delete map['character'];\n        }\n        return super.visitStringMap(map, context);\n    }\n    /**\n     * Returns null if the options.resolveValue is true, and the summary for the symbol\n     * resolved to a type or could not be resolved.\n     */\n    visitStaticSymbol(baseSymbol, flags) {\n        let index = this.indexBySymbol.get(baseSymbol);\n        let summary = null;\n        if (flags & 1 /* ResolveValue */ &&\n            this.summaryResolver.isLibraryFile(baseSymbol.filePath)) {\n            if (this.unprocessedSymbolSummariesBySymbol.has(baseSymbol)) {\n                // the summary for this symbol was already added\n                // -> nothing to do.\n                return index;\n            }\n            summary = this.loadSummary(baseSymbol);\n            if (summary && summary.metadata instanceof StaticSymbol) {\n                // The summary is a reexport\n                index = this.visitStaticSymbol(summary.metadata, flags);\n                // reset the summary as it is just a reexport, so we don't want to store it.\n                summary = null;\n            }\n        }\n        else if (index != null) {\n            // Note: == on purpose to compare with undefined!\n            // No summary and the symbol is already added -> nothing to do.\n            return index;\n        }\n        // Note: == on purpose to compare with undefined!\n        if (index == null) {\n            index = this.symbols.length;\n            this.symbols.push(baseSymbol);\n        }\n        this.indexBySymbol.set(baseSymbol, index);\n        if (summary) {\n            this.addSummary(summary);\n        }\n        return index;\n    }\n    loadSummary(symbol) {\n        let summary = this.summaryResolver.resolveSummary(symbol);\n        if (!summary) {\n            // some symbols might originate from a plain typescript library\n            // that just exported .d.ts and .metadata.json files, i.e. where no summary\n            // files were created.\n            const resolvedSymbol = this.symbolResolver.resolveSymbol(symbol);\n            if (resolvedSymbol) {\n                summary = { symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata };\n            }\n        }\n        return summary;\n    }\n}\nclass ForJitSerializer {\n    constructor(outputCtx, symbolResolver, summaryResolver) {\n        this.outputCtx = outputCtx;\n        this.symbolResolver = symbolResolver;\n        this.summaryResolver = summaryResolver;\n        this.data = [];\n    }\n    addSourceType(summary, metadata) {\n        this.data.push({ summary, metadata, isLibrary: false });\n    }\n    addLibType(summary) {\n        this.data.push({ summary, metadata: null, isLibrary: true });\n    }\n    serialize(exportAsArr) {\n        const exportAsBySymbol = new Map();\n        for (const { symbol, exportAs } of exportAsArr) {\n            exportAsBySymbol.set(symbol, exportAs);\n        }\n        const ngModuleSymbols = new Set();\n        for (const { summary, metadata, isLibrary } of this.data) {\n            if (summary.summaryKind === CompileSummaryKind.NgModule) {\n                // collect the symbols that refer to NgModule classes.\n                // Note: we can't just rely on `summary.type.summaryKind` to determine this as\n                // we don't add the summaries of all referenced symbols when we serialize type summaries.\n                // See serializeSummaries for details.\n                ngModuleSymbols.add(summary.type.reference);\n                const modSummary = summary;\n                for (const mod of modSummary.modules) {\n                    ngModuleSymbols.add(mod.reference);\n                }\n            }\n            if (!isLibrary) {\n                const fnName = summaryForJitName(summary.type.reference.name);\n                createSummaryForJitFunction(this.outputCtx, summary.type.reference, this.serializeSummaryWithDeps(summary, metadata));\n            }\n        }\n        ngModuleSymbols.forEach((ngModuleSymbol) => {\n            if (this.summaryResolver.isLibraryFile(ngModuleSymbol.filePath)) {\n                let exportAs = exportAsBySymbol.get(ngModuleSymbol) || ngModuleSymbol.name;\n                const jitExportAsName = summaryForJitName(exportAs);\n                this.outputCtx.statements.push(variable(jitExportAsName)\n                    .set(this.serializeSummaryRef(ngModuleSymbol))\n                    .toDeclStmt(null, [StmtModifier.Exported]));\n            }\n        });\n    }\n    serializeSummaryWithDeps(summary, metadata) {\n        const expressions = [this.serializeSummary(summary)];\n        let providers = [];\n        if (metadata instanceof CompileNgModuleMetadata) {\n            expressions.push(...\n            // For directives / pipes, we only add the declared ones,\n            // and rely on transitively importing NgModules to get the transitive\n            // summaries.\n            metadata.declaredDirectives.concat(metadata.declaredPipes)\n                .map(type => type.reference)\n                // For modules,\n                // we also add the summaries for modules\n                // from libraries.\n                // This is ok as we produce reexports for all transitive modules.\n                .concat(metadata.transitiveModule.modules.map(type => type.reference)\n                .filter(ref => ref !== metadata.type.reference))\n                .map((ref) => this.serializeSummaryRef(ref)));\n            // Note: We don't use `NgModuleSummary.providers`, as that one is transitive,\n            // and we already have transitive modules.\n            providers = metadata.providers;\n        }\n        else if (summary.summaryKind === CompileSummaryKind.Directive) {\n            const dirSummary = summary;\n            providers = dirSummary.providers.concat(dirSummary.viewProviders);\n        }\n        // Note: We can't just refer to the `ngsummary.ts` files for `useClass` providers (as we do for\n        // declaredDirectives / declaredPipes), as we allow\n        // providers without ctor arguments to skip the `@Injectable` decorator,\n        // i.e. we didn't generate .ngsummary.ts files for these.\n        expressions.push(...providers.filter(provider => !!provider.useClass).map(provider => this.serializeSummary({\n            summaryKind: CompileSummaryKind.Injectable, type: provider.useClass\n        })));\n        return literalArr(expressions);\n    }\n    serializeSummaryRef(typeSymbol) {\n        const jitImportedSymbol = this.symbolResolver.getStaticSymbol(summaryForJitFileName(typeSymbol.filePath), summaryForJitName(typeSymbol.name));\n        return this.outputCtx.importExpr(jitImportedSymbol);\n    }\n    serializeSummary(data) {\n        const outputCtx = this.outputCtx;\n        class Transformer {\n            visitArray(arr, context) {\n                return literalArr(arr.map(entry => visitValue(entry, this, context)));\n            }\n            visitStringMap(map, context) {\n                return new LiteralMapExpr(Object.keys(map).map((key) => new LiteralMapEntry(key, visitValue(map[key], this, context), false)));\n            }\n            visitPrimitive(value, context) { return literal(value); }\n            visitOther(value, context) {\n                if (value instanceof StaticSymbol) {\n                    return outputCtx.importExpr(value);\n                }\n                else {\n                    throw new Error(`Illegal State: Encountered value ${value}`);\n                }\n            }\n        }\n        return visitValue(data, new Transformer(), null);\n    }\n}\nclass FromJsonDeserializer extends ValueTransformer {\n    constructor(symbolCache, summaryResolver) {\n        super();\n        this.symbolCache = symbolCache;\n        this.summaryResolver = summaryResolver;\n    }\n    deserialize(libraryFileName, json) {\n        const data = JSON.parse(json);\n        const allImportAs = [];\n        this.symbols = data.symbols.map((serializedSymbol) => this.symbolCache.get(this.summaryResolver.fromSummaryFileName(serializedSymbol.filePath, libraryFileName), serializedSymbol.name));\n        data.symbols.forEach((serializedSymbol, index) => {\n            const symbol = this.symbols[index];\n            const importAs = serializedSymbol.importAs;\n            if (typeof importAs === 'number') {\n                allImportAs.push({ symbol, importAs: this.symbols[importAs] });\n            }\n            else if (typeof importAs === 'string') {\n                allImportAs.push({ symbol, importAs: this.symbolCache.get(ngfactoryFilePath(libraryFileName), importAs) });\n            }\n        });\n        const summaries = visitValue(data.summaries, this, null);\n        return { moduleName: data.moduleName, summaries, importAs: allImportAs };\n    }\n    visitStringMap(map, context) {\n        if ('__symbol' in map) {\n            const baseSymbol = this.symbols[map['__symbol']];\n            const members = map['members'];\n            return members.length ? this.symbolCache.get(baseSymbol.filePath, baseSymbol.name, members) :\n                baseSymbol;\n        }\n        else {\n            return super.visitStringMap(map, context);\n        }\n    }\n}\nfunction isCall(metadata) {\n    return metadata && metadata.__symbolic === 'call';\n}\nfunction isFunctionCall(metadata) {\n    return isCall(metadata) && unwrapResolvedMetadata(metadata.expression) instanceof StaticSymbol;\n}\nfunction isMethodCallOnVariable(metadata) {\n    return isCall(metadata) && metadata.expression && metadata.expression.__symbolic === 'select' &&\n        unwrapResolvedMetadata(metadata.expression.expression) instanceof StaticSymbol;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass AotCompiler {\n    constructor(_config, _options, _host, reflector, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _typeCheckCompiler, _ngModuleCompiler, _injectableCompiler, _outputEmitter, _summaryResolver, _symbolResolver) {\n        this._config = _config;\n        this._options = _options;\n        this._host = _host;\n        this.reflector = reflector;\n        this._metadataResolver = _metadataResolver;\n        this._templateParser = _templateParser;\n        this._styleCompiler = _styleCompiler;\n        this._viewCompiler = _viewCompiler;\n        this._typeCheckCompiler = _typeCheckCompiler;\n        this._ngModuleCompiler = _ngModuleCompiler;\n        this._injectableCompiler = _injectableCompiler;\n        this._outputEmitter = _outputEmitter;\n        this._summaryResolver = _summaryResolver;\n        this._symbolResolver = _symbolResolver;\n        this._templateAstCache = new Map();\n        this._analyzedFiles = new Map();\n        this._analyzedFilesForInjectables = new Map();\n    }\n    clearCache() { this._metadataResolver.clearCache(); }\n    analyzeModulesSync(rootFiles) {\n        const analyzeResult = analyzeAndValidateNgModules(rootFiles, this._host, this._symbolResolver, this._metadataResolver);\n        analyzeResult.ngModules.forEach(ngModule => this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, true));\n        return analyzeResult;\n    }\n    analyzeModulesAsync(rootFiles) {\n        const analyzeResult = analyzeAndValidateNgModules(rootFiles, this._host, this._symbolResolver, this._metadataResolver);\n        return Promise\n            .all(analyzeResult.ngModules.map(ngModule => this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false)))\n            .then(() => analyzeResult);\n    }\n    _analyzeFile(fileName) {\n        let analyzedFile = this._analyzedFiles.get(fileName);\n        if (!analyzedFile) {\n            analyzedFile =\n                analyzeFile(this._host, this._symbolResolver, this._metadataResolver, fileName);\n            this._analyzedFiles.set(fileName, analyzedFile);\n        }\n        return analyzedFile;\n    }\n    _analyzeFileForInjectables(fileName) {\n        let analyzedFile = this._analyzedFilesForInjectables.get(fileName);\n        if (!analyzedFile) {\n            analyzedFile = analyzeFileForInjectables(this._host, this._symbolResolver, this._metadataResolver, fileName);\n            this._analyzedFilesForInjectables.set(fileName, analyzedFile);\n        }\n        return analyzedFile;\n    }\n    findGeneratedFileNames(fileName) {\n        const genFileNames = [];\n        const file = this._analyzeFile(fileName);\n        // Make sure we create a .ngfactory if we have a injectable/directive/pipe/NgModule\n        // or a reference to a non source file.\n        // Note: This is overestimating the required .ngfactory files as the real calculation is harder.\n        // Only do this for StubEmitFlags.Basic, as adding a type check block\n        // does not change this file (as we generate type check blocks based on NgModules).\n        if (this._options.allowEmptyCodegenFiles || file.directives.length || file.pipes.length ||\n            file.injectables.length || file.ngModules.length || file.exportsNonSourceFiles) {\n            genFileNames.push(ngfactoryFilePath(file.fileName, true));\n            if (this._options.enableSummariesForJit) {\n                genFileNames.push(summaryForJitFileName(file.fileName, true));\n            }\n        }\n        const fileSuffix = normalizeGenFileSuffix(splitTypescriptSuffix(file.fileName, true)[1]);\n        file.directives.forEach((dirSymbol) => {\n            const compMeta = this._metadataResolver.getNonNormalizedDirectiveMetadata(dirSymbol).metadata;\n            if (!compMeta.isComponent) {\n                return;\n            }\n            // Note: compMeta is a component and therefore template is non null.\n            compMeta.template.styleUrls.forEach((styleUrl) => {\n                const normalizedUrl = this._host.resourceNameToFileName(styleUrl, file.fileName);\n                if (!normalizedUrl) {\n                    throw syntaxError(`Couldn't resolve resource ${styleUrl} relative to ${file.fileName}`);\n                }\n                const needsShim = (compMeta.template.encapsulation ||\n                    this._config.defaultEncapsulation) === ViewEncapsulation.Emulated;\n                genFileNames.push(_stylesModuleUrl(normalizedUrl, needsShim, fileSuffix));\n                if (this._options.allowEmptyCodegenFiles) {\n                    genFileNames.push(_stylesModuleUrl(normalizedUrl, !needsShim, fileSuffix));\n                }\n            });\n        });\n        return genFileNames;\n    }\n    emitBasicStub(genFileName, originalFileName) {\n        const outputCtx = this._createOutputContext(genFileName);\n        if (genFileName.endsWith('.ngfactory.ts')) {\n            if (!originalFileName) {\n                throw new Error(`Assertion error: require the original file for .ngfactory.ts stubs. File: ${genFileName}`);\n            }\n            const originalFile = this._analyzeFile(originalFileName);\n            this._createNgFactoryStub(outputCtx, originalFile, 1 /* Basic */);\n        }\n        else if (genFileName.endsWith('.ngsummary.ts')) {\n            if (this._options.enableSummariesForJit) {\n                if (!originalFileName) {\n                    throw new Error(`Assertion error: require the original file for .ngsummary.ts stubs. File: ${genFileName}`);\n                }\n                const originalFile = this._analyzeFile(originalFileName);\n                _createEmptyStub(outputCtx);\n                originalFile.ngModules.forEach(ngModule => {\n                    // create exports that user code can reference\n                    createForJitStub(outputCtx, ngModule.type.reference);\n                });\n            }\n        }\n        else if (genFileName.endsWith('.ngstyle.ts')) {\n            _createEmptyStub(outputCtx);\n        }\n        // Note: for the stubs, we don't need a property srcFileUrl,\n        // as later on in emitAllImpls we will create the proper GeneratedFiles with the\n        // correct srcFileUrl.\n        // This is good as e.g. for .ngstyle.ts files we can't derive\n        // the url of components based on the genFileUrl.\n        return this._codegenSourceModule('unknown', outputCtx);\n    }\n    emitTypeCheckStub(genFileName, originalFileName) {\n        const originalFile = this._analyzeFile(originalFileName);\n        const outputCtx = this._createOutputContext(genFileName);\n        if (genFileName.endsWith('.ngfactory.ts')) {\n            this._createNgFactoryStub(outputCtx, originalFile, 2 /* TypeCheck */);\n        }\n        return outputCtx.statements.length > 0 ?\n            this._codegenSourceModule(originalFile.fileName, outputCtx) :\n            null;\n    }\n    loadFilesAsync(fileNames, tsFiles) {\n        const files = fileNames.map(fileName => this._analyzeFile(fileName));\n        const loadingPromises = [];\n        files.forEach(file => file.ngModules.forEach(ngModule => loadingPromises.push(this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false))));\n        const analyzedInjectables = tsFiles.map(tsFile => this._analyzeFileForInjectables(tsFile));\n        return Promise.all(loadingPromises).then(_ => ({\n            analyzedModules: mergeAndValidateNgFiles(files),\n            analyzedInjectables: analyzedInjectables,\n        }));\n    }\n    loadFilesSync(fileNames, tsFiles) {\n        const files = fileNames.map(fileName => this._analyzeFile(fileName));\n        files.forEach(file => file.ngModules.forEach(ngModule => this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, true)));\n        const analyzedInjectables = tsFiles.map(tsFile => this._analyzeFileForInjectables(tsFile));\n        return {\n            analyzedModules: mergeAndValidateNgFiles(files),\n            analyzedInjectables: analyzedInjectables,\n        };\n    }\n    _createNgFactoryStub(outputCtx, file, emitFlags) {\n        let componentId = 0;\n        file.ngModules.forEach((ngModuleMeta, ngModuleIndex) => {\n            // Note: the code below needs to executed for StubEmitFlags.Basic and StubEmitFlags.TypeCheck,\n            // so we don't change the .ngfactory file too much when adding the type-check block.\n            // create exports that user code can reference\n            this._ngModuleCompiler.createStub(outputCtx, ngModuleMeta.type.reference);\n            // add references to the symbols from the metadata.\n            // These can be used by the type check block for components,\n            // and they also cause TypeScript to include these files into the program too,\n            // which will make them part of the analyzedFiles.\n            const externalReferences = [\n                // Add references that are available from all the modules and imports.\n                ...ngModuleMeta.transitiveModule.directives.map(d => d.reference),\n                ...ngModuleMeta.transitiveModule.pipes.map(d => d.reference),\n                ...ngModuleMeta.importedModules.map(m => m.type.reference),\n                ...ngModuleMeta.exportedModules.map(m => m.type.reference),\n                // Add references that might be inserted by the template compiler.\n                ...this._externalIdentifierReferences([Identifiers.TemplateRef, Identifiers.ElementRef]),\n            ];\n            const externalReferenceVars = new Map();\n            externalReferences.forEach((ref, typeIndex) => {\n                externalReferenceVars.set(ref, `_decl${ngModuleIndex}_${typeIndex}`);\n            });\n            externalReferenceVars.forEach((varName, reference) => {\n                outputCtx.statements.push(variable(varName)\n                    .set(NULL_EXPR.cast(DYNAMIC_TYPE))\n                    .toDeclStmt(expressionType(outputCtx.importExpr(reference, /* typeParams */ null, /* useSummaries */ false))));\n            });\n            if (emitFlags & 2 /* TypeCheck */) {\n                // add the type-check block for all components of the NgModule\n                ngModuleMeta.declaredDirectives.forEach((dirId) => {\n                    const compMeta = this._metadataResolver.getDirectiveMetadata(dirId.reference);\n                    if (!compMeta.isComponent) {\n                        return;\n                    }\n                    componentId++;\n                    this._createTypeCheckBlock(outputCtx, `${compMeta.type.reference.name}_Host_${componentId}`, ngModuleMeta, this._metadataResolver.getHostComponentMetadata(compMeta), [compMeta.type], externalReferenceVars);\n                    this._createTypeCheckBlock(outputCtx, `${compMeta.type.reference.name}_${componentId}`, ngModuleMeta, compMeta, ngModuleMeta.transitiveModule.directives, externalReferenceVars);\n                });\n            }\n        });\n        if (outputCtx.statements.length === 0) {\n            _createEmptyStub(outputCtx);\n        }\n    }\n    _externalIdentifierReferences(references) {\n        const result = [];\n        for (let reference of references) {\n            const token = createTokenForExternalReference(this.reflector, reference);\n            if (token.identifier) {\n                result.push(token.identifier.reference);\n            }\n        }\n        return result;\n    }\n    _createTypeCheckBlock(ctx, componentId, moduleMeta, compMeta, directives, externalReferenceVars) {\n        const { template: parsedTemplate, pipes: usedPipes } = this._parseTemplate(compMeta, moduleMeta, directives);\n        ctx.statements.push(...this._typeCheckCompiler.compileComponent(componentId, compMeta, parsedTemplate, usedPipes, externalReferenceVars, ctx));\n    }\n    emitMessageBundle(analyzeResult, locale) {\n        const errors = [];\n        const htmlParser = new HtmlParser();\n        // TODO(vicb): implicit tags & attributes\n        const messageBundle = new MessageBundle(htmlParser, [], {}, locale);\n        analyzeResult.files.forEach(file => {\n            const compMetas = [];\n            file.directives.forEach(directiveType => {\n                const dirMeta = this._metadataResolver.getDirectiveMetadata(directiveType);\n                if (dirMeta && dirMeta.isComponent) {\n                    compMetas.push(dirMeta);\n                }\n            });\n            compMetas.forEach(compMeta => {\n                const html = compMeta.template.template;\n                // Template URL points to either an HTML or TS file depending on whether\n                // the file is used with `templateUrl:` or `template:`, respectively.\n                const templateUrl = compMeta.template.templateUrl;\n                const interpolationConfig = InterpolationConfig.fromArray(compMeta.template.interpolation);\n                errors.push(...messageBundle.updateFromTemplate(html, templateUrl, interpolationConfig));\n            });\n        });\n        if (errors.length) {\n            throw new Error(errors.map(e => e.toString()).join('\\n'));\n        }\n        return messageBundle;\n    }\n    emitAllPartialModules({ ngModuleByPipeOrDirective, files }, r3Files) {\n        const contextMap = new Map();\n        const getContext = (fileName) => {\n            if (!contextMap.has(fileName)) {\n                contextMap.set(fileName, this._createOutputContext(fileName));\n            }\n            return contextMap.get(fileName);\n        };\n        files.forEach(file => this._compilePartialModule(file.fileName, ngModuleByPipeOrDirective, file.directives, file.pipes, file.ngModules, file.injectables, getContext(file.fileName)));\n        r3Files.forEach(file => this._compileShallowModules(file.fileName, file.shallowModules, getContext(file.fileName)));\n        return Array.from(contextMap.values())\n            .map(context => ({\n            fileName: context.genFilePath,\n            statements: [...context.constantPool.statements, ...context.statements],\n        }));\n    }\n    _compileShallowModules(fileName, shallowModules, context) {\n        shallowModules.forEach(module => compileNgModuleFromRender2(context, module, this._injectableCompiler));\n    }\n    _compilePartialModule(fileName, ngModuleByPipeOrDirective, directives, pipes, ngModules, injectables, context) {\n        const errors = [];\n        const schemaRegistry = new DomElementSchemaRegistry();\n        const hostBindingParser = new BindingParser(this._templateParser.expressionParser, DEFAULT_INTERPOLATION_CONFIG, schemaRegistry, [], errors);\n        // Process all components and directives\n        directives.forEach(directiveType => {\n            const directiveMetadata = this._metadataResolver.getDirectiveMetadata(directiveType);\n            if (directiveMetadata.isComponent) {\n                const module = ngModuleByPipeOrDirective.get(directiveType);\n                module ||\n                    error(`Cannot determine the module for component '${identifierName(directiveMetadata.type)}'`);\n                let htmlAst = directiveMetadata.template.htmlAst;\n                const preserveWhitespaces = directiveMetadata.template.preserveWhitespaces;\n                if (!preserveWhitespaces) {\n                    htmlAst = removeWhitespaces(htmlAst);\n                }\n                const render3Ast = htmlAstToRender3Ast(htmlAst.rootNodes, hostBindingParser);\n                // Map of StaticType by directive selectors\n                const directiveTypeBySel = new Map();\n                const directives = module.transitiveModule.directives.map(dir => this._metadataResolver.getDirectiveSummary(dir.reference));\n                directives.forEach(directive => {\n                    if (directive.selector) {\n                        directiveTypeBySel.set(directive.selector, directive.type.reference);\n                    }\n                });\n                // Map of StaticType by pipe names\n                const pipeTypeByName = new Map();\n                const pipes = module.transitiveModule.pipes.map(pipe => this._metadataResolver.getPipeSummary(pipe.reference));\n                pipes.forEach(pipe => { pipeTypeByName.set(pipe.name, pipe.type.reference); });\n                compileComponentFromRender2(context, directiveMetadata, render3Ast, this.reflector, hostBindingParser, directiveTypeBySel, pipeTypeByName);\n            }\n            else {\n                compileDirectiveFromRender2(context, directiveMetadata, this.reflector, hostBindingParser);\n            }\n        });\n        pipes.forEach(pipeType => {\n            const pipeMetadata = this._metadataResolver.getPipeMetadata(pipeType);\n            if (pipeMetadata) {\n                compilePipeFromRender2(context, pipeMetadata, this.reflector);\n            }\n        });\n        injectables.forEach(injectable => this._injectableCompiler.compile(injectable, context));\n    }\n    emitAllPartialModules2(files) {\n        // Using reduce like this is a select many pattern (where map is a select pattern)\n        return files.reduce((r, file) => {\n            r.push(...this._emitPartialModule2(file.fileName, file.injectables));\n            return r;\n        }, []);\n    }\n    _emitPartialModule2(fileName, injectables) {\n        const context = this._createOutputContext(fileName);\n        injectables.forEach(injectable => this._injectableCompiler.compile(injectable, context));\n        if (context.statements && context.statements.length > 0) {\n            return [{ fileName, statements: [...context.constantPool.statements, ...context.statements] }];\n        }\n        return [];\n    }\n    emitAllImpls(analyzeResult) {\n        const { ngModuleByPipeOrDirective, files } = analyzeResult;\n        const sourceModules = files.map(file => this._compileImplFile(file.fileName, ngModuleByPipeOrDirective, file.directives, file.pipes, file.ngModules, file.injectables));\n        return flatten(sourceModules);\n    }\n    _compileImplFile(srcFileUrl, ngModuleByPipeOrDirective, directives, pipes, ngModules, injectables) {\n        const fileSuffix = normalizeGenFileSuffix(splitTypescriptSuffix(srcFileUrl, true)[1]);\n        const generatedFiles = [];\n        const outputCtx = this._createOutputContext(ngfactoryFilePath(srcFileUrl, true));\n        generatedFiles.push(...this._createSummary(srcFileUrl, directives, pipes, ngModules, injectables, outputCtx));\n        // compile all ng modules\n        ngModules.forEach((ngModuleMeta) => this._compileModule(outputCtx, ngModuleMeta));\n        // compile components\n        directives.forEach((dirType) => {\n            const compMeta = this._metadataResolver.getDirectiveMetadata(dirType);\n            if (!compMeta.isComponent) {\n                return;\n            }\n            const ngModule = ngModuleByPipeOrDirective.get(dirType);\n            if (!ngModule) {\n                throw new Error(`Internal Error: cannot determine the module for component ${identifierName(compMeta.type)}!`);\n            }\n            // compile styles\n            const componentStylesheet = this._styleCompiler.compileComponent(outputCtx, compMeta);\n            // Note: compMeta is a component and therefore template is non null.\n            compMeta.template.externalStylesheets.forEach((stylesheetMeta) => {\n                // Note: fill non shim and shim style files as they might\n                // be shared by component with and without ViewEncapsulation.\n                const shim = this._styleCompiler.needsStyleShim(compMeta);\n                generatedFiles.push(this._codegenStyles(srcFileUrl, compMeta, stylesheetMeta, shim, fileSuffix));\n                if (this._options.allowEmptyCodegenFiles) {\n                    generatedFiles.push(this._codegenStyles(srcFileUrl, compMeta, stylesheetMeta, !shim, fileSuffix));\n                }\n            });\n            // compile components\n            const compViewVars = this._compileComponent(outputCtx, compMeta, ngModule, ngModule.transitiveModule.directives, componentStylesheet, fileSuffix);\n            this._compileComponentFactory(outputCtx, compMeta, ngModule, fileSuffix);\n        });\n        if (outputCtx.statements.length > 0 || this._options.allowEmptyCodegenFiles) {\n            const srcModule = this._codegenSourceModule(srcFileUrl, outputCtx);\n            generatedFiles.unshift(srcModule);\n        }\n        return generatedFiles;\n    }\n    _createSummary(srcFileName, directives, pipes, ngModules, injectables, ngFactoryCtx) {\n        const symbolSummaries = this._symbolResolver.getSymbolsOf(srcFileName)\n            .map(symbol => this._symbolResolver.resolveSymbol(symbol));\n        const typeData = [\n            ...ngModules.map(meta => ({\n                summary: this._metadataResolver.getNgModuleSummary(meta.type.reference),\n                metadata: this._metadataResolver.getNgModuleMetadata(meta.type.reference)\n            })),\n            ...directives.map(ref => ({\n                summary: this._metadataResolver.getDirectiveSummary(ref),\n                metadata: this._metadataResolver.getDirectiveMetadata(ref)\n            })),\n            ...pipes.map(ref => ({\n                summary: this._metadataResolver.getPipeSummary(ref),\n                metadata: this._metadataResolver.getPipeMetadata(ref)\n            })),\n            ...injectables.map(ref => ({\n                summary: this._metadataResolver.getInjectableSummary(ref.symbol),\n                metadata: this._metadataResolver.getInjectableSummary(ref.symbol).type\n            }))\n        ];\n        const forJitOutputCtx = this._options.enableSummariesForJit ?\n            this._createOutputContext(summaryForJitFileName(srcFileName, true)) :\n            null;\n        const { json, exportAs } = serializeSummaries(srcFileName, forJitOutputCtx, this._summaryResolver, this._symbolResolver, symbolSummaries, typeData, this._options.createExternalSymbolFactoryReexports);\n        exportAs.forEach((entry) => {\n            ngFactoryCtx.statements.push(variable(entry.exportAs).set(ngFactoryCtx.importExpr(entry.symbol)).toDeclStmt(null, [\n                StmtModifier.Exported\n            ]));\n        });\n        const summaryJson = new GeneratedFile(srcFileName, summaryFileName(srcFileName), json);\n        const result = [summaryJson];\n        if (forJitOutputCtx) {\n            result.push(this._codegenSourceModule(srcFileName, forJitOutputCtx));\n        }\n        return result;\n    }\n    _compileModule(outputCtx, ngModule) {\n        const providers = [];\n        if (this._options.locale) {\n            const normalizedLocale = this._options.locale.replace(/_/g, '-');\n            providers.push({\n                token: createTokenForExternalReference(this.reflector, Identifiers.LOCALE_ID),\n                useValue: normalizedLocale,\n            });\n        }\n        if (this._options.i18nFormat) {\n            providers.push({\n                token: createTokenForExternalReference(this.reflector, Identifiers.TRANSLATIONS_FORMAT),\n                useValue: this._options.i18nFormat\n            });\n        }\n        this._ngModuleCompiler.compile(outputCtx, ngModule, providers);\n    }\n    _compileComponentFactory(outputCtx, compMeta, ngModule, fileSuffix) {\n        const hostMeta = this._metadataResolver.getHostComponentMetadata(compMeta);\n        const hostViewFactoryVar = this._compileComponent(outputCtx, hostMeta, ngModule, [compMeta.type], null, fileSuffix)\n            .viewClassVar;\n        const compFactoryVar = componentFactoryName(compMeta.type.reference);\n        const inputsExprs = [];\n        for (let propName in compMeta.inputs) {\n            const templateName = compMeta.inputs[propName];\n            // Don't quote so that the key gets minified...\n            inputsExprs.push(new LiteralMapEntry(propName, literal(templateName), false));\n        }\n        const outputsExprs = [];\n        for (let propName in compMeta.outputs) {\n            const templateName = compMeta.outputs[propName];\n            // Don't quote so that the key gets minified...\n            outputsExprs.push(new LiteralMapEntry(propName, literal(templateName), false));\n        }\n        outputCtx.statements.push(variable(compFactoryVar)\n            .set(importExpr(Identifiers.createComponentFactory).callFn([\n            literal(compMeta.selector), outputCtx.importExpr(compMeta.type.reference),\n            variable(hostViewFactoryVar), new LiteralMapExpr(inputsExprs),\n            new LiteralMapExpr(outputsExprs),\n            literalArr(compMeta.template.ngContentSelectors.map(selector => literal(selector)))\n        ]))\n            .toDeclStmt(importType(Identifiers.ComponentFactory, [expressionType(outputCtx.importExpr(compMeta.type.reference))], [TypeModifier.Const]), [StmtModifier.Final, StmtModifier.Exported]));\n    }\n    _compileComponent(outputCtx, compMeta, ngModule, directiveIdentifiers, componentStyles, fileSuffix) {\n        const { template: parsedTemplate, pipes: usedPipes } = this._parseTemplate(compMeta, ngModule, directiveIdentifiers);\n        const stylesExpr = componentStyles ? variable(componentStyles.stylesVar) : literalArr([]);\n        const viewResult = this._viewCompiler.compileComponent(outputCtx, compMeta, parsedTemplate, stylesExpr, usedPipes);\n        if (componentStyles) {\n            _resolveStyleStatements(this._symbolResolver, componentStyles, this._styleCompiler.needsStyleShim(compMeta), fileSuffix);\n        }\n        return viewResult;\n    }\n    _parseTemplate(compMeta, ngModule, directiveIdentifiers) {\n        if (this._templateAstCache.has(compMeta.type.reference)) {\n            return this._templateAstCache.get(compMeta.type.reference);\n        }\n        const preserveWhitespaces = compMeta.template.preserveWhitespaces;\n        const directives = directiveIdentifiers.map(dir => this._metadataResolver.getDirectiveSummary(dir.reference));\n        const pipes = ngModule.transitiveModule.pipes.map(pipe => this._metadataResolver.getPipeSummary(pipe.reference));\n        const result = this._templateParser.parse(compMeta, compMeta.template.htmlAst, directives, pipes, ngModule.schemas, templateSourceUrl(ngModule.type, compMeta, compMeta.template), preserveWhitespaces);\n        this._templateAstCache.set(compMeta.type.reference, result);\n        return result;\n    }\n    _createOutputContext(genFilePath) {\n        const importExpr$1 = (symbol, typeParams = null, useSummaries = true) => {\n            if (!(symbol instanceof StaticSymbol)) {\n                throw new Error(`Internal error: unknown identifier ${JSON.stringify(symbol)}`);\n            }\n            const arity = this._symbolResolver.getTypeArity(symbol) || 0;\n            const { filePath, name, members } = this._symbolResolver.getImportAs(symbol, useSummaries) || symbol;\n            const importModule = this._fileNameToModuleName(filePath, genFilePath);\n            // It should be good enough to compare filePath to genFilePath and if they are equal\n            // there is a self reference. However, ngfactory files generate to .ts but their\n            // symbols have .d.ts so a simple compare is insufficient. They should be canonical\n            // and is tracked by #17705.\n            const selfReference = this._fileNameToModuleName(genFilePath, genFilePath);\n            const moduleName = importModule === selfReference ? null : importModule;\n            // If we are in a type expression that refers to a generic type then supply\n            // the required type parameters. If there were not enough type parameters\n            // supplied, supply any as the type. Outside a type expression the reference\n            // should not supply type parameters and be treated as a simple value reference\n            // to the constructor function itself.\n            const suppliedTypeParams = typeParams || [];\n            const missingTypeParamsCount = arity - suppliedTypeParams.length;\n            const allTypeParams = suppliedTypeParams.concat(new Array(missingTypeParamsCount).fill(DYNAMIC_TYPE));\n            return members.reduce((expr, memberName) => expr.prop(memberName), importExpr(new ExternalReference(moduleName, name, null), allTypeParams));\n        };\n        return { statements: [], genFilePath, importExpr: importExpr$1, constantPool: new ConstantPool() };\n    }\n    _fileNameToModuleName(importedFilePath, containingFilePath) {\n        return this._summaryResolver.getKnownModuleName(importedFilePath) ||\n            this._symbolResolver.getKnownModuleName(importedFilePath) ||\n            this._host.fileNameToModuleName(importedFilePath, containingFilePath);\n    }\n    _codegenStyles(srcFileUrl, compMeta, stylesheetMetadata, isShimmed, fileSuffix) {\n        const outputCtx = this._createOutputContext(_stylesModuleUrl(stylesheetMetadata.moduleUrl, isShimmed, fileSuffix));\n        const compiledStylesheet = this._styleCompiler.compileStyles(outputCtx, compMeta, stylesheetMetadata, isShimmed);\n        _resolveStyleStatements(this._symbolResolver, compiledStylesheet, isShimmed, fileSuffix);\n        return this._codegenSourceModule(srcFileUrl, outputCtx);\n    }\n    _codegenSourceModule(srcFileUrl, ctx) {\n        return new GeneratedFile(srcFileUrl, ctx.genFilePath, ctx.statements);\n    }\n    listLazyRoutes(entryRoute, analyzedModules) {\n        const self = this;\n        if (entryRoute) {\n            const symbol = parseLazyRoute(entryRoute, this.reflector).referencedModule;\n            return visitLazyRoute(symbol);\n        }\n        else if (analyzedModules) {\n            const allLazyRoutes = [];\n            for (const ngModule of analyzedModules.ngModules) {\n                const lazyRoutes = listLazyRoutes(ngModule, this.reflector);\n                for (const lazyRoute of lazyRoutes) {\n                    allLazyRoutes.push(lazyRoute);\n                }\n            }\n            return allLazyRoutes;\n        }\n        else {\n            throw new Error(`Either route or analyzedModules has to be specified!`);\n        }\n        function visitLazyRoute(symbol, seenRoutes = new Set(), allLazyRoutes = []) {\n            // Support pointing to default exports, but stop recursing there,\n            // as the StaticReflector does not yet support default exports.\n            if (seenRoutes.has(symbol) || !symbol.name) {\n                return allLazyRoutes;\n            }\n            seenRoutes.add(symbol);\n            const lazyRoutes = listLazyRoutes(self._metadataResolver.getNgModuleMetadata(symbol, true), self.reflector);\n            for (const lazyRoute of lazyRoutes) {\n                allLazyRoutes.push(lazyRoute);\n                visitLazyRoute(lazyRoute.referencedModule, seenRoutes, allLazyRoutes);\n            }\n            return allLazyRoutes;\n        }\n    }\n}\nfunction _createEmptyStub(outputCtx) {\n    // Note: We need to produce at least one import statement so that\n    // TypeScript knows that the file is an es6 module. Otherwise our generated\n    // exports / imports won't be emitted properly by TypeScript.\n    outputCtx.statements.push(importExpr(Identifiers.ComponentFactory).toStmt());\n}\nfunction _resolveStyleStatements(symbolResolver, compileResult, needsShim, fileSuffix) {\n    compileResult.dependencies.forEach((dep) => {\n        dep.setValue(symbolResolver.getStaticSymbol(_stylesModuleUrl(dep.moduleUrl, needsShim, fileSuffix), dep.name));\n    });\n}\nfunction _stylesModuleUrl(stylesheetUrl, shim, suffix) {\n    return `${stylesheetUrl}${shim ? '.shim' : ''}.ngstyle${suffix}`;\n}\nfunction analyzeNgModules(fileNames, host, staticSymbolResolver, metadataResolver) {\n    const files = _analyzeFilesIncludingNonProgramFiles(fileNames, host, staticSymbolResolver, metadataResolver);\n    return mergeAnalyzedFiles(files);\n}\nfunction analyzeAndValidateNgModules(fileNames, host, staticSymbolResolver, metadataResolver) {\n    return validateAnalyzedModules(analyzeNgModules(fileNames, host, staticSymbolResolver, metadataResolver));\n}\nfunction validateAnalyzedModules(analyzedModules) {\n    if (analyzedModules.symbolsMissingModule && analyzedModules.symbolsMissingModule.length) {\n        const messages = analyzedModules.symbolsMissingModule.map(s => `Cannot determine the module for class ${s.name} in ${s.filePath}! Add ${s.name} to the NgModule to fix it.`);\n        throw syntaxError(messages.join('\\n'));\n    }\n    return analyzedModules;\n}\n// Analyzes all of the program files,\n// including files that are not part of the program\n// but are referenced by an NgModule.\nfunction _analyzeFilesIncludingNonProgramFiles(fileNames, host, staticSymbolResolver, metadataResolver) {\n    const seenFiles = new Set();\n    const files = [];\n    const visitFile = (fileName) => {\n        if (seenFiles.has(fileName) || !host.isSourceFile(fileName)) {\n            return false;\n        }\n        seenFiles.add(fileName);\n        const analyzedFile = analyzeFile(host, staticSymbolResolver, metadataResolver, fileName);\n        files.push(analyzedFile);\n        analyzedFile.ngModules.forEach(ngModule => {\n            ngModule.transitiveModule.modules.forEach(modMeta => visitFile(modMeta.reference.filePath));\n        });\n    };\n    fileNames.forEach((fileName) => visitFile(fileName));\n    return files;\n}\nfunction analyzeFile(host, staticSymbolResolver, metadataResolver, fileName) {\n    const directives = [];\n    const pipes = [];\n    const injectables = [];\n    const ngModules = [];\n    const hasDecorators = staticSymbolResolver.hasDecorators(fileName);\n    let exportsNonSourceFiles = false;\n    // Don't analyze .d.ts files that have no decorators as a shortcut\n    // to speed up the analysis. This prevents us from\n    // resolving the references in these files.\n    // Note: exportsNonSourceFiles is only needed when compiling with summaries,\n    // which is not the case when .d.ts files are treated as input files.\n    if (!fileName.endsWith('.d.ts') || hasDecorators) {\n        staticSymbolResolver.getSymbolsOf(fileName).forEach((symbol) => {\n            const resolvedSymbol = staticSymbolResolver.resolveSymbol(symbol);\n            const symbolMeta = resolvedSymbol.metadata;\n            if (!symbolMeta || symbolMeta.__symbolic === 'error') {\n                return;\n            }\n            let isNgSymbol = false;\n            if (symbolMeta.__symbolic === 'class') {\n                if (metadataResolver.isDirective(symbol)) {\n                    isNgSymbol = true;\n                    directives.push(symbol);\n                }\n                else if (metadataResolver.isPipe(symbol)) {\n                    isNgSymbol = true;\n                    pipes.push(symbol);\n                }\n                else if (metadataResolver.isNgModule(symbol)) {\n                    const ngModule = metadataResolver.getNgModuleMetadata(symbol, false);\n                    if (ngModule) {\n                        isNgSymbol = true;\n                        ngModules.push(ngModule);\n                    }\n                }\n                else if (metadataResolver.isInjectable(symbol)) {\n                    isNgSymbol = true;\n                    const injectable = metadataResolver.getInjectableMetadata(symbol, null, false);\n                    if (injectable) {\n                        injectables.push(injectable);\n                    }\n                }\n            }\n            if (!isNgSymbol) {\n                exportsNonSourceFiles =\n                    exportsNonSourceFiles || isValueExportingNonSourceFile(host, symbolMeta);\n            }\n        });\n    }\n    return {\n        fileName, directives, pipes, ngModules, injectables, exportsNonSourceFiles,\n    };\n}\nfunction analyzeFileForInjectables(host, staticSymbolResolver, metadataResolver, fileName) {\n    const injectables = [];\n    const shallowModules = [];\n    if (staticSymbolResolver.hasDecorators(fileName)) {\n        staticSymbolResolver.getSymbolsOf(fileName).forEach((symbol) => {\n            const resolvedSymbol = staticSymbolResolver.resolveSymbol(symbol);\n            const symbolMeta = resolvedSymbol.metadata;\n            if (!symbolMeta || symbolMeta.__symbolic === 'error') {\n                return;\n            }\n            if (symbolMeta.__symbolic === 'class') {\n                if (metadataResolver.isInjectable(symbol)) {\n                    const injectable = metadataResolver.getInjectableMetadata(symbol, null, false);\n                    if (injectable) {\n                        injectables.push(injectable);\n                    }\n                }\n                else if (metadataResolver.isNgModule(symbol)) {\n                    const module = metadataResolver.getShallowModuleMetadata(symbol);\n                    if (module) {\n                        shallowModules.push(module);\n                    }\n                }\n            }\n        });\n    }\n    return { fileName, injectables, shallowModules };\n}\nfunction isValueExportingNonSourceFile(host, metadata) {\n    let exportsNonSourceFiles = false;\n    class Visitor {\n        visitArray(arr, context) { arr.forEach(v => visitValue(v, this, context)); }\n        visitStringMap(map, context) {\n            Object.keys(map).forEach((key) => visitValue(map[key], this, context));\n        }\n        visitPrimitive(value, context) { }\n        visitOther(value, context) {\n            if (value instanceof StaticSymbol && !host.isSourceFile(value.filePath)) {\n                exportsNonSourceFiles = true;\n            }\n        }\n    }\n    visitValue(metadata, new Visitor(), null);\n    return exportsNonSourceFiles;\n}\nfunction mergeAnalyzedFiles(analyzedFiles) {\n    const allNgModules = [];\n    const ngModuleByPipeOrDirective = new Map();\n    const allPipesAndDirectives = new Set();\n    analyzedFiles.forEach(af => {\n        af.ngModules.forEach(ngModule => {\n            allNgModules.push(ngModule);\n            ngModule.declaredDirectives.forEach(d => ngModuleByPipeOrDirective.set(d.reference, ngModule));\n            ngModule.declaredPipes.forEach(p => ngModuleByPipeOrDirective.set(p.reference, ngModule));\n        });\n        af.directives.forEach(d => allPipesAndDirectives.add(d));\n        af.pipes.forEach(p => allPipesAndDirectives.add(p));\n    });\n    const symbolsMissingModule = [];\n    allPipesAndDirectives.forEach(ref => {\n        if (!ngModuleByPipeOrDirective.has(ref)) {\n            symbolsMissingModule.push(ref);\n        }\n    });\n    return {\n        ngModules: allNgModules,\n        ngModuleByPipeOrDirective,\n        symbolsMissingModule,\n        files: analyzedFiles\n    };\n}\nfunction mergeAndValidateNgFiles(files) {\n    return validateAnalyzedModules(mergeAnalyzedFiles(files));\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst FORMATTED_MESSAGE = 'ngFormattedMessage';\nfunction indentStr(level) {\n    if (level <= 0)\n        return '';\n    if (level < 6)\n        return ['', ' ', '  ', '   ', '    ', '     '][level];\n    const half = indentStr(Math.floor(level / 2));\n    return half + half + (level % 2 === 1 ? ' ' : '');\n}\nfunction formatChain(chain, indent = 0) {\n    if (!chain)\n        return '';\n    const position = chain.position ?\n        `${chain.position.fileName}(${chain.position.line + 1},${chain.position.column + 1})` :\n        '';\n    const prefix = position && indent === 0 ? `${position}: ` : '';\n    const postfix = position && indent !== 0 ? ` at ${position}` : '';\n    const message = `${prefix}${chain.message}${postfix}`;\n    return `${indentStr(indent)}${message}${(chain.next && ('\\n' + formatChain(chain.next, indent + 2))) || ''}`;\n}\nfunction formattedError(chain) {\n    const message = formatChain(chain) + '.';\n    const error = syntaxError(message);\n    error[FORMATTED_MESSAGE] = true;\n    error.chain = chain;\n    error.position = chain.position;\n    return error;\n}\nfunction isFormattedError(error) {\n    return !!error[FORMATTED_MESSAGE];\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst ANGULAR_CORE = '@angular/core';\nconst ANGULAR_ROUTER = '@angular/router';\nconst HIDDEN_KEY = /^\\$.*\\$$/;\nconst IGNORE = {\n    __symbolic: 'ignore'\n};\nconst USE_VALUE$1 = 'useValue';\nconst PROVIDE = 'provide';\nconst REFERENCE_SET = new Set([USE_VALUE$1, 'useFactory', 'data', 'id', 'loadChildren']);\nconst TYPEGUARD_POSTFIX = 'TypeGuard';\nconst USE_IF = 'UseIf';\nfunction shouldIgnore(value) {\n    return value && value.__symbolic == 'ignore';\n}\n/**\n * A static reflector implements enough of the Reflector API that is necessary to compile\n * templates statically.\n */\nclass StaticReflector {\n    constructor(summaryResolver, symbolResolver, knownMetadataClasses = [], knownMetadataFunctions = [], errorRecorder) {\n        this.summaryResolver = summaryResolver;\n        this.symbolResolver = symbolResolver;\n        this.errorRecorder = errorRecorder;\n        this.annotationCache = new Map();\n        this.shallowAnnotationCache = new Map();\n        this.propertyCache = new Map();\n        this.parameterCache = new Map();\n        this.methodCache = new Map();\n        this.staticCache = new Map();\n        this.conversionMap = new Map();\n        this.resolvedExternalReferences = new Map();\n        this.annotationForParentClassWithSummaryKind = new Map();\n        this.initializeConversionMap();\n        knownMetadataClasses.forEach((kc) => this._registerDecoratorOrConstructor(this.getStaticSymbol(kc.filePath, kc.name), kc.ctor));\n        knownMetadataFunctions.forEach((kf) => this._registerFunction(this.getStaticSymbol(kf.filePath, kf.name), kf.fn));\n        this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.Directive, [createDirective, createComponent]);\n        this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.Pipe, [createPipe]);\n        this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.NgModule, [createNgModule]);\n        this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.Injectable, [createInjectable, createPipe, createDirective, createComponent, createNgModule]);\n    }\n    componentModuleUrl(typeOrFunc) {\n        const staticSymbol = this.findSymbolDeclaration(typeOrFunc);\n        return this.symbolResolver.getResourcePath(staticSymbol);\n    }\n    resolveExternalReference(ref, containingFile) {\n        let key = undefined;\n        if (!containingFile) {\n            key = `${ref.moduleName}:${ref.name}`;\n            const declarationSymbol = this.resolvedExternalReferences.get(key);\n            if (declarationSymbol)\n                return declarationSymbol;\n        }\n        const refSymbol = this.symbolResolver.getSymbolByModule(ref.moduleName, ref.name, containingFile);\n        const declarationSymbol = this.findSymbolDeclaration(refSymbol);\n        if (!containingFile) {\n            this.symbolResolver.recordModuleNameForFileName(refSymbol.filePath, ref.moduleName);\n            this.symbolResolver.recordImportAs(declarationSymbol, refSymbol);\n        }\n        if (key) {\n            this.resolvedExternalReferences.set(key, declarationSymbol);\n        }\n        return declarationSymbol;\n    }\n    findDeclaration(moduleUrl, name, containingFile) {\n        return this.findSymbolDeclaration(this.symbolResolver.getSymbolByModule(moduleUrl, name, containingFile));\n    }\n    tryFindDeclaration(moduleUrl, name, containingFile) {\n        return this.symbolResolver.ignoreErrorsFor(() => this.findDeclaration(moduleUrl, name, containingFile));\n    }\n    findSymbolDeclaration(symbol) {\n        const resolvedSymbol = this.symbolResolver.resolveSymbol(symbol);\n        if (resolvedSymbol) {\n            let resolvedMetadata = resolvedSymbol.metadata;\n            if (resolvedMetadata && resolvedMetadata.__symbolic === 'resolved') {\n                resolvedMetadata = resolvedMetadata.symbol;\n            }\n            if (resolvedMetadata instanceof StaticSymbol) {\n                return this.findSymbolDeclaration(resolvedSymbol.metadata);\n            }\n        }\n        return symbol;\n    }\n    tryAnnotations(type) {\n        const originalRecorder = this.errorRecorder;\n        this.errorRecorder = (error, fileName) => { };\n        try {\n            return this.annotations(type);\n        }\n        finally {\n            this.errorRecorder = originalRecorder;\n        }\n    }\n    annotations(type) {\n        return this._annotations(type, (type, decorators) => this.simplify(type, decorators), this.annotationCache);\n    }\n    shallowAnnotations(type) {\n        return this._annotations(type, (type, decorators) => this.simplify(type, decorators, true), this.shallowAnnotationCache);\n    }\n    _annotations(type, simplify, annotationCache) {\n        let annotations = annotationCache.get(type);\n        if (!annotations) {\n            annotations = [];\n            const classMetadata = this.getTypeMetadata(type);\n            const parentType = this.findParentType(type, classMetadata);\n            if (parentType) {\n                const parentAnnotations = this.annotations(parentType);\n                annotations.push(...parentAnnotations);\n            }\n            let ownAnnotations = [];\n            if (classMetadata['decorators']) {\n                ownAnnotations = simplify(type, classMetadata['decorators']);\n                if (ownAnnotations) {\n                    annotations.push(...ownAnnotations);\n                }\n            }\n            if (parentType && !this.summaryResolver.isLibraryFile(type.filePath) &&\n                this.summaryResolver.isLibraryFile(parentType.filePath)) {\n                const summary = this.summaryResolver.resolveSummary(parentType);\n                if (summary && summary.type) {\n                    const requiredAnnotationTypes = this.annotationForParentClassWithSummaryKind.get(summary.type.summaryKind);\n                    const typeHasRequiredAnnotation = requiredAnnotationTypes.some((requiredType) => ownAnnotations.some(ann => requiredType.isTypeOf(ann)));\n                    if (!typeHasRequiredAnnotation) {\n                        this.reportError(formatMetadataError(metadataError(`Class ${type.name} in ${type.filePath} extends from a ${CompileSummaryKind[summary.type.summaryKind]} in another compilation unit without duplicating the decorator`, \n                        /* summary */ undefined, `Please add a ${requiredAnnotationTypes.map((type) => type.ngMetadataName).join(' or ')} decorator to the class`), type), type);\n                    }\n                }\n            }\n            annotationCache.set(type, annotations.filter(ann => !!ann));\n        }\n        return annotations;\n    }\n    propMetadata(type) {\n        let propMetadata = this.propertyCache.get(type);\n        if (!propMetadata) {\n            const classMetadata = this.getTypeMetadata(type);\n            propMetadata = {};\n            const parentType = this.findParentType(type, classMetadata);\n            if (parentType) {\n                const parentPropMetadata = this.propMetadata(parentType);\n                Object.keys(parentPropMetadata).forEach((parentProp) => {\n                    propMetadata[parentProp] = parentPropMetadata[parentProp];\n                });\n            }\n            const members = classMetadata['members'] || {};\n            Object.keys(members).forEach((propName) => {\n                const propData = members[propName];\n                const prop = propData\n                    .find(a => a['__symbolic'] == 'property' || a['__symbolic'] == 'method');\n                const decorators = [];\n                if (propMetadata[propName]) {\n                    decorators.push(...propMetadata[propName]);\n                }\n                propMetadata[propName] = decorators;\n                if (prop && prop['decorators']) {\n                    decorators.push(...this.simplify(type, prop['decorators']));\n                }\n            });\n            this.propertyCache.set(type, propMetadata);\n        }\n        return propMetadata;\n    }\n    parameters(type) {\n        if (!(type instanceof StaticSymbol)) {\n            this.reportError(new Error(`parameters received ${JSON.stringify(type)} which is not a StaticSymbol`), type);\n            return [];\n        }\n        try {\n            let parameters = this.parameterCache.get(type);\n            if (!parameters) {\n                const classMetadata = this.getTypeMetadata(type);\n                const parentType = this.findParentType(type, classMetadata);\n                const members = classMetadata ? classMetadata['members'] : null;\n                const ctorData = members ? members['__ctor__'] : null;\n                if (ctorData) {\n                    const ctor = ctorData.find(a => a['__symbolic'] == 'constructor');\n                    const rawParameterTypes = ctor['parameters'] || [];\n                    const parameterDecorators = this.simplify(type, ctor['parameterDecorators'] || []);\n                    parameters = [];\n                    rawParameterTypes.forEach((rawParamType, index) => {\n                        const nestedResult = [];\n                        const paramType = this.trySimplify(type, rawParamType);\n                        if (paramType)\n                            nestedResult.push(paramType);\n                        const decorators = parameterDecorators ? parameterDecorators[index] : null;\n                        if (decorators) {\n                            nestedResult.push(...decorators);\n                        }\n                        parameters.push(nestedResult);\n                    });\n                }\n                else if (parentType) {\n                    parameters = this.parameters(parentType);\n                }\n                if (!parameters) {\n                    parameters = [];\n                }\n                this.parameterCache.set(type, parameters);\n            }\n            return parameters;\n        }\n        catch (e) {\n            console.error(`Failed on type ${JSON.stringify(type)} with error ${e}`);\n            throw e;\n        }\n    }\n    _methodNames(type) {\n        let methodNames = this.methodCache.get(type);\n        if (!methodNames) {\n            const classMetadata = this.getTypeMetadata(type);\n            methodNames = {};\n            const parentType = this.findParentType(type, classMetadata);\n            if (parentType) {\n                const parentMethodNames = this._methodNames(parentType);\n                Object.keys(parentMethodNames).forEach((parentProp) => {\n                    methodNames[parentProp] = parentMethodNames[parentProp];\n                });\n            }\n            const members = classMetadata['members'] || {};\n            Object.keys(members).forEach((propName) => {\n                const propData = members[propName];\n                const isMethod = propData.some(a => a['__symbolic'] == 'method');\n                methodNames[propName] = methodNames[propName] || isMethod;\n            });\n            this.methodCache.set(type, methodNames);\n        }\n        return methodNames;\n    }\n    _staticMembers(type) {\n        let staticMembers = this.staticCache.get(type);\n        if (!staticMembers) {\n            const classMetadata = this.getTypeMetadata(type);\n            const staticMemberData = classMetadata['statics'] || {};\n            staticMembers = Object.keys(staticMemberData);\n            this.staticCache.set(type, staticMembers);\n        }\n        return staticMembers;\n    }\n    findParentType(type, classMetadata) {\n        const parentType = this.trySimplify(type, classMetadata['extends']);\n        if (parentType instanceof StaticSymbol) {\n            return parentType;\n        }\n    }\n    hasLifecycleHook(type, lcProperty) {\n        if (!(type instanceof StaticSymbol)) {\n            this.reportError(new Error(`hasLifecycleHook received ${JSON.stringify(type)} which is not a StaticSymbol`), type);\n        }\n        try {\n            return !!this._methodNames(type)[lcProperty];\n        }\n        catch (e) {\n            console.error(`Failed on type ${JSON.stringify(type)} with error ${e}`);\n            throw e;\n        }\n    }\n    guards(type) {\n        if (!(type instanceof StaticSymbol)) {\n            this.reportError(new Error(`guards received ${JSON.stringify(type)} which is not a StaticSymbol`), type);\n            return {};\n        }\n        const staticMembers = this._staticMembers(type);\n        const result = {};\n        for (let name of staticMembers) {\n            if (name.endsWith(TYPEGUARD_POSTFIX)) {\n                let property = name.substr(0, name.length - TYPEGUARD_POSTFIX.length);\n                let value;\n                if (property.endsWith(USE_IF)) {\n                    property = name.substr(0, property.length - USE_IF.length);\n                    value = USE_IF;\n                }\n                else {\n                    value = this.getStaticSymbol(type.filePath, type.name, [name]);\n                }\n                result[property] = value;\n            }\n        }\n        return result;\n    }\n    _registerDecoratorOrConstructor(type, ctor) {\n        this.conversionMap.set(type, (context, args) => new ctor(...args));\n    }\n    _registerFunction(type, fn) {\n        this.conversionMap.set(type, (context, args) => fn.apply(undefined, args));\n    }\n    initializeConversionMap() {\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Injectable'), createInjectable);\n        this.injectionToken = this.findDeclaration(ANGULAR_CORE, 'InjectionToken');\n        this.opaqueToken = this.findDeclaration(ANGULAR_CORE, 'OpaqueToken');\n        this.ROUTES = this.tryFindDeclaration(ANGULAR_ROUTER, 'ROUTES');\n        this.ANALYZE_FOR_ENTRY_COMPONENTS =\n            this.findDeclaration(ANGULAR_CORE, 'ANALYZE_FOR_ENTRY_COMPONENTS');\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Host'), createHost);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Self'), createSelf);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'SkipSelf'), createSkipSelf);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Inject'), createInject);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Optional'), createOptional);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Attribute'), createAttribute);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ContentChild'), createContentChild);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ContentChildren'), createContentChildren);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ViewChild'), createViewChild);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ViewChildren'), createViewChildren);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Input'), createInput);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Output'), createOutput);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Pipe'), createPipe);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'HostBinding'), createHostBinding);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'HostListener'), createHostListener);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Directive'), createDirective);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Component'), createComponent);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'NgModule'), createNgModule);\n        // Note: Some metadata classes can be used directly with Provider.deps.\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Host'), createHost);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Self'), createSelf);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'SkipSelf'), createSkipSelf);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Optional'), createOptional);\n    }\n    /**\n     * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.\n     * All types passed to the StaticResolver should be pseudo-types returned by this method.\n     *\n     * @param declarationFile the absolute path of the file where the symbol is declared\n     * @param name the name of the type.\n     */\n    getStaticSymbol(declarationFile, name, members) {\n        return this.symbolResolver.getStaticSymbol(declarationFile, name, members);\n    }\n    /**\n     * Simplify but discard any errors\n     */\n    trySimplify(context, value) {\n        const originalRecorder = this.errorRecorder;\n        this.errorRecorder = (error, fileName) => { };\n        const result = this.simplify(context, value);\n        this.errorRecorder = originalRecorder;\n        return result;\n    }\n    /** @internal */\n    simplify(context, value, lazy = false) {\n        const self = this;\n        let scope = BindingScope$1.empty;\n        const calling = new Map();\n        function simplifyInContext(context, value, depth, references) {\n            function resolveReferenceValue(staticSymbol) {\n                const resolvedSymbol = self.symbolResolver.resolveSymbol(staticSymbol);\n                return resolvedSymbol ? resolvedSymbol.metadata : null;\n            }\n            function simplifyEagerly(value) {\n                return simplifyInContext(context, value, depth, 0);\n            }\n            function simplifyLazily(value) {\n                return simplifyInContext(context, value, depth, references + 1);\n            }\n            function simplifyNested(nestedContext, value) {\n                if (nestedContext === context) {\n                    // If the context hasn't changed let the exception propagate unmodified.\n                    return simplifyInContext(nestedContext, value, depth + 1, references);\n                }\n                try {\n                    return simplifyInContext(nestedContext, value, depth + 1, references);\n                }\n                catch (e) {\n                    if (isMetadataError(e)) {\n                        // Propagate the message text up but add a message to the chain that explains how we got\n                        // here.\n                        // e.chain implies e.symbol\n                        const summaryMsg = e.chain ? 'references \\'' + e.symbol.name + '\\'' : errorSummary(e);\n                        const summary = `'${nestedContext.name}' ${summaryMsg}`;\n                        const chain = { message: summary, position: e.position, next: e.chain };\n                        // TODO(chuckj): retrieve the position information indirectly from the collectors node\n                        // map if the metadata is from a .ts file.\n                        self.error({\n                            message: e.message,\n                            advise: e.advise,\n                            context: e.context, chain,\n                            symbol: nestedContext\n                        }, context);\n                    }\n                    else {\n                        // It is probably an internal error.\n                        throw e;\n                    }\n                }\n            }\n            function simplifyCall(functionSymbol, targetFunction, args, targetExpression) {\n                if (targetFunction && targetFunction['__symbolic'] == 'function') {\n                    if (calling.get(functionSymbol)) {\n                        self.error({\n                            message: 'Recursion is not supported',\n                            summary: `called '${functionSymbol.name}' recursively`,\n                            value: targetFunction\n                        }, functionSymbol);\n                    }\n                    try {\n                        const value = targetFunction['value'];\n                        if (value && (depth != 0 || value.__symbolic != 'error')) {\n                            const parameters = targetFunction['parameters'];\n                            const defaults = targetFunction.defaults;\n                            args = args.map(arg => simplifyNested(context, arg))\n                                .map(arg => shouldIgnore(arg) ? undefined : arg);\n                            if (defaults && defaults.length > args.length) {\n                                args.push(...defaults.slice(args.length).map((value) => simplify(value)));\n                            }\n                            calling.set(functionSymbol, true);\n                            const functionScope = BindingScope$1.build();\n                            for (let i = 0; i < parameters.length; i++) {\n                                functionScope.define(parameters[i], args[i]);\n                            }\n                            const oldScope = scope;\n                            let result;\n                            try {\n                                scope = functionScope.done();\n                                result = simplifyNested(functionSymbol, value);\n                            }\n                            finally {\n                                scope = oldScope;\n                            }\n                            return result;\n                        }\n                    }\n                    finally {\n                        calling.delete(functionSymbol);\n                    }\n                }\n                if (depth === 0) {\n                    // If depth is 0 we are evaluating the top level expression that is describing element\n                    // decorator. In this case, it is a decorator we don't understand, such as a custom\n                    // non-angular decorator, and we should just ignore it.\n                    return IGNORE;\n                }\n                let position = undefined;\n                if (targetExpression && targetExpression.__symbolic == 'resolved') {\n                    const line = targetExpression.line;\n                    const character = targetExpression.character;\n                    const fileName = targetExpression.fileName;\n                    if (fileName != null && line != null && character != null) {\n                        position = { fileName, line, column: character };\n                    }\n                }\n                self.error({\n                    message: FUNCTION_CALL_NOT_SUPPORTED,\n                    context: functionSymbol,\n                    value: targetFunction, position\n                }, context);\n            }\n            function simplify(expression) {\n                if (isPrimitive(expression)) {\n                    return expression;\n                }\n                if (expression instanceof Array) {\n                    const result = [];\n                    for (const item of expression) {\n                        // Check for a spread expression\n                        if (item && item.__symbolic === 'spread') {\n                            // We call with references as 0 because we require the actual value and cannot\n                            // tolerate a reference here.\n                            const spreadArray = simplifyEagerly(item.expression);\n                            if (Array.isArray(spreadArray)) {\n                                for (const spreadItem of spreadArray) {\n                                    result.push(spreadItem);\n                                }\n                                continue;\n                            }\n                        }\n                        const value = simplify(item);\n                        if (shouldIgnore(value)) {\n                            continue;\n                        }\n                        result.push(value);\n                    }\n                    return result;\n                }\n                if (expression instanceof StaticSymbol) {\n                    // Stop simplification at builtin symbols or if we are in a reference context and\n                    // the symbol doesn't have members.\n                    if (expression === self.injectionToken || self.conversionMap.has(expression) ||\n                        (references > 0 && !expression.members.length)) {\n                        return expression;\n                    }\n                    else {\n                        const staticSymbol = expression;\n                        const declarationValue = resolveReferenceValue(staticSymbol);\n                        if (declarationValue != null) {\n                            return simplifyNested(staticSymbol, declarationValue);\n                        }\n                        else {\n                            return staticSymbol;\n                        }\n                    }\n                }\n                if (expression) {\n                    if (expression['__symbolic']) {\n                        let staticSymbol;\n                        switch (expression['__symbolic']) {\n                            case 'binop':\n                                let left = simplify(expression['left']);\n                                if (shouldIgnore(left))\n                                    return left;\n                                let right = simplify(expression['right']);\n                                if (shouldIgnore(right))\n                                    return right;\n                                switch (expression['operator']) {\n                                    case '&&':\n                                        return left && right;\n                                    case '||':\n                                        return left || right;\n                                    case '|':\n                                        return left | right;\n                                    case '^':\n                                        return left ^ right;\n                                    case '&':\n                                        return left & right;\n                                    case '==':\n                                        return left == right;\n                                    case '!=':\n                                        return left != right;\n                                    case '===':\n                                        return left === right;\n                                    case '!==':\n                                        return left !== right;\n                                    case '<':\n                                        return left < right;\n                                    case '>':\n                                        return left > right;\n                                    case '<=':\n                                        return left <= right;\n                                    case '>=':\n                                        return left >= right;\n                                    case '<<':\n                                        return left << right;\n                                    case '>>':\n                                        return left >> right;\n                                    case '+':\n                                        return left + right;\n                                    case '-':\n                                        return left - right;\n                                    case '*':\n                                        return left * right;\n                                    case '/':\n                                        return left / right;\n                                    case '%':\n                                        return left % right;\n                                }\n                                return null;\n                            case 'if':\n                                let condition = simplify(expression['condition']);\n                                return condition ? simplify(expression['thenExpression']) :\n                                    simplify(expression['elseExpression']);\n                            case 'pre':\n                                let operand = simplify(expression['operand']);\n                                if (shouldIgnore(operand))\n                                    return operand;\n                                switch (expression['operator']) {\n                                    case '+':\n                                        return operand;\n                                    case '-':\n                                        return -operand;\n                                    case '!':\n                                        return !operand;\n                                    case '~':\n                                        return ~operand;\n                                }\n                                return null;\n                            case 'index':\n                                let indexTarget = simplifyEagerly(expression['expression']);\n                                let index = simplifyEagerly(expression['index']);\n                                if (indexTarget && isPrimitive(index))\n                                    return indexTarget[index];\n                                return null;\n                            case 'select':\n                                const member = expression['member'];\n                                let selectContext = context;\n                                let selectTarget = simplify(expression['expression']);\n                                if (selectTarget instanceof StaticSymbol) {\n                                    const members = selectTarget.members.concat(member);\n                                    selectContext =\n                                        self.getStaticSymbol(selectTarget.filePath, selectTarget.name, members);\n                                    const declarationValue = resolveReferenceValue(selectContext);\n                                    if (declarationValue != null) {\n                                        return simplifyNested(selectContext, declarationValue);\n                                    }\n                                    else {\n                                        return selectContext;\n                                    }\n                                }\n                                if (selectTarget && isPrimitive(member))\n                                    return simplifyNested(selectContext, selectTarget[member]);\n                                return null;\n                            case 'reference':\n                                // Note: This only has to deal with variable references, as symbol references have\n                                // been converted into 'resolved'\n                                // in the StaticSymbolResolver.\n                                const name = expression['name'];\n                                const localValue = scope.resolve(name);\n                                if (localValue != BindingScope$1.missing) {\n                                    return localValue;\n                                }\n                                break;\n                            case 'resolved':\n                                try {\n                                    return simplify(expression.symbol);\n                                }\n                                catch (e) {\n                                    // If an error is reported evaluating the symbol record the position of the\n                                    // reference in the error so it can\n                                    // be reported in the error message generated from the exception.\n                                    if (isMetadataError(e) && expression.fileName != null &&\n                                        expression.line != null && expression.character != null) {\n                                        e.position = {\n                                            fileName: expression.fileName,\n                                            line: expression.line,\n                                            column: expression.character\n                                        };\n                                    }\n                                    throw e;\n                                }\n                            case 'class':\n                                return context;\n                            case 'function':\n                                return context;\n                            case 'new':\n                            case 'call':\n                                // Determine if the function is a built-in conversion\n                                staticSymbol = simplifyInContext(context, expression['expression'], depth + 1, /* references */ 0);\n                                if (staticSymbol instanceof StaticSymbol) {\n                                    if (staticSymbol === self.injectionToken || staticSymbol === self.opaqueToken) {\n                                        // if somebody calls new InjectionToken, don't create an InjectionToken,\n                                        // but rather return the symbol to which the InjectionToken is assigned to.\n                                        // OpaqueToken is supported too as it is required by the language service to\n                                        // support v4 and prior versions of Angular.\n                                        return context;\n                                    }\n                                    const argExpressions = expression['arguments'] || [];\n                                    let converter = self.conversionMap.get(staticSymbol);\n                                    if (converter) {\n                                        const args = argExpressions.map(arg => simplifyNested(context, arg))\n                                            .map(arg => shouldIgnore(arg) ? undefined : arg);\n                                        return converter(context, args);\n                                    }\n                                    else {\n                                        // Determine if the function is one we can simplify.\n                                        const targetFunction = resolveReferenceValue(staticSymbol);\n                                        return simplifyCall(staticSymbol, targetFunction, argExpressions, expression['expression']);\n                                    }\n                                }\n                                return IGNORE;\n                            case 'error':\n                                let message = expression.message;\n                                if (expression['line'] != null) {\n                                    self.error({\n                                        message,\n                                        context: expression.context,\n                                        value: expression,\n                                        position: {\n                                            fileName: expression['fileName'],\n                                            line: expression['line'],\n                                            column: expression['character']\n                                        }\n                                    }, context);\n                                }\n                                else {\n                                    self.error({ message, context: expression.context }, context);\n                                }\n                                return IGNORE;\n                            case 'ignore':\n                                return expression;\n                        }\n                        return null;\n                    }\n                    return mapStringMap(expression, (value, name) => {\n                        if (REFERENCE_SET.has(name)) {\n                            if (name === USE_VALUE$1 && PROVIDE in expression) {\n                                // If this is a provider expression, check for special tokens that need the value\n                                // during analysis.\n                                const provide = simplify(expression.provide);\n                                if (provide === self.ROUTES || provide == self.ANALYZE_FOR_ENTRY_COMPONENTS) {\n                                    return simplify(value);\n                                }\n                            }\n                            return simplifyLazily(value);\n                        }\n                        return simplify(value);\n                    });\n                }\n                return IGNORE;\n            }\n            return simplify(value);\n        }\n        let result;\n        try {\n            result = simplifyInContext(context, value, 0, lazy ? 1 : 0);\n        }\n        catch (e) {\n            if (this.errorRecorder) {\n                this.reportError(e, context);\n            }\n            else {\n                throw formatMetadataError(e, context);\n            }\n        }\n        if (shouldIgnore(result)) {\n            return undefined;\n        }\n        return result;\n    }\n    getTypeMetadata(type) {\n        const resolvedSymbol = this.symbolResolver.resolveSymbol(type);\n        return resolvedSymbol && resolvedSymbol.metadata ? resolvedSymbol.metadata :\n            { __symbolic: 'class' };\n    }\n    reportError(error, context, path) {\n        if (this.errorRecorder) {\n            this.errorRecorder(formatMetadataError(error, context), (context && context.filePath) || path);\n        }\n        else {\n            throw error;\n        }\n    }\n    error({ message, summary, advise, position, context, value, symbol, chain }, reportingContext) {\n        this.reportError(metadataError(message, summary, advise, position, symbol, context, chain), reportingContext);\n    }\n}\nconst METADATA_ERROR = 'ngMetadataError';\nfunction metadataError(message, summary, advise, position, symbol, context, chain) {\n    const error = syntaxError(message);\n    error[METADATA_ERROR] = true;\n    if (advise)\n        error.advise = advise;\n    if (position)\n        error.position = position;\n    if (summary)\n        error.summary = summary;\n    if (context)\n        error.context = context;\n    if (chain)\n        error.chain = chain;\n    if (symbol)\n        error.symbol = symbol;\n    return error;\n}\nfunction isMetadataError(error) {\n    return !!error[METADATA_ERROR];\n}\nconst REFERENCE_TO_NONEXPORTED_CLASS = 'Reference to non-exported class';\nconst VARIABLE_NOT_INITIALIZED = 'Variable not initialized';\nconst DESTRUCTURE_NOT_SUPPORTED = 'Destructuring not supported';\nconst COULD_NOT_RESOLVE_TYPE = 'Could not resolve type';\nconst FUNCTION_CALL_NOT_SUPPORTED = 'Function call not supported';\nconst REFERENCE_TO_LOCAL_SYMBOL = 'Reference to a local symbol';\nconst LAMBDA_NOT_SUPPORTED = 'Lambda not supported';\nfunction expandedMessage(message, context) {\n    switch (message) {\n        case REFERENCE_TO_NONEXPORTED_CLASS:\n            if (context && context.className) {\n                return `References to a non-exported class are not supported in decorators but ${context.className} was referenced.`;\n            }\n            break;\n        case VARIABLE_NOT_INITIALIZED:\n            return 'Only initialized variables and constants can be referenced in decorators because the value of this variable is needed by the template compiler';\n        case DESTRUCTURE_NOT_SUPPORTED:\n            return 'Referencing an exported destructured variable or constant is not supported in decorators and this value is needed by the template compiler';\n        case COULD_NOT_RESOLVE_TYPE:\n            if (context && context.typeName) {\n                return `Could not resolve type ${context.typeName}`;\n            }\n            break;\n        case FUNCTION_CALL_NOT_SUPPORTED:\n            if (context && context.name) {\n                return `Function calls are not supported in decorators but '${context.name}' was called`;\n            }\n            return 'Function calls are not supported in decorators';\n        case REFERENCE_TO_LOCAL_SYMBOL:\n            if (context && context.name) {\n                return `Reference to a local (non-exported) symbols are not supported in decorators but '${context.name}' was referenced`;\n            }\n            break;\n        case LAMBDA_NOT_SUPPORTED:\n            return `Function expressions are not supported in decorators`;\n    }\n    return message;\n}\nfunction messageAdvise(message, context) {\n    switch (message) {\n        case REFERENCE_TO_NONEXPORTED_CLASS:\n            if (context && context.className) {\n                return `Consider exporting '${context.className}'`;\n            }\n            break;\n        case DESTRUCTURE_NOT_SUPPORTED:\n            return 'Consider simplifying to avoid destructuring';\n        case REFERENCE_TO_LOCAL_SYMBOL:\n            if (context && context.name) {\n                return `Consider exporting '${context.name}'`;\n            }\n            break;\n        case LAMBDA_NOT_SUPPORTED:\n            return `Consider changing the function expression into an exported function`;\n    }\n    return undefined;\n}\nfunction errorSummary(error) {\n    if (error.summary) {\n        return error.summary;\n    }\n    switch (error.message) {\n        case REFERENCE_TO_NONEXPORTED_CLASS:\n            if (error.context && error.context.className) {\n                return `references non-exported class ${error.context.className}`;\n            }\n            break;\n        case VARIABLE_NOT_INITIALIZED:\n            return 'is not initialized';\n        case DESTRUCTURE_NOT_SUPPORTED:\n            return 'is a destructured variable';\n        case COULD_NOT_RESOLVE_TYPE:\n            return 'could not be resolved';\n        case FUNCTION_CALL_NOT_SUPPORTED:\n            if (error.context && error.context.name) {\n                return `calls '${error.context.name}'`;\n            }\n            return `calls a function`;\n        case REFERENCE_TO_LOCAL_SYMBOL:\n            if (error.context && error.context.name) {\n                return `references local variable ${error.context.name}`;\n            }\n            return `references a local variable`;\n    }\n    return 'contains the error';\n}\nfunction mapStringMap(input, transform) {\n    if (!input)\n        return {};\n    const result = {};\n    Object.keys(input).forEach((key) => {\n        const value = transform(input[key], key);\n        if (!shouldIgnore(value)) {\n            if (HIDDEN_KEY.test(key)) {\n                Object.defineProperty(result, key, { enumerable: false, configurable: true, value: value });\n            }\n            else {\n                result[key] = value;\n            }\n        }\n    });\n    return result;\n}\nfunction isPrimitive(o) {\n    return o === null || (typeof o !== 'function' && typeof o !== 'object');\n}\nclass BindingScope$1 {\n    static build() {\n        const current = new Map();\n        return {\n            define: function (name, value) {\n                current.set(name, value);\n                return this;\n            },\n            done: function () {\n                return current.size > 0 ? new PopulatedScope(current) : BindingScope$1.empty;\n            }\n        };\n    }\n}\nBindingScope$1.missing = {};\nBindingScope$1.empty = { resolve: name => BindingScope$1.missing };\nclass PopulatedScope extends BindingScope$1 {\n    constructor(bindings) {\n        super();\n        this.bindings = bindings;\n    }\n    resolve(name) {\n        return this.bindings.has(name) ? this.bindings.get(name) : BindingScope$1.missing;\n    }\n}\nfunction formatMetadataMessageChain(chain, advise) {\n    const expanded = expandedMessage(chain.message, chain.context);\n    const nesting = chain.symbol ? ` in '${chain.symbol.name}'` : '';\n    const message = `${expanded}${nesting}`;\n    const position = chain.position;\n    const next = chain.next ?\n        formatMetadataMessageChain(chain.next, advise) :\n        advise ? { message: advise } : undefined;\n    return { message, position, next };\n}\nfunction formatMetadataError(e, context) {\n    if (isMetadataError(e)) {\n        // Produce a formatted version of the and leaving enough information in the original error\n        // to recover the formatting information to eventually produce a diagnostic error message.\n        const position = e.position;\n        const chain = {\n            message: `Error during template compile of '${context.name}'`,\n            position: position,\n            next: { message: e.message, next: e.chain, context: e.context, symbol: e.symbol }\n        };\n        const advise = e.advise || messageAdvise(e.message, e.context);\n        return formattedError(formatMetadataMessageChain(chain, advise));\n    }\n    return e;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass AotSummaryResolver {\n    constructor(host, staticSymbolCache) {\n        this.host = host;\n        this.staticSymbolCache = staticSymbolCache;\n        // Note: this will only contain StaticSymbols without members!\n        this.summaryCache = new Map();\n        this.loadedFilePaths = new Map();\n        // Note: this will only contain StaticSymbols without members!\n        this.importAs = new Map();\n        this.knownFileNameToModuleNames = new Map();\n    }\n    isLibraryFile(filePath) {\n        // Note: We need to strip the .ngfactory. file path,\n        // so this method also works for generated files\n        // (for which host.isSourceFile will always return false).\n        return !this.host.isSourceFile(stripGeneratedFileSuffix(filePath));\n    }\n    toSummaryFileName(filePath, referringSrcFileName) {\n        return this.host.toSummaryFileName(filePath, referringSrcFileName);\n    }\n    fromSummaryFileName(fileName, referringLibFileName) {\n        return this.host.fromSummaryFileName(fileName, referringLibFileName);\n    }\n    resolveSummary(staticSymbol) {\n        const rootSymbol = staticSymbol.members.length ?\n            this.staticSymbolCache.get(staticSymbol.filePath, staticSymbol.name) :\n            staticSymbol;\n        let summary = this.summaryCache.get(rootSymbol);\n        if (!summary) {\n            this._loadSummaryFile(staticSymbol.filePath);\n            summary = this.summaryCache.get(staticSymbol);\n        }\n        return (rootSymbol === staticSymbol && summary) || null;\n    }\n    getSymbolsOf(filePath) {\n        if (this._loadSummaryFile(filePath)) {\n            return Array.from(this.summaryCache.keys()).filter((symbol) => symbol.filePath === filePath);\n        }\n        return null;\n    }\n    getImportAs(staticSymbol) {\n        staticSymbol.assertNoMembers();\n        return this.importAs.get(staticSymbol);\n    }\n    /**\n     * Converts a file path to a module name that can be used as an `import`.\n     */\n    getKnownModuleName(importedFilePath) {\n        return this.knownFileNameToModuleNames.get(importedFilePath) || null;\n    }\n    addSummary(summary) { this.summaryCache.set(summary.symbol, summary); }\n    _loadSummaryFile(filePath) {\n        let hasSummary = this.loadedFilePaths.get(filePath);\n        if (hasSummary != null) {\n            return hasSummary;\n        }\n        let json = null;\n        if (this.isLibraryFile(filePath)) {\n            const summaryFilePath = summaryFileName(filePath);\n            try {\n                json = this.host.loadSummary(summaryFilePath);\n            }\n            catch (e) {\n                console.error(`Error loading summary file ${summaryFilePath}`);\n                throw e;\n            }\n        }\n        hasSummary = json != null;\n        this.loadedFilePaths.set(filePath, hasSummary);\n        if (json) {\n            const { moduleName, summaries, importAs } = deserializeSummaries(this.staticSymbolCache, this, filePath, json);\n            summaries.forEach((summary) => this.summaryCache.set(summary.symbol, summary));\n            if (moduleName) {\n                this.knownFileNameToModuleNames.set(filePath, moduleName);\n            }\n            importAs.forEach((importAs) => { this.importAs.set(importAs.symbol, importAs.importAs); });\n        }\n        return hasSummary;\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction createAotUrlResolver(host) {\n    return {\n        resolve: (basePath, url) => {\n            const filePath = host.resourceNameToFileName(url, basePath);\n            if (!filePath) {\n                throw syntaxError(`Couldn't resolve resource ${url} from ${basePath}`);\n            }\n            return filePath;\n        }\n    };\n}\n/**\n * Creates a new AotCompiler based on options and a host.\n */\nfunction createAotCompiler(compilerHost, options, errorCollector) {\n    let translations = options.translations || '';\n    const urlResolver = createAotUrlResolver(compilerHost);\n    const symbolCache = new StaticSymbolCache();\n    const summaryResolver = new AotSummaryResolver(compilerHost, symbolCache);\n    const symbolResolver = new StaticSymbolResolver(compilerHost, symbolCache, summaryResolver);\n    const staticReflector = new StaticReflector(summaryResolver, symbolResolver, [], [], errorCollector);\n    let htmlParser;\n    if (!!options.enableIvy) {\n        // Ivy handles i18n at the compiler level so we must use a regular parser\n        htmlParser = new HtmlParser();\n    }\n    else {\n        htmlParser = new I18NHtmlParser(new HtmlParser(), translations, options.i18nFormat, options.missingTranslation, console);\n    }\n    const config = new CompilerConfig({\n        defaultEncapsulation: ViewEncapsulation.Emulated,\n        useJit: false,\n        missingTranslation: options.missingTranslation,\n        preserveWhitespaces: options.preserveWhitespaces,\n        strictInjectionParameters: options.strictInjectionParameters,\n    });\n    const normalizer = new DirectiveNormalizer({ get: (url) => compilerHost.loadResource(url) }, urlResolver, htmlParser, config);\n    const expressionParser = new Parser$1(new Lexer());\n    const elementSchemaRegistry = new DomElementSchemaRegistry();\n    const tmplParser = new TemplateParser(config, staticReflector, expressionParser, elementSchemaRegistry, htmlParser, console, []);\n    const resolver = new CompileMetadataResolver(config, htmlParser, new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, console, symbolCache, staticReflector, errorCollector);\n    // TODO(vicb): do not pass options.i18nFormat here\n    const viewCompiler = new ViewCompiler(staticReflector);\n    const typeCheckCompiler = new TypeCheckCompiler(options, staticReflector);\n    const compiler = new AotCompiler(config, options, compilerHost, staticReflector, resolver, tmplParser, new StyleCompiler(urlResolver), viewCompiler, typeCheckCompiler, new NgModuleCompiler(staticReflector), new InjectableCompiler(staticReflector, !!options.enableIvy), new TypeScriptEmitter(), summaryResolver, symbolResolver);\n    return { compiler, reflector: staticReflector };\n}\n\nclass SummaryResolver {\n}\nclass JitSummaryResolver {\n    constructor() {\n        this._summaries = new Map();\n    }\n    isLibraryFile() { return false; }\n    toSummaryFileName(fileName) { return fileName; }\n    fromSummaryFileName(fileName) { return fileName; }\n    resolveSummary(reference) {\n        return this._summaries.get(reference) || null;\n    }\n    getSymbolsOf() { return []; }\n    getImportAs(reference) { return reference; }\n    getKnownModuleName(fileName) { return null; }\n    addSummary(summary) { this._summaries.set(summary.symbol, summary); }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction interpretStatements(statements, reflector) {\n    const ctx = new _ExecutionContext(null, null, null, new Map());\n    const visitor = new StatementInterpreter(reflector);\n    visitor.visitAllStatements(statements, ctx);\n    const result = {};\n    ctx.exports.forEach((exportName) => { result[exportName] = ctx.vars.get(exportName); });\n    return result;\n}\nfunction _executeFunctionStatements(varNames, varValues, statements, ctx, visitor) {\n    const childCtx = ctx.createChildWihtLocalVars();\n    for (let i = 0; i < varNames.length; i++) {\n        childCtx.vars.set(varNames[i], varValues[i]);\n    }\n    const result = visitor.visitAllStatements(statements, childCtx);\n    return result ? result.value : null;\n}\nclass _ExecutionContext {\n    constructor(parent, instance, className, vars) {\n        this.parent = parent;\n        this.instance = instance;\n        this.className = className;\n        this.vars = vars;\n        this.exports = [];\n    }\n    createChildWihtLocalVars() {\n        return new _ExecutionContext(this, this.instance, this.className, new Map());\n    }\n}\nclass ReturnValue {\n    constructor(value) {\n        this.value = value;\n    }\n}\nfunction createDynamicClass(_classStmt, _ctx, _visitor) {\n    const propertyDescriptors = {};\n    _classStmt.getters.forEach((getter) => {\n        // Note: use `function` instead of arrow function to capture `this`\n        propertyDescriptors[getter.name] = {\n            configurable: false,\n            get: function () {\n                const instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\n                return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor);\n            }\n        };\n    });\n    _classStmt.methods.forEach(function (method) {\n        const paramNames = method.params.map(param => param.name);\n        // Note: use `function` instead of arrow function to capture `this`\n        propertyDescriptors[method.name] = {\n            writable: false,\n            configurable: false,\n            value: function (...args) {\n                const instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\n                return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor);\n            }\n        };\n    });\n    const ctorParamNames = _classStmt.constructorMethod.params.map(param => param.name);\n    // Note: use `function` instead of arrow function to capture `this`\n    const ctor = function (...args) {\n        const instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\n        _classStmt.fields.forEach((field) => { this[field.name] = undefined; });\n        _executeFunctionStatements(ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor);\n    };\n    const superClass = _classStmt.parent ? _classStmt.parent.visitExpression(_visitor, _ctx) : Object;\n    ctor.prototype = Object.create(superClass.prototype, propertyDescriptors);\n    return ctor;\n}\nclass StatementInterpreter {\n    constructor(reflector) {\n        this.reflector = reflector;\n    }\n    debugAst(ast) { return debugOutputAstAsTypeScript(ast); }\n    visitDeclareVarStmt(stmt, ctx) {\n        const initialValue = stmt.value ? stmt.value.visitExpression(this, ctx) : undefined;\n        ctx.vars.set(stmt.name, initialValue);\n        if (stmt.hasModifier(StmtModifier.Exported)) {\n            ctx.exports.push(stmt.name);\n        }\n        return null;\n    }\n    visitWriteVarExpr(expr, ctx) {\n        const value = expr.value.visitExpression(this, ctx);\n        let currCtx = ctx;\n        while (currCtx != null) {\n            if (currCtx.vars.has(expr.name)) {\n                currCtx.vars.set(expr.name, value);\n                return value;\n            }\n            currCtx = currCtx.parent;\n        }\n        throw new Error(`Not declared variable ${expr.name}`);\n    }\n    visitWrappedNodeExpr(ast, ctx) {\n        throw new Error('Cannot interpret a WrappedNodeExpr.');\n    }\n    visitTypeofExpr(ast, ctx) {\n        throw new Error('Cannot interpret a TypeofExpr');\n    }\n    visitReadVarExpr(ast, ctx) {\n        let varName = ast.name;\n        if (ast.builtin != null) {\n            switch (ast.builtin) {\n                case BuiltinVar.Super:\n                    return ctx.instance.__proto__;\n                case BuiltinVar.This:\n                    return ctx.instance;\n                case BuiltinVar.CatchError:\n                    varName = CATCH_ERROR_VAR$2;\n                    break;\n                case BuiltinVar.CatchStack:\n                    varName = CATCH_STACK_VAR$2;\n                    break;\n                default:\n                    throw new Error(`Unknown builtin variable ${ast.builtin}`);\n            }\n        }\n        let currCtx = ctx;\n        while (currCtx != null) {\n            if (currCtx.vars.has(varName)) {\n                return currCtx.vars.get(varName);\n            }\n            currCtx = currCtx.parent;\n        }\n        throw new Error(`Not declared variable ${varName}`);\n    }\n    visitWriteKeyExpr(expr, ctx) {\n        const receiver = expr.receiver.visitExpression(this, ctx);\n        const index = expr.index.visitExpression(this, ctx);\n        const value = expr.value.visitExpression(this, ctx);\n        receiver[index] = value;\n        return value;\n    }\n    visitWritePropExpr(expr, ctx) {\n        const receiver = expr.receiver.visitExpression(this, ctx);\n        const value = expr.value.visitExpression(this, ctx);\n        receiver[expr.name] = value;\n        return value;\n    }\n    visitInvokeMethodExpr(expr, ctx) {\n        const receiver = expr.receiver.visitExpression(this, ctx);\n        const args = this.visitAllExpressions(expr.args, ctx);\n        let result;\n        if (expr.builtin != null) {\n            switch (expr.builtin) {\n                case BuiltinMethod.ConcatArray:\n                    result = receiver.concat(...args);\n                    break;\n                case BuiltinMethod.SubscribeObservable:\n                    result = receiver.subscribe({ next: args[0] });\n                    break;\n                case BuiltinMethod.Bind:\n                    result = receiver.bind(...args);\n                    break;\n                default:\n                    throw new Error(`Unknown builtin method ${expr.builtin}`);\n            }\n        }\n        else {\n            result = receiver[expr.name].apply(receiver, args);\n        }\n        return result;\n    }\n    visitInvokeFunctionExpr(stmt, ctx) {\n        const args = this.visitAllExpressions(stmt.args, ctx);\n        const fnExpr = stmt.fn;\n        if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {\n            ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args);\n            return null;\n        }\n        else {\n            const fn = stmt.fn.visitExpression(this, ctx);\n            return fn.apply(null, args);\n        }\n    }\n    visitReturnStmt(stmt, ctx) {\n        return new ReturnValue(stmt.value.visitExpression(this, ctx));\n    }\n    visitDeclareClassStmt(stmt, ctx) {\n        const clazz = createDynamicClass(stmt, ctx, this);\n        ctx.vars.set(stmt.name, clazz);\n        if (stmt.hasModifier(StmtModifier.Exported)) {\n            ctx.exports.push(stmt.name);\n        }\n        return null;\n    }\n    visitExpressionStmt(stmt, ctx) {\n        return stmt.expr.visitExpression(this, ctx);\n    }\n    visitIfStmt(stmt, ctx) {\n        const condition = stmt.condition.visitExpression(this, ctx);\n        if (condition) {\n            return this.visitAllStatements(stmt.trueCase, ctx);\n        }\n        else if (stmt.falseCase != null) {\n            return this.visitAllStatements(stmt.falseCase, ctx);\n        }\n        return null;\n    }\n    visitTryCatchStmt(stmt, ctx) {\n        try {\n            return this.visitAllStatements(stmt.bodyStmts, ctx);\n        }\n        catch (e) {\n            const childCtx = ctx.createChildWihtLocalVars();\n            childCtx.vars.set(CATCH_ERROR_VAR$2, e);\n            childCtx.vars.set(CATCH_STACK_VAR$2, e.stack);\n            return this.visitAllStatements(stmt.catchStmts, childCtx);\n        }\n    }\n    visitThrowStmt(stmt, ctx) {\n        throw stmt.error.visitExpression(this, ctx);\n    }\n    visitCommentStmt(stmt, context) { return null; }\n    visitJSDocCommentStmt(stmt, context) { return null; }\n    visitInstantiateExpr(ast, ctx) {\n        const args = this.visitAllExpressions(ast.args, ctx);\n        const clazz = ast.classExpr.visitExpression(this, ctx);\n        return new clazz(...args);\n    }\n    visitLiteralExpr(ast, ctx) { return ast.value; }\n    visitExternalExpr(ast, ctx) {\n        return this.reflector.resolveExternalReference(ast.value);\n    }\n    visitConditionalExpr(ast, ctx) {\n        if (ast.condition.visitExpression(this, ctx)) {\n            return ast.trueCase.visitExpression(this, ctx);\n        }\n        else if (ast.falseCase != null) {\n            return ast.falseCase.visitExpression(this, ctx);\n        }\n        return null;\n    }\n    visitNotExpr(ast, ctx) {\n        return !ast.condition.visitExpression(this, ctx);\n    }\n    visitAssertNotNullExpr(ast, ctx) {\n        return ast.condition.visitExpression(this, ctx);\n    }\n    visitCastExpr(ast, ctx) {\n        return ast.value.visitExpression(this, ctx);\n    }\n    visitFunctionExpr(ast, ctx) {\n        const paramNames = ast.params.map((param) => param.name);\n        return _declareFn(paramNames, ast.statements, ctx, this);\n    }\n    visitDeclareFunctionStmt(stmt, ctx) {\n        const paramNames = stmt.params.map((param) => param.name);\n        ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this));\n        if (stmt.hasModifier(StmtModifier.Exported)) {\n            ctx.exports.push(stmt.name);\n        }\n        return null;\n    }\n    visitBinaryOperatorExpr(ast, ctx) {\n        const lhs = () => ast.lhs.visitExpression(this, ctx);\n        const rhs = () => ast.rhs.visitExpression(this, ctx);\n        switch (ast.operator) {\n            case BinaryOperator.Equals:\n                return lhs() == rhs();\n            case BinaryOperator.Identical:\n                return lhs() === rhs();\n            case BinaryOperator.NotEquals:\n                return lhs() != rhs();\n            case BinaryOperator.NotIdentical:\n                return lhs() !== rhs();\n            case BinaryOperator.And:\n                return lhs() && rhs();\n            case BinaryOperator.Or:\n                return lhs() || rhs();\n            case BinaryOperator.Plus:\n                return lhs() + rhs();\n            case BinaryOperator.Minus:\n                return lhs() - rhs();\n            case BinaryOperator.Divide:\n                return lhs() / rhs();\n            case BinaryOperator.Multiply:\n                return lhs() * rhs();\n            case BinaryOperator.Modulo:\n                return lhs() % rhs();\n            case BinaryOperator.Lower:\n                return lhs() < rhs();\n            case BinaryOperator.LowerEquals:\n                return lhs() <= rhs();\n            case BinaryOperator.Bigger:\n                return lhs() > rhs();\n            case BinaryOperator.BiggerEquals:\n                return lhs() >= rhs();\n            default:\n                throw new Error(`Unknown operator ${ast.operator}`);\n        }\n    }\n    visitReadPropExpr(ast, ctx) {\n        let result;\n        const receiver = ast.receiver.visitExpression(this, ctx);\n        result = receiver[ast.name];\n        return result;\n    }\n    visitReadKeyExpr(ast, ctx) {\n        const receiver = ast.receiver.visitExpression(this, ctx);\n        const prop = ast.index.visitExpression(this, ctx);\n        return receiver[prop];\n    }\n    visitLiteralArrayExpr(ast, ctx) {\n        return this.visitAllExpressions(ast.entries, ctx);\n    }\n    visitLiteralMapExpr(ast, ctx) {\n        const result = {};\n        ast.entries.forEach(entry => result[entry.key] = entry.value.visitExpression(this, ctx));\n        return result;\n    }\n    visitCommaExpr(ast, context) {\n        const values = this.visitAllExpressions(ast.parts, context);\n        return values[values.length - 1];\n    }\n    visitAllExpressions(expressions, ctx) {\n        return expressions.map((expr) => expr.visitExpression(this, ctx));\n    }\n    visitAllStatements(statements, ctx) {\n        for (let i = 0; i < statements.length; i++) {\n            const stmt = statements[i];\n            const val = stmt.visitStatement(this, ctx);\n            if (val instanceof ReturnValue) {\n                return val;\n            }\n        }\n        return null;\n    }\n}\nfunction _declareFn(varNames, statements, ctx, visitor) {\n    return (...args) => _executeFunctionStatements(varNames, args, statements, ctx, visitor);\n}\nconst CATCH_ERROR_VAR$2 = 'error';\nconst CATCH_STACK_VAR$2 = 'stack';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An internal module of the Angular compiler that begins with component types,\n * extracts templates, and eventually produces a compiled version of the component\n * ready for linking into an application.\n *\n * @security  When compiling templates at runtime, you must ensure that the entire template comes\n * from a trusted source. Attacker-controlled data introduced by a template could expose your\n * application to XSS risks.  For more detail, see the [Security Guide](http://g.co/ng/security).\n */\nclass JitCompiler {\n    constructor(_metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _summaryResolver, _reflector, _jitEvaluator, _compilerConfig, _console, getExtraNgModuleProviders) {\n        this._metadataResolver = _metadataResolver;\n        this._templateParser = _templateParser;\n        this._styleCompiler = _styleCompiler;\n        this._viewCompiler = _viewCompiler;\n        this._ngModuleCompiler = _ngModuleCompiler;\n        this._summaryResolver = _summaryResolver;\n        this._reflector = _reflector;\n        this._jitEvaluator = _jitEvaluator;\n        this._compilerConfig = _compilerConfig;\n        this._console = _console;\n        this.getExtraNgModuleProviders = getExtraNgModuleProviders;\n        this._compiledTemplateCache = new Map();\n        this._compiledHostTemplateCache = new Map();\n        this._compiledDirectiveWrapperCache = new Map();\n        this._compiledNgModuleCache = new Map();\n        this._sharedStylesheetCount = 0;\n        this._addedAotSummaries = new Set();\n    }\n    compileModuleSync(moduleType) {\n        return SyncAsync.assertSync(this._compileModuleAndComponents(moduleType, true));\n    }\n    compileModuleAsync(moduleType) {\n        return Promise.resolve(this._compileModuleAndComponents(moduleType, false));\n    }\n    compileModuleAndAllComponentsSync(moduleType) {\n        return SyncAsync.assertSync(this._compileModuleAndAllComponents(moduleType, true));\n    }\n    compileModuleAndAllComponentsAsync(moduleType) {\n        return Promise.resolve(this._compileModuleAndAllComponents(moduleType, false));\n    }\n    getComponentFactory(component) {\n        const summary = this._metadataResolver.getDirectiveSummary(component);\n        return summary.componentFactory;\n    }\n    loadAotSummaries(summaries) {\n        this.clearCache();\n        this._addAotSummaries(summaries);\n    }\n    _addAotSummaries(fn) {\n        if (this._addedAotSummaries.has(fn)) {\n            return;\n        }\n        this._addedAotSummaries.add(fn);\n        const summaries = fn();\n        for (let i = 0; i < summaries.length; i++) {\n            const entry = summaries[i];\n            if (typeof entry === 'function') {\n                this._addAotSummaries(entry);\n            }\n            else {\n                const summary = entry;\n                this._summaryResolver.addSummary({ symbol: summary.type.reference, metadata: null, type: summary });\n            }\n        }\n    }\n    hasAotSummary(ref) { return !!this._summaryResolver.resolveSummary(ref); }\n    _filterJitIdentifiers(ids) {\n        return ids.map(mod => mod.reference).filter((ref) => !this.hasAotSummary(ref));\n    }\n    _compileModuleAndComponents(moduleType, isSync) {\n        return SyncAsync.then(this._loadModules(moduleType, isSync), () => {\n            this._compileComponents(moduleType, null);\n            return this._compileModule(moduleType);\n        });\n    }\n    _compileModuleAndAllComponents(moduleType, isSync) {\n        return SyncAsync.then(this._loadModules(moduleType, isSync), () => {\n            const componentFactories = [];\n            this._compileComponents(moduleType, componentFactories);\n            return {\n                ngModuleFactory: this._compileModule(moduleType),\n                componentFactories: componentFactories\n            };\n        });\n    }\n    _loadModules(mainModule, isSync) {\n        const loading = [];\n        const mainNgModule = this._metadataResolver.getNgModuleMetadata(mainModule);\n        // Note: for runtime compilation, we want to transitively compile all modules,\n        // so we also need to load the declared directives / pipes for all nested modules.\n        this._filterJitIdentifiers(mainNgModule.transitiveModule.modules).forEach((nestedNgModule) => {\n            // getNgModuleMetadata only returns null if the value passed in is not an NgModule\n            const moduleMeta = this._metadataResolver.getNgModuleMetadata(nestedNgModule);\n            this._filterJitIdentifiers(moduleMeta.declaredDirectives).forEach((ref) => {\n                const promise = this._metadataResolver.loadDirectiveMetadata(moduleMeta.type.reference, ref, isSync);\n                if (promise) {\n                    loading.push(promise);\n                }\n            });\n            this._filterJitIdentifiers(moduleMeta.declaredPipes)\n                .forEach((ref) => this._metadataResolver.getOrLoadPipeMetadata(ref));\n        });\n        return SyncAsync.all(loading);\n    }\n    _compileModule(moduleType) {\n        let ngModuleFactory = this._compiledNgModuleCache.get(moduleType);\n        if (!ngModuleFactory) {\n            const moduleMeta = this._metadataResolver.getNgModuleMetadata(moduleType);\n            // Always provide a bound Compiler\n            const extraProviders = this.getExtraNgModuleProviders(moduleMeta.type.reference);\n            const outputCtx = createOutputContext();\n            const compileResult = this._ngModuleCompiler.compile(outputCtx, moduleMeta, extraProviders);\n            ngModuleFactory = this._interpretOrJit(ngModuleJitUrl(moduleMeta), outputCtx.statements)[compileResult.ngModuleFactoryVar];\n            this._compiledNgModuleCache.set(moduleMeta.type.reference, ngModuleFactory);\n        }\n        return ngModuleFactory;\n    }\n    /**\n     * @internal\n     */\n    _compileComponents(mainModule, allComponentFactories) {\n        const ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);\n        const moduleByJitDirective = new Map();\n        const templates = new Set();\n        const transJitModules = this._filterJitIdentifiers(ngModule.transitiveModule.modules);\n        transJitModules.forEach((localMod) => {\n            const localModuleMeta = this._metadataResolver.getNgModuleMetadata(localMod);\n            this._filterJitIdentifiers(localModuleMeta.declaredDirectives).forEach((dirRef) => {\n                moduleByJitDirective.set(dirRef, localModuleMeta);\n                const dirMeta = this._metadataResolver.getDirectiveMetadata(dirRef);\n                if (dirMeta.isComponent) {\n                    templates.add(this._createCompiledTemplate(dirMeta, localModuleMeta));\n                    if (allComponentFactories) {\n                        const template = this._createCompiledHostTemplate(dirMeta.type.reference, localModuleMeta);\n                        templates.add(template);\n                        allComponentFactories.push(dirMeta.componentFactory);\n                    }\n                }\n            });\n        });\n        transJitModules.forEach((localMod) => {\n            const localModuleMeta = this._metadataResolver.getNgModuleMetadata(localMod);\n            this._filterJitIdentifiers(localModuleMeta.declaredDirectives).forEach((dirRef) => {\n                const dirMeta = this._metadataResolver.getDirectiveMetadata(dirRef);\n                if (dirMeta.isComponent) {\n                    dirMeta.entryComponents.forEach((entryComponentType) => {\n                        const moduleMeta = moduleByJitDirective.get(entryComponentType.componentType);\n                        templates.add(this._createCompiledHostTemplate(entryComponentType.componentType, moduleMeta));\n                    });\n                }\n            });\n            localModuleMeta.entryComponents.forEach((entryComponentType) => {\n                if (!this.hasAotSummary(entryComponentType.componentType)) {\n                    const moduleMeta = moduleByJitDirective.get(entryComponentType.componentType);\n                    templates.add(this._createCompiledHostTemplate(entryComponentType.componentType, moduleMeta));\n                }\n            });\n        });\n        templates.forEach((template) => this._compileTemplate(template));\n    }\n    clearCacheFor(type) {\n        this._compiledNgModuleCache.delete(type);\n        this._metadataResolver.clearCacheFor(type);\n        this._compiledHostTemplateCache.delete(type);\n        const compiledTemplate = this._compiledTemplateCache.get(type);\n        if (compiledTemplate) {\n            this._compiledTemplateCache.delete(type);\n        }\n    }\n    clearCache() {\n        // Note: don't clear the _addedAotSummaries, as they don't change!\n        this._metadataResolver.clearCache();\n        this._compiledTemplateCache.clear();\n        this._compiledHostTemplateCache.clear();\n        this._compiledNgModuleCache.clear();\n    }\n    _createCompiledHostTemplate(compType, ngModule) {\n        if (!ngModule) {\n            throw new Error(`Component ${stringify(compType)} is not part of any NgModule or the module has not been imported into your module.`);\n        }\n        let compiledTemplate = this._compiledHostTemplateCache.get(compType);\n        if (!compiledTemplate) {\n            const compMeta = this._metadataResolver.getDirectiveMetadata(compType);\n            assertComponent(compMeta);\n            const hostMeta = this._metadataResolver.getHostComponentMetadata(compMeta, compMeta.componentFactory.viewDefFactory);\n            compiledTemplate =\n                new CompiledTemplate(true, compMeta.type, hostMeta, ngModule, [compMeta.type]);\n            this._compiledHostTemplateCache.set(compType, compiledTemplate);\n        }\n        return compiledTemplate;\n    }\n    _createCompiledTemplate(compMeta, ngModule) {\n        let compiledTemplate = this._compiledTemplateCache.get(compMeta.type.reference);\n        if (!compiledTemplate) {\n            assertComponent(compMeta);\n            compiledTemplate = new CompiledTemplate(false, compMeta.type, compMeta, ngModule, ngModule.transitiveModule.directives);\n            this._compiledTemplateCache.set(compMeta.type.reference, compiledTemplate);\n        }\n        return compiledTemplate;\n    }\n    _compileTemplate(template) {\n        if (template.isCompiled) {\n            return;\n        }\n        const compMeta = template.compMeta;\n        const externalStylesheetsByModuleUrl = new Map();\n        const outputContext = createOutputContext();\n        const componentStylesheet = this._styleCompiler.compileComponent(outputContext, compMeta);\n        compMeta.template.externalStylesheets.forEach((stylesheetMeta) => {\n            const compiledStylesheet = this._styleCompiler.compileStyles(createOutputContext(), compMeta, stylesheetMeta);\n            externalStylesheetsByModuleUrl.set(stylesheetMeta.moduleUrl, compiledStylesheet);\n        });\n        this._resolveStylesCompileResult(componentStylesheet, externalStylesheetsByModuleUrl);\n        const pipes = template.ngModule.transitiveModule.pipes.map(pipe => this._metadataResolver.getPipeSummary(pipe.reference));\n        const { template: parsedTemplate, pipes: usedPipes } = this._parseTemplate(compMeta, template.ngModule, template.directives);\n        const compileResult = this._viewCompiler.compileComponent(outputContext, compMeta, parsedTemplate, variable(componentStylesheet.stylesVar), usedPipes);\n        const evalResult = this._interpretOrJit(templateJitUrl(template.ngModule.type, template.compMeta), outputContext.statements);\n        const viewClass = evalResult[compileResult.viewClassVar];\n        const rendererType = evalResult[compileResult.rendererTypeVar];\n        template.compiled(viewClass, rendererType);\n    }\n    _parseTemplate(compMeta, ngModule, directiveIdentifiers) {\n        // Note: ! is ok here as components always have a template.\n        const preserveWhitespaces = compMeta.template.preserveWhitespaces;\n        const directives = directiveIdentifiers.map(dir => this._metadataResolver.getDirectiveSummary(dir.reference));\n        const pipes = ngModule.transitiveModule.pipes.map(pipe => this._metadataResolver.getPipeSummary(pipe.reference));\n        return this._templateParser.parse(compMeta, compMeta.template.htmlAst, directives, pipes, ngModule.schemas, templateSourceUrl(ngModule.type, compMeta, compMeta.template), preserveWhitespaces);\n    }\n    _resolveStylesCompileResult(result, externalStylesheetsByModuleUrl) {\n        result.dependencies.forEach((dep, i) => {\n            const nestedCompileResult = externalStylesheetsByModuleUrl.get(dep.moduleUrl);\n            const nestedStylesArr = this._resolveAndEvalStylesCompileResult(nestedCompileResult, externalStylesheetsByModuleUrl);\n            dep.setValue(nestedStylesArr);\n        });\n    }\n    _resolveAndEvalStylesCompileResult(result, externalStylesheetsByModuleUrl) {\n        this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl);\n        return this._interpretOrJit(sharedStylesheetJitUrl(result.meta, this._sharedStylesheetCount++), result.outputCtx.statements)[result.stylesVar];\n    }\n    _interpretOrJit(sourceUrl, statements) {\n        if (!this._compilerConfig.useJit) {\n            return interpretStatements(statements, this._reflector);\n        }\n        else {\n            return this._jitEvaluator.evaluateStatements(sourceUrl, statements, this._reflector, this._compilerConfig.jitDevMode);\n        }\n    }\n}\nclass CompiledTemplate {\n    constructor(isHost, compType, compMeta, ngModule, directives) {\n        this.isHost = isHost;\n        this.compType = compType;\n        this.compMeta = compMeta;\n        this.ngModule = ngModule;\n        this.directives = directives;\n        this._viewClass = null;\n        this.isCompiled = false;\n    }\n    compiled(viewClass, rendererType) {\n        this._viewClass = viewClass;\n        this.compMeta.componentViewType.setDelegate(viewClass);\n        for (let prop in rendererType) {\n            this.compMeta.rendererType[prop] = rendererType[prop];\n        }\n        this.isCompiled = true;\n    }\n}\nfunction assertComponent(meta) {\n    if (!meta.isComponent) {\n        throw new Error(`Could not compile '${identifierName(meta.type)}' because it is not a component.`);\n    }\n}\nfunction createOutputContext() {\n    const importExpr$1 = (symbol) => importExpr({ name: identifierName(symbol), moduleName: null, runtime: symbol });\n    return { statements: [], genFilePath: '', importExpr: importExpr$1, constantPool: new ConstantPool() };\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides access to reflection data about symbols that the compiler needs.\n */\nclass CompileReflector {\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Create a {@link UrlResolver} with no package prefix.\n */\nfunction createUrlResolverWithoutPackagePrefix() {\n    return new UrlResolver();\n}\nfunction createOfflineCompileUrlResolver() {\n    return new UrlResolver('.');\n}\nconst UrlResolver = class UrlResolverImpl {\n    constructor(_packagePrefix = null) {\n        this._packagePrefix = _packagePrefix;\n    }\n    /**\n     * Resolves the `url` given the `baseUrl`:\n     * - when the `url` is null, the `baseUrl` is returned,\n     * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of\n     * `baseUrl` and `url`,\n     * - if `url` is absolute (it has a scheme: 'http://', 'https://' or start with '/'), the `url` is\n     * returned as is (ignoring the `baseUrl`)\n     */\n    resolve(baseUrl, url) {\n        let resolvedUrl = url;\n        if (baseUrl != null && baseUrl.length > 0) {\n            resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);\n        }\n        const resolvedParts = _split(resolvedUrl);\n        let prefix = this._packagePrefix;\n        if (prefix != null && resolvedParts != null &&\n            resolvedParts[_ComponentIndex.Scheme] == 'package') {\n            let path = resolvedParts[_ComponentIndex.Path];\n            prefix = prefix.replace(/\\/+$/, '');\n            path = path.replace(/^\\/+/, '');\n            return `${prefix}/${path}`;\n        }\n        return resolvedUrl;\n    }\n};\n/**\n * Extract the scheme of a URL.\n */\nfunction getUrlScheme(url) {\n    const match = _split(url);\n    return (match && match[_ComponentIndex.Scheme]) || '';\n}\n// The code below is adapted from Traceur:\n// https://github.com/google/traceur-compiler/blob/9511c1dafa972bf0de1202a8a863bad02f0f95a8/src/runtime/url.js\n/**\n * Builds a URI string from already-encoded parts.\n *\n * No encoding is performed.  Any component may be omitted as either null or\n * undefined.\n *\n * @param opt_scheme The scheme such as 'http'.\n * @param opt_userInfo The user name before the '@'.\n * @param opt_domain The domain such as 'www.google.com', already\n *     URI-encoded.\n * @param opt_port The port number.\n * @param opt_path The path, already URI-encoded.  If it is not\n *     empty, it must begin with a slash.\n * @param opt_queryData The URI-encoded query data.\n * @param opt_fragment The URI-encoded fragment identifier.\n * @return The fully combined URI.\n */\nfunction _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {\n    const out = [];\n    if (opt_scheme != null) {\n        out.push(opt_scheme + ':');\n    }\n    if (opt_domain != null) {\n        out.push('//');\n        if (opt_userInfo != null) {\n            out.push(opt_userInfo + '@');\n        }\n        out.push(opt_domain);\n        if (opt_port != null) {\n            out.push(':' + opt_port);\n        }\n    }\n    if (opt_path != null) {\n        out.push(opt_path);\n    }\n    if (opt_queryData != null) {\n        out.push('?' + opt_queryData);\n    }\n    if (opt_fragment != null) {\n        out.push('#' + opt_fragment);\n    }\n    return out.join('');\n}\n/**\n * A regular expression for breaking a URI into its component parts.\n *\n * {@link http://www.gbiv.com/protocols/uri/rfc/rfc3986.html#RFC2234} says\n * As the \"first-match-wins\" algorithm is identical to the \"greedy\"\n * disambiguation method used by POSIX regular expressions, it is natural and\n * commonplace to use a regular expression for parsing the potential five\n * components of a URI reference.\n *\n * The following line is the regular expression for breaking-down a\n * well-formed URI reference into its components.\n *\n * <pre>\n * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\n *  12            3  4          5       6  7        8 9\n * </pre>\n *\n * The numbers in the second line above are only to assist readability; they\n * indicate the reference points for each subexpression (i.e., each paired\n * parenthesis). We refer to the value matched for subexpression <n> as $<n>.\n * For example, matching the above expression to\n * <pre>\n *     http://www.ics.uci.edu/pub/ietf/uri/#Related\n * </pre>\n * results in the following subexpression matches:\n * <pre>\n *    $1 = http:\n *    $2 = http\n *    $3 = //www.ics.uci.edu\n *    $4 = www.ics.uci.edu\n *    $5 = /pub/ietf/uri/\n *    $6 = <undefined>\n *    $7 = <undefined>\n *    $8 = #Related\n *    $9 = Related\n * </pre>\n * where <undefined> indicates that the component is not present, as is the\n * case for the query component in the above example. Therefore, we can\n * determine the value of the five components as\n * <pre>\n *    scheme    = $2\n *    authority = $4\n *    path      = $5\n *    query     = $7\n *    fragment  = $9\n * </pre>\n *\n * The regular expression has been modified slightly to expose the\n * userInfo, domain, and port separately from the authority.\n * The modified version yields\n * <pre>\n *    $1 = http              scheme\n *    $2 = <undefined>       userInfo -\\\n *    $3 = www.ics.uci.edu   domain     | authority\n *    $4 = <undefined>       port     -/\n *    $5 = /pub/ietf/uri/    path\n *    $6 = <undefined>       query without ?\n *    $7 = Related           fragment without #\n * </pre>\n * @internal\n */\nconst _splitRe = new RegExp('^' +\n    '(?:' +\n    '([^:/?#.]+)' + // scheme - ignore special characters\n    // used by other URL parts such as :,\n    // ?, /, #, and .\n    ':)?' +\n    '(?://' +\n    '(?:([^/?#]*)@)?' + // userInfo\n    '([\\\\w\\\\d\\\\-\\\\u0100-\\\\uffff.%]*)' + // domain - restrict to letters,\n    // digits, dashes, dots, percent\n    // escapes, and unicode characters.\n    '(?::([0-9]+))?' + // port\n    ')?' +\n    '([^?#]+)?' + // path\n    '(?:\\\\?([^#]*))?' + // query\n    '(?:#(.*))?' + // fragment\n    '$');\n/**\n * The index of each URI component in the return value of goog.uri.utils.split.\n * @enum {number}\n */\nvar _ComponentIndex;\n(function (_ComponentIndex) {\n    _ComponentIndex[_ComponentIndex[\"Scheme\"] = 1] = \"Scheme\";\n    _ComponentIndex[_ComponentIndex[\"UserInfo\"] = 2] = \"UserInfo\";\n    _ComponentIndex[_ComponentIndex[\"Domain\"] = 3] = \"Domain\";\n    _ComponentIndex[_ComponentIndex[\"Port\"] = 4] = \"Port\";\n    _ComponentIndex[_ComponentIndex[\"Path\"] = 5] = \"Path\";\n    _ComponentIndex[_ComponentIndex[\"QueryData\"] = 6] = \"QueryData\";\n    _ComponentIndex[_ComponentIndex[\"Fragment\"] = 7] = \"Fragment\";\n})(_ComponentIndex || (_ComponentIndex = {}));\n/**\n * Splits a URI into its component parts.\n *\n * Each component can be accessed via the component indices; for example:\n * <pre>\n * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];\n * </pre>\n *\n * @param uri The URI string to examine.\n * @return Each component still URI-encoded.\n *     Each component that is present will contain the encoded value, whereas\n *     components that are not present will be undefined or empty, depending\n *     on the browser's regular expression implementation.  Never null, since\n *     arbitrary strings may still look like path names.\n */\nfunction _split(uri) {\n    return uri.match(_splitRe);\n}\n/**\n  * Removes dot segments in given path component, as described in\n  * RFC 3986, section 5.2.4.\n  *\n  * @param path A non-empty path component.\n  * @return Path component with removed dot segments.\n  */\nfunction _removeDotSegments(path) {\n    if (path == '/')\n        return '/';\n    const leadingSlash = path[0] == '/' ? '/' : '';\n    const trailingSlash = path[path.length - 1] === '/' ? '/' : '';\n    const segments = path.split('/');\n    const out = [];\n    let up = 0;\n    for (let pos = 0; pos < segments.length; pos++) {\n        const segment = segments[pos];\n        switch (segment) {\n            case '':\n            case '.':\n                break;\n            case '..':\n                if (out.length > 0) {\n                    out.pop();\n                }\n                else {\n                    up++;\n                }\n                break;\n            default:\n                out.push(segment);\n        }\n    }\n    if (leadingSlash == '') {\n        while (up-- > 0) {\n            out.unshift('..');\n        }\n        if (out.length === 0)\n            out.push('.');\n    }\n    return leadingSlash + out.join('/') + trailingSlash;\n}\n/**\n * Takes an array of the parts from split and canonicalizes the path part\n * and then joins all the parts.\n */\nfunction _joinAndCanonicalizePath(parts) {\n    let path = parts[_ComponentIndex.Path];\n    path = path == null ? '' : _removeDotSegments(path);\n    parts[_ComponentIndex.Path] = path;\n    return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);\n}\n/**\n * Resolves a URL.\n * @param base The URL acting as the base URL.\n * @param to The URL to resolve.\n */\nfunction _resolveUrl(base, url) {\n    const parts = _split(encodeURI(url));\n    const baseParts = _split(base);\n    if (parts[_ComponentIndex.Scheme] != null) {\n        return _joinAndCanonicalizePath(parts);\n    }\n    else {\n        parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];\n    }\n    for (let i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {\n        if (parts[i] == null) {\n            parts[i] = baseParts[i];\n        }\n    }\n    if (parts[_ComponentIndex.Path][0] == '/') {\n        return _joinAndCanonicalizePath(parts);\n    }\n    let path = baseParts[_ComponentIndex.Path];\n    if (path == null)\n        path = '/';\n    const index = path.lastIndexOf('/');\n    path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];\n    parts[_ComponentIndex.Path] = path;\n    return _joinAndCanonicalizePath(parts);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass Extractor {\n    constructor(host, staticSymbolResolver, messageBundle, metadataResolver) {\n        this.host = host;\n        this.staticSymbolResolver = staticSymbolResolver;\n        this.messageBundle = messageBundle;\n        this.metadataResolver = metadataResolver;\n    }\n    extract(rootFiles) {\n        const { files, ngModules } = analyzeAndValidateNgModules(rootFiles, this.host, this.staticSymbolResolver, this.metadataResolver);\n        return Promise\n            .all(ngModules.map(ngModule => this.metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false)))\n            .then(() => {\n            const errors = [];\n            files.forEach(file => {\n                const compMetas = [];\n                file.directives.forEach(directiveType => {\n                    const dirMeta = this.metadataResolver.getDirectiveMetadata(directiveType);\n                    if (dirMeta && dirMeta.isComponent) {\n                        compMetas.push(dirMeta);\n                    }\n                });\n                compMetas.forEach(compMeta => {\n                    const html = compMeta.template.template;\n                    // Template URL points to either an HTML or TS file depending on\n                    // whether the file is used with `templateUrl:` or `template:`,\n                    // respectively.\n                    const templateUrl = compMeta.template.templateUrl;\n                    const interpolationConfig = InterpolationConfig.fromArray(compMeta.template.interpolation);\n                    errors.push(...this.messageBundle.updateFromTemplate(html, templateUrl, interpolationConfig));\n                });\n            });\n            if (errors.length) {\n                throw new Error(errors.map(e => e.toString()).join('\\n'));\n            }\n            return this.messageBundle;\n        });\n    }\n    static create(host, locale) {\n        const htmlParser = new HtmlParser();\n        const urlResolver = createAotUrlResolver(host);\n        const symbolCache = new StaticSymbolCache();\n        const summaryResolver = new AotSummaryResolver(host, symbolCache);\n        const staticSymbolResolver = new StaticSymbolResolver(host, symbolCache, summaryResolver);\n        const staticReflector = new StaticReflector(summaryResolver, staticSymbolResolver);\n        const config = new CompilerConfig({ defaultEncapsulation: ViewEncapsulation.Emulated, useJit: false });\n        const normalizer = new DirectiveNormalizer({ get: (url) => host.loadResource(url) }, urlResolver, htmlParser, config);\n        const elementSchemaRegistry = new DomElementSchemaRegistry();\n        const resolver = new CompileMetadataResolver(config, htmlParser, new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, console, symbolCache, staticReflector);\n        // TODO(vicb): implicit tags & attributes\n        const messageBundle = new MessageBundle(htmlParser, [], {}, locale);\n        const extractor = new Extractor(host, staticSymbolResolver, messageBundle, resolver);\n        return { extractor, staticReflector };\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Processes `Target`s with a given set of directives and performs a binding operation, which\n * returns an object similar to TypeScript's `ts.TypeChecker` that contains knowledge about the\n * target.\n */\nclass R3TargetBinder {\n    constructor(directiveMatcher) {\n        this.directiveMatcher = directiveMatcher;\n    }\n    /**\n     * Perform a binding operation on the given `Target` and return a `BoundTarget` which contains\n     * metadata about the types referenced in the template.\n     */\n    bind(target) {\n        if (!target.template) {\n            // TODO(alxhub): handle targets which contain things like HostBindings, etc.\n            throw new Error('Binding without a template not yet supported');\n        }\n        // First, parse the template into a `Scope` structure. This operation captures the syntactic\n        // scopes in the template and makes them available for later use.\n        const scope = Scope.apply(target.template);\n        // Next, perform directive matching on the template using the `DirectiveBinder`. This returns:\n        //   - directives: Map of nodes (elements & ng-templates) to the directives on them.\n        //   - bindings: Map of inputs, outputs, and attributes to the directive/element that claims\n        //     them. TODO(alxhub): handle multiple directives claiming an input/output/etc.\n        //   - references: Map of #references to their targets.\n        const { directives, bindings, references } = DirectiveBinder.apply(target.template, this.directiveMatcher);\n        // Finally, run the TemplateBinder to bind references, variables, and other entities within the\n        // template. This extracts all the metadata that doesn't depend on directive matching.\n        const { expressions, symbols, nestingLevel, usedPipes } = TemplateBinder.apply(target.template, scope);\n        return new R3BoundTarget(target, directives, bindings, references, expressions, symbols, nestingLevel, usedPipes);\n    }\n}\n/**\n * Represents a binding scope within a template.\n *\n * Any variables, references, or other named entities declared within the template will\n * be captured and available by name in `namedEntities`. Additionally, child templates will\n * be analyzed and have their child `Scope`s available in `childScopes`.\n */\nclass Scope {\n    constructor(parentScope) {\n        this.parentScope = parentScope;\n        /**\n         * Named members of the `Scope`, such as `Reference`s or `Variable`s.\n         */\n        this.namedEntities = new Map();\n        /**\n         * Child `Scope`s for immediately nested `Template`s.\n         */\n        this.childScopes = new Map();\n    }\n    /**\n     * Process a template (either as a `Template` sub-template with variables, or a plain array of\n     * template `Node`s) and construct its `Scope`.\n     */\n    static apply(template) {\n        const scope = new Scope();\n        scope.ingest(template);\n        return scope;\n    }\n    /**\n     * Internal method to process the template and populate the `Scope`.\n     */\n    ingest(template) {\n        if (template instanceof Template) {\n            // Variables on an <ng-template> are defined in the inner scope.\n            template.variables.forEach(node => this.visitVariable(node));\n            // Process the nodes of the template.\n            template.children.forEach(node => node.visit(this));\n        }\n        else {\n            // No overarching `Template` instance, so process the nodes directly.\n            template.forEach(node => node.visit(this));\n        }\n    }\n    visitElement(element) {\n        // `Element`s in the template may have `Reference`s which are captured in the scope.\n        element.references.forEach(node => this.visitReference(node));\n        // Recurse into the `Element`'s children.\n        element.children.forEach(node => node.visit(this));\n    }\n    visitTemplate(template) {\n        // References on a <ng-template> are defined in the outer scope, so capture them before\n        // processing the template's child scope.\n        template.references.forEach(node => this.visitReference(node));\n        // Next, create an inner scope and process the template within it.\n        const scope = new Scope(this);\n        scope.ingest(template);\n        this.childScopes.set(template, scope);\n    }\n    visitVariable(variable) {\n        // Declare the variable if it's not already.\n        this.maybeDeclare(variable);\n    }\n    visitReference(reference) {\n        // Declare the variable if it's not already.\n        this.maybeDeclare(reference);\n    }\n    // Unused visitors.\n    visitContent(content) { }\n    visitBoundAttribute(attr) { }\n    visitBoundEvent(event) { }\n    visitBoundText(text) { }\n    visitText(text) { }\n    visitTextAttribute(attr) { }\n    visitIcu(icu) { }\n    maybeDeclare(thing) {\n        // Declare something with a name, as long as that name isn't taken.\n        if (!this.namedEntities.has(thing.name)) {\n            this.namedEntities.set(thing.name, thing);\n        }\n    }\n    /**\n     * Look up a variable within this `Scope`.\n     *\n     * This can recurse into a parent `Scope` if it's available.\n     */\n    lookup(name) {\n        if (this.namedEntities.has(name)) {\n            // Found in the local scope.\n            return this.namedEntities.get(name);\n        }\n        else if (this.parentScope !== undefined) {\n            // Not in the local scope, but there's a parent scope so check there.\n            return this.parentScope.lookup(name);\n        }\n        else {\n            // At the top level and it wasn't found.\n            return null;\n        }\n    }\n    /**\n     * Get the child scope for a `Template`.\n     *\n     * This should always be defined.\n     */\n    getChildScope(template) {\n        const res = this.childScopes.get(template);\n        if (res === undefined) {\n            throw new Error(`Assertion error: child scope for ${template} not found`);\n        }\n        return res;\n    }\n}\n/**\n * Processes a template and matches directives on nodes (elements and templates).\n *\n * Usually used via the static `apply()` method.\n */\nclass DirectiveBinder {\n    constructor(matcher, directives, bindings, references) {\n        this.matcher = matcher;\n        this.directives = directives;\n        this.bindings = bindings;\n        this.references = references;\n    }\n    /**\n     * Process a template (list of `Node`s) and perform directive matching against each node.\n     *\n     * @param template the list of template `Node`s to match (recursively).\n     * @param selectorMatcher a `SelectorMatcher` containing the directives that are in scope for\n     * this template.\n     * @returns three maps which contain information about directives in the template: the\n     * `directives` map which lists directives matched on each node, the `bindings` map which\n     * indicates which directives claimed which bindings (inputs, outputs, etc), and the `references`\n     * map which resolves #references (`Reference`s) within the template to the named directive or\n     * template node.\n     */\n    static apply(template, selectorMatcher) {\n        const directives = new Map();\n        const bindings = new Map();\n        const references = new Map();\n        const matcher = new DirectiveBinder(selectorMatcher, directives, bindings, references);\n        matcher.ingest(template);\n        return { directives, bindings, references };\n    }\n    ingest(template) { template.forEach(node => node.visit(this)); }\n    visitElement(element) { this.visitElementOrTemplate(element.name, element); }\n    visitTemplate(template) { this.visitElementOrTemplate('ng-template', template); }\n    visitElementOrTemplate(tag, node) {\n        // First, determine the HTML shape of the node for the purpose of directive matching.\n        // Do this by building up a `CssSelector` for the node.\n        const cssSelector = new CssSelector();\n        cssSelector.setElement(tag);\n        // Add attributes to the CSS selector.\n        const attrs = getAttrsForDirectiveMatching(node);\n        Object.getOwnPropertyNames(attrs).forEach((name) => {\n            const value = attrs[name];\n            cssSelector.addAttribute(name, value);\n            // Treat the 'class' attribute specially.\n            if (name.toLowerCase() === 'class') {\n                const classes = value.trim().split(/\\s+/g);\n                classes.forEach(className => cssSelector.addClassName(className));\n            }\n        });\n        // Next, use the `SelectorMatcher` to get the list of directives on the node.\n        const directives = [];\n        this.matcher.match(cssSelector, (_, directive) => directives.push(directive));\n        if (directives.length > 0) {\n            this.directives.set(node, directives);\n        }\n        // Resolve any references that are created on this node.\n        node.references.forEach(ref => {\n            let dirTarget = null;\n            // If the reference expression is empty, then it matches the \"primary\" directive on the node\n            // (if there is one). Otherwise it matches the host node itself (either an element or\n            // <ng-template> node).\n            if (ref.value.trim() === '') {\n                // This could be a reference to a component if there is one.\n                dirTarget = directives.find(dir => dir.isComponent) || null;\n            }\n            else {\n                // This is a reference to a directive exported via exportAs. One should exist.\n                dirTarget =\n                    directives.find(dir => dir.exportAs !== null && dir.exportAs.some(value => value === ref.value)) ||\n                        null;\n                // Check if a matching directive was found, and error if it wasn't.\n                if (dirTarget === null) {\n                    // TODO(alxhub): Return an error value here that can be used for template validation.\n                    throw new Error(`Assertion error: failed to find directive with exportAs: ${ref.value}`);\n                }\n            }\n            if (dirTarget !== null) {\n                // This reference points to a directive.\n                this.references.set(ref, { directive: dirTarget, node });\n            }\n            else {\n                // This reference points to the node itself.\n                this.references.set(ref, node);\n            }\n        });\n        // Associate attributes/bindings on the node with directives or with the node itself.\n        const processAttribute = (attribute) => {\n            let dir = directives.find(dir => dir.inputs.hasOwnProperty(attribute.name));\n            if (dir !== undefined) {\n                this.bindings.set(attribute, dir);\n            }\n            else {\n                this.bindings.set(attribute, node);\n            }\n        };\n        node.attributes.forEach(processAttribute);\n        node.inputs.forEach(processAttribute);\n        node.outputs.forEach(processAttribute);\n        if (node instanceof Template) {\n            node.templateAttrs.forEach(processAttribute);\n        }\n        // Recurse into the node's children.\n        node.children.forEach(child => child.visit(this));\n    }\n    // Unused visitors.\n    visitContent(content) { }\n    visitVariable(variable) { }\n    visitReference(reference) { }\n    visitTextAttribute(attribute) { }\n    visitBoundAttribute(attribute) { }\n    visitBoundEvent(attribute) { }\n    visitBoundAttributeOrEvent(node) { }\n    visitText(text) { }\n    visitBoundText(text) { }\n    visitIcu(icu) { }\n}\n/**\n * Processes a template and extract metadata about expressions and symbols within.\n *\n * This is a companion to the `DirectiveBinder` that doesn't require knowledge of directives matched\n * within the template in order to operate.\n *\n * Expressions are visited by the superclass `RecursiveAstVisitor`, with custom logic provided\n * by overridden methods from that visitor.\n */\nclass TemplateBinder extends RecursiveAstVisitor$1 {\n    constructor(bindings, symbols, usedPipes, nestingLevel, scope, template, level) {\n        super();\n        this.bindings = bindings;\n        this.symbols = symbols;\n        this.usedPipes = usedPipes;\n        this.nestingLevel = nestingLevel;\n        this.scope = scope;\n        this.template = template;\n        this.level = level;\n        this.pipesUsed = [];\n        // Save a bit of processing time by constructing this closure in advance.\n        this.visitNode = (node) => node.visit(this);\n    }\n    /**\n     * Process a template and extract metadata about expressions and symbols within.\n     *\n     * @param template the nodes of the template to process\n     * @param scope the `Scope` of the template being processed.\n     * @returns three maps which contain metadata about the template: `expressions` which interprets\n     * special `AST` nodes in expressions as pointing to references or variables declared within the\n     * template, `symbols` which maps those variables and references to the nested `Template` which\n     * declares them, if any, and `nestingLevel` which associates each `Template` with a integer\n     * nesting level (how many levels deep within the template structure the `Template` is), starting\n     * at 1.\n     */\n    static apply(template, scope) {\n        const expressions = new Map();\n        const symbols = new Map();\n        const nestingLevel = new Map();\n        const usedPipes = new Set();\n        // The top-level template has nesting level 0.\n        const binder = new TemplateBinder(expressions, symbols, usedPipes, nestingLevel, scope, template instanceof Template ? template : null, 0);\n        binder.ingest(template);\n        return { expressions, symbols, nestingLevel, usedPipes };\n    }\n    ingest(template) {\n        if (template instanceof Template) {\n            // For <ng-template>s, process inputs, outputs, template attributes,\n            // variables, and child nodes.\n            // References were processed in the scope of the containing template.\n            template.inputs.forEach(this.visitNode);\n            template.outputs.forEach(this.visitNode);\n            template.templateAttrs.forEach(this.visitNode);\n            template.variables.forEach(this.visitNode);\n            template.children.forEach(this.visitNode);\n            // Set the nesting level.\n            this.nestingLevel.set(template, this.level);\n        }\n        else {\n            // Visit each node from the top-level template.\n            template.forEach(this.visitNode);\n        }\n    }\n    visitElement(element) {\n        // Visit the inputs, outputs, and children of the element.\n        element.inputs.forEach(this.visitNode);\n        element.outputs.forEach(this.visitNode);\n        element.children.forEach(this.visitNode);\n    }\n    visitTemplate(template) {\n        // First, visit inputs, outputs and template attributes of the template node.\n        template.inputs.forEach(this.visitNode);\n        template.outputs.forEach(this.visitNode);\n        template.templateAttrs.forEach(this.visitNode);\n        // References are also evaluated in the outer context.\n        template.references.forEach(this.visitNode);\n        // Next, recurse into the template using its scope, and bumping the nesting level up by one.\n        const childScope = this.scope.getChildScope(template);\n        const binder = new TemplateBinder(this.bindings, this.symbols, this.usedPipes, this.nestingLevel, childScope, template, this.level + 1);\n        binder.ingest(template);\n    }\n    visitVariable(variable) {\n        // Register the `Variable` as a symbol in the current `Template`.\n        if (this.template !== null) {\n            this.symbols.set(variable, this.template);\n        }\n    }\n    visitReference(reference) {\n        // Register the `Reference` as a symbol in the current `Template`.\n        if (this.template !== null) {\n            this.symbols.set(reference, this.template);\n        }\n    }\n    // Unused template visitors\n    visitText(text) { }\n    visitContent(content) { }\n    visitTextAttribute(attribute) { }\n    visitIcu(icu) { }\n    // The remaining visitors are concerned with processing AST expressions within template bindings\n    visitBoundAttribute(attribute) { attribute.value.visit(this); }\n    visitBoundEvent(event) { event.handler.visit(this); }\n    visitBoundText(text) { text.value.visit(this); }\n    visitPipe(ast, context) {\n        this.usedPipes.add(ast.name);\n        return super.visitPipe(ast, context);\n    }\n    // These five types of AST expressions can refer to expression roots, which could be variables\n    // or references in the current scope.\n    visitPropertyRead(ast, context) {\n        this.maybeMap(context, ast, ast.name);\n        return super.visitPropertyRead(ast, context);\n    }\n    visitSafePropertyRead(ast, context) {\n        this.maybeMap(context, ast, ast.name);\n        return super.visitSafePropertyRead(ast, context);\n    }\n    visitPropertyWrite(ast, context) {\n        this.maybeMap(context, ast, ast.name);\n        return super.visitPropertyWrite(ast, context);\n    }\n    visitMethodCall(ast, context) {\n        this.maybeMap(context, ast, ast.name);\n        return super.visitMethodCall(ast, context);\n    }\n    visitSafeMethodCall(ast, context) {\n        this.maybeMap(context, ast, ast.name);\n        return super.visitSafeMethodCall(ast, context);\n    }\n    maybeMap(scope, ast, name) {\n        // If the receiver of the expression isn't the `ImplicitReceiver`, this isn't the root of an\n        // `AST` expression that maps to a `Variable` or `Reference`.\n        if (!(ast.receiver instanceof ImplicitReceiver)) {\n            return;\n        }\n        // Check whether the name exists in the current scope. If so, map it. Otherwise, the name is\n        // probably a property on the top-level component context.\n        let target = this.scope.lookup(name);\n        if (target !== null) {\n            this.bindings.set(ast, target);\n        }\n    }\n}\n/**\n * Metadata container for a `Target` that allows queries for specific bits of metadata.\n *\n * See `BoundTarget` for documentation on the individual methods.\n */\nclass R3BoundTarget {\n    constructor(target, directives, bindings, references, exprTargets, symbols, nestingLevel, usedPipes) {\n        this.target = target;\n        this.directives = directives;\n        this.bindings = bindings;\n        this.references = references;\n        this.exprTargets = exprTargets;\n        this.symbols = symbols;\n        this.nestingLevel = nestingLevel;\n        this.usedPipes = usedPipes;\n    }\n    getDirectivesOfNode(node) {\n        return this.directives.get(node) || null;\n    }\n    getReferenceTarget(ref) {\n        return this.references.get(ref) || null;\n    }\n    getConsumerOfBinding(binding) {\n        return this.bindings.get(binding) || null;\n    }\n    getExpressionTarget(expr) {\n        return this.exprTargets.get(expr) || null;\n    }\n    getTemplateOfSymbol(symbol) {\n        return this.symbols.get(symbol) || null;\n    }\n    getNestingLevel(template) { return this.nestingLevel.get(template) || 0; }\n    getUsedDirectives() {\n        const set = new Set();\n        this.directives.forEach(dirs => dirs.forEach(dir => set.add(dir)));\n        return Array.from(set.values());\n    }\n    getUsedPipes() { return Array.from(this.usedPipes); }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n// This function call has a global side effects and publishes the compiler into global namespace for\n// the late binding of the Compiler to the @angular/core for jit compilation.\npublishFacade(_global);\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport { core, CompilerConfig, preserveWhitespacesDefault, isLoweredSymbol, createLoweredSymbol, Identifiers, JitCompiler, ConstantPool, DirectiveResolver, PipeResolver, NgModuleResolver, DEFAULT_INTERPOLATION_CONFIG, InterpolationConfig, NgModuleCompiler, ArrayType, AssertNotNull, DYNAMIC_TYPE, BinaryOperator, BinaryOperatorExpr, BuiltinMethod, BuiltinType, BuiltinTypeName, BuiltinVar, CastExpr, ClassField, ClassMethod, ClassStmt, CommaExpr, CommentStmt, ConditionalExpr, DeclareFunctionStmt, DeclareVarStmt, Expression, ExpressionStatement, ExpressionType, ExternalExpr, ExternalReference, literalMap, FunctionExpr, IfStmt, InstantiateExpr, InvokeFunctionExpr, InvokeMethodExpr, JSDocCommentStmt, LiteralArrayExpr, LiteralExpr, LiteralMapExpr, MapType, NotExpr, ReadKeyExpr, ReadPropExpr, ReadVarExpr, ReturnStatement, ThrowStmt, TryCatchStmt, Type$1 as Type, WrappedNodeExpr, WriteKeyExpr, WritePropExpr, WriteVarExpr, StmtModifier, Statement, TypeofExpr, collectExternalReferences, EmitterVisitorContext, JitEvaluator, ViewCompiler, findStaticQueryIds, staticViewQueryIds, getParseErrors, isSyntaxError, syntaxError, Version, BoundAttribute as TmplAstBoundAttribute, BoundEvent as TmplAstBoundEvent, BoundText as TmplAstBoundText, Content as TmplAstContent, Element as TmplAstElement, Reference as TmplAstReference, Template as TmplAstTemplate, Text as TmplAstText, TextAttribute as TmplAstTextAttribute, Variable as TmplAstVariable, Identifiers$1 as R3Identifiers, R3ResolvedDependencyType, compileInjector, compileNgModule, compilePipeFromMetadata, makeBindingParser, parseTemplate, compileBaseDefFromMetadata, compileComponentFromMetadata, compileDirectiveFromMetadata, parseHostBindings, verifyHostBindings, publishFacade, VERSION$1 as VERSION, TextAst, BoundTextAst, AttrAst, BoundElementPropertyAst, BoundEventAst, ReferenceAst, VariableAst, ElementAst, EmbeddedTemplateAst, BoundDirectivePropertyAst, DirectiveAst, ProviderAst, ProviderAstType, NgContentAst, NullTemplateVisitor, RecursiveTemplateAstVisitor, templateVisitAll, sanitizeIdentifier, identifierName, identifierModuleUrl, viewClassName, rendererTypeName, hostViewClassName, componentFactoryName, CompileSummaryKind, tokenName, tokenReference, CompileStylesheetMetadata, CompileTemplateMetadata, CompileDirectiveMetadata, CompilePipeMetadata, CompileShallowModuleMetadata, CompileNgModuleMetadata, TransitiveCompileNgModuleMetadata, ProviderMeta, flatten, templateSourceUrl, sharedStylesheetJitUrl, ngModuleJitUrl, templateJitUrl, createAotUrlResolver, createAotCompiler, AotCompiler, analyzeNgModules, analyzeAndValidateNgModules, analyzeFile, analyzeFileForInjectables, mergeAnalyzedFiles, GeneratedFile, toTypeScript, formattedError, isFormattedError, StaticReflector, StaticSymbol, StaticSymbolCache, ResolvedStaticSymbol, StaticSymbolResolver, unescapeIdentifier, unwrapResolvedMetadata, AotSummaryResolver, AstPath, SummaryResolver, JitSummaryResolver, CompileReflector, createUrlResolverWithoutPackagePrefix, createOfflineCompileUrlResolver, UrlResolver, getUrlScheme, ResourceLoader, ElementSchemaRegistry, Extractor, I18NHtmlParser, MessageBundle, Serializer, Xliff, Xliff2, Xmb, Xtb, DirectiveNormalizer, ParserError, ParseSpan, AST, Quote, EmptyExpr, ImplicitReceiver, Chain, Conditional, PropertyRead, PropertyWrite, SafePropertyRead, KeyedRead, KeyedWrite, BindingPipe, LiteralPrimitive, LiteralArray, LiteralMap, Interpolation, Binary, PrefixNot, NonNullAssert, MethodCall, SafeMethodCall, FunctionCall, ASTWithSource, TemplateBinding, NullAstVisitor, RecursiveAstVisitor$1 as RecursiveAstVisitor, AstTransformer$1 as AstTransformer, AstMemoryEfficientTransformer, visitAstChildren, ParsedProperty, ParsedPropertyType, ParsedEvent, ParsedVariable, BoundElementProperty, TokenType$1 as TokenType, Lexer, Token$1 as Token, EOF, isIdentifier, isQuote, SplitInterpolation, TemplateBindingParseResult, Parser$1 as Parser, _ParseAST, ERROR_COMPONENT_TYPE, CompileMetadataResolver, Text$3 as Text, Expansion, ExpansionCase, Attribute, Element$1 as Element, Comment, visitAll$1 as visitAll, RecursiveVisitor, findNode, HtmlParser, ParseTreeResult, TreeError, HtmlTagDefinition, getHtmlTagDefinition, TagContentType, splitNsName, isNgContainer, isNgContent, isNgTemplate, getNsPrefix, mergeNsAndName, NAMED_ENTITIES, NGSP_UNICODE, debugOutputAstAsTypeScript, TypeScriptEmitter, ParseLocation, ParseSourceFile, ParseSourceSpan, ParseErrorLevel, ParseError, typeSourceSpan, r3JitTypeSourceSpan, DomElementSchemaRegistry, CssSelector, SelectorMatcher, SelectorListContext, SelectorContext, HOST_ATTR, CONTENT_ATTR, StylesCompileDependency, CompiledStylesheet, StyleCompiler, TemplateParseError, TemplateParseResult, TemplateParser, splitClasses, createElementCssSelector, removeSummaryDuplicates, isEmptyExpression, compileInjectable, R3TargetBinder, R3BoundTarget };\n//# sourceMappingURL=compiler.js.map\n","/**\n * @license Angular v8.0.0\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Identifiers, getUrlScheme, syntaxError, JitCompiler, ProviderMeta, CompileReflector, ResourceLoader, JitSummaryResolver, SummaryResolver, Lexer, Parser, HtmlParser, I18NHtmlParser, CompilerConfig, TemplateParser, ElementSchemaRegistry, JitEvaluator, DirectiveNormalizer, UrlResolver, CompileMetadataResolver, NgModuleResolver, DirectiveResolver, PipeResolver, StaticSymbolCache, StyleCompiler, ViewCompiler, NgModuleCompiler, DomElementSchemaRegistry } from '@angular/compiler';\nimport { ANALYZE_FOR_ENTRY_COMPONENTS, ElementRef, NgModuleRef, ViewContainerRef, ChangeDetectorRef, Renderer2, QueryList, TemplateRef, ɵCodegenComponentFactoryResolver, ComponentFactoryResolver, ComponentFactory, ComponentRef, NgModuleFactory, ɵcmf, ɵmod, ɵmpd, ɵregisterModuleFactory, Injector, ViewEncapsulation, ChangeDetectionStrategy, SecurityContext, LOCALE_ID, TRANSLATIONS_FORMAT, ɵinlineInterpolate, ɵinterpolate, ɵEMPTY_ARRAY, ɵEMPTY_MAP, Renderer, ɵvid, ɵeld, ɵand, ɵted, ɵdid, ɵprd, ɵqud, ɵpad, ɵpod, ɵppd, ɵpid, ɵnov, ɵncd, ɵunv, ɵcrt, ɵccf, ɵReflectionCapabilities, ɵstringify, InjectionToken, Compiler, ɵConsole, MissingTranslationStrategy, Optional, Inject, TRANSLATIONS, PACKAGE_ROOT_URL, isDevMode, createPlatformFactory, platformCore, COMPILER_OPTIONS, CompilerFactory, Injectable, PLATFORM_ID, ɵglobal, Version } from '@angular/core';\nimport { ɵPLATFORM_BROWSER_ID } from '@angular/common';\nimport { ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS } from '@angular/platform-browser';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MODULE_SUFFIX = '';\n/** @type {?} */\nconst builtinExternalReferences = createBuiltinExternalReferencesMap();\nclass JitReflector {\n    constructor() {\n        this.reflectionCapabilities = new ɵReflectionCapabilities();\n    }\n    /**\n     * @param {?} type\n     * @param {?} cmpMetadata\n     * @return {?}\n     */\n    componentModuleUrl(type, cmpMetadata) {\n        /** @type {?} */\n        const moduleId = cmpMetadata.moduleId;\n        if (typeof moduleId === 'string') {\n            /** @type {?} */\n            const scheme = getUrlScheme(moduleId);\n            return scheme ? moduleId : `package:${moduleId}${MODULE_SUFFIX}`;\n        }\n        else if (moduleId !== null && moduleId !== void 0) {\n            throw syntaxError(`moduleId should be a string in \"${ɵstringify(type)}\". See https://goo.gl/wIDDiL for more information.\\n` +\n                `If you're using Webpack you should inline the template and the styles, see https://goo.gl/X2J8zc.`);\n        }\n        return `./${ɵstringify(type)}`;\n    }\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    parameters(typeOrFunc) {\n        return this.reflectionCapabilities.parameters(typeOrFunc);\n    }\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    tryAnnotations(typeOrFunc) { return this.annotations(typeOrFunc); }\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    annotations(typeOrFunc) {\n        return this.reflectionCapabilities.annotations(typeOrFunc);\n    }\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    shallowAnnotations(typeOrFunc) {\n        throw new Error('Not supported in JIT mode');\n    }\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    propMetadata(typeOrFunc) {\n        return this.reflectionCapabilities.propMetadata(typeOrFunc);\n    }\n    /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    hasLifecycleHook(type, lcProperty) {\n        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    guards(type) { return this.reflectionCapabilities.guards(type); }\n    /**\n     * @param {?} ref\n     * @return {?}\n     */\n    resolveExternalReference(ref) {\n        return builtinExternalReferences.get(ref) || ref.runtime;\n    }\n}\n/**\n * @return {?}\n */\nfunction createBuiltinExternalReferencesMap() {\n    /** @type {?} */\n    const map = new Map();\n    map.set(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS, ANALYZE_FOR_ENTRY_COMPONENTS);\n    map.set(Identifiers.ElementRef, ElementRef);\n    map.set(Identifiers.NgModuleRef, NgModuleRef);\n    map.set(Identifiers.ViewContainerRef, ViewContainerRef);\n    map.set(Identifiers.ChangeDetectorRef, ChangeDetectorRef);\n    map.set(Identifiers.Renderer2, Renderer2);\n    map.set(Identifiers.QueryList, QueryList);\n    map.set(Identifiers.TemplateRef, TemplateRef);\n    map.set(Identifiers.CodegenComponentFactoryResolver, ɵCodegenComponentFactoryResolver);\n    map.set(Identifiers.ComponentFactoryResolver, ComponentFactoryResolver);\n    map.set(Identifiers.ComponentFactory, ComponentFactory);\n    map.set(Identifiers.ComponentRef, ComponentRef);\n    map.set(Identifiers.NgModuleFactory, NgModuleFactory);\n    map.set(Identifiers.createModuleFactory, ɵcmf);\n    map.set(Identifiers.moduleDef, ɵmod);\n    map.set(Identifiers.moduleProviderDef, ɵmpd);\n    map.set(Identifiers.RegisterModuleFactoryFn, ɵregisterModuleFactory);\n    map.set(Identifiers.Injector, Injector);\n    map.set(Identifiers.ViewEncapsulation, ViewEncapsulation);\n    map.set(Identifiers.ChangeDetectionStrategy, ChangeDetectionStrategy);\n    map.set(Identifiers.SecurityContext, SecurityContext);\n    map.set(Identifiers.LOCALE_ID, LOCALE_ID);\n    map.set(Identifiers.TRANSLATIONS_FORMAT, TRANSLATIONS_FORMAT);\n    map.set(Identifiers.inlineInterpolate, ɵinlineInterpolate);\n    map.set(Identifiers.interpolate, ɵinterpolate);\n    map.set(Identifiers.EMPTY_ARRAY, ɵEMPTY_ARRAY);\n    map.set(Identifiers.EMPTY_MAP, ɵEMPTY_MAP);\n    map.set(Identifiers.Renderer, Renderer);\n    map.set(Identifiers.viewDef, ɵvid);\n    map.set(Identifiers.elementDef, ɵeld);\n    map.set(Identifiers.anchorDef, ɵand);\n    map.set(Identifiers.textDef, ɵted);\n    map.set(Identifiers.directiveDef, ɵdid);\n    map.set(Identifiers.providerDef, ɵprd);\n    map.set(Identifiers.queryDef, ɵqud);\n    map.set(Identifiers.pureArrayDef, ɵpad);\n    map.set(Identifiers.pureObjectDef, ɵpod);\n    map.set(Identifiers.purePipeDef, ɵppd);\n    map.set(Identifiers.pipeDef, ɵpid);\n    map.set(Identifiers.nodeValue, ɵnov);\n    map.set(Identifiers.ngContentDef, ɵncd);\n    map.set(Identifiers.unwrapValue, ɵunv);\n    map.set(Identifiers.createRendererType2, ɵcrt);\n    map.set(Identifiers.createComponentFactory, ɵccf);\n    return map;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ERROR_COLLECTOR_TOKEN = new InjectionToken('ErrorCollector');\n/**\n * A default provider for {\\@link PACKAGE_ROOT_URL} that maps to '/'.\n * @type {?}\n */\nconst DEFAULT_PACKAGE_URL_PROVIDER = {\n    provide: PACKAGE_ROOT_URL,\n    useValue: '/'\n};\n/** @type {?} */\nconst _NO_RESOURCE_LOADER = {\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    get(url) {\n        throw new Error(`No ResourceLoader implementation has been provided. Can't read the url \"${url}\"`);\n    }\n};\n/** @type {?} */\nconst baseHtmlParser = new InjectionToken('HtmlParser');\nclass CompilerImpl {\n    /**\n     * @param {?} injector\n     * @param {?} _metadataResolver\n     * @param {?} templateParser\n     * @param {?} styleCompiler\n     * @param {?} viewCompiler\n     * @param {?} ngModuleCompiler\n     * @param {?} summaryResolver\n     * @param {?} compileReflector\n     * @param {?} jitEvaluator\n     * @param {?} compilerConfig\n     * @param {?} console\n     */\n    constructor(injector, _metadataResolver, templateParser, styleCompiler, viewCompiler, ngModuleCompiler, summaryResolver, compileReflector, jitEvaluator, compilerConfig, console) {\n        this._metadataResolver = _metadataResolver;\n        this._delegate = new JitCompiler(_metadataResolver, templateParser, styleCompiler, viewCompiler, ngModuleCompiler, summaryResolver, compileReflector, jitEvaluator, compilerConfig, console, this.getExtraNgModuleProviders.bind(this));\n        this.injector = injector;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    getExtraNgModuleProviders() {\n        return [this._metadataResolver.getProviderMetadata(new ProviderMeta(Compiler, { useValue: this }))];\n    }\n    /**\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    compileModuleSync(moduleType) {\n        return (/** @type {?} */ (this._delegate.compileModuleSync(moduleType)));\n    }\n    /**\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    compileModuleAsync(moduleType) {\n        return (/** @type {?} */ (this._delegate.compileModuleAsync(moduleType)));\n    }\n    /**\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    compileModuleAndAllComponentsSync(moduleType) {\n        /** @type {?} */\n        const result = this._delegate.compileModuleAndAllComponentsSync(moduleType);\n        return {\n            ngModuleFactory: (/** @type {?} */ (result.ngModuleFactory)),\n            componentFactories: (/** @type {?} */ (result.componentFactories)),\n        };\n    }\n    /**\n     * @template T\n     * @param {?} moduleType\n     * @return {?}\n     */\n    compileModuleAndAllComponentsAsync(moduleType) {\n        return this._delegate.compileModuleAndAllComponentsAsync(moduleType)\n            .then((/**\n         * @param {?} result\n         * @return {?}\n         */\n        (result) => ({\n            ngModuleFactory: (/** @type {?} */ (result.ngModuleFactory)),\n            componentFactories: (/** @type {?} */ (result.componentFactories)),\n        })));\n    }\n    /**\n     * @param {?} summaries\n     * @return {?}\n     */\n    loadAotSummaries(summaries) { this._delegate.loadAotSummaries(summaries); }\n    /**\n     * @param {?} ref\n     * @return {?}\n     */\n    hasAotSummary(ref) { return this._delegate.hasAotSummary(ref); }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    getComponentFactory(component) {\n        return (/** @type {?} */ (this._delegate.getComponentFactory(component)));\n    }\n    /**\n     * @return {?}\n     */\n    clearCache() { this._delegate.clearCache(); }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    clearCacheFor(type) { this._delegate.clearCacheFor(type); }\n    /**\n     * @param {?} moduleType\n     * @return {?}\n     */\n    getModuleId(moduleType) {\n        /** @type {?} */\n        const meta = this._metadataResolver.getNgModuleMetadata(moduleType);\n        return meta && meta.id || undefined;\n    }\n}\n/**\n * A set of providers that provide `JitCompiler` and its dependencies to use for\n * template compilation.\n * @type {?}\n */\nconst COMPILER_PROVIDERS = (/** @type {?} */ ([\n    { provide: CompileReflector, useValue: new JitReflector() },\n    { provide: ResourceLoader, useValue: _NO_RESOURCE_LOADER },\n    { provide: JitSummaryResolver, deps: [] },\n    { provide: SummaryResolver, useExisting: JitSummaryResolver },\n    { provide: ɵConsole, deps: [] },\n    { provide: Lexer, deps: [] },\n    { provide: Parser, deps: [Lexer] },\n    {\n        provide: baseHtmlParser,\n        useClass: HtmlParser,\n        deps: [],\n    },\n    {\n        provide: I18NHtmlParser,\n        useFactory: (/**\n         * @param {?} parser\n         * @param {?} translations\n         * @param {?} format\n         * @param {?} config\n         * @param {?} console\n         * @return {?}\n         */\n        (parser, translations, format, config, console) => {\n            translations = translations || '';\n            /** @type {?} */\n            const missingTranslation = translations ? (/** @type {?} */ (config.missingTranslation)) : MissingTranslationStrategy.Ignore;\n            return new I18NHtmlParser(parser, translations, format, missingTranslation, console);\n        }),\n        deps: [\n            baseHtmlParser,\n            [new Optional(), new Inject(TRANSLATIONS)],\n            [new Optional(), new Inject(TRANSLATIONS_FORMAT)],\n            [CompilerConfig],\n            [ɵConsole],\n        ]\n    },\n    {\n        provide: HtmlParser,\n        useExisting: I18NHtmlParser,\n    },\n    {\n        provide: TemplateParser, deps: [CompilerConfig, CompileReflector,\n            Parser, ElementSchemaRegistry,\n            I18NHtmlParser, ɵConsole]\n    },\n    { provide: JitEvaluator, useClass: JitEvaluator, deps: [] },\n    { provide: DirectiveNormalizer, deps: [ResourceLoader, UrlResolver, HtmlParser, CompilerConfig] },\n    { provide: CompileMetadataResolver, deps: [CompilerConfig, HtmlParser, NgModuleResolver,\n            DirectiveResolver, PipeResolver,\n            SummaryResolver,\n            ElementSchemaRegistry,\n            DirectiveNormalizer, ɵConsole,\n            [Optional, StaticSymbolCache],\n            CompileReflector,\n            [Optional, ERROR_COLLECTOR_TOKEN]] },\n    DEFAULT_PACKAGE_URL_PROVIDER,\n    { provide: StyleCompiler, deps: [UrlResolver] },\n    { provide: ViewCompiler, deps: [CompileReflector] },\n    { provide: NgModuleCompiler, deps: [CompileReflector] },\n    { provide: CompilerConfig, useValue: new CompilerConfig() },\n    { provide: Compiler, useClass: CompilerImpl, deps: [Injector, CompileMetadataResolver,\n            TemplateParser, StyleCompiler,\n            ViewCompiler, NgModuleCompiler,\n            SummaryResolver, CompileReflector, JitEvaluator, CompilerConfig,\n            ɵConsole] },\n    { provide: DomElementSchemaRegistry, deps: [] },\n    { provide: ElementSchemaRegistry, useExisting: DomElementSchemaRegistry },\n    { provide: UrlResolver, deps: [PACKAGE_ROOT_URL] },\n    { provide: DirectiveResolver, deps: [CompileReflector] },\n    { provide: PipeResolver, deps: [CompileReflector] },\n    { provide: NgModuleResolver, deps: [CompileReflector] },\n]));\n/**\n * \\@publicApi\n */\nclass JitCompilerFactory {\n    /* @internal */\n    /**\n     * @param {?} defaultOptions\n     */\n    constructor(defaultOptions) {\n        /** @type {?} */\n        const compilerOptions = {\n            useJit: true,\n            defaultEncapsulation: ViewEncapsulation.Emulated,\n            missingTranslation: MissingTranslationStrategy.Warning,\n        };\n        this._defaultOptions = [compilerOptions, ...defaultOptions];\n    }\n    /**\n     * @param {?=} options\n     * @return {?}\n     */\n    createCompiler(options = []) {\n        /** @type {?} */\n        const opts = _mergeOptions(this._defaultOptions.concat(options));\n        /** @type {?} */\n        const injector = Injector.create([\n            COMPILER_PROVIDERS, {\n                provide: CompilerConfig,\n                useFactory: (/**\n                 * @return {?}\n                 */\n                () => {\n                    return new CompilerConfig({\n                        // let explicit values from the compiler options overwrite options\n                        // from the app providers\n                        useJit: opts.useJit,\n                        jitDevMode: isDevMode(),\n                        // let explicit values from the compiler options overwrite options\n                        // from the app providers\n                        defaultEncapsulation: opts.defaultEncapsulation,\n                        missingTranslation: opts.missingTranslation,\n                        preserveWhitespaces: opts.preserveWhitespaces,\n                    });\n                }),\n                deps: []\n            },\n            (/** @type {?} */ (opts.providers))\n        ]);\n        return injector.get(Compiler);\n    }\n}\n/**\n * @param {?} optionsArr\n * @return {?}\n */\nfunction _mergeOptions(optionsArr) {\n    return {\n        useJit: _lastDefined(optionsArr.map((/**\n         * @param {?} options\n         * @return {?}\n         */\n        options => options.useJit))),\n        defaultEncapsulation: _lastDefined(optionsArr.map((/**\n         * @param {?} options\n         * @return {?}\n         */\n        options => options.defaultEncapsulation))),\n        providers: _mergeArrays(optionsArr.map((/**\n         * @param {?} options\n         * @return {?}\n         */\n        options => (/** @type {?} */ (options.providers))))),\n        missingTranslation: _lastDefined(optionsArr.map((/**\n         * @param {?} options\n         * @return {?}\n         */\n        options => options.missingTranslation))),\n        preserveWhitespaces: _lastDefined(optionsArr.map((/**\n         * @param {?} options\n         * @return {?}\n         */\n        options => options.preserveWhitespaces))),\n    };\n}\n/**\n * @template T\n * @param {?} args\n * @return {?}\n */\nfunction _lastDefined(args) {\n    for (let i = args.length - 1; i >= 0; i--) {\n        if (args[i] !== undefined) {\n            return args[i];\n        }\n    }\n    return undefined;\n}\n/**\n * @param {?} parts\n * @return {?}\n */\nfunction _mergeArrays(parts) {\n    /** @type {?} */\n    const result = [];\n    parts.forEach((/**\n     * @param {?} part\n     * @return {?}\n     */\n    (part) => part && result.push(...part)));\n    return result;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst ɵ0 = {};\n/**\n * A platform that included corePlatform and the compiler.\n *\n * \\@publicApi\n * @type {?}\n */\nconst platformCoreDynamic = createPlatformFactory(platformCore, 'coreDynamic', [\n    { provide: COMPILER_OPTIONS, useValue: ɵ0, multi: true },\n    { provide: CompilerFactory, useClass: JitCompilerFactory, deps: [COMPILER_OPTIONS] },\n]);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ResourceLoaderImpl extends ResourceLoader {\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    get(url) {\n        /** @type {?} */\n        let resolve;\n        /** @type {?} */\n        let reject;\n        /** @type {?} */\n        const promise = new Promise((/**\n         * @param {?} res\n         * @param {?} rej\n         * @return {?}\n         */\n        (res, rej) => {\n            resolve = res;\n            reject = rej;\n        }));\n        /** @type {?} */\n        const xhr = new XMLHttpRequest();\n        xhr.open('GET', url, true);\n        xhr.responseType = 'text';\n        xhr.onload = (/**\n         * @return {?}\n         */\n        function () {\n            // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n            // response/responseType properties were introduced in ResourceLoader Level2 spec (supported\n            // by IE10)\n            /** @type {?} */\n            const response = xhr.response || xhr.responseText;\n            // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n            /** @type {?} */\n            let status = xhr.status === 1223 ? 204 : xhr.status;\n            // fix status code when it is 0 (0 status is undocumented).\n            // Occurs when accessing file resources or on Android 4.1 stock browser\n            // while retrieving files from application cache.\n            if (status === 0) {\n                status = response ? 200 : 0;\n            }\n            if (200 <= status && status <= 300) {\n                resolve(response);\n            }\n            else {\n                reject(`Failed to load ${url}`);\n            }\n        });\n        xhr.onerror = (/**\n         * @return {?}\n         */\n        function () { reject(`Failed to load ${url}`); });\n        xhr.send();\n        return promise;\n    }\n}\nResourceLoaderImpl.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst ɵ0$1 = { providers: [{ provide: ResourceLoader, useClass: ResourceLoaderImpl, deps: [] }] }, ɵ1 = ɵPLATFORM_BROWSER_ID;\n/**\n * \\@publicApi\n * @type {?}\n */\nconst INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = [\n    ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS,\n    {\n        provide: COMPILER_OPTIONS,\n        useValue: ɵ0$1,\n        multi: true\n    },\n    { provide: PLATFORM_ID, useValue: ɵ1 },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An implementation of ResourceLoader that uses a template cache to avoid doing an actual\n * ResourceLoader.\n *\n * The template cache needs to be built and loaded into window.$templateCache\n * via a separate mechanism.\n *\n * \\@publicApi\n */\nclass CachedResourceLoader extends ResourceLoader {\n    constructor() {\n        super();\n        this._cache = ((/** @type {?} */ (ɵglobal))).$templateCache;\n        if (this._cache == null) {\n            throw new Error('CachedResourceLoader: Template cache was not found in $templateCache.');\n        }\n    }\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    get(url) {\n        if (this._cache.hasOwnProperty(url)) {\n            return Promise.resolve(this._cache[url]);\n        }\n        else {\n            return (/** @type {?} */ (Promise.reject('CachedResourceLoader: Did not find cached template for ' + url)));\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@publicApi\n * @type {?}\n */\nconst VERSION = new Version('8.0.0');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@publicApi\n * @type {?}\n */\nconst RESOURCE_CACHE_PROVIDER = [{ provide: ResourceLoader, useClass: CachedResourceLoader, deps: [] }];\n/**\n * \\@publicApi\n * @type {?}\n */\nconst platformBrowserDynamic = createPlatformFactory(platformCoreDynamic, 'browserDynamic', INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CachedResourceLoader as ɵangular_packages_platform_browser_dynamic_platform_browser_dynamic_a, VERSION, JitCompilerFactory, RESOURCE_CACHE_PROVIDER, platformBrowserDynamic, CompilerImpl as ɵCompilerImpl, platformCoreDynamic as ɵplatformCoreDynamic, INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS as ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS, ResourceLoaderImpl as ɵResourceLoaderImpl };\n//# sourceMappingURL=platform-browser-dynamic.js.map\n"],"sourceRoot":""}